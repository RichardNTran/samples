(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["App"] = factory();
	else
		root["App"] = factory();
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// install a JSONP callback for chunk loading
/******/ 	var parentJsonpFunction = global["webpackJsonpApp"];
/******/ 	global["webpackJsonpApp"] = function webpackJsonpCallback(chunkIds, moreModules) {
/******/ 		// add "moreModules" to the modules object,
/******/ 		// then flag all "chunkIds" as loaded and fire callback
/******/ 		var moduleId, chunkId, i = 0, callbacks = [];
/******/ 		for(;i < chunkIds.length; i++) {
/******/ 			chunkId = chunkIds[i];
/******/ 			if(installedChunks[chunkId])
/******/ 				callbacks.push.apply(callbacks, installedChunks[chunkId]);
/******/ 			installedChunks[chunkId] = 0;
/******/ 		}
/******/ 		for(moduleId in moreModules) {
/******/ 			var _m = moreModules[moduleId];

/******/ 			// Check if module is deduplicated
/******/ 			switch(typeof _m) {
/******/ 			case "object":
/******/ 				// Module can be created from a template
/******/ 				modules[moduleId] = (function(_m) {
/******/ 					var args = _m.slice(1), templateId = _m[0];
/******/ 					return function (a,b,c) {
/******/ 						modules[templateId].apply(this, [a,b,c].concat(args));
/******/ 					};
/******/ 				}(_m));
/******/ 				break;
/******/ 			case "function":
/******/ 				// Normal module
/******/ 				modules[moduleId] = _m;
/******/ 				break;
/******/ 			default:
/******/ 				// Module is a copy of another module
/******/ 				modules[moduleId] = modules[_m];
/******/ 				break;
/******/ 			}
/******/ 		}
/******/ 		if(parentJsonpFunction) parentJsonpFunction(chunkIds, moreModules);
/******/ 		while(callbacks.length)
/******/ 			callbacks.shift().call(null, __webpack_require__);

/******/ 	};

/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// object to store loaded and loading chunks
/******/ 	// "0" means "already loaded"
/******/ 	// Array means "loading", array contains callbacks
/******/ 	var installedChunks = {
/******/ 		0:0
/******/ 	};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}

/******/ 	// This file contains only the entry chunk.
/******/ 	// The chunk loading function for additional chunks
/******/ 	__webpack_require__.e = function requireEnsure(chunkId, callback) {
/******/ 		// "0" is the signal for "already loaded"
/******/ 		if(installedChunks[chunkId] === 0)
/******/ 			return callback.call(null, __webpack_require__);

/******/ 		// an array means "currently loading".
/******/ 		if(installedChunks[chunkId] !== undefined) {
/******/ 			installedChunks[chunkId].push(callback);
/******/ 		} else {
/******/ 			// start chunk loading
/******/ 			installedChunks[chunkId] = [callback];
/******/ 			require(require("path").resolve(__webpack_require__.p + "" + chunkId + "." + ({}[chunkId]||chunkId) + ".js"));}};

/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	__webpack_require__.ilib_cache_id = "1493067826926";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ((function(modules) {
	// Check all modules for deduplicated modules
	for(var i in modules) {
		if(Object.prototype.hasOwnProperty.call(modules, i)) {
			switch(typeof modules[i]) {
			case "function": break;
			case "object":
				// Module can be created from a template
				modules[i] = (function(_m) {
					var args = _m.slice(1), fn = modules[_m[0]];
					return function (a,b,c) {
						fn.apply(this, [a,b,c].concat(args));
					};
				}(modules[i]));
				break;
			default:
				// Module is a copy of another module
				modules[i] = modules[modules[i]];
				break;
			}
		}
	}
	return modules;
}([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(186);
	__webpack_require__(58);
	module.exports = __webpack_require__(189);


/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = __webpack_require__(39);


/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process, global) {"use strict";

	var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
	  return typeof obj === "undefined" ? "undefined" : _typeof2(obj);
	} : function (obj) {
	  return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof2(obj);
	};

	/*
	 * ilib.js - define the ilib name space
	 * 
	 * Copyright Â© 2012-2015, JEDLSoft
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 *
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */

	/**
	 * @namespace The global namespace that contains general ilib functions useful
	 * to all of ilib
	 * 
	 * @version // !macro ilibVersion
	 */
	var ilib = ilib || {};

	/** @private */
	ilib._ver = function () {
	  return;
	};

	/**
	 * Return the current version of ilib.
	 * 
	 * @static
	 * @return {string} a version string for this instance of ilib
	 */
	ilib.getVersion = function () {
	  // TODO: need some way of getting the version number under dynamic load code
	  return ilib._ver() || "12.0";
	};

	/**
	 * Place where resources and such are eventually assigned.
	 */
	ilib.data = {
	  /** @type {{ccc:Object.<string,number>,nfd:Object.<string,string>,nfc:Object.<string,string>,nfkd:Object.<string,string>,nfkc:Object.<string,string>}} */
	  norm: {
	    ccc: {},
	    nfd: {},
	    nfc: {},
	    nfkd: {},
	    nfkc: {}
	  },
	  zoneinfo: {
	    "Etc/UTC": { "o": "0:0", "f": "UTC" },
	    "local": { "f": "local" }
	  },
	  /** @type {Object.<string,{to:Object.<string,string>,from:Object.<string,number>}>} */charmaps: {},
	  /** @type {null|Object.<string,Array.<Array.<number>>>} */ctype: null,
	  /** @type {null|Object.<string,Array.<Array.<number>>>} */ctype_c: null,
	  /** @type {null|Object.<string,Array.<Array.<number>>>} */ctype_l: null,
	  /** @type {null|Object.<string,Array.<Array.<number>>>} */ctype_m: null,
	  /** @type {null|Object.<string,Array.<Array.<number>>>} */ctype_p: null,
	  /** @type {null|Object.<string,Array.<Array.<number>>>} */ctype_z: null,
	  /** @type {null|Object.<string,Array.<Array.<number>>>} */scriptToRange: null,
	  /** @type {null|Object.<string,string|Object.<string|Object.<string,string>>>} */dateformats: null,
	  /** @type {null|Array.<string>} */timezones: []
	};

	/*
	if (typeof(window) !== 'undefined') {
	    window["ilib"] = ilib;
	}
	*/

	// export ilib for use as a module in nodejs
	if (true) {
	  module.exports = ilib;
	  module.exports.ilib = ilib; // for backwards compatibility with older versions of ilib
	}

	/**
	 * Sets the pseudo locale. Pseudolocalization (or pseudo-localization) is used for testing
	 * internationalization aspects of software. Instead of translating the text of the software
	 * into a foreign language, as in the process of localization, the textual elements of an application
	 * are replaced with an altered version of the original language.These specific alterations make
	 * the original words appear readable, but include the most problematic characteristics of 
	 * the world's languages: varying length of text or characters, language direction, and so on.
	 * Regular Latin pseudo locale: eu-ES and RTL pseudo locale: ps-AF
	 * 
	 * @param {string|undefined|null} localename the locale specifier for the pseudo locale
	 */
	ilib.setAsPseudoLocale = function (localename) {
	  if (localename) {
	    ilib.pseudoLocales.push(localename);
	  }
	};

	/**
	 * Reset the list of pseudo locales back to the default single locale of zxx-XX.
	 * @static
	 */
	ilib.clearPseudoLocales = function () {
	  ilib.pseudoLocales = ["zxx-XX", "zxx-Cyrl-XX", "zxx-Hans-XX", "zxx-Hebr-XX"];
	};

	ilib.clearPseudoLocales();

	/**
	 * Return the name of the platform
	 * @private
	 * @static
	 * @return {string} string naming the platform
	 */
	ilib._getPlatform = function () {
	  if (!ilib._platform) {
	    try {
	      if (typeof java.lang.Object !== 'undefined') {
	        ilib._platform = typeof process !== 'undefined' ? "trireme" : "rhino";
	        return ilib._platform;
	      }
	    } catch (e) {}

	    if (typeof process !== 'undefined' && typeof window === 'undefined' && typeof module !== 'undefined') {
	      ilib._platform = "nodejs";
	    } else if (typeof Qt !== 'undefined') {
	      ilib._platform = "qt";
	    } else if (typeof window !== 'undefined') {
	      ilib._platform = typeof PalmSystem !== 'undefined' ? "webos" : "browser";
	    } else {
	      ilib._platform = "unknown";
	    }
	  }
	  return ilib._platform;
	};

	/**
	 * If this ilib is running in a browser, return the name of that browser.
	 * @private
	 * @static
	 * @return {string|undefined} the name of the browser that this is running in ("firefox", "chrome", "ie", 
	 * "safari", or "opera"), or undefined if this is not running in a browser or if
	 * the browser name could not be determined 
	 */
	ilib._getBrowser = function () {
	  var browser = undefined;
	  if (ilib._getPlatform() === "browser") {
	    if (navigator && navigator.userAgent) {
	      if (navigator.userAgent.indexOf("Firefox") > -1) {
	        browser = "firefox";
	      }
	      if (navigator.userAgent.indexOf("Opera") > -1) {
	        browser = "opera";
	      }
	      if (navigator.userAgent.indexOf("Chrome") > -1) {
	        browser = "chrome";
	      }
	      if (navigator.userAgent.indexOf(" .NET") > -1) {
	        browser = "ie";
	      }
	      if (navigator.userAgent.indexOf("Safari") > -1) {
	        // chrome also has the string Safari in its userAgent, but the chrome case is 
	        // already taken care of above
	        browser = "safari";
	      }
	    }
	  }
	  return browser;
	};

	/**
	 * Return the value of a global variable given its name in a way that works 
	 * correctly for the current platform.
	 * @private
	 * @static
	 * @param {string} name the name of the variable to return
	 * @return {*} the global variable, or undefined if it does not exist
	 */
	ilib._global = function (name) {
	  switch (ilib._getPlatform()) {
	    case "rhino":
	      var top = function () {
	        return (typeof global === "undefined" ? "undefined" : _typeof(global)) === 'object' ? global : this;
	      }();
	      break;
	    case "nodejs":
	    case "trireme":
	      top = typeof global !== 'undefined' ? global : this;
	      //console.log("ilib._global: top is " + (typeof(global) !== 'undefined' ? "global" : "this"));
	      break;
	    case "qt":
	      return undefined;
	    default:
	      top = window;
	      break;
	  }
	  try {
	    return top[name];
	  } catch (e) {
	    return undefined;
	  }
	};

	/**
	 * Return true if the global variable is defined on this platform.
	 * @private
	 * @static
	 * @param {string} name the name of the variable to check
	 * @return {boolean} true if the global variable is defined on this platform, false otherwise
	 */
	ilib._isGlobal = function (name) {
	  return typeof ilib._global(name) !== 'undefined';
	};

	/**
	 * Sets the default locale for all of ilib. This locale will be used
	 * when no explicit locale is passed to any ilib class. If the default
	 * locale is not set, ilib will attempt to use the locale of the
	 * environment it is running in, if it can find that. If not, it will
	 * default to the locale "en-US". If a type of parameter is string, 
	 * ilib will take only well-formed BCP-47 tag  <p>
	 * 
	 * 
	 * @static
	 * @param {string|undefined|null} spec the locale specifier for the default locale
	 */
	ilib.setLocale = function (spec) {
	  if (typeof spec === 'string' || !spec) {
	    ilib.locale = spec;
	  }
	  // else ignore other data types, as we don't have the dependencies
	  // to look into them to find a locale
	};

	/**
	 * Return the default locale for all of ilib if one has been set. This 
	 * locale will be used when no explicit locale is passed to any ilib 
	 * class. If the default
	 * locale is not set, ilib will attempt to use the locale of the
	 * environment it is running in, if it can find that. If not, it will
	 * default to the locale "en-US".<p>
	 * 
	 * 
	 * @static
	 * @return {string} the locale specifier for the default locale
	 */
	ilib.getLocale = function () {
	  if (typeof ilib.locale !== 'string') {
	    var plat = ilib._getPlatform();
	    switch (plat) {
	      case 'browser':
	        // running in a browser
	        if (typeof navigator.language !== 'undefined') {
	          ilib.locale = navigator.language.substring(0, 3) + navigator.language.substring(3, 5).toUpperCase(); // FF/Opera/Chrome/Webkit    
	        }
	        if (!ilib.locale) {
	          // IE on Windows
	          var lang = typeof navigator.browserLanguage !== 'undefined' ? navigator.browserLanguage : typeof navigator.userLanguage !== 'undefined' ? navigator.userLanguage : typeof navigator.systemLanguage !== 'undefined' ? navigator.systemLanguage : undefined;
	          if (typeof lang !== 'undefined' && lang) {
	            // for some reason, MS uses lower case region tags
	            ilib.locale = lang.substring(0, 3) + lang.substring(3, 5).toUpperCase();
	          }
	        }
	        break;
	      case 'webos':
	        // webOS
	        if (typeof PalmSystem.locales !== 'undefined' && typeof PalmSystem.locales.UI != 'undefined' && PalmSystem.locales.UI.length > 0) {
	          ilib.locale = PalmSystem.locales.UI;
	        } else if (typeof PalmSystem.locale !== 'undefined') {
	          ilib.locale = PalmSystem.locale;
	        }
	        break;
	      case 'rhino':
	        if (typeof environment !== 'undefined' && environment.user && typeof environment.user.language === 'string' && environment.user.language.length > 0) {
	          // running under plain rhino
	          ilib.locale = environment.user.language;
	          if (typeof environment.user.country === 'string' && environment.user.country.length > 0) {
	            ilib.locale += '-' + environment.user.country;
	          }
	        }
	        break;
	      case "trireme":
	        // under trireme on rhino emulating nodejs
	        var lang = ({"NODE_ENV":"production"}).LANG || ({"NODE_ENV":"production"}).LANGUAGE || ({"NODE_ENV":"production"}).LC_ALL;
	        // the LANG variable on unix is in the form "lang_REGION.CHARSET"
	        // where language and region are the correct ISO codes separated by
	        // an underscore. This translate it back to the BCP-47 form.
	        if (lang && typeof lang !== 'undefined') {
	          ilib.locale = lang.substring(0, 2).toLowerCase() + '-' + lang.substring(3, 5).toUpperCase();
	        }
	        break;
	      case 'nodejs':
	        // running under nodejs
	        var lang = ({"NODE_ENV":"production"}).LANG || ({"NODE_ENV":"production"}).LC_ALL;
	        // the LANG variable on unix is in the form "lang_REGION.CHARSET"
	        // where language and region are the correct ISO codes separated by
	        // an underscore. This translate it back to the BCP-47 form.
	        if (lang && typeof lang !== 'undefined') {
	          ilib.locale = lang.substring(0, 2).toLowerCase() + '-' + lang.substring(3, 5).toUpperCase();
	        }
	        break;
	      case 'qt':
	        // running in the Javascript engine under Qt/QML
	        var locobj = Qt.locale();
	        var lang = locobj.name && locobj.name.replace("_", "-") || "en-US";
	        break;
	    }
	    ilib.locale = typeof ilib.locale === 'string' ? ilib.locale : 'en-US';
	  }
	  return ilib.locale;
	};

	/**
	 * Sets the default time zone for all of ilib. This time zone will be used when
	 * no explicit time zone is passed to any ilib class. If the default time zone
	 * is not set, ilib will attempt to use the time zone of the
	 * environment it is running in, if it can find that. If not, it will
	 * default to the the UTC zone "Etc/UTC".<p>
	 * 
	 * 
	 * @static
	 * @param {string} tz the name of the time zone to set as the default time zone
	 */
	ilib.setTimeZone = function (tz) {
	  ilib.tz = tz || ilib.tz;
	};

	/**
	 * Return the default time zone for all of ilib if one has been set. This 
	 * time zone will be used when no explicit time zone is passed to any ilib 
	 * class. If the default time zone
	 * is not set, ilib will attempt to use the locale of the
	 * environment it is running in, if it can find that. If not, it will
	 * default to the the zone "local".<p>
	 * 
	 * 
	 * @static
	 * @return {string} the default time zone for ilib
	 */
	ilib.getTimeZone = function () {
	  if (typeof ilib.tz === 'undefined') {
	    if (typeof navigator !== 'undefined' && typeof navigator.timezone !== 'undefined') {
	      // running in a browser
	      if (navigator.timezone.length > 0) {
	        ilib.tz = navigator.timezone;
	      }
	    } else if (typeof PalmSystem !== 'undefined' && typeof PalmSystem.timezone !== 'undefined') {
	      // running in webkit on webOS
	      if (PalmSystem.timezone.length > 0) {
	        ilib.tz = PalmSystem.timezone;
	      }
	    } else if (typeof environment !== 'undefined' && typeof environment.user !== 'undefined') {
	      // running under rhino
	      if (typeof environment.user.timezone !== 'undefined' && environment.user.timezone.length > 0) {
	        ilib.tz = environment.user.timezone;
	      }
	    } else if (typeof process !== 'undefined' && "object" !== 'undefined') {
	      // running in nodejs
	      if (({"NODE_ENV":"production"}).TZ && typeof ({"NODE_ENV":"production"}).TZ !== "undefined") {
	        ilib.tz = ({"NODE_ENV":"production"}).TZ;
	      }
	    }

	    ilib.tz = ilib.tz || "local";
	  }

	  return ilib.tz;
	};

	/**
	 * @class
	 * Defines the interface for the loader class for ilib. The main method of the
	 * loader object is loadFiles(), which loads a set of requested locale data files
	 * from where-ever it is stored.
	 * @interface
	 */
	ilib.Loader = function () {};

	/**
	 * Load a set of files from where-ever it is stored.<p>
	 * 
	 * This is the main function define a callback function for loading missing locale 
	 * data or resources.
	 * If this copy of ilib is assembled without including the required locale data
	 * or resources, then that data can be lazy loaded dynamically when it is 
	 * needed by calling this method. Each ilib class will first
	 * check for the existence of data under ilib.data, and if it is not there, 
	 * it will attempt to load it by calling this method of the laoder, and then place
	 * it there.<p>
	 * 
	 * Suggested implementations of this method might load files 
	 * directly from disk under nodejs or rhino, or within web pages, to load 
	 * files from the server with XHR calls.<p>
	 * 
	 * The first parameter to this method, paths, is an array of relative paths within 
	 * the ilib dir structure for the 
	 * requested data. These paths will already have the locale spec integrated 
	 * into them, so no further tweaking needs to happen to load the data. Simply
	 * load the named files. The second
	 * parameter tells the loader whether to load the files synchronously or asynchronously.
	 * If the sync parameters is false, then the onLoad function must also be specified.
	 * The third parameter gives extra parameters to the loader passed from the calling
	 * code. This may contain any property/value pairs.  The last parameter, callback,
	 * is a callback function to call when all of the data is finishing loading. Make
	 * sure to call the callback with the context of "this" so that the caller has their 
	 * context back again.<p>
	 * 
	 * The loader function must be able to operate either synchronously or asychronously. 
	 * If the loader function is called with an undefined callback function, it is
	 * expected to load the data synchronously, convert it to javascript
	 * objects, and return the array of json objects as the return value of the 
	 * function. If the loader 
	 * function is called with a callback function, it may load the data 
	 * synchronously or asynchronously (doesn't matter which) as long as it calls
	 * the callback function with the data converted to a javascript objects
	 * when it becomes available. If a particular file could not be loaded, the 
	 * loader function should put undefined into the corresponding entry in the
	 * results array. 
	 * Note that it is important that all the data is loaded before the callback
	 * is called.<p>
	 * 
	 * An example implementation for nodejs might be:
	 * 
	 * <pre>
	 * var fs = require("fs");
	 * 
	 * var myLoader = function() {};
	 * myLoader.prototype = new Loader();
	 * myLoader.prototype.constructor = myLoader;
	 * myLoader.prototype.loadFiles = function(paths, sync, params, callback) {
	 *    if (sync) {
	 *        var ret = [];
	 *        // synchronous load -- just return the result
	 *        paths.forEach(function (path) {
	 *            var json = fs.readFileSync(path, "utf-8");
	 *            ret.push(json ? JSON.parse(json) : undefined);
	 *        });
	 *        
	 *        return ret;
	 *    }
	 *    this.callback = callback;
	 *
	 *    // asynchronous
	 *    this.results = [];
	 *    this._loadFilesAsync(paths);
	 * }
	 * myLoader.prototype._loadFilesAsync = function (paths) {
	 *    if (paths.length > 0) {
	 *        var file = paths.shift();
	 *        fs.readFile(file, "utf-8", function(err, json) {
	 *            this.results.push(err ? undefined : JSON.parse(json));
	 *            // call self recursively so that the callback is only called at the end
	 *            // when all the files are loaded sequentially
	 *            if (paths.length > 0) {
	 *                this._loadFilesAsync(paths);
	 *            } else {
	 *                this.callback(this.results);
	 *            }
	 *        });
	 *     }
	 * }
	 * 
	 * // bind to "this" so that "this" is relative to your own instance
	 * ilib.setLoaderCallback(new myLoader());
	 * </pre>

	 * @param {Array.<string>} paths An array of paths to load from wherever the files are stored 
	 * @param {Boolean} sync if true, load the files synchronously, and false means asynchronously
	 * @param {Object} params an object with any extra parameters for the loader. These can be 
	 * anything. The caller of the ilib class passes these parameters in. Presumably, the code that
	 * calls ilib and the code that provides the loader are together and can have a private 
	 * agreement between them about what the parameters should contain.
	 * @param {function(Object)} callback function to call when the files are all loaded. The 
	 * parameter of the callback function is the contents of the files.
	 */
	ilib.Loader.prototype.loadFiles = function (paths, sync, params, callback) {};

	/**
	 * Return all files available for loading using this loader instance.
	 * This method returns an object where the properties are the paths to
	 * directories where files are loaded from and the values are an array
	 * of strings containing the relative paths under the directory of each
	 * file that can be loaded.<p>
	 * 
	 * Example:
	 *  <pre>
	 *  {
	 *      "/usr/share/javascript/ilib/locale": [
	 *          "dateformats.json",
	 *          "aa/dateformats.json",
	 *          "af/dateformats.json",
	 *          "agq/dateformats.json",
	 *          "ak/dateformats.json",
	 *          ...
	 *          "zxx/dateformats.json"
	 *      ]
	 *  }
	 *  </pre>
	 * @returns {Object} a hash containing directory names and
	 * paths to file that can be loaded by this loader 
	 */
	ilib.Loader.prototype.listAvailableFiles = function () {};

	/**
	 * Return true if the file in the named path is available for loading using
	 * this loader. The path may be given as an absolute path, in which case
	 * only that file is checked, or as a relative path, in which case, the
	 * relative path may appear underneath any of the directories that the loader
	 * knows about.
	 * @returns {boolean} true if the file in the named path is available for loading, and
	 * false otherwise
	 */
	ilib.Loader.prototype.isAvailable = function (path) {};

	/**
	 * Set the custom loader used to load ilib's locale data in your environment. 
	 * The instance passed in must implement the Loader interface. See the
	 * Loader class documentation for more information about loaders. 
	 * 
	 * @static
	 * @param {ilib.Loader} loader class to call to access the requested data.
	 * @return {boolean} true if the loader was installed correctly, or false
	 * if not
	 */
	ilib.setLoaderCallback = function (loader) {
	  // only a basic check
	  if ((typeof loader === "undefined" ? "undefined" : _typeof(loader)) === 'object' && typeof loader.loadFiles === 'function' || typeof loader === 'function' || typeof loader === 'undefined') {
	    //console.log("setting callback loader to " + (loader ? loader.name : "undefined"));
	    ilib._load = loader;
	    return true;
	  }
	  return false;
	};

	/**
	 * Return the custom Loader instance currently in use with this instance 
	 * of ilib. If there is no loader, this method returns undefined.
	 * 
	 * @protected
	 * @static
	 * @return {ilib.Loader|undefined} the loader instance currently in use, or 
	 * undefined if there is no such loader
	 */
	ilib.getLoader = function () {
	  return ilib._load;
	};

	/**
	 * Test whether an object is an javascript array. 
	 * 
	 * @static
	 * @param {*} object The object to test
	 * @return {boolean} return true if the object is an array
	 * and false otherwise
	 */
	ilib.isArray = function (object) {
	  if ((typeof object === "undefined" ? "undefined" : _typeof(object)) === 'object') {
	    return Object.prototype.toString.call(object) === '[object Array]';
	  }
	  return false;
	};

	/**
	 * Extend object1 by mixing in everything from object2 into it. The objects
	 * are deeply extended, meaning that this method recursively descends the
	 * tree in the objects and mixes them in at each level. Arrays are extended
	 * by concatenating the elements of object2 onto those of object1.  
	 * 
	 * @static
	 * @param {Object} object1 the target object to extend
	 * @param {Object=} object2 the object to mix in to object1
	 * @return {Object} returns object1
	 */
	ilib.extend = function (object1, object2) {
	  var prop = undefined;
	  if (object2) {
	    for (prop in object2) {
	      // don't extend object with undefined or functions
	      if (prop && typeof object2[prop] !== 'undefined' && typeof object2[prop] !== "function") {
	        if (ilib.isArray(object1[prop]) && ilib.isArray(object2[prop])) {
	          //console.log("Merging array prop " + prop);
	          object1[prop] = object1[prop].concat(object2[prop]);
	        } else if (_typeof(object1[prop]) === 'object' && _typeof(object2[prop]) === 'object') {
	          //console.log("Merging object prop " + prop);
	          if (prop !== "ilib") {
	            object1[prop] = ilib.extend(object1[prop], object2[prop]);
	          }
	        } else {
	          //console.log("Copying prop " + prop);
	          // for debugging. Used to determine whether or not json files are overriding their parents unnecessarily
	          object1[prop] = object2[prop];
	        }
	      }
	    }
	  }
	  return object1;
	};

	ilib.extend2 = function (object1, object2) {
	  var prop = undefined;
	  if (object2) {
	    for (prop in object2) {
	      // don't extend object with undefined or functions
	      if (prop && typeof object2[prop] !== 'undefined') {
	        if (ilib.isArray(object1[prop]) && ilib.isArray(object2[prop])) {
	          //console.log("Merging array prop " + prop);
	          object1[prop] = object1[prop].concat(object2[prop]);
	        } else if (_typeof(object1[prop]) === 'object' && _typeof(object2[prop]) === 'object') {
	          //console.log("Merging object prop " + prop);
	          if (prop !== "ilib") {
	            object1[prop] = ilib.extend2(object1[prop], object2[prop]);
	          }
	        } else {
	          //console.log("Copying prop " + prop);
	          // for debugging. Used to determine whether or not json files are overriding their parents unnecessarily
	          object1[prop] = object2[prop];
	        }
	      }
	    }
	  }
	  return object1;
	};

	/**
	 * If Function.prototype.bind does not exist in this JS engine, this
	 * function reimplements it in terms of older JS functions.
	 * bind() doesn't exist in many older browsers.
	 * 
	 * @static
	 * @param {Object} scope object that the method should operate on
	 * @param {function(...)} method method to call
	 * @return {function(...)|undefined} function that calls the given method 
	 * in the given scope with all of its arguments properly attached, or
	 * undefined if there was a problem with the arguments
	 */
	ilib.bind = function (scope, method /*, bound arguments*/) {
	  if (!scope || !method) {
	    return undefined;
	  }

	  /** @protected 
	   * @param {Arguments} inArrayLike
	   * @param {number=} inOffset
	   */
	  function cloneArray(inArrayLike, inOffset) {
	    var arr = [];
	    for (var i = inOffset || 0, l = inArrayLike.length; i < l; i++) {
	      arr.push(inArrayLike[i]);
	    }
	    return arr;
	  }

	  if (typeof method === 'function') {
	    var func,
	        args = cloneArray(arguments, 2);
	    if (typeof method.bind === 'function') {
	      func = method.bind.apply(method, [scope].concat(args));
	    } else {
	      func = function func() {
	        var nargs = cloneArray(arguments);
	        // invoke with collected args
	        return method.apply(scope, args.concat(nargs));
	      };
	    }
	    return func;
	  }
	  return undefined;
	};

	/**
	 * @private
	 */
	ilib._dyncode = false;

	/**
	 * Return true if this copy of ilib is using dynamically loaded code. It returns
	 * false for pre-assembled code.
	 * 
	 * @static
	 * @return {boolean} true if this ilib uses dynamically loaded code, and false otherwise
	 */
	ilib.isDynCode = function () {
	  return ilib._dyncode;
	};

	/**
	 * @private
	 */
	ilib._dyndata = false;

	/**
	 * Return true if this copy of ilib is using dynamically loaded locale data. It returns
	 * false for pre-assembled data.
	 * 
	 * @static
	 * @return {boolean} true if this ilib uses dynamically loaded locale data, and false otherwise
	 */
	ilib.isDynData = function () {
	  return ilib._dyndata;
	};

	ilib._loadtime = new Date().getTime();
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(85), (function() { return this; }())))

/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	/**
	 * Use invariant() to assert state which your program assumes to be true.
	 *
	 * Provide sprintf-style format (only %s is supported) and arguments
	 * to provide information about what broke and what you were
	 * expecting.
	 *
	 * The invariant message will be stripped in production, but the invariant
	 * will remain to ensure logic does not differ in production.
	 */

	var validateFormat = function validateFormat(format) {};

	if (false) {
	  validateFormat = function validateFormat(format) {
	    if (format === undefined) {
	      throw new Error('invariant requires an error message argument');
	    }
	  };
	}

	function invariant(condition, format, a, b, c, d, e, f) {
	  validateFormat(format);

	  if (!condition) {
	    var error;
	    if (format === undefined) {
	      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
	    } else {
	      var args = [a, b, c, d, e, f];
	      var argIndex = 0;
	      error = new Error(format.replace(/%s/g, function () {
	        return args[argIndex++];
	      }));
	      error.name = 'Invariant Violation';
	    }

	    error.framesToPop = 1; // we don't care about invariant's own frame
	    throw error;
	  }
	}

	module.exports = invariant;

/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var emptyFunction = __webpack_require__(18);

	/**
	 * Similar to invariant but only logs a warning if the condition is not met.
	 * This can be used to log issues in development environments in critical
	 * paths. Removing the logging code for production environments will keep the
	 * same logic and follow the same code paths.
	 */

	var warning = emptyFunction;

	if (false) {
	  (function () {
	    var printWarning = function printWarning(format) {
	      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	        args[_key - 1] = arguments[_key];
	      }

	      var argIndex = 0;
	      var message = 'Warning: ' + format.replace(/%s/g, function () {
	        return args[argIndex++];
	      });
	      if (typeof console !== 'undefined') {
	        console.error(message);
	      }
	      try {
	        // --- Welcome to debugging React ---
	        // This error was thrown as a convenience so that you can use this stack
	        // to find the callsite that caused this warning to fire.
	        throw new Error(message);
	      } catch (x) {}
	    };

	    warning = function warning(condition, format) {
	      if (format === undefined) {
	        throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
	      }

	      if (format.indexOf('Failed Composite propType: ') === 0) {
	        return; // Ignore CompositeComponent proptype check.
	      }

	      if (!condition) {
	        for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
	          args[_key2 - 2] = arguments[_key2];
	        }

	        printWarning.apply(undefined, [format].concat(args));
	      }
	    };
	  })();
	}

	module.exports = warning;

/***/ },
/* 5 */
/***/ function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	'use strict';

	/**
	 * WARNING: DO NOT manually require this module.
	 * This is a replacement for `invariant(...)` used by the error code system
	 * and will _only_ be required by the corresponding babel pass.
	 * It always throws.
	 */

	function reactProdInvariant(code) {
	  var argCount = arguments.length - 1;

	  var message = 'Minified React error #' + code + '; visit ' + 'http://facebook.github.io/react/docs/error-decoder.html?invariant=' + code;

	  for (var argIdx = 0; argIdx < argCount; argIdx++) {
	    message += '&args[]=' + encodeURIComponent(arguments[argIdx + 1]);
	  }

	  message += ' for the full message or use the non-minified dev environment' + ' for full errors and additional helpful warnings.';

	  var error = new Error(message);
	  error.name = 'Invariant Violation';
	  error.framesToPop = 1; // we don't care about reactProdInvariant's own frame

	  throw error;
	}

	module.exports = reactProdInvariant;

/***/ },
/* 6 */
/***/ function(module, exports) {

	'use strict';

	/*
	 * MathUtils.js - Misc math utility routines
	 * 
	 * Copyright Â© 2013-2015, JEDLSoft
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 *
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */

	var MathUtils = {};

	/**
	 * Return the sign of the given number. If the sign is negative, this function
	 * returns -1. If the sign is positive or zero, this function returns 1.
	 * @static
	 * @param {number} num the number to test
	 * @return {number} -1 if the number is negative, and 1 otherwise
	 */
	MathUtils.signum = function (num) {
	  var n = num;
	  if (typeof num === 'string') {
	    n = parseInt(num, 10);
	  } else if (typeof num !== 'number') {
	    return 1;
	  }
	  return n < 0 ? -1 : 1;
	};

	/**
	 * @static
	 * @protected
	 * @param {number} num number to round
	 * @return {number} rounded number
	 */
	MathUtils.floor = function (num) {
	  return Math.floor(num);
	};

	/**
	 * @static
	 * @protected
	 * @param {number} num number to round
	 * @return {number} rounded number
	 */
	MathUtils.ceiling = function (num) {
	  return Math.ceil(num);
	};

	/**
	 * @static
	 * @protected
	 * @param {number} num number to round
	 * @return {number} rounded number
	 */
	MathUtils.down = function (num) {
	  return num < 0 ? Math.ceil(num) : Math.floor(num);
	};

	/**
	 * @static
	 * @protected
	 * @param {number} num number to round
	 * @return {number} rounded number
	 */
	MathUtils.up = function (num) {
	  return num < 0 ? Math.floor(num) : Math.ceil(num);
	};

	/**
	 * @static
	 * @protected
	 * @param {number} num number to round
	 * @return {number} rounded number
	 */
	MathUtils.halfup = function (num) {
	  return num < 0 ? Math.ceil(num - 0.5) : Math.floor(num + 0.5);
	};

	/**
	 * @static
	 * @protected
	 * @param {number} num number to round
	 * @return {number} rounded number
	 */
	MathUtils.halfdown = function (num) {
	  return num < 0 ? Math.floor(num + 0.5) : Math.ceil(num - 0.5);
	};

	/**
	 * @static
	 * @protected
	 * @param {number} num number to round
	 * @return {number} rounded number
	 */
	MathUtils.halfeven = function (num) {
	  return Math.floor(num) % 2 === 0 ? Math.ceil(num - 0.5) : Math.floor(num + 0.5);
	};

	/**
	 * @static
	 * @protected
	 * @param {number} num number to round
	 * @return {number} rounded number
	 */
	MathUtils.halfodd = function (num) {
	  return Math.floor(num) % 2 !== 0 ? Math.ceil(num - 0.5) : Math.floor(num + 0.5);
	};

	/**
	 * Do a proper modulo function. The Javascript % operator will give the truncated
	 * division algorithm, but for calendrical calculations, we need the Euclidean
	 * division algorithm where the remainder of any division, whether the dividend
	 * is negative or not, is always a positive number in the range [0, modulus).<p>
	 * 
	 * 
	 * @static
	 * @param {number} dividend the number being divided
	 * @param {number} modulus the number dividing the dividend. This should always be a positive number.
	 * @return the remainder of dividing the dividend by the modulus.  
	 */
	MathUtils.mod = function (dividend, modulus) {
	  if (modulus == 0) {
	    return 0;
	  }
	  var x = dividend % modulus;
	  return x < 0 ? x + modulus : x;
	};

	/**
	 * Do a proper adjusted modulo function. The Javascript % operator will give the truncated
	 * division algorithm, but for calendrical calculations, we need the Euclidean
	 * division algorithm where the remainder of any division, whether the dividend
	 * is negative or not, is always a positive number in the range (0, modulus]. The adjusted
	 * modulo function differs from the regular modulo function in that when the remainder is
	 * zero, the modulus should be returned instead.<p>
	 * 
	 * 
	 * @static
	 * @param {number} dividend the number being divided
	 * @param {number} modulus the number dividing the dividend. This should always be a positive number.
	 * @return the remainder of dividing the dividend by the modulus.  
	 */
	MathUtils.amod = function (dividend, modulus) {
	  if (modulus == 0) {
	    return 0;
	  }
	  var x = dividend % modulus;
	  return x <= 0 ? x + modulus : x;
	};

	module.exports = MathUtils;

/***/ },
/* 7 */
/***/ function(module, exports) {

	/*
	object-assign
	(c) Sindre Sorhus
	@license MIT
	*/

	'use strict';
	/* eslint-disable no-unused-vars */
	var getOwnPropertySymbols = Object.getOwnPropertySymbols;
	var hasOwnProperty = Object.prototype.hasOwnProperty;
	var propIsEnumerable = Object.prototype.propertyIsEnumerable;

	function toObject(val) {
		if (val === null || val === undefined) {
			throw new TypeError('Object.assign cannot be called with null or undefined');
		}

		return Object(val);
	}

	function shouldUseNative() {
		try {
			if (!Object.assign) {
				return false;
			}

			// Detect buggy property enumeration order in older V8 versions.

			// https://bugs.chromium.org/p/v8/issues/detail?id=4118
			var test1 = new String('abc');  // eslint-disable-line no-new-wrappers
			test1[5] = 'de';
			if (Object.getOwnPropertyNames(test1)[0] === '5') {
				return false;
			}

			// https://bugs.chromium.org/p/v8/issues/detail?id=3056
			var test2 = {};
			for (var i = 0; i < 10; i++) {
				test2['_' + String.fromCharCode(i)] = i;
			}
			var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
				return test2[n];
			});
			if (order2.join('') !== '0123456789') {
				return false;
			}

			// https://bugs.chromium.org/p/v8/issues/detail?id=3056
			var test3 = {};
			'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
				test3[letter] = letter;
			});
			if (Object.keys(Object.assign({}, test3)).join('') !==
					'abcdefghijklmnopqrst') {
				return false;
			}

			return true;
		} catch (err) {
			// We don't expect any of the above to throw, but better to be safe.
			return false;
		}
	}

	module.exports = shouldUseNative() ? Object.assign : function (target, source) {
		var from;
		var to = toObject(target);
		var symbols;

		for (var s = 1; s < arguments.length; s++) {
			from = Object(arguments[s]);

			for (var key in from) {
				if (hasOwnProperty.call(from, key)) {
					to[key] = from[key];
				}
			}

			if (getOwnPropertySymbols) {
				symbols = getOwnPropertySymbols(from);
				for (var i = 0; i < symbols.length; i++) {
					if (propIsEnumerable.call(from, symbols[i])) {
						to[symbols[i]] = from[symbols[i]];
					}
				}
			}
		}

		return to;
	};


/***/ },
/* 8 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.kind = undefined;

	var _computed = __webpack_require__(194);

	var _computed2 = _interopRequireDefault(_computed);

	var _contextTypes = __webpack_require__(195);

	var _contextTypes2 = _interopRequireDefault(_contextTypes);

	var _defaultProps = __webpack_require__(196);

	var _defaultProps2 = _interopRequireDefault(_defaultProps);

	var _handlers = __webpack_require__(197);

	var _handlers2 = _interopRequireDefault(_handlers);

	var _name = __webpack_require__(198);

	var _name2 = _interopRequireDefault(_name);

	var _propTypes = __webpack_require__(199);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _styles = __webpack_require__(200);

	var _styles2 = _interopRequireDefault(_styles);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	/**
	 * Creates a stateless functional component with some helpful declarative sugar.
	 *
	 * @example
	 *	import css from './Button.less';
	 *	const Button = kind({
	 *		// expect color and onClick properties but neither required
	 *		propTypes: {
	 *			color: React.PropTypes.string
	 *		},
	 *		// if no color is provided, it'll be green
	 *		defaultProps: {
	 *			color: 'green'
	 *		},
	 *		// expect backgroundColor via context
	 *		contextTypes: {
	 *			backgroundColor: React.PropTypes.string
	 *		},
	 *		// configure styles with the static className to merge with user className
	 *		styles: {
	 *			// include the CSS modules map so 'button' can be resolved to the local name
	 *			css,
	 *			className: 'button'
	 *		},
	 *		// add some computed properties
	 *		computed: {
	 *			// border color will be the color prepended by 'light'
	 *			borderColor: ({color}) => 'light' + color,
	 *			// background color will be the contextual background color if specified
	 *			color: ({color}, context) => context.backgroundColor || color
	 *		},
	 *		// Render the thing, already!
	 *		render: ({color, borderColor, children, ...rest}) => (
	 *			<button
	 *				{...rest}
	 *				style={{backgroundColor: color, borderColor}}
	 *			>
	 *				{children}
	 *			</button>
	 *		)
	 *	});
	 *
	 * @param  {Object} config - Component configuration
	 *
	 * @returns {Function}        Component
	 */
	var kind = function kind(config) {
	  // addition prop decorations would be chained here (after config.render)
	  var render = function render(props, context, updater) {
	    var p = Object.assign({}, props);
	    if (config.styles) p = (0, _styles2.default)(config.styles, p, context, updater);
	    if (config.computed) p = (0, _computed2.default)(config.computed, p, context, updater);
	    return config.render(p, context, updater);
	  };

	  // render() decorations
	  if (config.handlers) {
	    // need to set name and contextTypes on pre-wrapped Component
	    if (config.contextTypes) (0, _contextTypes2.default)(config.contextTypes, render);
	    render = (0, _handlers2.default)(config.handlers, render, config.contextTypes);
	  }

	  if (config.name) (0, _name2.default)(config.name, render);
	  if (config.propTypes) (0, _propTypes2.default)(config.propTypes, render);
	  if (config.defaultProps) (0, _defaultProps2.default)(config.defaultProps, render);
	  if (config.contextTypes) (0, _contextTypes2.default)(config.contextTypes, render);

	  // Decorate the SFC with the computed property object in DEV for easier testability
	  if (false) render.computed = config.computed;

	  return render;
	};

	exports.default = kind;
	exports.kind = kind;

/***/ },
/* 9 */
/***/ function(module, exports) {

	"use strict";

	/*
	 * Calendar.js - Represent a calendar object.
	 * 
	 * Copyright Â© 2012-2015, JEDLSoft
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 *
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */

	/**
	 * @class
	 * Superclass for all calendar subclasses that contains shared 
	 * functionality. This class is never instantiated on its own. Instead,
	 * you should use the {@link CalendarFactory} function to manufacture a new
	 * instance of a subclass of Calendar. 
	 * 
	 * @private
	 * @constructor
	 */

	var Calendar = function Calendar() {};

	/* place for the subclasses to put their constructors so that the factory method
	 * can find them. Do this to add your calendar after it's defined: 
	 * Calendar._constructors["mytype"] = Calendar.MyTypeConstructor;
	 */
	Calendar._constructors = {};

	Calendar.prototype = {
	  /**
	   * Return the type of this calendar.
	   * 
	   * @return {string} the name of the type of this calendar 
	   */
	  getType: function getType() {
	    throw "Cannot call methods of abstract class Calendar";
	  },

	  /**
	   * Return the number of months in the given year. The number of months in a year varies
	   * for some luni-solar calendars because in some years, an extra month is needed to extend the 
	   * days in a year to an entire solar year. The month is represented as a 1-based number
	   * where 1=first month, 2=second month, etc.
	   * 
	   * @param {number} year a year for which the number of months is sought
	   * @return {number} The number of months in the given year
	   */
	  getNumMonths: function getNumMonths(year) {
	    throw "Cannot call methods of abstract class Calendar";
	  },

	  /**
	   * Return the number of days in a particular month in a particular year. This function
	   * can return a different number for a month depending on the year because of things
	   * like leap years.
	   * 
	   * @param {number} month the month for which the length is sought
	   * @param {number} year the year within which that month can be found
	   * @return {number} the number of days within the given month in the given year
	   */
	  getMonLength: function getMonLength(month, year) {
	    throw "Cannot call methods of abstract class Calendar";
	  },

	  /**
	   * Return true if the given year is a leap year in this calendar.
	   * The year parameter may be given as a number.
	   * 
	   * @param {number} year the year for which the leap year information is being sought
	   * @return {boolean} true if the given year is a leap year
	   */
	  isLeapYear: function isLeapYear(year) {
	    throw "Cannot call methods of abstract class Calendar";
	  }
	};

	module.exports = Calendar;

/***/ },
/* 10 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.hoc = undefined;

	var _util = __webpack_require__(28);

	/**
	 * Constructs a Higher-order Component using an optional set of default configuration parameters and
	 * a factory method that acceps instance configuration paramters and a component to wrap. The
	 * returned function can accept:
	 * 	* an instance config and a component constructor to wrap and return a renderable component, or
	 * 	* an instance config only and return a decorator function expecting a component constructor
	 * 	  (like the next bullet), or
	 * 	* a component constructor and return a renderable component
	 *
	 * @example
	 *	const Countable = hoc({prop: 'data-count'}, (config, Wrapped) => {
	 *		return class extends React.Component {
	 *			constructor (props) {
	 *				super(props);
	 *				this.state = {
	 *					count: 0
	 *				};
	 *			},
	 *			inc = () => this.setState({count: this.state.count + 1}),
	 *			render () {
	 *				const props = Object.assign({}, this.props, {
	 *					[config.prop]: this.state.count,
	 *					onClick: this.inc
	 *				});
	 *				return <Wrapped {...props} />
	 *			}
	 *		}
	 *	});
	 *
	 *	const CountableAsDataNumber({prop: 'data-number'});
	 *	const CountableDiv('div');
	 *	const CountableDivAsDataNumber = CountableAsDataNumber('div');
	 *
	 * @param  {Object} defaultConfig Set of default configuration parameters
	 * @param  {Function} hawk        Higher-order component
	 *
	 * @returns {Function}             HoC Decorator
	 */
	var hoc = function hoc(defaultConfig, hawk) {

	  // normalize arguments to allow defaultConfig to be omitted
	  var factory = hawk;
	  var defaults = defaultConfig;
	  if (!factory && typeof defaultConfig === 'function') {
	    factory = defaultConfig;
	    defaults = null;
	  }

	  return function (config, maybeWrapped) {
	    if ((0, _util.isRenderable)(config)) {
	      return factory(defaults, config);
	    } else {
	      var cfg = Object.assign({}, defaults, config);
	      if ((0, _util.isRenderable)(maybeWrapped)) {
	        return factory(cfg, maybeWrapped);
	      } else {
	        return function (Wrapped) {
	          return factory(cfg, Wrapped);
	        };
	      }
	    }
	  };
	};

	exports.default = hoc;
	exports.hoc = hoc;

/***/ },
/* 11 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(5);

	var DOMProperty = __webpack_require__(37);
	var ReactDOMComponentFlags = __webpack_require__(165);

	var invariant = __webpack_require__(3);

	var ATTR_NAME = DOMProperty.ID_ATTRIBUTE_NAME;
	var Flags = ReactDOMComponentFlags;

	var internalInstanceKey = '__reactInternalInstance$' + Math.random().toString(36).slice(2);

	/**
	 * Check if a given node should be cached.
	 */
	function shouldPrecacheNode(node, nodeID) {
	  return node.nodeType === 1 && node.getAttribute(ATTR_NAME) === String(nodeID) || node.nodeType === 8 && node.nodeValue === ' react-text: ' + nodeID + ' ' || node.nodeType === 8 && node.nodeValue === ' react-empty: ' + nodeID + ' ';
	}

	/**
	 * Drill down (through composites and empty components) until we get a host or
	 * host text component.
	 *
	 * This is pretty polymorphic but unavoidable with the current structure we have
	 * for `_renderedChildren`.
	 */
	function getRenderedHostOrTextFromComponent(component) {
	  var rendered;
	  while (rendered = component._renderedComponent) {
	    component = rendered;
	  }
	  return component;
	}

	/**
	 * Populate `_hostNode` on the rendered host/text component with the given
	 * DOM node. The passed `inst` can be a composite.
	 */
	function precacheNode(inst, node) {
	  var hostInst = getRenderedHostOrTextFromComponent(inst);
	  hostInst._hostNode = node;
	  node[internalInstanceKey] = hostInst;
	}

	function uncacheNode(inst) {
	  var node = inst._hostNode;
	  if (node) {
	    delete node[internalInstanceKey];
	    inst._hostNode = null;
	  }
	}

	/**
	 * Populate `_hostNode` on each child of `inst`, assuming that the children
	 * match up with the DOM (element) children of `node`.
	 *
	 * We cache entire levels at once to avoid an n^2 problem where we access the
	 * children of a node sequentially and have to walk from the start to our target
	 * node every time.
	 *
	 * Since we update `_renderedChildren` and the actual DOM at (slightly)
	 * different times, we could race here and see a newer `_renderedChildren` than
	 * the DOM nodes we see. To avoid this, ReactMultiChild calls
	 * `prepareToManageChildren` before we change `_renderedChildren`, at which
	 * time the container's child nodes are always cached (until it unmounts).
	 */
	function precacheChildNodes(inst, node) {
	  if (inst._flags & Flags.hasCachedChildNodes) {
	    return;
	  }
	  var children = inst._renderedChildren;
	  var childNode = node.firstChild;
	  outer: for (var name in children) {
	    if (!children.hasOwnProperty(name)) {
	      continue;
	    }
	    var childInst = children[name];
	    var childID = getRenderedHostOrTextFromComponent(childInst)._domID;
	    if (childID === 0) {
	      // We're currently unmounting this child in ReactMultiChild; skip it.
	      continue;
	    }
	    // We assume the child nodes are in the same order as the child instances.
	    for (; childNode !== null; childNode = childNode.nextSibling) {
	      if (shouldPrecacheNode(childNode, childID)) {
	        precacheNode(childInst, childNode);
	        continue outer;
	      }
	    }
	    // We reached the end of the DOM children without finding an ID match.
	     true ?  false ? invariant(false, 'Unable to find element with ID %s.', childID) : _prodInvariant('32', childID) : void 0;
	  }
	  inst._flags |= Flags.hasCachedChildNodes;
	}

	/**
	 * Given a DOM node, return the closest ReactDOMComponent or
	 * ReactDOMTextComponent instance ancestor.
	 */
	function getClosestInstanceFromNode(node) {
	  if (node[internalInstanceKey]) {
	    return node[internalInstanceKey];
	  }

	  // Walk up the tree until we find an ancestor whose instance we have cached.
	  var parents = [];
	  while (!node[internalInstanceKey]) {
	    parents.push(node);
	    if (node.parentNode) {
	      node = node.parentNode;
	    } else {
	      // Top of the tree. This node must not be part of a React tree (or is
	      // unmounted, potentially).
	      return null;
	    }
	  }

	  var closest;
	  var inst;
	  for (; node && (inst = node[internalInstanceKey]); node = parents.pop()) {
	    closest = inst;
	    if (parents.length) {
	      precacheChildNodes(inst, node);
	    }
	  }

	  return closest;
	}

	/**
	 * Given a DOM node, return the ReactDOMComponent or ReactDOMTextComponent
	 * instance, or null if the node was not rendered by this React.
	 */
	function getInstanceFromNode(node) {
	  var inst = getClosestInstanceFromNode(node);
	  if (inst != null && inst._hostNode === node) {
	    return inst;
	  } else {
	    return null;
	  }
	}

	/**
	 * Given a ReactDOMComponent or ReactDOMTextComponent, return the corresponding
	 * DOM node.
	 */
	function getNodeFromInstance(inst) {
	  // Without this first invariant, passing a non-DOM-component triggers the next
	  // invariant for a missing parent, which is super confusing.
	  !(inst._hostNode !== undefined) ?  false ? invariant(false, 'getNodeFromInstance: Invalid argument.') : _prodInvariant('33') : void 0;

	  if (inst._hostNode) {
	    return inst._hostNode;
	  }

	  // Walk up the tree until we find an ancestor whose DOM node we have cached.
	  var parents = [];
	  while (!inst._hostNode) {
	    parents.push(inst);
	    !inst._hostParent ?  false ? invariant(false, 'React DOM tree root should always have a node reference.') : _prodInvariant('34') : void 0;
	    inst = inst._hostParent;
	  }

	  // Now parents contains each ancestor that does *not* have a cached native
	  // node, and `inst` is the deepest ancestor that does.
	  for (; parents.length; inst = parents.pop()) {
	    precacheChildNodes(inst, inst._hostNode);
	  }

	  return inst._hostNode;
	}

	var ReactDOMComponentTree = {
	  getClosestInstanceFromNode: getClosestInstanceFromNode,
	  getInstanceFromNode: getInstanceFromNode,
	  getNodeFromInstance: getNodeFromInstance,
	  precacheChildNodes: precacheChildNodes,
	  precacheNode: precacheNode,
	  uncacheNode: uncacheNode
	};

	module.exports = ReactDOMComponentTree;

/***/ },
/* 12 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
		return typeof obj === "undefined" ? "undefined" : _typeof2(obj);
	} : function (obj) {
		return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof2(obj);
	};

	/*
	 * Locale.js - Locale specifier definition
	 * 
	 * Copyright Â© 2012-2015, JEDLSoft
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 *
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */

	// !depends ilib.js JSUtils.js

	var ilib = __webpack_require__(2);
	var JSUtils = __webpack_require__(23);

	/**
	 * @class
	 * Create a new locale instance. Locales are specified either with a specifier string 
	 * that follows the BCP-47 convention (roughly: "language-region-script-variant") or 
	 * with 4 parameters that specify the language, region, variant, and script individually.<p>
	 * 
	 * The language is given as an ISO 639-1 two-letter, lower-case language code. You
	 * can find a full list of these codes at 
	 * <a href="http://en.wikipedia.org/wiki/List_of_ISO_639-1_codes">http://en.wikipedia.org/wiki/List_of_ISO_639-1_codes</a><p>
	 * 
	 * The region is given as an ISO 3166-1 two-letter, upper-case region code. You can
	 * find a full list of these codes at 
	 * <a href="http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2">http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2</a>.<p>
	 * 
	 * The variant is any string that does not contain a dash which further differentiates
	 * locales from each other.<p>
	 * 
	 * The script is given as the ISO 15924 four-letter script code. In some locales,
	 * text may be validly written in more than one script. For example, Serbian is often
	 * written in both Latin and Cyrillic, though not usually mixed together. You can find a
	 * full list of these codes at 
	 * <a href="http://en.wikipedia.org/wiki/ISO_15924#List_of_codes">http://en.wikipedia.org/wiki/ISO_15924#List_of_codes</a>.<p>
	 * 
	 * As an example in ilib, the script can be used in the date formatter. Dates formatted 
	 * in Serbian could have day-of-week names or month names written in the Latin
	 * or Cyrillic script. Often one script is default such that sr-SR-Latn is the same
	 * as sr-SR so the script code "Latn" can be left off of the locale spec.<p> 
	 * 
	 * Each part is optional, and an empty string in the specifier before or after a 
	 * dash or as a parameter to the constructor denotes an unspecified value. In this
	 * case, many of the ilib functions will treat the locale as generic. For example
	 * the locale "en-" is equivalent to "en" and to "en--" and denotes a locale
	 * of "English" with an unspecified region and variant, which typically matches
	 * any region or variant.<p>
	 * 
	 * Without any arguments to the constructor, this function returns the locale of
	 * the host Javascript engine.<p>
	 * 
	 * 
	 * @constructor
	 * @param {?string|Locale=} language the ISO 639 2-letter code for the language, or a full 
	 * locale spec in BCP-47 format, or another Locale instance to copy from
	 * @param {string=} region the ISO 3166 2-letter code for the region
	 * @param {string=} variant the name of the variant of this locale, if any
	 * @param {string=} script the ISO 15924 code of the script for this locale, if any
	 */
	var Locale = function Locale(language, region, variant, script) {
		if (typeof region === 'undefined') {
			var spec = language || ilib.getLocale();
			if (typeof spec === 'string') {
				var parts = spec.split('-');
				for (var i = 0; i < parts.length; i++) {
					if (Locale._isLanguageCode(parts[i])) {
						/** 
	      * @private
	      * @type {string|undefined}
	      */
						this.language = parts[i];
					} else if (Locale._isRegionCode(parts[i])) {
						/** 
	      * @private
	      * @type {string|undefined}
	      */
						this.region = parts[i];
					} else if (Locale._isScriptCode(parts[i])) {
						/** 
	      * @private
	      * @type {string|undefined}
	      */
						this.script = parts[i];
					} else {
						/** 
	      * @private
	      * @type {string|undefined}
	      */
						this.variant = parts[i];
					}
				}
				this.language = this.language || undefined;
				this.region = this.region || undefined;
				this.script = this.script || undefined;
				this.variant = this.variant || undefined;
			} else if ((typeof spec === "undefined" ? "undefined" : _typeof(spec)) === 'object') {
				this.language = spec.language || undefined;
				this.region = spec.region || undefined;
				this.script = spec.script || undefined;
				this.variant = spec.variant || undefined;
			}
		} else {
			if (language) {
				language = language.trim();
				this.language = language.length > 0 ? language.toLowerCase() : undefined;
			} else {
				this.language = undefined;
			}
			if (region) {
				region = region.trim();
				this.region = region.length > 0 ? region.toUpperCase() : undefined;
			} else {
				this.region = undefined;
			}
			if (variant) {
				variant = variant.trim();
				this.variant = variant.length > 0 ? variant : undefined;
			} else {
				this.variant = undefined;
			}
			if (script) {
				script = script.trim();
				this.script = script.length > 0 ? script : undefined;
			} else {
				this.script = undefined;
			}
		}
		this._genSpec();
	};

	// from http://en.wikipedia.org/wiki/ISO_3166-1
	Locale.a2toa3regmap = {
		"AF": "AFG",
		"AX": "ALA",
		"AL": "ALB",
		"DZ": "DZA",
		"AS": "ASM",
		"AD": "AND",
		"AO": "AGO",
		"AI": "AIA",
		"AQ": "ATA",
		"AG": "ATG",
		"AR": "ARG",
		"AM": "ARM",
		"AW": "ABW",
		"AU": "AUS",
		"AT": "AUT",
		"AZ": "AZE",
		"BS": "BHS",
		"BH": "BHR",
		"BD": "BGD",
		"BB": "BRB",
		"BY": "BLR",
		"BE": "BEL",
		"BZ": "BLZ",
		"BJ": "BEN",
		"BM": "BMU",
		"BT": "BTN",
		"BO": "BOL",
		"BQ": "BES",
		"BA": "BIH",
		"BW": "BWA",
		"BV": "BVT",
		"BR": "BRA",
		"IO": "IOT",
		"BN": "BRN",
		"BG": "BGR",
		"BF": "BFA",
		"BI": "BDI",
		"KH": "KHM",
		"CM": "CMR",
		"CA": "CAN",
		"CV": "CPV",
		"KY": "CYM",
		"CF": "CAF",
		"TD": "TCD",
		"CL": "CHL",
		"CN": "CHN",
		"CX": "CXR",
		"CC": "CCK",
		"CO": "COL",
		"KM": "COM",
		"CG": "COG",
		"CD": "COD",
		"CK": "COK",
		"CR": "CRI",
		"CI": "CIV",
		"HR": "HRV",
		"CU": "CUB",
		"CW": "CUW",
		"CY": "CYP",
		"CZ": "CZE",
		"DK": "DNK",
		"DJ": "DJI",
		"DM": "DMA",
		"DO": "DOM",
		"EC": "ECU",
		"EG": "EGY",
		"SV": "SLV",
		"GQ": "GNQ",
		"ER": "ERI",
		"EE": "EST",
		"ET": "ETH",
		"FK": "FLK",
		"FO": "FRO",
		"FJ": "FJI",
		"FI": "FIN",
		"FR": "FRA",
		"GF": "GUF",
		"PF": "PYF",
		"TF": "ATF",
		"GA": "GAB",
		"GM": "GMB",
		"GE": "GEO",
		"DE": "DEU",
		"GH": "GHA",
		"GI": "GIB",
		"GR": "GRC",
		"GL": "GRL",
		"GD": "GRD",
		"GP": "GLP",
		"GU": "GUM",
		"GT": "GTM",
		"GG": "GGY",
		"GN": "GIN",
		"GW": "GNB",
		"GY": "GUY",
		"HT": "HTI",
		"HM": "HMD",
		"VA": "VAT",
		"HN": "HND",
		"HK": "HKG",
		"HU": "HUN",
		"IS": "ISL",
		"IN": "IND",
		"ID": "IDN",
		"IR": "IRN",
		"IQ": "IRQ",
		"IE": "IRL",
		"IM": "IMN",
		"IL": "ISR",
		"IT": "ITA",
		"JM": "JAM",
		"JP": "JPN",
		"JE": "JEY",
		"JO": "JOR",
		"KZ": "KAZ",
		"KE": "KEN",
		"KI": "KIR",
		"KP": "PRK",
		"KR": "KOR",
		"KW": "KWT",
		"KG": "KGZ",
		"LA": "LAO",
		"LV": "LVA",
		"LB": "LBN",
		"LS": "LSO",
		"LR": "LBR",
		"LY": "LBY",
		"LI": "LIE",
		"LT": "LTU",
		"LU": "LUX",
		"MO": "MAC",
		"MK": "MKD",
		"MG": "MDG",
		"MW": "MWI",
		"MY": "MYS",
		"MV": "MDV",
		"ML": "MLI",
		"MT": "MLT",
		"MH": "MHL",
		"MQ": "MTQ",
		"MR": "MRT",
		"MU": "MUS",
		"YT": "MYT",
		"MX": "MEX",
		"FM": "FSM",
		"MD": "MDA",
		"MC": "MCO",
		"MN": "MNG",
		"ME": "MNE",
		"MS": "MSR",
		"MA": "MAR",
		"MZ": "MOZ",
		"MM": "MMR",
		"NA": "NAM",
		"NR": "NRU",
		"NP": "NPL",
		"NL": "NLD",
		"NC": "NCL",
		"NZ": "NZL",
		"NI": "NIC",
		"NE": "NER",
		"NG": "NGA",
		"NU": "NIU",
		"NF": "NFK",
		"MP": "MNP",
		"NO": "NOR",
		"OM": "OMN",
		"PK": "PAK",
		"PW": "PLW",
		"PS": "PSE",
		"PA": "PAN",
		"PG": "PNG",
		"PY": "PRY",
		"PE": "PER",
		"PH": "PHL",
		"PN": "PCN",
		"PL": "POL",
		"PT": "PRT",
		"PR": "PRI",
		"QA": "QAT",
		"RE": "REU",
		"RO": "ROU",
		"RU": "RUS",
		"RW": "RWA",
		"BL": "BLM",
		"SH": "SHN",
		"KN": "KNA",
		"LC": "LCA",
		"MF": "MAF",
		"PM": "SPM",
		"VC": "VCT",
		"WS": "WSM",
		"SM": "SMR",
		"ST": "STP",
		"SA": "SAU",
		"SN": "SEN",
		"RS": "SRB",
		"SC": "SYC",
		"SL": "SLE",
		"SG": "SGP",
		"SX": "SXM",
		"SK": "SVK",
		"SI": "SVN",
		"SB": "SLB",
		"SO": "SOM",
		"ZA": "ZAF",
		"GS": "SGS",
		"SS": "SSD",
		"ES": "ESP",
		"LK": "LKA",
		"SD": "SDN",
		"SR": "SUR",
		"SJ": "SJM",
		"SZ": "SWZ",
		"SE": "SWE",
		"CH": "CHE",
		"SY": "SYR",
		"TW": "TWN",
		"TJ": "TJK",
		"TZ": "TZA",
		"TH": "THA",
		"TL": "TLS",
		"TG": "TGO",
		"TK": "TKL",
		"TO": "TON",
		"TT": "TTO",
		"TN": "TUN",
		"TR": "TUR",
		"TM": "TKM",
		"TC": "TCA",
		"TV": "TUV",
		"UG": "UGA",
		"UA": "UKR",
		"AE": "ARE",
		"GB": "GBR",
		"US": "USA",
		"UM": "UMI",
		"UY": "URY",
		"UZ": "UZB",
		"VU": "VUT",
		"VE": "VEN",
		"VN": "VNM",
		"VG": "VGB",
		"VI": "VIR",
		"WF": "WLF",
		"EH": "ESH",
		"YE": "YEM",
		"ZM": "ZMB",
		"ZW": "ZWE"
	};

	Locale.a1toa3langmap = {
		"ab": "abk",
		"aa": "aar",
		"af": "afr",
		"ak": "aka",
		"sq": "sqi",
		"am": "amh",
		"ar": "ara",
		"an": "arg",
		"hy": "hye",
		"as": "asm",
		"av": "ava",
		"ae": "ave",
		"ay": "aym",
		"az": "aze",
		"bm": "bam",
		"ba": "bak",
		"eu": "eus",
		"be": "bel",
		"bn": "ben",
		"bh": "bih",
		"bi": "bis",
		"bs": "bos",
		"br": "bre",
		"bg": "bul",
		"my": "mya",
		"ca": "cat",
		"ch": "cha",
		"ce": "che",
		"ny": "nya",
		"zh": "zho",
		"cv": "chv",
		"kw": "cor",
		"co": "cos",
		"cr": "cre",
		"hr": "hrv",
		"cs": "ces",
		"da": "dan",
		"dv": "div",
		"nl": "nld",
		"dz": "dzo",
		"en": "eng",
		"eo": "epo",
		"et": "est",
		"ee": "ewe",
		"fo": "fao",
		"fj": "fij",
		"fi": "fin",
		"fr": "fra",
		"ff": "ful",
		"gl": "glg",
		"ka": "kat",
		"de": "deu",
		"el": "ell",
		"gn": "grn",
		"gu": "guj",
		"ht": "hat",
		"ha": "hau",
		"he": "heb",
		"hz": "her",
		"hi": "hin",
		"ho": "hmo",
		"hu": "hun",
		"ia": "ina",
		"id": "ind",
		"ie": "ile",
		"ga": "gle",
		"ig": "ibo",
		"ik": "ipk",
		"io": "ido",
		"is": "isl",
		"it": "ita",
		"iu": "iku",
		"ja": "jpn",
		"jv": "jav",
		"kl": "kal",
		"kn": "kan",
		"kr": "kau",
		"ks": "kas",
		"kk": "kaz",
		"km": "khm",
		"ki": "kik",
		"rw": "kin",
		"ky": "kir",
		"kv": "kom",
		"kg": "kon",
		"ko": "kor",
		"ku": "kur",
		"kj": "kua",
		"la": "lat",
		"lb": "ltz",
		"lg": "lug",
		"li": "lim",
		"ln": "lin",
		"lo": "lao",
		"lt": "lit",
		"lu": "lub",
		"lv": "lav",
		"gv": "glv",
		"mk": "mkd",
		"mg": "mlg",
		"ms": "msa",
		"ml": "mal",
		"mt": "mlt",
		"mi": "mri",
		"mr": "mar",
		"mh": "mah",
		"mn": "mon",
		"na": "nau",
		"nv": "nav",
		"nb": "nob",
		"nd": "nde",
		"ne": "nep",
		"ng": "ndo",
		"nn": "nno",
		"no": "nor",
		"ii": "iii",
		"nr": "nbl",
		"oc": "oci",
		"oj": "oji",
		"cu": "chu",
		"om": "orm",
		"or": "ori",
		"os": "oss",
		"pa": "pan",
		"pi": "pli",
		"fa": "fas",
		"pl": "pol",
		"ps": "pus",
		"pt": "por",
		"qu": "que",
		"rm": "roh",
		"rn": "run",
		"ro": "ron",
		"ru": "rus",
		"sa": "san",
		"sc": "srd",
		"sd": "snd",
		"se": "sme",
		"sm": "smo",
		"sg": "sag",
		"sr": "srp",
		"gd": "gla",
		"sn": "sna",
		"si": "sin",
		"sk": "slk",
		"sl": "slv",
		"so": "som",
		"st": "sot",
		"es": "spa",
		"su": "sun",
		"sw": "swa",
		"ss": "ssw",
		"sv": "swe",
		"ta": "tam",
		"te": "tel",
		"tg": "tgk",
		"th": "tha",
		"ti": "tir",
		"bo": "bod",
		"tk": "tuk",
		"tl": "tgl",
		"tn": "tsn",
		"to": "ton",
		"tr": "tur",
		"ts": "tso",
		"tt": "tat",
		"tw": "twi",
		"ty": "tah",
		"ug": "uig",
		"uk": "ukr",
		"ur": "urd",
		"uz": "uzb",
		"ve": "ven",
		"vi": "vie",
		"vo": "vol",
		"wa": "wln",
		"cy": "cym",
		"wo": "wol",
		"fy": "fry",
		"xh": "xho",
		"yi": "yid",
		"yo": "yor",
		"za": "zha",
		"zu": "zul"
	};

	/**
	 * Tell whether or not the str does not start with a lower case ASCII char.
	 * @private
	 * @param {string} str the char to check
	 * @return {boolean} true if the char is not a lower case ASCII char
	 */
	Locale._notLower = function (str) {
		// do this with ASCII only so we don't have to depend on the CType functions
		var ch = str.charCodeAt(0);
		return ch < 97 || ch > 122;
	};

	/**
	 * Tell whether or not the str does not start with an upper case ASCII char.
	 * @private
	 * @param {string} str the char to check
	 * @return {boolean} true if the char is a not an upper case ASCII char
	 */
	Locale._notUpper = function (str) {
		// do this with ASCII only so we don't have to depend on the CType functions
		var ch = str.charCodeAt(0);
		return ch < 65 || ch > 90;
	};

	/**
	 * Tell whether or not the str does not start with a digit char.
	 * @private
	 * @param {string} str the char to check
	 * @return {boolean} true if the char is a not an upper case ASCII char
	 */
	Locale._notDigit = function (str) {
		// do this with ASCII only so we don't have to depend on the CType functions
		var ch = str.charCodeAt(0);
		return ch < 48 || ch > 57;
	};

	/**
	 * Tell whether or not the given string has the correct syntax to be 
	 * an ISO 639 language code.
	 * 
	 * @private
	 * @param {string} str the string to parse
	 * @return {boolean} true if the string could syntactically be a language code.
	 */
	Locale._isLanguageCode = function (str) {
		if (typeof str === 'undefined' || str.length < 2 || str.length > 3) {
			return false;
		}

		for (var i = 0; i < str.length; i++) {
			if (Locale._notLower(str.charAt(i))) {
				return false;
			}
		}

		return true;
	};

	/**
	 * Tell whether or not the given string has the correct syntax to be 
	 * an ISO 3166 2-letter region code or M.49 3-digit region code.
	 * 
	 * @private
	 * @param {string} str the string to parse
	 * @return {boolean} true if the string could syntactically be a language code.
	 */
	Locale._isRegionCode = function (str) {
		if (typeof str === 'undefined' || str.length < 2 || str.length > 3) {
			return false;
		}

		if (str.length === 2) {
			for (var i = 0; i < str.length; i++) {
				if (Locale._notUpper(str.charAt(i))) {
					return false;
				}
			}
		} else {
			for (var i = 0; i < str.length; i++) {
				if (Locale._notDigit(str.charAt(i))) {
					return false;
				}
			}
		}

		return true;
	};

	/**
	 * Tell whether or not the given string has the correct syntax to be 
	 * an ISO 639 language code.
	 * 
	 * @private
	 * @param {string} str the string to parse
	 * @return {boolean} true if the string could syntactically be a language code.
	 */
	Locale._isScriptCode = function (str) {
		if (typeof str === 'undefined' || str.length !== 4 || Locale._notUpper(str.charAt(0))) {
			return false;
		}

		for (var i = 1; i < 4; i++) {
			if (Locale._notLower(str.charAt(i))) {
				return false;
			}
		}

		return true;
	};

	/**
	 * Return the ISO-3166 alpha3 equivalent region code for the given ISO 3166 alpha2
	 * region code. If the given alpha2 code is not found, this function returns its
	 * argument unchanged.
	 * @static
	 * @param {string|undefined} alpha2 the alpha2 code to map
	 * @return {string|undefined} the alpha3 equivalent of the given alpha2 code, or the alpha2
	 * parameter if the alpha2 value is not found
	 */
	Locale.regionAlpha2ToAlpha3 = function (alpha2) {
		return Locale.a2toa3regmap[alpha2] || alpha2;
	};

	/**
	 * Return the ISO-639 alpha3 equivalent language code for the given ISO 639 alpha1
	 * language code. If the given alpha1 code is not found, this function returns its
	 * argument unchanged.
	 * @static
	 * @param {string|undefined} alpha1 the alpha1 code to map
	 * @return {string|undefined} the alpha3 equivalent of the given alpha1 code, or the alpha1
	 * parameter if the alpha1 value is not found
	 */
	Locale.languageAlpha1ToAlpha3 = function (alpha1) {
		return Locale.a1toa3langmap[alpha1] || alpha1;
	};

	Locale.prototype = {
		/**
	  * @private
	  */
		_genSpec: function _genSpec() {
			this.spec = this.language || "";

			if (this.script) {
				if (this.spec.length > 0) {
					this.spec += "-";
				}
				this.spec += this.script;
			}

			if (this.region) {
				if (this.spec.length > 0) {
					this.spec += "-";
				}
				this.spec += this.region;
			}

			if (this.variant) {
				if (this.spec.length > 0) {
					this.spec += "-";
				}
				this.spec += this.variant;
			}
		},

		/**
	  * Return the ISO 639 language code for this locale. 
	  * @return {string|undefined} the language code for this locale 
	  */
		getLanguage: function getLanguage() {
			return this.language;
		},

		/**
	  * Return the language of this locale as an ISO-639-alpha3 language code
	  * @return {string|undefined} the alpha3 language code of this locale
	  */
		getLanguageAlpha3: function getLanguageAlpha3() {
			return Locale.languageAlpha1ToAlpha3(this.language);
		},

		/**
	  * Return the ISO 3166 region code for this locale.
	  * @return {string|undefined} the region code of this locale
	  */
		getRegion: function getRegion() {
			return this.region;
		},

		/**
	  * Return the region of this locale as an ISO-3166-alpha3 region code
	  * @return {string|undefined} the alpha3 region code of this locale
	  */
		getRegionAlpha3: function getRegionAlpha3() {
			return Locale.regionAlpha2ToAlpha3(this.region);
		},

		/**
	  * Return the ISO 15924 script code for this locale
	  * @return {string|undefined} the script code of this locale
	  */
		getScript: function getScript() {
			return this.script;
		},

		/**
	  * Return the variant code for this locale
	  * @return {string|undefined} the variant code of this locale, if any
	  */
		getVariant: function getVariant() {
			return this.variant;
		},

		/**
	  * Return the whole locale specifier as a string.
	  * @return {string} the locale specifier
	  */
		getSpec: function getSpec() {
			return this.spec;
		},

		/**
	  * Express this locale object as a string. Currently, this simply calls the getSpec
	  * function to represent the locale as its specifier.
	  * 
	  * @return {string} the locale specifier
	  */
		toString: function toString() {
			return this.getSpec();
		},

		/**
	  * Return true if the the other locale is exactly equal to the current one.
	  * @return {boolean} whether or not the other locale is equal to the current one 
	  */
		equals: function equals(other) {
			return this.language === other.language && this.region === other.region && this.script === other.script && this.variant === other.variant;
		},

		/**
	  * Return true if the current locale is the special pseudo locale.
	  * @return {boolean} true if the current locale is the special pseudo locale
	  */
		isPseudo: function isPseudo() {
			return JSUtils.indexOf(ilib.pseudoLocales, this.spec) > -1;
		}
	};

	// static functions
	/**
	 * @private
	 */
	Locale.locales = [
		// !macro localelist
	];

	/**
	 * Return the list of available locales that this iLib file supports.
	 * If this copy of ilib is pre-assembled with locale data, then the 
	 * list locales may be much smaller
	 * than the list of all available locales in the iLib repository. The
	 * assembly tool will automatically fill in the list for an assembled
	 * copy of iLib. If this copy is being used with dynamically loaded 
	 * data, then you 
	 * can load any locale that iLib supports. You can form a locale with any 
	 * combination of a language and region tags that exist in the locale
	 * data directory. Language tags are in the root of the locale data dir,
	 * and region tags can be found underneath the "und" directory. (The 
	 * region tags are separated into a different dir because the region names 
	 * conflict with language names on file systems that are case-insensitive.) 
	 * If you have culled the locale data directory to limit the size of
	 * your app, then this function should return only those files that actually exist
	 * according to the ilibmanifest.json file in the root of that locale
	 * data dir. Make sure your ilibmanifest.json file is up-to-date with
	 * respect to the list of files that exist in the locale data dir.
	 * 
	 * @param {boolean} sync if false, load the list of available files from disk
	 * asynchronously, otherwise load them synchronously. (Default: true/synchronously)
	 * @param {Function} onLoad a callback function to call if asynchronous
	 * load was requested and the list of files have been loaded.
	 * @return {Array.<string>} this is an array of locale specs for which 
	 * this iLib file has locale data for
	 */
	Locale.getAvailableLocales = function (sync, onLoad) {
		var locales = [];
		if (Locale.locales.length || typeof ilib._load.listAvailableFiles !== 'function') {
			locales = Locale.locales;
			if (onLoad && typeof onLoad === 'function') {
				onLoad(locales);
			}
		} else {
			if (typeof sync === 'undefined') {
				sync = true;
			}
			ilib._load.listAvailableFiles(sync, function (manifest) {
				if (manifest) {
					for (var dir in manifest) {
						var filelist = manifest[dir];
						for (var i = 0; i < filelist.length; i++) {
							if (filelist[i].length > 15 && filelist[i].substr(-15) === "localeinfo.json") {
								locales.push(filelist[i].substring(0, filelist[i].length - 16).replace(/\//g, "-"));
							}
						}
					}
				}
				if (onLoad && typeof onLoad === 'function') {
					onLoad(locales);
				}
			});
		}
		return locales;
	};

	module.exports = Locale;

/***/ },
/* 13 */
/***/ function(module, exports, __webpack_require__) {

	var _curry1 = __webpack_require__(19);
	var _isPlaceholder = __webpack_require__(65);


	/**
	 * Optimized internal two-arity curry function.
	 *
	 * @private
	 * @category Function
	 * @param {Function} fn The function to curry.
	 * @return {Function} The curried function.
	 */
	module.exports = function _curry2(fn) {
	  return function f2(a, b) {
	    switch (arguments.length) {
	      case 0:
	        return f2;
	      case 1:
	        return _isPlaceholder(a) ? f2
	             : _curry1(function(_b) { return fn(a, _b); });
	      default:
	        return _isPlaceholder(a) && _isPlaceholder(b) ? f2
	             : _isPlaceholder(a) ? _curry1(function(_a) { return fn(_a, b); })
	             : _isPlaceholder(b) ? _curry1(function(_b) { return fn(a, _b); })
	             : fn(a, b);
	    }
	  };
	};


/***/ },
/* 14 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
	  return typeof obj === "undefined" ? "undefined" : _typeof2(obj);
	} : function (obj) {
	  return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof2(obj);
	};

	/*
	 * LocaleInfo.js - Encode locale-specific defaults
	 * 
	 * Copyright Â© 2012-2015, JEDLSoft
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 *
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */

	// !depends ilib.js Locale.js Utils.js

	// !data localeinfo

	var ilib = __webpack_require__(2);
	var Utils = __webpack_require__(25);
	var Locale = __webpack_require__(12);

	/**
	 * @class
	 * Create a new locale info instance. Locale info instances give information about
	 * the default settings for a particular locale. These settings may be overridden
	 * by various parts of the code, and should be used as a fall-back setting of last
	 * resort. <p>
	 * 
	 * The optional options object holds extra parameters if they are necessary. The
	 * current list of supported options are:
	 * 
	 * <ul>
	 * <li><i>onLoad</i> - a callback function to call when the locale info object is fully 
	 * loaded. When the onLoad option is given, the localeinfo object will attempt to
	 * load any missing locale data using the ilib loader callback.
	 * When the constructor is done (even if the data is already preassembled), the 
	 * onLoad function is called with the current instance as a parameter, so this
	 * callback can be used with preassembled or dynamic loading or a mix of the two.
	 * 
	 * <li><i>sync</i> - tell whether to load any missing locale data synchronously or 
	 * asynchronously. If this option is given as "false", then the "onLoad"
	 * callback must be given, as the instance returned from this constructor will
	 * not be usable for a while. 
	 *
	 * <li><i>loadParams</i> - an object containing parameters to pass to the 
	 * loader callback function when locale data is missing. The parameters are not
	 * interpretted or modified in any way. They are simply passed along. The object 
	 * may contain any property/value pairs as long as the calling code is in
	 * agreement with the loader callback function as to what those parameters mean.
	 * </ul>
	 * 
	 * If this copy of ilib is pre-assembled and all the data is already available, 
	 * or if the data was already previously loaded, then this constructor will call
	 * the onLoad callback immediately when the initialization is done. 
	 * If the onLoad option is not given, this class will only attempt to load any
	 * missing locale data synchronously.
	 * 
	 * 
	 * @constructor
	 * @see {ilib.setLoaderCallback} for information about registering a loader callback
	 * function
	 * @param {Locale|string=} locale the locale for which the info is sought, or undefined for
	 * @param {Object=} options the locale for which the info is sought, or undefined for
	 * the current locale
	 */
	var LocaleInfo = function LocaleInfo(locale, options) {
	  var sync = true,
	      loadParams = undefined;

	  /* these are all the defaults. Essentially, en-US */
	  /**
	    @private 
	    @type {{
	  	scripts:Array.<string>,
	  	timezone:string,
	  	units:string,
	  	calendar:string,
	  	clock:string,
	  	currency:string,
	  	firstDayOfWeek:number,
	  	weekendStart:number,
	  	weekendEnd:number,
	  	meridiems:string,
	  	unitfmt: {long:string,short:string},
	  	numfmt:Object.<{
	  		currencyFormats:Object.<{common:string,commonNegative:string,iso:string,isoNegative:string}>,
	  		script:string,
	  		decimalChar:string,
	  		groupChar:string,
	  		prigroupSize:number,
	  		secgroupSize:number,
	  		negativenumFmt:string,
	  		pctFmt:string,
	  		negativepctFmt:string,
	  		pctChar:string,
	  		roundingMode:string,
	  		exponential:string,
	  		digits:string
	  	}>
	    }}
	  */
	  this.info = LocaleInfo.defaultInfo;

	  switch (typeof locale === "undefined" ? "undefined" : _typeof(locale)) {
	    case "string":
	      this.locale = new Locale(locale);
	      break;
	    default:
	    case "undefined":
	      this.locale = new Locale();
	      break;
	    case "object":
	      this.locale = locale;
	      break;
	  }

	  if (options) {
	    if (typeof options.sync !== 'undefined') {
	      sync = options.sync == true;
	    }

	    if (typeof options.loadParams !== 'undefined') {
	      loadParams = options.loadParams;
	    }
	  }

	  if (!LocaleInfo.cache) {
	    LocaleInfo.cache = {};
	  }

	  Utils.loadData({
	    object: LocaleInfo,
	    locale: this.locale,
	    name: "localeinfo.json",
	    sync: sync,
	    loadParams: loadParams,
	    callback: ilib.bind(this, function (info) {
	      if (!info) {
	        info = LocaleInfo.defaultInfo;
	        var spec = this.locale.getSpec().replace(/-/g, "_");
	        LocaleInfo.cache[spec] = info;
	      }
	      this.info = info;
	      if (options && typeof options.onLoad === 'function') {
	        options.onLoad(this);
	      }
	    })
	  });
	};

	LocaleInfo.defaultInfo = /** @type {{
	                         scripts:Array.<string>,
	                         timezone:string,
	                         units:string,
	                         calendar:string,
	                         clock:string,
	                         currency:string,
	                         firstDayOfWeek:number,
	                         weekendStart:number,
	                         weekendEnd:number,
	                         meridiems:string,
	                         unitfmt: {long:string,short:string},
	                         numfmt:Object.<{
	                         currencyFormats:Object.<{
	                         common:string,
	                         commonNegative:string,
	                         iso:string,
	                         isoNegative:string
	                         }>,
	                         script:string,
	                         decimalChar:string,
	                         groupChar:string,
	                         prigroupSize:number,
	                         secgroupSize:number,
	                         negativenumFmt:string,
	                         pctFmt:string,
	                         negativepctFmt:string,
	                         pctChar:string,
	                         roundingMode:string,
	                         exponential:string,
	                         digits:string
	                         }>
	                         }}*/ilib.data.localeinfo;
	LocaleInfo.defaultInfo = LocaleInfo.defaultInfo || {
	  "scripts": ["Latn"],
	  "timezone": "Etc/UTC",
	  "units": "metric",
	  "calendar": "gregorian",
	  "clock": "24",
	  "currency": "USD",
	  "firstDayOfWeek": 1,
	  "meridiems": "gregorian",
	  "numfmt": {
	    "currencyFormats": {
	      "common": "{s}{n}",
	      "commonNegative": "{s}-{n}",
	      "iso": "{s}{n}",
	      "isoNegative": "{s}-{n}"
	    },
	    "script": "Latn",
	    "decimalChar": ",",
	    "groupChar": ".",
	    "prigroupSize": 3,
	    "secgroupSize": 0,
	    "pctFmt": "{n}%",
	    "negativepctFmt": "-{n}%",
	    "pctChar": "%",
	    "roundingMode": "halfdown",
	    "exponential": "e",
	    "digits": ""
	  }
	};

	LocaleInfo.prototype = {
	  /**
	   * Return the name of the locale's language in English.
	   * @returns {string} the name of the locale's language in English
	   */
	  getLanguageName: function getLanguageName() {
	    return this.info["language.name"];
	  },

	  /**
	   * Return the name of the locale's region in English. If the locale
	   * has no region, this returns undefined.
	   * 
	   * @returns {string|undefined} the name of the locale's region in English
	   */
	  getRegionName: function getRegionName() {
	    return this.info["region.name"];
	  },

	  /**
	  * Return whether this locale commonly uses the 12- or the 24-hour clock.
	  *  
	  * @returns {string} "12" if the locale commonly uses a 12-hour clock, or "24"
	  * if the locale commonly uses a 24-hour clock. 
	  */
	  getClock: function getClock() {
	    return this.info.clock;
	  },

	  /**
	   * Return the locale that this info object was created with.
	   * @returns {Locale} The locale spec of the locale used to construct this info instance
	   */
	  getLocale: function getLocale() {
	    return this.locale;
	  },

	  /**
	   * Return the name of the measuring system that is commonly used in the given locale.
	   * Valid values are "uscustomary", "imperial", and "metric".
	   * 
	   * @returns {string} The name of the measuring system commonly used in the locale
	   */
	  getUnits: function getUnits() {
	    return this.info.units;
	  },

	  getUnitFormat: function getUnitFormat() {
	    return this.info.unitfmt;
	  },

	  /**
	   * Return the name of the calendar that is commonly used in the given locale.
	   * 
	   * @returns {string} The name of the calendar commonly used in the locale
	   */
	  getCalendar: function getCalendar() {
	    return this.info.calendar;
	  },

	  /**
	   * Return the day of week that starts weeks in the current locale. Days are still
	   * numbered the standard way with 0 for Sunday through 6 for Saturday, but calendars 
	   * should be displayed and weeks calculated with the day of week returned from this 
	   * function as the first day of the week.
	   * 
	   * @returns {number} the day of the week that starts weeks in the current locale.
	   */
	  getFirstDayOfWeek: function getFirstDayOfWeek() {
	    return this.info.firstDayOfWeek;
	  },

	  /**
	   * Return the day of week that starts weekend in the current locale. Days are still
	   * numbered the standard way with 0 for Sunday through 6 for Saturday.
	   * 
	   * @returns {number} the day of the week that starts weeks in the current locale.
	   */
	  getWeekEndStart: function getWeekEndStart() {
	    return this.info.weekendStart;
	  },

	  /**
	   * Return the day of week that starts weekend in the current locale. Days are still
	   * numbered the standard way with 0 for Sunday through 6 for Saturday.
	   * 
	   * @returns {number} the day of the week that starts weeks in the current locale.
	   */
	  getWeekEndEnd: function getWeekEndEnd() {
	    return this.info.weekendEnd;
	  },

	  /**
	   * Return the default time zone for this locale. Many locales span across multiple
	   * time zones. In this case, the time zone with the largest population is chosen
	   * to represent the locale. This is obviously not that accurate, but then again,
	   * this method's return value should only be used as a default anyways.
	   * @returns {string} the default time zone for this locale.
	   */
	  getTimeZone: function getTimeZone() {
	    return this.info.timezone;
	  },

	  /**
	   * Return the decimal separator for formatted numbers in this locale.
	   * @returns {string} the decimal separator char
	   */
	  getDecimalSeparator: function getDecimalSeparator() {
	    return this.info.numfmt.decimalChar;
	  },

	  /**
	   * Return the decimal separator for formatted numbers in this locale for native script.
	   * @returns {string} the decimal separator char
	   */
	  getNativeDecimalSeparator: function getNativeDecimalSeparator() {
	    return this.info.native_numfmt && this.info.native_numfmt.decimalChar || this.info.numfmt.decimalChar;
	  },

	  /**
	   * Return the separator character used to separate groups of digits on the 
	   * integer side of the decimal character.
	   * @returns {string} the grouping separator char
	   */
	  getGroupingSeparator: function getGroupingSeparator() {
	    return this.info.numfmt.groupChar;
	  },

	  /**
	   * Return the separator character used to separate groups of digits on the 
	   * integer side of the decimal character for the native script if present other than the default script.
	   * @returns {string} the grouping separator char
	   */
	  getNativeGroupingSeparator: function getNativeGroupingSeparator() {
	    return this.info.native_numfmt && this.info.native_numfmt.groupChar || this.info.numfmt.groupChar;
	  },

	  /**
	   * Return the minimum number of digits grouped together on the integer side 
	   * for the first (primary) group. 
	   * In western European cultures, groupings are in 1000s, so the number of digits
	   * is 3. 
	   * @returns {number} the number of digits in a primary grouping, or 0 for no grouping
	   */
	  getPrimaryGroupingDigits: function getPrimaryGroupingDigits() {
	    return typeof this.info.numfmt.prigroupSize !== 'undefined' && this.info.numfmt.prigroupSize || 0;
	  },

	  /**
	   * Return the minimum number of digits grouped together on the integer side
	   * for the second or more (secondary) group.<p>
	   *   
	   * In western European cultures, all groupings are by 1000s, so the secondary
	   * size should be 0 because there is no secondary size. In general, if this 
	   * method returns 0, then all groupings are of the primary size.<p> 
	   * 
	   * For some other cultures, the first grouping (primary)
	   * is 3 and any subsequent groupings (secondary) are two. So, 100000 would be
	   * written as: "1,00,000".
	   * 
	   * @returns {number} the number of digits in a secondary grouping, or 0 for no 
	   * secondary grouping. 
	   */
	  getSecondaryGroupingDigits: function getSecondaryGroupingDigits() {
	    return this.info.numfmt.secgroupSize || 0;
	  },

	  /**
	   * Return the format template used to format percentages in this locale.
	   * @returns {string} the format template for formatting percentages
	   */
	  getPercentageFormat: function getPercentageFormat() {
	    return this.info.numfmt.pctFmt;
	  },

	  /**
	   * Return the format template used to format percentages in this locale
	   * with negative amounts.
	   * @returns {string} the format template for formatting percentages
	   */
	  getNegativePercentageFormat: function getNegativePercentageFormat() {
	    return this.info.numfmt.negativepctFmt;
	  },

	  /**
	   * Return the symbol used for percentages in this locale.
	   * @returns {string} the symbol used for percentages in this locale
	   */
	  getPercentageSymbol: function getPercentageSymbol() {
	    return this.info.numfmt.pctChar || "%";
	  },

	  /**
	   * Return the symbol used for exponential in this locale.
	   * @returns {string} the symbol used for exponential in this locale
	   */
	  getExponential: function getExponential() {
	    return this.info.numfmt.exponential;
	  },

	  /**
	   * Return the symbol used for exponential in this locale for native script.
	   * @returns {string} the symbol used for exponential in this locale for native script
	   */
	  getNativeExponential: function getNativeExponential() {
	    return this.info.native_numfmt && this.info.native_numfmt.exponential || this.info.numfmt.exponential;
	  },

	  /**
	   * Return the symbol used for percentages in this locale for native script.
	   * @returns {string} the symbol used for percentages in this locale for native script
	   */
	  getNativePercentageSymbol: function getNativePercentageSymbol() {
	    return this.info.native_numfmt && this.info.native_numfmt.pctChar || this.info.numfmt.pctChar || "%";
	  },
	  /**
	   * Return the format template used to format negative numbers in this locale.
	   * @returns {string} the format template for formatting negative numbers
	   */
	  getNegativeNumberFormat: function getNegativeNumberFormat() {
	    return this.info.numfmt.negativenumFmt;
	  },

	  /**
	   * Return an object containing the format templates for formatting currencies
	   * in this locale. The object has a number of properties in it that each are
	   * a particular style of format. Normally, this contains a "common" and an "iso"
	   * style, but may contain others in the future.
	   * @returns {Object} an object containing the format templates for currencies
	   */
	  getCurrencyFormats: function getCurrencyFormats() {
	    return this.info.numfmt.currencyFormats;
	  },

	  /**
	   * Return the currency that is legal in the locale, or which is most commonly 
	   * used in regular commerce.
	   * @returns {string} the ISO 4217 code for the currency of this locale
	   */
	  getCurrency: function getCurrency() {
	    return this.info.currency;
	  },

	  /**
	   * Return a string that describes the style of digits used by this locale.
	   * Possible return values are:
	   * <ul>
	   * <li><i>western</i> - uses the regular western 10-based digits 0 through 9
	   * <li><i>optional</i> - native 10-based digits exist, but in modern usage,
	   * this locale most often uses western digits
	   * <li><i>native</i> - native 10-based native digits exist and are used
	   * regularly by this locale
	   * <li><i>custom</i> - uses native digits by default that are not 10-based
	   * </ul>
	   * @returns {string} string that describes the style of digits used in this locale
	   */
	  getDigitsStyle: function getDigitsStyle() {
	    if (this.info.numfmt.useNative) {
	      return "native";
	    }
	    if (typeof this.info.native_numfmt !== 'undefined') {
	      return "optional";
	    }
	    return "western";
	  },

	  /**
	   * Return the digits of the default script if they are defined.
	   * If not defined, the default should be the regular "Arabic numerals"
	   * used in the Latin script. (0-9)
	   * @returns {string|undefined} the digits used in the default script 
	   */
	  getDigits: function getDigits() {
	    return this.info.numfmt.digits;
	  },

	  /**
	   * Return the digits of the native script if they are defined. 
	   * @returns {string|undefined} the digits used in the default script 
	   */
	  getNativeDigits: function getNativeDigits() {
	    return this.info.numfmt.useNative && this.info.numfmt.digits || this.info.native_numfmt && this.info.native_numfmt.digits;
	  },

	  /**
	   * If this locale typically uses a different type of rounding for numeric
	   * formatting other than halfdown, especially for currency, then it can be 
	   * specified in the localeinfo. If the locale uses the default, then this 
	   * method returns undefined. The locale's rounding method overrides the 
	   * rounding method for the currency itself, which can sometimes shared 
	   * between various locales so it is less specific.
	   * @returns {string} the name of the rounding mode typically used in this
	   * locale, or "halfdown" if the locale does not override the default
	   */
	  getRoundingMode: function getRoundingMode() {
	    return this.info.numfmt.roundingMode;
	  },

	  /**
	   * Return the default script used to write text in the language of this 
	   * locale. Text for most languages is written in only one script, but there
	   * are some languages where the text can be written in a number of scripts,
	   * depending on a variety of things such as the region, ethnicity, religion, 
	   * etc. of the author. This method returns the default script for the
	   * locale, in which the language is most commonly written.<p> 
	   * 
	   * The script is returned as an ISO 15924 4-letter code.
	   * 
	   * @returns {string} the ISO 15924 code for the default script used to write
	   * text in this locale 
	   */
	  getDefaultScript: function getDefaultScript() {
	    return this.info.scripts ? this.info.scripts[0] : "Latn";
	  },

	  /**
	   * Return the script used for the current locale. If the current locale
	   * explicitly defines a script, then this script is returned. If not, then 
	   * the default script for the locale is returned.
	   * 
	   * @see LocaleInfo.getDefaultScript
	   * @returns {string} the ISO 15924 code for the script used to write
	   * text in this locale
	   */
	  getScript: function getScript() {
	    return this.locale.getScript() || this.getDefaultScript();
	  },

	  /**
	   * Return an array of script codes which are used to write text in the current
	   * language. Text for most languages is written in only one script, but there
	   * are some languages where the text can be written in a number of scripts,
	   * depending on a variety of things such as the region, ethnicity, religion, 
	   * etc. of the author. This method returns an array of script codes in which 
	   * the language is commonly written.
	   * 
	   * @returns {Array.<string>} an array of ISO 15924 codes for the scripts used 
	   * to write text in this language
	   */
	  getAllScripts: function getAllScripts() {
	    return this.info.scripts || ["Latn"];
	  },

	  /**
	   * Return the default style of meridiems used in this locale. Meridiems are 
	   * times of day like AM/PM. In a few locales with some calendars, for example
	   * Amharic/Ethiopia using the Ethiopic calendar, the times of day may be
	   * split into different segments than simple AM/PM as in the Gregorian 
	   * calendar. Only a few locales are like that. For most locales, formatting 
	   * a Gregorian date will use the regular Gregorian AM/PM meridiems.
	   *  
	   * @returns {string} the default meridiems style used in this locale. Possible
	   * values are "gregorian", "chinese", and "ethiopic"
	   */
	  getMeridiemsStyle: function getMeridiemsStyle() {
	    return this.info.meridiems || "gregorian";
	  }
	};

	module.exports = LocaleInfo;

/***/ },
/* 15 */
/***/ function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);

	/**
	 * Simple, lightweight module assisting with the detection and context of
	 * Worker. Helps avoid circular dependencies and allows code to reason about
	 * whether or not they are in a Worker, even if they never include the main
	 * `ReactWorker` dependency.
	 */
	var ExecutionEnvironment = {

	  canUseDOM: canUseDOM,

	  canUseWorkers: typeof Worker !== 'undefined',

	  canUseEventListeners: canUseDOM && !!(window.addEventListener || window.attachEvent),

	  canUseViewport: canUseDOM && !!window.screen,

	  isInWorker: !canUseDOM // For now, this is true - might change in the future.

	};

	module.exports = ExecutionEnvironment;

/***/ },
/* 16 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.stopImmediate = exports.stop = exports.preventDefault = exports.log = exports.handle = exports.forProp = exports.forKeyCode = exports.forKey = exports.forEventProp = exports.forward = exports.callOnEvent = undefined;

	var _allPass = __webpack_require__(311);

	var _allPass2 = _interopRequireDefault(_allPass);

	var _always = __webpack_require__(86);

	var _always2 = _interopRequireDefault(_always);

	var _compose = __webpack_require__(62);

	var _compose2 = _interopRequireDefault(_compose);

	var _curry = __webpack_require__(47);

	var _curry2 = _interopRequireDefault(_curry);

	var _identity = __webpack_require__(151);

	var _identity2 = _interopRequireDefault(_identity);

	var _ifElse = __webpack_require__(316);

	var _ifElse2 = _interopRequireDefault(_ifElse);

	var _is = __webpack_require__(157);

	var _is2 = _interopRequireDefault(_is);

	var _map = __webpack_require__(90);

	var _map2 = _interopRequireDefault(_map);

	var _T = __webpack_require__(310);

	var _T2 = _interopRequireDefault(_T);

	var _keymap = __webpack_require__(42);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	// Ensures that everything passed to `allPass` is a function so that if null values are passed they
	// do not impede the event flow
	/**
	 * `core/handle` provides a set of utilities to support handling events for `kind()`s and
	 * `React.Component`s. The default export, `handle()`, generates an event handler function from a
	 * set of input functions. The input functions either process or filter the event. If an input
	 * function returns `true`, `handle()` will continue processing the event by calling the next input
	 * function in the chain. If it returns `false` (or any falsey value like `null` or `undefined`),
	 * the event handling chain stops at that input function.
	 *
	 * ```
	 * import {forKey, forward, handle, preventDefault} from '@enact/core/handle';
	 *
	 * // logEnter will contain a function that accepts an event, a props object, and a context object
	 * const logEnter = handle(
	 *   forward('onKeyDown'),  // forwards the event to the function passed in the onKeyDown prop
	 *   forKey('enter'),       // if the event.keyCode maps to the enter key, allows event processing to continue
	 *   preventDefault,        // calls event.preventDefault() to prevent the `keypress` event
	 *   (ev, props) => {       // custom event handler -- in this case, logging some text
	 *     // since it doesn't return `true`, no further input functions would be called after this one
	 *     console.log('The Enter key was pressed down');
	 *   }
	 * );
	 * ```
	 *
	 * `handle()` can also be bound to a component instance which allows it to access the instance
	 * `props` and `context`. This allows you to write consistent event handlers for components created
	 * either with `kind()` or ES6 classes without worrying about from where the props are sourced.
	 *
	 * ```
	 * import {forKey, forward, handle, preventDefault} from '@enact/core/handle';
	 * import React from 'react';
	 *
	 * class MyComponent extends React.Component {
	 *   // bind handle() to the instance
	 *   handle = handle.bind(this)
	 *
	 *   // then create handlers using the bound function
	 *   logEnter = this.handle(
	 *     forward('onKeyDown'),  // forwards the event to the function passed in the onKeyDown prop
	 *     forKey('enter'),       // if the event.keyCode maps to the enter key, allows event processing to continue
	 *     preventDefault,        // calls event.preventDefault() to prevent the `keypress` event
	 *     (ev, props) => {       // custom event handler -- in this case, logging some text
	 *       // In the bound version, `props` will contain a reference to this.props
	 *       // since it doesn't return `true`, no further input functions would be called after this one
	 *       console.log('The Enter key was pressed down');
	 *     }
	 *   )
	 *
	 *   render () {
	 *     // ...
	 *   }
	 * }
	 * ```
	 *
	 * @module core/handle
	 */

	var makeSafeHandler = (0, _ifElse2.default)((0, _is2.default)(Function), _identity2.default, (0, _always2.default)(_T2.default));

	// Accepts an array of handlers, sanitizes them, and returns a handler function
	var makeHandler = (0, _compose2.default)(_allPass2.default, (0, _map2.default)(makeSafeHandler));

	/**
	 * Allows generating event handlers by chaining input functions to filter or short-circuit the
	 * handling flow. Any input function that returns a falsey value will stop the chain.
	 *
	 * @method   handle
	 * @memberof core/handle
	 * @param    {...Function}  handlers List of handlers to process the event
	 * @returns  {Function}	    A function that accepts an event which is dispatched to each of the
	 *                          provided handlers.
	 */
	var handle = function handle() {
	  var _this = this;

	  for (var _len = arguments.length, handlers = Array(_len), _key = 0; _key < _len; _key++) {
	    handlers[_key] = arguments[_key];
	  }

	  var h = makeHandler(handlers);
	  h.displayName = 'handle';

	  return function (ev, props, context) {
	    // if handle() was bound to a class, use its props and context. otherwise, we accept
	    // incoming props/context as would be provided by computed/handlers from kind()
	    if (_this) {
	      props = _this.props;
	      context = _this.context;
	    }

	    return h(ev, props, context);
	  };
	};

	/**
	 * Calls a named function on the event and returns `true`
	 *
	 * ```
	 * import {callOnEvent, handle} from '@enact/core/handle';
	 *
	 * const callsCustomMethod = handle(
	 *	callOnEvent('customMethod'),
	 *	(ev) => console.log('ev.customMethod() was called')
	 * );
	 * ```
	 *
	 * @method   callOnEvent
	 * @memberof core/handle
	 * @param    {String}     methodName  Name of the method to call on the event.
	 * @param    {Object}     ev          Event
	 * @returns  {Boolean}                Always returns `true`
	 * @private
	 */
	var callOnEvent = handle.callOnEvent = (0, _curry2.default)(function (methodName, ev) {
	  if (ev[methodName]) {
	    ev[methodName]();
	  } else if (ev.nativeEvent && ev.nativeEvent[methodName]) {
	    // In some cases (notably stopImmediatePropagation), React doesn't include a desired method
	    // on its proxy so we check the native event as well.
	    ev.nativeEvent[methodName]();
	  }
	  return true;
	});

	/**
	 * Allows handling to continue if the value of `prop` on the event strictly equals `value`
	 *
	 * ```
	 * import {forEventProp, handle} from '@enact/core/handle';
	 *
	 * const logWhenXEqualsZero = handle(
	 *   forEventProp('x', 0),
	 *   (ev) => console.log('ev.x was equal to zero')
	 * );
	 * ```
	 *
	 * @method   forEventProp
	 * @memberof core/handle
	 * @param    {String}	   prop   Name of property on event
	 * @param    {*}           value  Value of property
	 * @param    {Object}      ev     Event
	 * @returns  {Boolean}            Returns `true` if `prop` on `event` strictly equals `value`
	 */
	var forEventProp = handle.forEventProp = (0, _curry2.default)(function (prop, value, ev) {
	  return ev[prop] === value;
	});

	/**
	 * Forwards the event to a function at `name` on `props`. If the specified prop is `undefined` or
	 * is not a function, it is ignored. The return value of the forwarded function is ignored and
	 * `true` is always returned instead.
	 *
	 * ```
	 * import {forward, handle} from '@enact/core/handle';
	 *
	 * const forwardAndLog = handle(
	 *   forward('onClick'),
	 *   (ev) => console.log('event forwarded to onClick from props')
	 * );
	 * ```
	 *
	 * @method   forward
	 * @memberof core/handle
	 * @param    {String}    name   Name of method on the `props`
	 * @param    {Object}    ev     Event
	 * @param    {Object}    props  Props object
	 * @returns  {Boolean}          Always returns `true`
	 */
	var forward = handle.forward = (0, _curry2.default)(function (name, ev, props) {
	  var fn = props && props[name];
	  if (typeof fn === 'function') {
	    fn(ev);
	  }

	  return true;
	});

	/**
	 * Calls `event.preventDefault()` and returns `true`.
	 *
	 * ```
	 * import {handle, preventDefault} from '@enact/core/handle';
	 *
	 * const preventAndLog = handle(
	 *   preventDefault,
	 *   (ev) => console.log('preventDefault called')
	 * );
	 * ```
	 *
	 * @method   preventDefault
	 * @memberof core/handle
	 * @param    {Object}        ev  Event
	 * @returns  {Boolean}           Always returns `true`
	 */
	var preventDefault = handle.preventDefault = callOnEvent('preventDefault');

	/**
	 * Calls `event.stopPropagation()` and returns `true`
	 *
	 * ```
	 * import {handle, stop} from '@enact/core/handle';
	 *
	 * const stopAndLog = handle(
	 *   stop,
	 *   (ev) => console.log('stopPropagation called')
	 * );
	 * ```
	 *
	 * @method   stop
	 * @memberof core/handle
	 * @param    {Object}   ev  Event
	 * @returns  {Boolean}      Always returns `true`
	 */
	var stop = handle.stop = callOnEvent('stopPropagation');

	/**
	 * Calls `event.stopImmediatePropagation()` and returns `true`
	 *
	 * ```
	 * import {handle, stopImmediate} from '@enact/core/handle';
	 *
	 * const stopImmediateAndLog = handle(
	 *   stopImmediate,
	 *   (ev) => console.log('stopImmediatePropagation called')
	 * );
	 * ```
	 *
	 * @method   stopImmediate
	 * @memberof core/handle
	 * @param    {Object}       ev  Event
	 * @returns  {Boolean}          Always returns `true`
	 */
	var stopImmediate = handle.stopImmediate = callOnEvent('stopImmediatePropagation');

	/**
	 * Allows event handling to continue if `event.keyCode === value`.
	 *
	 * ```
	 * import {forKeyCode, handle} from '@enact/core/handle';
	 *
	 * const logForEscapeKey = handle(
	 *   forKeyCode(27),
	 *   (ev) => console.log('Escape key pressed down')
	 * );
	 * ```
	 *
	 * @method   forKeyCode
	 * @memberof core/handle
	 * @param    {Number}    value  `keyCode` to test
	 * @param    {Object}    ev     Event
	 * @returns  {Boolean}          Returns `true` if `event.keyCode` strictly equals `value`
	 */
	var forKeyCode = handle.forKeyCode = forEventProp('keyCode');

	/**
	 * Allows handling to continue if the event's keyCode is mapped to `name` within
	 * {@link core/keymap}.
	 *
	 * ```
	 * import {forKey, handle} from '@enact/core/handle';
	 *
	 * const logForEnterKey = handle(
	 *   forKey('enter'),
	 *   (ev) => console.log('Enter key pressed down')
	 * );
	 * ```
	 *
	 * @method   forKey
	 * @memberof core/handle
	 * @param    {String}    name   Name from {@link core/keymap}
	 * @param    {Object}    ev     Event
	 * @returns  {Boolean}          Returns `true` if `event.keyCode` is mapped to `name`
	 * @see      core/keymap
	 */
	var forKey = handle.forKey = (0, _curry2.default)(function (name, ev) {
	  return (0, _keymap.is)(name, ev.keyCode);
	});

	/**
	 * Allows handling to continue if the value of `prop` on the props strictly equals `value`.
	 *
	 * ```
	 * import {forProp, handle} from '@enact/core/handle';
	 *
	 * const logWhenChecked = handle(
	 *   forProp('checked', true),
	 *   (ev) => console.log('checked prop is true')
	 * );
	 * ```
	 *
	 * @method   forProp
	 * @memberof core/handle
	 * @param    {String}    prop   Name of property on props object
	 * @param    {*}         value  Value of property
	 * @param    {Object}    ev     Event
	 * @param    {Object}    props  Props object
	 * @returns  {Boolean}          Event handler
	 */
	var forProp = handle.forProp = (0, _curry2.default)(function (prop, value, ev, props) {
	  return props[prop] === value;
	});

	/**
	 * Logs the event, props, and context optionally preceded by a custom message. Will only log in
	 * development mode.
	 *
	 * ```
	 * import {forProp, handle, log} from '@enact/core/handle';
	 *
	 * const logWhenChecked = handle(
	 *   forProp('checked', true),
	 *   log('checked props is true')
	 * );
	 * ```
	 *
	 * @method   forProp
	 * @memberof core/handle
	 * @param    {String}    prop   Name of property on props object
	 * @param    {*}         value  Value of property
	 * @param    {Object}    ev     Event
	 * @param    {Object}    props  Props object
	 * @returns  {Boolean}          Event handler
	 */
	var log = handle.log = (0, _curry2.default)(function (message, ev) {
	  for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
	    args[_key2 - 2] = arguments[_key2];
	  }

	  if (false) {
	    var _console;

	    // eslint-disable-next-line no-console
	    (_console = console).log.apply(_console, [message, ev].concat(args));
	  }

	  return true;
	});

	exports.default = handle;
	exports.callOnEvent = callOnEvent;
	exports.forward = forward;
	exports.forEventProp = forEventProp;
	exports.forKey = forKey;
	exports.forKeyCode = forKeyCode;
	exports.forProp = forProp;
	exports.handle = handle;
	exports.log = log;
	exports.preventDefault = preventDefault;
	exports.stop = stop;
	exports.stopImmediate = stopImmediate;

/***/ },
/* 17 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
	  return typeof obj === "undefined" ? "undefined" : _typeof2(obj);
	} : function (obj) {
	  return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof2(obj);
	};

	/*
	 * ratadie.js - Represent the RD date number in the calendar
	 * 
	 * Copyright Â© 2014-2015, JEDLSoft
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 *
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */

	/* !depends 
	ilib.js
	JulianDay.js
	MathUtils.js
	JSUtils.js
	*/

	var ilib = __webpack_require__(2);
	var MathUtils = __webpack_require__(6);
	var JSUtils = __webpack_require__(23);
	var JulianDay = __webpack_require__(115);

	/**
	 * @class
	 * Construct a new RD date number object. The constructor parameters can 
	 * contain any of the following properties:
	 * 
	 * <ul>
	 * <li><i>unixtime<i> - sets the time of this instance according to the given 
	 * unix time. Unix time is the number of milliseconds since midnight on Jan 1, 1970.
	 * 
	 * <li><i>julianday</i> - sets the time of this instance according to the given
	 * Julian Day instance or the Julian Day given as a float
	 * 
	 * <li><i>cycle</i> - any integer giving the number of 60-year cycle in which the date is located.
	 * If the cycle is not given but the year is, it is assumed that the year parameter is a fictitious 
	 * linear count of years since the beginning of the epoch, much like other calendars. This linear
	 * count is never used. If both the cycle and year are given, the year is wrapped to the range 0 
	 * to 60 and treated as if it were a year in the regular 60-year cycle.
	 * 
	 * <li><i>year</i> - any integer, including 0
	 * 
	 * <li><i>month</i> - 1 to 12, where 1 means January, 2 means February, etc.
	 * 
	 * <li><i>day</i> - 1 to 31
	 * 
	 * <li><i>hour</i> - 0 to 23. A formatter is used to display 12 hour clocks, but this representation 
	 * is always done with an unambiguous 24 hour representation
	 * 
	 * <li><i>minute</i> - 0 to 59
	 * 
	 * <li><i>second</i> - 0 to 59
	 * 
	 * <li><i>millisecond</i> - 0 to 999
	 * 
	 * <li><i>parts</i> - 0 to 1079. Specify the halaqim parts of an hour. Either specify 
	 * the parts or specify the minutes, seconds, and milliseconds, but not both. This is only used
	 * in the Hebrew calendar. 
	 * 
	 * <li><i>minute</i> - 0 to 59
	 * 
	 * <li><i>date</i> - use the given intrinsic Javascript date to initialize this one.
	 * </ul>
	 *
	 * If the constructor is called with another date instance instead of
	 * a parameter block, the other instance acts as a parameter block and its
	 * settings are copied into the current instance.<p>
	 * 
	 * If the constructor is called with no arguments at all or if none of the 
	 * properties listed above are present, then the RD is calculate based on 
	 * the current date at the time of instantiation. <p>
	 * 
	 * If any of the properties from <i>year</i> through <i>millisecond</i> are not
	 * specified in the params, it is assumed that they have the smallest possible
	 * value in the range for the property (zero or one).<p>
	 * 
	 * 
	 * @private
	 * @constructor
	 * @param {Object=} params parameters that govern the settings and behaviour of this RD date
	 */
	var RataDie = function RataDie(params) {
	  if (params) {
	    if (typeof params.date !== 'undefined') {
	      // accept JS Date classes or strings
	      var date = params.date;
	      if (!JSUtils.isDate(date)) {
	        date = new Date(date); // maybe a string initializer?
	      }
	      this._setTime(date.getTime());
	    } else if (typeof params.unixtime !== 'undefined') {
	      this._setTime(parseInt(params.unixtime, 10));
	    } else if (typeof params.julianday !== 'undefined') {
	      // JD time is defined to be UTC
	      this._setJulianDay(parseFloat(params.julianday));
	    } else if (params.year || params.month || params.day || params.hour || params.minute || params.second || params.millisecond || params.parts || params.cycle) {
	      this._setDateComponents(params);
	    } else if (typeof params.rd !== 'undefined') {
	      this.rd = _typeof(params.rd) === 'object' && params.rd instanceof RataDie ? params.rd.rd : params.rd;
	    }
	  }

	  /**
	   * @type {number} the Rata Die number of this date for this calendar type
	   */
	  if (typeof this.rd === 'undefined') {
	    var now = new Date();
	    this._setTime(now.getTime());
	  }
	};

	/**
	 * @private
	 * @const
	 * @type {number}
	 */
	RataDie.gregorianEpoch = 1721424.5;

	RataDie.prototype = {
	  /**
	   * @protected
	   * @const
	   * @type {number}
	   * the difference between a zero Julian day and the zero Gregorian date. 
	   */
	  epoch: RataDie.gregorianEpoch,

	  /**
	   * Set the RD of this instance according to the given unix time. Unix time is
	   * the number of milliseconds since midnight on Jan 1, 1970.
	   *
	   * @protected
	   * @param {number} millis the unix time to set this date to in milliseconds 
	   */
	  _setTime: function _setTime(millis) {
	    // 2440587.5 is the julian day of midnight Jan 1, 1970, UTC (Gregorian)
	    this._setJulianDay(2440587.5 + millis / 86400000);
	  },

	  /**
	   * Set the date of this instance using a Julian Day.
	   * @protected
	   * @param {number} date the Julian Day to use to set this date
	   */
	  _setJulianDay: function _setJulianDay(date) {
	    var jd = typeof date === 'number' ? new JulianDay(date) : date;
	    // round to the nearest millisecond
	    this.rd = MathUtils.halfup((jd.getDate() - this.epoch) * 86400000) / 86400000;
	  },

	  /**
	   * Return the rd number of the particular day of the week on or before the 
	   * given rd. eg. The Sunday on or before the given rd.
	   * @protected
	   * @param {number} rd the rata die date of the reference date
	   * @param {number} dayOfWeek the day of the week that is being sought relative 
	   * to the current date
	   * @return {number} the rd of the day of the week
	   */
	  _onOrBefore: function _onOrBefore(rd, dayOfWeek) {
	    return rd - MathUtils.mod(Math.floor(rd) - dayOfWeek - 2, 7);
	  },

	  /**
	   * Return the rd number of the particular day of the week on or before the current rd.
	   * eg. The Sunday on or before the current rd. If the offset is given, the calculation
	   * happens in wall time instead of UTC. UTC time may be a day before or day behind 
	   * wall time, so it it would give the wrong day of the week if this calculation was
	   * done in UTC time when the caller really wanted wall time. Even though the calculation
	   * may be done in wall time, the return value is nonetheless always given in UTC.
	   * @param {number} dayOfWeek the day of the week that is being sought relative 
	   * to the current date
	   * @param {number=} offset RD offset for the time zone. Zero is assumed if this param is
	   * not given
	   * @return {number} the rd of the day of the week
	   */
	  onOrBefore: function onOrBefore(dayOfWeek, offset) {
	    offset = offset || 0;
	    return this._onOrBefore(this.rd + offset, dayOfWeek) - offset;
	  },

	  /**
	   * Return the rd number of the particular day of the week on or before the current rd.
	   * eg. The Sunday on or before the current rd. If the offset is given, the calculation
	   * happens in wall time instead of UTC. UTC time may be a day before or day behind 
	   * wall time, so it it would give the wrong day of the week if this calculation was
	   * done in UTC time when the caller really wanted wall time. Even though the calculation
	   * may be done in wall time, the return value is nonetheless always given in UTC.
	   * @param {number} dayOfWeek the day of the week that is being sought relative 
	   * to the reference date
	   * @param {number=} offset RD offset for the time zone. Zero is assumed if this param is
	   * not given
	   * @return {number} the day of the week
	   */
	  onOrAfter: function onOrAfter(dayOfWeek, offset) {
	    offset = offset || 0;
	    return this._onOrBefore(this.rd + 6 + offset, dayOfWeek) - offset;
	  },

	  /**
	   * Return the rd number of the particular day of the week before the current rd.
	   * eg. The Sunday before the current rd. If the offset is given, the calculation
	   * happens in wall time instead of UTC. UTC time may be a day before or day behind 
	   * wall time, so it it would give the wrong day of the week if this calculation was
	   * done in UTC time when the caller really wanted wall time. Even though the calculation
	   * may be done in wall time, the return value is nonetheless always given in UTC.
	   * @param {number} dayOfWeek the day of the week that is being sought relative 
	   * to the reference date
	   * @param {number=} offset RD offset for the time zone. Zero is assumed if this param is
	   * not given
	   * @return {number} the day of the week
	   */
	  before: function before(dayOfWeek, offset) {
	    offset = offset || 0;
	    return this._onOrBefore(this.rd - 1 + offset, dayOfWeek) - offset;
	  },

	  /**
	   * Return the rd number of the particular day of the week after the current rd.
	   * eg. The Sunday after the current rd. If the offset is given, the calculation
	   * happens in wall time instead of UTC. UTC time may be a day before or day behind 
	   * wall time, so it it would give the wrong day of the week if this calculation was
	   * done in UTC time when the caller really wanted wall time. Even though the calculation
	   * may be done in wall time, the return value is nonetheless always given in UTC.
	   * @param {number} dayOfWeek the day of the week that is being sought relative 
	   * to the reference date
	   * @param {number=} offset RD offset for the time zone. Zero is assumed if this param is
	   * not given
	   * @return {number} the day of the week
	   */
	  after: function after(dayOfWeek, offset) {
	    offset = offset || 0;
	    return this._onOrBefore(this.rd + 7 + offset, dayOfWeek) - offset;
	  },

	  /**
	   * Return the unix time equivalent to this Gregorian date instance. Unix time is
	   * the number of milliseconds since midnight on Jan 1, 1970 UTC. This method only
	   * returns a valid number for dates between midnight, Jan 1, 1970 and  
	   * Jan 19, 2038 at 3:14:07am when the unix time runs out. If this instance 
	   * encodes a date outside of that range, this method will return -1.
	   * 
	   * @return {number} a number giving the unix time, or -1 if the date is outside the
	   * valid unix time range
	   */
	  getTime: function getTime() {
	    // earlier than Jan 1, 1970
	    // or later than Jan 19, 2038 at 3:14:07am
	    var jd = this.getJulianDay();
	    if (jd < 2440587.5 || jd > 2465442.634803241) {
	      return -1;
	    }

	    // avoid the rounding errors in the floating point math by only using
	    // the whole days from the rd, and then calculating the milliseconds directly
	    return Math.round((jd - 2440587.5) * 86400000);
	  },

	  /**
	   * Return the extended unix time equivalent to this Gregorian date instance. Unix time is
	   * the number of milliseconds since midnight on Jan 1, 1970 UTC. Traditionally unix time
	   * (or the type "time_t" in C/C++) is only encoded with a unsigned 32 bit integer, and thus 
	   * runs out on Jan 19, 2038. However, most Javascript engines encode numbers well above 
	   * 32 bits and the Date object allows you to encode up to 100 million days worth of time 
	   * after Jan 1, 1970, and even more interestingly 100 million days worth of time before
	   * Jan 1, 1970 as well. This method returns the number of milliseconds in that extended 
	   * range. If this instance encodes a date outside of that range, this method will return
	   * NaN.
	   * 
	   * @return {number} a number giving the extended unix time, or NaN if the date is outside 
	   * the valid extended unix time range
	   */
	  getTimeExtended: function getTimeExtended() {
	    var jd = this.getJulianDay();

	    // test if earlier than Jan 1, 1970 - 100 million days
	    // or later than Jan 1, 1970 + 100 million days
	    if (jd < -97559412.5 || jd > 102440587.5) {
	      return NaN;
	    }

	    // avoid the rounding errors in the floating point math by only using
	    // the whole days from the rd, and then calculating the milliseconds directly
	    return Math.round((jd - 2440587.5) * 86400000);
	  },

	  /**
	   * Return the Julian Day equivalent to this calendar date as a number.
	   * This returns the julian day in UTC.
	   * 
	   * @return {number} the julian date equivalent of this date
	   */
	  getJulianDay: function getJulianDay() {
	    return this.rd + this.epoch;
	  },

	  /**
	   * Return the Rata Die (fixed day) number of this RD date.
	   * 
	   * @return {number} the rd date as a number
	   */
	  getRataDie: function getRataDie() {
	    return this.rd;
	  }
	};

	module.exports = RataDie;

/***/ },
/* 18 */
/***/ function(module, exports) {

	"use strict";

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	function makeEmptyFunction(arg) {
	  return function () {
	    return arg;
	  };
	}

	/**
	 * This function accepts and discards inputs; it has no side effects. This is
	 * primarily useful idiomatically for overridable function endpoints which
	 * always need to be callable, since JS lacks a null-call idiom ala Cocoa.
	 */
	var emptyFunction = function emptyFunction() {};

	emptyFunction.thatReturns = makeEmptyFunction;
	emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
	emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
	emptyFunction.thatReturnsNull = makeEmptyFunction(null);
	emptyFunction.thatReturnsThis = function () {
	  return this;
	};
	emptyFunction.thatReturnsArgument = function (arg) {
	  return arg;
	};

	module.exports = emptyFunction;

/***/ },
/* 19 */
/***/ function(module, exports, __webpack_require__) {

	var _isPlaceholder = __webpack_require__(65);


	/**
	 * Optimized internal one-arity curry function.
	 *
	 * @private
	 * @category Function
	 * @param {Function} fn The function to curry.
	 * @return {Function} The curried function.
	 */
	module.exports = function _curry1(fn) {
	  return function f1(a) {
	    if (arguments.length === 0 || _isPlaceholder(a)) {
	      return f1;
	    } else {
	      return fn.apply(this, arguments);
	    }
	  };
	};


/***/ },
/* 20 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2016-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	// Trust the developer to only use ReactInstrumentation with a __DEV__ check

	var debugTool = null;

	if (false) {
	  var ReactDebugTool = require('./ReactDebugTool');
	  debugTool = ReactDebugTool;
	}

	module.exports = { debugTool: debugTool };

/***/ },
/* 21 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
		return typeof obj === "undefined" ? "undefined" : _typeof2(obj);
	} : function (obj) {
		return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof2(obj);
	};

	/*
	 * IDate.js - Represent a date in any calendar. This class is subclassed for each 
	 * calendar and includes some shared functionality.
	 * 
	 * Copyright Â© 2012-2015, JEDLSoft
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 *
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */

	/* !depends LocaleInfo.js */

	var LocaleInfo = __webpack_require__(14);

	/**
	 * @class
	 * Superclass for all the calendar date classes that contains shared 
	 * functionality. This class is never instantiated on its own. Instead,
	 * you should use the {@link DateFactory} function to manufacture a new
	 * instance of a subclass of IDate. This class is called IDate for "ilib
	 * date" so that it does not conflict with the built-in Javascript Date
	 * class.
	 * 
	 * @private
	 * @constructor
	 * @param {Object=} options The date components to initialize this date with
	 */
	var IDate = function IDate(options) {};

	/* place for the subclasses to put their constructors so that the factory method
	 * can find them. Do this to add your date after it's defined: 
	 * IDate._constructors["mytype"] = IDate.MyTypeConstructor;
	 */
	IDate._constructors = {};

	IDate.prototype = {
		getType: function getType() {
			return "date";
		},

		/**
	  * Return the unix time equivalent to this date instance. Unix time is
	  * the number of milliseconds since midnight on Jan 1, 1970 UTC (Gregorian). This 
	  * method only returns a valid number for dates between midnight, 
	  * Jan 1, 1970 UTC (Gregorian) and Jan 19, 2038 at 3:14:07am UTC (Gregorian) when 
	  * the unix time runs out. If this instance encodes a date outside of that range, 
	  * this method will return -1. For date types that are not Gregorian, the point 
	  * in time represented by this date object will only give a return value if it
	  * is in the correct range in the Gregorian calendar as given previously.
	  * 
	  * @return {number} a number giving the unix time, or -1 if the date is outside the
	  * valid unix time range
	  */
		getTime: function getTime() {
			return this.rd.getTime();
		},

		/**
	  * Return the extended unix time equivalent to this Gregorian date instance. Unix time is
	  * the number of milliseconds since midnight on Jan 1, 1970 UTC. Traditionally unix time
	  * (or the type "time_t" in C/C++) is only encoded with an unsigned 32 bit integer, and thus 
	  * runs out on Jan 19, 2038. However, most Javascript engines encode numbers well above 
	  * 32 bits and the Date object allows you to encode up to 100 million days worth of time 
	  * after Jan 1, 1970, and even more interestingly, 100 million days worth of time before
	  * Jan 1, 1970 as well. This method returns the number of milliseconds in that extended 
	  * range. If this instance encodes a date outside of that range, this method will return
	  * NaN.
	  * 
	  * @return {number} a number giving the extended unix time, or Nan if the date is outside 
	  * the valid extended unix time range
	  */
		getTimeExtended: function getTimeExtended() {
			return this.rd.getTimeExtended();
		},

		/**
	  * Set the time of this instance according to the given unix time. Unix time is
	  * the number of milliseconds since midnight on Jan 1, 1970.
	  * 
	  * @param {number} millis the unix time to set this date to in milliseconds 
	  */
		setTime: function setTime(millis) {
			this.rd = this.newRd({
				unixtime: millis,
				cal: this.cal
			});
			this._calcDateComponents();
		},

		getDays: function getDays() {
			return this.day;
		},
		getMonths: function getMonths() {
			return this.month;
		},
		getYears: function getYears() {
			return this.year;
		},
		getHours: function getHours() {
			return this.hour;
		},
		getMinutes: function getMinutes() {
			return this.minute;
		},
		getSeconds: function getSeconds() {
			return this.second;
		},
		getMilliseconds: function getMilliseconds() {
			return this.millisecond;
		},
		getEra: function getEra() {
			return this.year < 1 ? -1 : 1;
		},

		setDays: function setDays(day) {
			this.day = parseInt(day, 10) || 1;
			this.rd._setDateComponents(this);
		},
		setMonths: function setMonths(month) {
			this.month = parseInt(month, 10) || 1;
			this.rd._setDateComponents(this);
		},
		setYears: function setYears(year) {
			this.year = parseInt(year, 10) || 0;
			this.rd._setDateComponents(this);
		},

		setHours: function setHours(hour) {
			this.hour = parseInt(hour, 10) || 0;
			this.rd._setDateComponents(this);
		},
		setMinutes: function setMinutes(minute) {
			this.minute = parseInt(minute, 10) || 0;
			this.rd._setDateComponents(this);
		},
		setSeconds: function setSeconds(second) {
			this.second = parseInt(second, 10) || 0;
			this.rd._setDateComponents(this);
		},
		setMilliseconds: function setMilliseconds(milli) {
			this.millisecond = parseInt(milli, 10) || 0;
			this.rd._setDateComponents(this);
		},

		/**
	  * Return a new date instance in the current calendar that represents the first instance 
	  * of the given day of the week before the current date. The day of the week is encoded
	  * as a number where 0 = Sunday, 1 = Monday, etc.
	  * 
	  * @param {number} dow the day of the week before the current date that is being sought
	  * @return {IDate} the date being sought
	  */
		before: function before(dow) {
			return new this.constructor({
				rd: this.rd.before(dow, this.offset),
				timezone: this.timezone
			});
		},

		/**
	  * Return a new date instance in the current calendar that represents the first instance 
	  * of the given day of the week after the current date. The day of the week is encoded
	  * as a number where 0 = Sunday, 1 = Monday, etc.
	  * 
	  * @param {number} dow the day of the week after the current date that is being sought
	  * @return {IDate} the date being sought
	  */
		after: function after(dow) {
			return new this.constructor({
				rd: this.rd.after(dow, this.offset),
				timezone: this.timezone
			});
		},

		/**
	  * Return a new Gregorian date instance that represents the first instance of the 
	  * given day of the week on or before the current date. The day of the week is encoded
	  * as a number where 0 = Sunday, 1 = Monday, etc.
	  * 
	  * @param {number} dow the day of the week on or before the current date that is being sought
	  * @return {IDate} the date being sought
	  */
		onOrBefore: function onOrBefore(dow) {
			return new this.constructor({
				rd: this.rd.onOrBefore(dow, this.offset),
				timezone: this.timezone
			});
		},

		/**
	  * Return a new Gregorian date instance that represents the first instance of the 
	  * given day of the week on or after the current date. The day of the week is encoded
	  * as a number where 0 = Sunday, 1 = Monday, etc.
	  * 
	  * @param {number} dow the day of the week on or after the current date that is being sought
	  * @return {IDate} the date being sought
	  */
		onOrAfter: function onOrAfter(dow) {
			return new this.constructor({
				rd: this.rd.onOrAfter(dow, this.offset),
				timezone: this.timezone
			});
		},

		/**
	  * Return a Javascript Date object that is equivalent to this date
	  * object.
	  * 
	  * @return {Date|undefined} a javascript Date object
	  */
		getJSDate: function getJSDate() {
			var unix = this.rd.getTimeExtended();
			return isNaN(unix) ? undefined : new Date(unix);
		},

		/**
	  * Return the Rata Die (fixed day) number of this date.
	  * 
	  * @protected
	  * @return {number} the rd date as a number
	  */
		getRataDie: function getRataDie() {
			return this.rd.getRataDie();
		},

		/**
	  * Set the date components of this instance based on the given rd.
	  * @protected
	  * @param {number} rd the rata die date to set
	  */
		setRd: function setRd(rd) {
			this.rd = this.newRd({
				rd: rd,
				cal: this.cal
			});
			this._calcDateComponents();
		},

		/**
	  * Return the Julian Day equivalent to this calendar date as a number.
	  * 
	  * @return {number} the julian date equivalent of this date
	  */
		getJulianDay: function getJulianDay() {
			return this.rd.getJulianDay();
		},

		/**
	  * Set the date of this instance using a Julian Day.
	  * @param {number|JulianDay} date the Julian Day to use to set this date
	  */
		setJulianDay: function setJulianDay(date) {
			this.rd = this.newRd({
				julianday: (typeof date === "undefined" ? "undefined" : _typeof(date)) === 'object' ? date.getDate() : date,
				cal: this.cal
			});
			this._calcDateComponents();
		},

		/**
	  * Return the time zone associated with this date, or 
	  * undefined if none was specified in the constructor.
	  * 
	  * @return {string|undefined} the name of the time zone for this date instance
	  */
		getTimeZone: function getTimeZone() {
			return this.timezone || "local";
		},

		/**
	  * Set the time zone associated with this date.
	  * @param {string=} tzName the name of the time zone to set into this date instance,
	  * or "undefined" to unset the time zone 
	  */
		setTimeZone: function setTimeZone(tzName) {
			if (!tzName || tzName === "") {
				// same as undefining it
				this.timezone = undefined;
				this.tz = undefined;
			} else if (typeof tzName === 'string') {
				this.timezone = tzName;
				this.tz = undefined;
				// assuming the same UTC time, but a new time zone, now we have to 
				// recalculate what the date components are
				this._calcDateComponents();
			}
		},

		/**
	  * Return the rd number of the first Sunday of the given ISO year.
	  * @protected
	  * @param {number} year the year for which the first Sunday is being sought
	  * @return {number} the rd of the first Sunday of the ISO year
	  */
		firstSunday: function firstSunday(year) {
			var firstDay = this.newRd({
				year: year,
				month: 1,
				day: 1,
				hour: 0,
				minute: 0,
				second: 0,
				millisecond: 0,
				cal: this.cal
			});
			var firstThu = this.newRd({
				rd: firstDay.onOrAfter(4),
				cal: this.cal
			});
			return firstThu.before(0);
		},

		/**
	  * Return the ISO 8601 week number in the current year for the current date. The week
	  * number ranges from 0 to 55, as some years have 55 weeks assigned to them in some
	  * calendars.
	  * 
	  * @return {number} the week number for the current date
	  */
		getWeekOfYear: function getWeekOfYear() {
			var rd = Math.floor(this.rd.getRataDie());
			var year = this._calcYear(rd + this.offset);
			var yearStart = this.firstSunday(year);
			var nextYear;

			// if we have a January date, it may be in this ISO year or the previous year
			if (rd < yearStart) {
				yearStart = this.firstSunday(year - 1);
			} else {
				// if we have a late December date, it may be in this ISO year, or the next year
				nextYear = this.firstSunday(year + 1);
				if (rd >= nextYear) {
					yearStart = nextYear;
				}
			}

			return Math.floor((rd - yearStart) / 7) + 1;
		},

		/**
	  * Return the ordinal number of the week within the month. The first week of a month is
	  * the first one that contains 4 or more days in that month. If any days precede this
	  * first week, they are marked as being in week 0. This function returns values from 0
	  * through 6.<p>
	  * 
	  * The locale is a required parameter because different locales that use the same 
	  * Gregorian calendar consider different days of the week to be the beginning of
	  * the week. This can affect the week of the month in which some days are located.
	  * 
	  * @param {Locale|string} locale the locale or locale spec to use when figuring out 
	  * the first day of the week
	  * @return {number} the ordinal number of the week within the current month
	  */
		getWeekOfMonth: function getWeekOfMonth(locale) {
			var li = new LocaleInfo(locale);

			var first = this.newRd({
				year: this._calcYear(this.rd.getRataDie() + this.offset),
				month: this.getMonths(),
				day: 1,
				hour: 0,
				minute: 0,
				second: 0,
				millisecond: 0,
				cal: this.cal
			});
			var weekStart = first.onOrAfter(li.getFirstDayOfWeek());

			if (weekStart - first.getRataDie() > 3) {
				// if the first week has 4 or more days in it of the current month, then consider
				// that week 1. Otherwise, it is week 0. To make it week 1, move the week start
				// one week earlier.
				weekStart -= 7;
			}
			return Math.floor((this.rd.getRataDie() - weekStart) / 7) + 1;
		}
	};

	module.exports = IDate;

/***/ },
/* 22 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(5),
	    _assign = __webpack_require__(7);

	var CallbackQueue = __webpack_require__(163);
	var PooledClass = __webpack_require__(32);
	var ReactFeatureFlags = __webpack_require__(168);
	var ReactReconciler = __webpack_require__(38);
	var Transaction = __webpack_require__(68);

	var invariant = __webpack_require__(3);

	var dirtyComponents = [];
	var updateBatchNumber = 0;
	var asapCallbackQueue = CallbackQueue.getPooled();
	var asapEnqueued = false;

	var batchingStrategy = null;

	function ensureInjected() {
	  !(ReactUpdates.ReactReconcileTransaction && batchingStrategy) ?  false ? invariant(false, 'ReactUpdates: must inject a reconcile transaction class and batching strategy') : _prodInvariant('123') : void 0;
	}

	var NESTED_UPDATES = {
	  initialize: function () {
	    this.dirtyComponentsLength = dirtyComponents.length;
	  },
	  close: function () {
	    if (this.dirtyComponentsLength !== dirtyComponents.length) {
	      // Additional updates were enqueued by componentDidUpdate handlers or
	      // similar; before our own UPDATE_QUEUEING wrapper closes, we want to run
	      // these new updates so that if A's componentDidUpdate calls setState on
	      // B, B will update before the callback A's updater provided when calling
	      // setState.
	      dirtyComponents.splice(0, this.dirtyComponentsLength);
	      flushBatchedUpdates();
	    } else {
	      dirtyComponents.length = 0;
	    }
	  }
	};

	var UPDATE_QUEUEING = {
	  initialize: function () {
	    this.callbackQueue.reset();
	  },
	  close: function () {
	    this.callbackQueue.notifyAll();
	  }
	};

	var TRANSACTION_WRAPPERS = [NESTED_UPDATES, UPDATE_QUEUEING];

	function ReactUpdatesFlushTransaction() {
	  this.reinitializeTransaction();
	  this.dirtyComponentsLength = null;
	  this.callbackQueue = CallbackQueue.getPooled();
	  this.reconcileTransaction = ReactUpdates.ReactReconcileTransaction.getPooled(
	  /* useCreateElement */true);
	}

	_assign(ReactUpdatesFlushTransaction.prototype, Transaction, {
	  getTransactionWrappers: function () {
	    return TRANSACTION_WRAPPERS;
	  },

	  destructor: function () {
	    this.dirtyComponentsLength = null;
	    CallbackQueue.release(this.callbackQueue);
	    this.callbackQueue = null;
	    ReactUpdates.ReactReconcileTransaction.release(this.reconcileTransaction);
	    this.reconcileTransaction = null;
	  },

	  perform: function (method, scope, a) {
	    // Essentially calls `this.reconcileTransaction.perform(method, scope, a)`
	    // with this transaction's wrappers around it.
	    return Transaction.perform.call(this, this.reconcileTransaction.perform, this.reconcileTransaction, method, scope, a);
	  }
	});

	PooledClass.addPoolingTo(ReactUpdatesFlushTransaction);

	function batchedUpdates(callback, a, b, c, d, e) {
	  ensureInjected();
	  return batchingStrategy.batchedUpdates(callback, a, b, c, d, e);
	}

	/**
	 * Array comparator for ReactComponents by mount ordering.
	 *
	 * @param {ReactComponent} c1 first component you're comparing
	 * @param {ReactComponent} c2 second component you're comparing
	 * @return {number} Return value usable by Array.prototype.sort().
	 */
	function mountOrderComparator(c1, c2) {
	  return c1._mountOrder - c2._mountOrder;
	}

	function runBatchedUpdates(transaction) {
	  var len = transaction.dirtyComponentsLength;
	  !(len === dirtyComponents.length) ?  false ? invariant(false, 'Expected flush transaction\'s stored dirty-components length (%s) to match dirty-components array length (%s).', len, dirtyComponents.length) : _prodInvariant('124', len, dirtyComponents.length) : void 0;

	  // Since reconciling a component higher in the owner hierarchy usually (not
	  // always -- see shouldComponentUpdate()) will reconcile children, reconcile
	  // them before their children by sorting the array.
	  dirtyComponents.sort(mountOrderComparator);

	  // Any updates enqueued while reconciling must be performed after this entire
	  // batch. Otherwise, if dirtyComponents is [A, B] where A has children B and
	  // C, B could update twice in a single batch if C's render enqueues an update
	  // to B (since B would have already updated, we should skip it, and the only
	  // way we can know to do so is by checking the batch counter).
	  updateBatchNumber++;

	  for (var i = 0; i < len; i++) {
	    // If a component is unmounted before pending changes apply, it will still
	    // be here, but we assume that it has cleared its _pendingCallbacks and
	    // that performUpdateIfNecessary is a noop.
	    var component = dirtyComponents[i];

	    // If performUpdateIfNecessary happens to enqueue any new updates, we
	    // shouldn't execute the callbacks until the next render happens, so
	    // stash the callbacks first
	    var callbacks = component._pendingCallbacks;
	    component._pendingCallbacks = null;

	    var markerName;
	    if (ReactFeatureFlags.logTopLevelRenders) {
	      var namedComponent = component;
	      // Duck type TopLevelWrapper. This is probably always true.
	      if (component._currentElement.type.isReactTopLevelWrapper) {
	        namedComponent = component._renderedComponent;
	      }
	      markerName = 'React update: ' + namedComponent.getName();
	      console.time(markerName);
	    }

	    ReactReconciler.performUpdateIfNecessary(component, transaction.reconcileTransaction, updateBatchNumber);

	    if (markerName) {
	      console.timeEnd(markerName);
	    }

	    if (callbacks) {
	      for (var j = 0; j < callbacks.length; j++) {
	        transaction.callbackQueue.enqueue(callbacks[j], component.getPublicInstance());
	      }
	    }
	  }
	}

	var flushBatchedUpdates = function () {
	  // ReactUpdatesFlushTransaction's wrappers will clear the dirtyComponents
	  // array and perform any updates enqueued by mount-ready handlers (i.e.,
	  // componentDidUpdate) but we need to check here too in order to catch
	  // updates enqueued by setState callbacks and asap calls.
	  while (dirtyComponents.length || asapEnqueued) {
	    if (dirtyComponents.length) {
	      var transaction = ReactUpdatesFlushTransaction.getPooled();
	      transaction.perform(runBatchedUpdates, null, transaction);
	      ReactUpdatesFlushTransaction.release(transaction);
	    }

	    if (asapEnqueued) {
	      asapEnqueued = false;
	      var queue = asapCallbackQueue;
	      asapCallbackQueue = CallbackQueue.getPooled();
	      queue.notifyAll();
	      CallbackQueue.release(queue);
	    }
	  }
	};

	/**
	 * Mark a component as needing a rerender, adding an optional callback to a
	 * list of functions which will be executed once the rerender occurs.
	 */
	function enqueueUpdate(component) {
	  ensureInjected();

	  // Various parts of our code (such as ReactCompositeComponent's
	  // _renderValidatedComponent) assume that calls to render aren't nested;
	  // verify that that's the case. (This is called by each top-level update
	  // function, like setState, forceUpdate, etc.; creation and
	  // destruction of top-level components is guarded in ReactMount.)

	  if (!batchingStrategy.isBatchingUpdates) {
	    batchingStrategy.batchedUpdates(enqueueUpdate, component);
	    return;
	  }

	  dirtyComponents.push(component);
	  if (component._updateBatchNumber == null) {
	    component._updateBatchNumber = updateBatchNumber + 1;
	  }
	}

	/**
	 * Enqueue a callback to be run at the end of the current batching cycle. Throws
	 * if no updates are currently being performed.
	 */
	function asap(callback, context) {
	  !batchingStrategy.isBatchingUpdates ?  false ? invariant(false, 'ReactUpdates.asap: Can\'t enqueue an asap callback in a context whereupdates are not being batched.') : _prodInvariant('125') : void 0;
	  asapCallbackQueue.enqueue(callback, context);
	  asapEnqueued = true;
	}

	var ReactUpdatesInjection = {
	  injectReconcileTransaction: function (ReconcileTransaction) {
	    !ReconcileTransaction ?  false ? invariant(false, 'ReactUpdates: must provide a reconcile transaction class') : _prodInvariant('126') : void 0;
	    ReactUpdates.ReactReconcileTransaction = ReconcileTransaction;
	  },

	  injectBatchingStrategy: function (_batchingStrategy) {
	    !_batchingStrategy ?  false ? invariant(false, 'ReactUpdates: must provide a batching strategy') : _prodInvariant('127') : void 0;
	    !(typeof _batchingStrategy.batchedUpdates === 'function') ?  false ? invariant(false, 'ReactUpdates: must provide a batchedUpdates() function') : _prodInvariant('128') : void 0;
	    !(typeof _batchingStrategy.isBatchingUpdates === 'boolean') ?  false ? invariant(false, 'ReactUpdates: must provide an isBatchingUpdates boolean attribute') : _prodInvariant('129') : void 0;
	    batchingStrategy = _batchingStrategy;
	  }
	};

	var ReactUpdates = {
	  /**
	   * React references `ReactReconcileTransaction` using this property in order
	   * to allow dependency injection.
	   *
	   * @internal
	   */
	  ReactReconcileTransaction: null,

	  batchedUpdates: batchedUpdates,
	  enqueueUpdate: enqueueUpdate,
	  flushBatchedUpdates: flushBatchedUpdates,
	  injection: ReactUpdatesInjection,
	  asap: asap
	};

	module.exports = ReactUpdates;

/***/ },
/* 23 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
		return typeof obj === "undefined" ? "undefined" : _typeof2(obj);
	} : function (obj) {
		return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof2(obj);
	};

	/*
	 * JSUtils.js - Misc utilities to work around Javascript engine differences
	 * 
	 * Copyright Â© 2013-2015, JEDLSoft
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 *
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */

	// !depends ilib.js

	var ilib = __webpack_require__(2);

	var JSUtils = {};

	/**
	 * Perform a shallow copy of the source object to the target object. This only 
	 * copies the assignments of the source properties to the target properties, 
	 * but not recursively from there.<p>
	 * 
	 * 
	 * @static
	 * @param {Object} source the source object to copy properties from
	 * @param {Object} target the target object to copy properties into
	 */
	JSUtils.shallowCopy = function (source, target) {
		var prop = undefined;
		if (source && target) {
			for (prop in source) {
				if (prop !== undefined && typeof source[prop] !== 'undefined') {
					target[prop] = source[prop];
				}
			}
		}
	};

	/**
	 * Perform a recursive deep copy from the "from" object to the "deep" object.
	 * 
	 * @static
	 * @param {Object} from the object to copy from
	 * @param {Object} to the object to copy to
	 * @return {Object} a reference to the the "to" object
	 */
	JSUtils.deepCopy = function (from, to) {
		var prop;

		for (prop in from) {
			if (prop) {
				if (_typeof(from[prop]) === 'object') {
					to[prop] = {};
					JSUtils.deepCopy(from[prop], to[prop]);
				} else {
					to[prop] = from[prop];
				}
			}
		}
		return to;
	};

	/**
	 * Map a string to the given set of alternate characters. If the target set
	 * does not contain a particular character in the input string, then that
	 * character will be copied to the output unmapped.
	 * 
	 * @static
	 * @param {string} str a string to map to an alternate set of characters
	 * @param {Array.<string>|Object} map a mapping to alternate characters
	 * @return {string} the source string where each character is mapped to alternate characters
	 */
	JSUtils.mapString = function (str, map) {
		var mapped = "";
		if (map && str) {
			for (var i = 0; i < str.length; i++) {
				var c = str.charAt(i); // TODO use a char iterator?
				mapped += map[c] || c;
			}
		} else {
			mapped = str;
		}
		return mapped;
	};

	/**
	 * Check if an object is a member of the given array. If this javascript engine
	 * support indexOf, it is used directly. Otherwise, this function implements it
	 * itself. The idea is to make sure that you can use the quick indexOf if it is
	 * available, but use a slower implementation in older engines as well.
	 * 
	 * @static
	 * @param {Array.<Object>} array array to search
	 * @param {Object} obj object being sought. This should be of the same type as the
	 * members of the array being searched. If not, this function will not return
	 * any results.
	 * @return {number} index of the object in the array, or -1 if it is not in the array.
	 */
	JSUtils.indexOf = function (array, obj) {
		if (!array || !obj) {
			return -1;
		}
		if (typeof array.indexOf === 'function') {
			return array.indexOf(obj);
		} else {
			for (var i = 0; i < array.length; i++) {
				if (array[i] === obj) {
					return i;
				}
			}
			return -1;
		}
	};

	/**
	 * Convert a string into the hexadecimal representation
	 * of the Unicode characters in that string.
	 * 
	 * @static
	 * @param {string} string The string to convert
	 * @param {number=} limit the number of digits to use to represent the character (1 to 8)
	 * @return {string} a hexadecimal representation of the
	 * Unicode characters in the input string
	 */
	JSUtils.toHexString = function (string, limit) {
		var i,
		    result = "",
		    lim = limit && limit < 9 ? limit : 4;

		if (!string) {
			return "";
		}
		for (i = 0; i < string.length; i++) {
			var ch = string.charCodeAt(i).toString(16);
			result += "00000000".substring(0, lim - ch.length) + ch;
		}
		return result.toUpperCase();
	};

	/**
	 * Test whether an object in a Javascript Date. 
	 * 
	 * @static
	 * @param {*} object The object to test
	 * @return {boolean} return true if the object is a Date
	 * and false otherwise
	 */
	JSUtils.isDate = function (object) {
		var o;
		if ((typeof object === 'undefined' ? 'undefined' : _typeof(object)) === 'object') {
			o = /** @type {Object|null|undefined} */object;
			return Object.prototype.toString.call(o) === '[object Date]';
		}
		return false;
	};

	/**
	 * Merge the properties of object2 into object1 in a deep manner and return a merged
	 * object. If the property exists in both objects, the value in object2 will overwrite 
	 * the value in object1. If a property exists in object1, but not in object2, its value
	 * will not be touched. If a property exists in object2, but not in object1, it will be 
	 * added to the merged result.<p>
	 * 
	 * Name1 and name2 are for creating debug output only. They are not necessary.<p>
	 * 
	 * 
	 * @static
	 * @param {*} object1 the object to merge into
	 * @param {*} object2 the object to merge
	 * @param {boolean=} replace if true, replace the array elements in object1 with those in object2.
	 * If false, concatenate array elements in object1 with items in object2.
	 * @param {string=} name1 name of the object being merged into
	 * @param {string=} name2 name of the object being merged in
	 * @return {Object} the merged object
	 */
	JSUtils.merge = function (object1, object2, replace, name1, name2) {
		var prop = undefined,
		    newObj = {};
		for (prop in object1) {
			if (prop && typeof object1[prop] !== 'undefined') {
				newObj[prop] = object1[prop];
			}
		}
		for (prop in object2) {
			if (prop && typeof object2[prop] !== 'undefined') {
				if (ilib.isArray(object1[prop]) && ilib.isArray(object2[prop])) {
					if (typeof replace !== 'boolean' || !replace) {
						newObj[prop] = [].concat(object1[prop]);
						newObj[prop] = newObj[prop].concat(object2[prop]);
					} else {
						newObj[prop] = object2[prop];
					}
				} else if (_typeof(object1[prop]) === 'object' && _typeof(object2[prop]) === 'object') {
					newObj[prop] = JSUtils.merge(object1[prop], object2[prop], replace);
				} else {
					// for debugging. Used to determine whether or not json files are overriding their parents unnecessarily
					if (name1 && name2 && newObj[prop] == object2[prop]) {
						console.log("Property " + prop + " in " + name1 + " is being overridden by the same value in " + name2);
					}
					newObj[prop] = object2[prop];
				}
			}
		}
		return newObj;
	};

	/**
	 * Return true if the given object has no properties.<p>
	 * 
	 * 
	 * @static
	 * @param {Object} obj the object to check
	 * @return {boolean} true if the given object has no properties, false otherwise
	 */
	JSUtils.isEmpty = function (obj) {
		var prop = undefined;

		if (!obj) {
			return true;
		}

		for (prop in obj) {
			if (prop && typeof obj[prop] !== 'undefined') {
				return false;
			}
		}
		return true;
	};

	/**
	 * @static
	 */
	JSUtils.hashCode = function (obj) {
		var hash = 0;

		function addHash(hash, newValue) {
			// co-prime numbers creates a nicely distributed hash
			hash *= 65543;
			hash += newValue;
			hash %= 2147483647;
			return hash;
		}

		function stringHash(str) {
			var hash = 0;
			for (var i = 0; i < str.length; i++) {
				hash = addHash(hash, str.charCodeAt(i));
			}
			return hash;
		}

		switch (typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) {
			case 'undefined':
				hash = 0;
				break;
			case 'string':
				hash = stringHash(obj);
				break;
			case 'function':
			case 'number':
			case 'xml':
				hash = stringHash(String(obj));
				break;
			case 'boolean':
				hash = obj ? 1 : 0;
				break;
			case 'object':
				var props = [];
				for (var p in obj) {
					if (obj.hasOwnProperty(p)) {
						props.push(p);
					}
				}
				// make sure the order of the properties doesn't matter
				props.sort();
				for (var i = 0; i < props.length; i++) {
					hash = addHash(hash, stringHash(props[i]));
					hash = addHash(hash, JSUtils.hashCode(obj[props[i]]));
				}
				break;
		}

		return hash;
	};

	module.exports = JSUtils;

/***/ },
/* 24 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	/*
	 * TimeZone.js - Definition of a time zone class
	 * 
	 * Copyright Â© 2012-2015, JEDLSoft
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 *
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */

	/*
	!depends 
	ilib.js 
	Locale.js
	LocaleInfo.js
	Utils.js
	MathUtils.js
	JSUtils.js
	GregRataDie.js
	IString.js
	CalendarFactory.js
	*/

	// !data localeinfo zoneinfo

	var ilib = __webpack_require__(2);
	var Utils = __webpack_require__(25);
	var MathUtils = __webpack_require__(6);
	var JSUtils = __webpack_require__(23);

	var Locale = __webpack_require__(12);
	var LocaleInfo = __webpack_require__(14);

	var GregRataDie = __webpack_require__(43);
	var CalendarFactory = __webpack_require__(204);
	var IString = __webpack_require__(56);

	/**
	 * @class
	 * Create a time zone instance. 
	 * 
	 * This class reports and transforms
	 * information about particular time zones.<p>
	 * 
	 * The options parameter may contain any of the following properties:
	 * 
	 * <ul>
	 * <li><i>id</i> - The id of the requested time zone such as "Europe/London" or 
	 * "America/Los_Angeles". These are taken from the IANA time zone database. (See
	 * http://www.iana.org/time-zones for more information.) <p>
	 * 
	 * There is one special 
	 * time zone that is not taken from the IANA database called simply "local". In
	 * this case, this class will attempt to discover the current time zone and
	 * daylight savings time settings by calling standard Javascript classes to 
	 * determine the offsets from UTC. 
	 * 
	 * <li><i>locale</i> - The locale for this time zone.
	 * 
	 * <li><i>offset</i> - Choose the time zone based on the offset from UTC given in
	 * number of minutes (negative is west, positive is east).
	 * 
	 * <li><i>onLoad</i> - a callback function to call when the data is fully 
	 * loaded. When the onLoad option is given, this class will attempt to
	 * load any missing locale data using the ilib loader callback.
	 * When the data is loaded, the onLoad function is called with the current 
	 * instance as a parameter. 
	 * 
	 * <li><i>sync</i> - tell whether to load any missing locale data synchronously or 
	 * asynchronously. If this option is given as "false", then the "onLoad"
	 * callback must be given, as the instance returned from this constructor will
	 * not be usable for a while.
	 *  
	 * <li><i>loadParams</i> - an object containing parameters to pass to the 
	 * loader callback function when locale data is missing. The parameters are not
	 * interpretted or modified in any way. They are simply passed along. The object 
	 * may contain any property/value pairs as long as the calling code is in
	 * agreement with the loader callback function as to what those parameters mean.
	 * </ul>
	 * 
	 * There is currently no way in the ECMAscript
	 * standard to tell which exact time zone is currently in use. Choosing the
	 * id "locale" or specifying an explicit offset will not give a specific time zone, 
	 * as it is impossible to tell with certainty which zone the offsets 
	 * match.<p>
	 * 
	 * When the id "local" is given or the offset option is specified, this class will
	 * have the following behaviours:
	 * <ul>
	 * <li>The display name will always be given as the RFC822 style, no matter what
	 * style is requested
	 * <li>The id will also be returned as the RFC822 style display name
	 * <li>When the offset is explicitly given, this class will assume the time zone 
	 * does not support daylight savings time, and the offsets will be calculated 
	 * the same way year round.
	 * <li>When the offset is explicitly given, the inDaylightSavings() method will 
	 * always return false.
	 * <li>When the id "local" is given, this class will attempt to determine the 
	 * daylight savings time settings by examining the offset from UTC on Jan 1
	 * and June 1 of the current year. If they are different, this class assumes
	 * that the local time zone uses DST. When the offset for a particular date is
	 * requested, it will use the built-in Javascript support to determine the 
	 * offset for that date.
	 * </ul> 
	 * 
	 * If a more specific time zone is 
	 * needed with display names and known start/stop times for DST, use the "id" 
	 * property instead to specify the time zone exactly. You can perhaps ask the
	 * user which time zone they prefer so that your app does not need to guess.<p>
	 * 
	 * If the id and the offset are both not given, the default time zone for the 
	 * locale is retrieved from
	 * the locale info. If the locale is not specified, the default locale for the
	 * library is used.<p>
	 * 
	 * Because this class was designed for use in web sites, and the vast majority
	 * of dates and times being formatted are recent date/times, this class is simplified
	 * by not implementing historical time zones. That is, when governments change the 
	 * time zone rules for a particular zone, only the latest such rule is implemented 
	 * in this class. That means that determining the offset for a date that is prior 
	 * to the last change may give the wrong result. Historical time zone calculations
	 * may be implemented in a later version of iLib if there is enough demand for it,
	 * but it would entail a much larger set of time zone data that would have to be
	 * loaded.  
	 * 
	 * 
	 * @constructor
	 * @param {Object} options Options guiding the construction of this time zone instance
	 */
	var TimeZone = function TimeZone(options) {
		this.sync = true;
		this.locale = new Locale();
		this.isLocal = false;

		if (options) {
			if (options.locale) {
				this.locale = typeof options.locale === 'string' ? new Locale(options.locale) : options.locale;
			}

			if (options.id) {
				var id = options.id.toString();
				if (id === 'local') {
					this.isLocal = true;

					// use standard Javascript Date to figure out the time zone offsets
					var now = new Date(),
					    jan1 = new Date(now.getFullYear(), 0, 1),

					// months in std JS Date object are 0-based
					jun1 = new Date(now.getFullYear(), 5, 1);

					// Javascript's method returns the offset backwards, so we have to
					// take the negative to get the correct offset
					this.offsetJan1 = -jan1.getTimezoneOffset();
					this.offsetJun1 = -jun1.getTimezoneOffset();
					// the offset of the standard time for the time zone is always the one that is closest 
					// to negative infinity of the two, no matter whether you are in the northern or southern 
					// hemisphere, east or west
					this.offset = Math.min(this.offsetJan1, this.offsetJun1);
				}
				this.id = id;
			} else if (options.offset) {
				this.offset = typeof options.offset === 'string' ? parseInt(options.offset, 10) : options.offset;
				this.id = this.getDisplayName(undefined, undefined);
			}

			if (typeof options.sync !== 'undefined') {
				this.sync = !!options.sync;
			}

			this.loadParams = options.loadParams;
			this.onLoad = options.onLoad;
		}

		//console.log("timezone: locale is " + this.locale);

		if (!this.id) {
			new LocaleInfo(this.locale, {
				sync: this.sync,
				onLoad: ilib.bind(this, function (li) {
					this.id = li.getTimeZone() || "Etc/UTC";
					this._loadtzdata();
				})
			});
		} else {
			this._loadtzdata();
		}

		//console.log("localeinfo is: " + JSON.stringify(this.locinfo));
		//console.log("id is: " + JSON.stringify(this.id));
	};

	/*
	 * Explanation of the compressed time zone info properties.
	 * {
	 *     "o": "8:0",      // offset from UTC
	 *     "f": "W{c}T",    // standard abbreviation. For time zones that observe DST, the {c} replacement is replaced with the 
	 *                      // letter in the e.c or s.c properties below 
	 *     "e": {           // info about the end of DST
	 *         "j": 78322.5 // Julian day when the transition happens. Either specify the "j" property or all of the "m", "r", and 
	 *                      // "t" properties, but not both sets.
	 *         "m": 3,      // month that it ends
	 *         "r": "l0",   // rule for the day it ends "l" = "last", numbers are Sun=0 through Sat=6. Other syntax is "0>7". 
	 *                      // This means the 0-day (Sun) after the 7th of the month. Other possible operators are <, >, <=, >=
	 *         "t": "2:0",  // time of day that the DST turns off, hours:minutes
	 *         "c": "S"     // character to replace into the abbreviation for standard time 
	 *     },
	 *     "s": {           // info about the start of DST
	 *         "j": 78189.5 // Julian day when the transition happens. Either specify the "j" property or all of the "m", "r", and 
	 *                      // "t" properties, but not both sets.
	 *         "m": 10,     // month that it starts
	 *         "r": "l0",   // rule for the day it starts "l" = "last", numbers are Sun=0 through Sat=6. Other syntax is "0>7".
	 *                      // This means the 0-day (Sun) after the 7th of the month. Other possible operators are <, >, <=, >=
	 *         "t": "2:0",  // time of day that the DST turns on, hours:minutes
	 *         "v": "1:0",  // amount of time saved in hours:minutes
	 *         "c": "D"     // character to replace into the abbreviation for daylight time
	 *     },
	 *     "c": "AU",       // ISO code for the country that contains this time zone
	 *     "n": "W. Australia {c} Time"
	 *                      // long English name of the zone. The {c} replacement is for the word "Standard" or "Daylight" as appropriate
	 * }
	 */
	TimeZone.prototype._loadtzdata = function () {
		// console.log("id is: " + JSON.stringify(this.id));
		// console.log("zoneinfo is: " + JSON.stringify(ilib.data.zoneinfo[this.id]));
		if (!ilib.data.zoneinfo[this.id] && typeof this.offset === 'undefined') {
			Utils.loadData({
				object: TimeZone,
				nonlocale: true, // locale independent 
				name: "zoneinfo/" + this.id + ".json",
				sync: this.sync,
				loadParams: this.loadParams,
				callback: ilib.bind(this, function (tzdata) {
					if (tzdata && !JSUtils.isEmpty(tzdata)) {
						ilib.data.zoneinfo[this.id] = tzdata;
					}
					this._initZone();
				})
			});
		} else {
			this._initZone();
		}
	};

	TimeZone.prototype._initZone = function () {
		/** 
	  * @private
	  * @type {{o:string,f:string,e:Object.<{m:number,r:string,t:string,z:string}>,s:Object.<{m:number,r:string,t:string,z:string,v:string,c:string}>,c:string,n:string}} 
	  */
		this.zone = ilib.data.zoneinfo[this.id];
		if (!this.zone && typeof this.offset === 'undefined') {
			this.id = "Etc/UTC";
			this.zone = ilib.data.zoneinfo[this.id];
		}

		this._calcDSTSavings();

		if (typeof this.offset === 'undefined' && this.zone.o) {
			var offsetParts = this._offsetStringToObj(this.zone.o);
			/**
	   * @private
	   * @type {number} raw offset from UTC without DST, in minutes
	   */
			this.offset = (Math.abs(offsetParts.h || 0) * 60 + (offsetParts.m || 0)) * MathUtils.signum(offsetParts.h || 0);
		}

		if (this.onLoad && typeof this.onLoad === 'function') {
			this.onLoad(this);
		}
	};

	/** @private */
	TimeZone._marshallIds = function (country, sync, callback) {
		var tz,
		    ids = [];

		if (!country) {
			// local is a special zone meaning "the local time zone according to the JS engine we are running upon"
			ids.push("local");
			for (tz in ilib.data.timezones) {
				if (ilib.data.timezones[tz]) {
					ids.push(ilib.data.timezones[tz]);
				}
			}
			if (typeof callback === 'function') {
				callback(ids);
			}
		} else {
			if (!ilib.data.zoneinfo.zonetab) {
				Utils.loadData({
					object: TimeZone,
					nonlocale: true, // locale independent 
					name: "zoneinfo/zonetab.json",
					sync: sync,
					callback: ilib.bind(this, function (tzdata) {
						if (tzdata) {
							ilib.data.zoneinfo.zonetab = tzdata;
						}

						ids = ilib.data.zoneinfo.zonetab[country];

						if (typeof callback === 'function') {
							callback(ids);
						}
					})
				});
			} else {
				ids = ilib.data.zoneinfo.zonetab[country];
				if (typeof callback === 'function') {
					callback(ids);
				}
			}
		}

		return ids;
	};

	/**
	 * Return an array of available zone ids that the constructor knows about.
	 * The country parameter is optional. If it is not given, all time zones will
	 * be returned. If it specifies a country code, then only time zones for that
	 * country will be returned.
	 * 
	 * @param {string|undefined} country country code for which time zones are being sought
	 * @param {boolean} sync whether to find the available ids synchronously (true) or asynchronously (false)
	 * @param {function(Array.<string>)} onLoad callback function to call when the data is finished loading
	 * @return {Array.<string>} an array of zone id strings
	 */
	TimeZone.getAvailableIds = function (country, sync, onLoad) {
		var tz,
		    ids = [];

		if (typeof sync !== 'boolean') {
			sync = true;
		}

		if (ilib.data.timezones.length === 0) {
			if (typeof ilib._load !== 'undefined' && typeof ilib._load.listAvailableFiles === 'function') {
				ilib._load.listAvailableFiles(sync, function (hash) {
					for (var dir in hash) {
						var files = hash[dir];
						if (ilib.isArray(files)) {
							files.forEach(function (filename) {
								if (filename && filename.match(/^zoneinfo/)) {
									ilib.data.timezones.push(filename.replace(/^zoneinfo\//, "").replace(/\.json$/, ""));
								}
							});
						}
					}
					ids = TimeZone._marshallIds(country, sync, onLoad);
				});
			} else {
				for (tz in ilib.data.zoneinfo) {
					if (ilib.data.zoneinfo[tz]) {
						ilib.data.timezones.push(tz);
					}
				}
				ids = TimeZone._marshallIds(country, sync, onLoad);
			}
		} else {
			ids = TimeZone._marshallIds(country, sync, onLoad);
		}

		return ids;
	};

	/**
	 * Return the id used to uniquely identify this time zone.
	 * @return {string} a unique id for this time zone
	 */
	TimeZone.prototype.getId = function () {
		return this.id.toString();
	};

	/**
	 * Return the abbreviation that is used for the current time zone on the given date.
	 * The date may be in DST or during standard time, and many zone names have different
	 * abbreviations depending on whether or not the date is falls within DST.<p>
	 * 
	 * There are two styles that are supported:
	 * 
	 * <ol>
	 * <li>standard - returns the 3 to 5 letter abbreviation of the time zone name such 
	 * as "CET" for "Central European Time" or "PDT" for "Pacific Daylight Time"
	 * <li>rfc822 - returns an RFC 822 style time zone specifier, which specifies more
	 * explicitly what the offset is from UTC
	 * <li>long - returns the long name of the zone in English
	 * </ol>
	 *  
	 * @param {IDate=} date a date to determine if it is in daylight time or standard time
	 * @param {string=} style one of "standard" or "rfc822". Default if not specified is "standard"
	 * @return {string} the name of the time zone, abbreviated according to the style 
	 */
	TimeZone.prototype.getDisplayName = function (date, style) {
		style = this.isLocal || typeof this.zone === 'undefined' ? "rfc822" : style || "standard";
		switch (style) {
			default:
			case 'standard':
				if (this.zone.f && this.zone.f !== "zzz") {
					if (this.zone.f.indexOf("{c}") !== -1) {
						var letter = "";
						letter = this.inDaylightTime(date) ? this.zone.s && this.zone.s.c : this.zone.e && this.zone.e.c;
						var temp = new IString(this.zone.f);
						return temp.format({ c: letter || "" });
					}
					return this.zone.f;
				}
				var temp = "GMT" + this.zone.o;
				if (this.inDaylightTime(date)) {
					temp += "+" + this.zone.s.v;
				}
				return temp;
				break;
			case 'rfc822':
				var offset = this.getOffset(date),

				// includes the DST if applicable
				ret = "UTC",
				    hour = offset.h || 0,
				    minute = offset.m || 0;

				if (hour !== 0) {
					ret += hour > 0 ? "+" : "-";
					if (Math.abs(hour) < 10) {
						ret += "0";
					}
					ret += hour < 0 ? -hour : hour;
					if (minute < 10) {
						ret += "0";
					}
					ret += minute;
				}
				return ret;
			case 'long':
				if (this.zone.n) {
					if (this.zone.n.indexOf("{c}") !== -1) {
						var str = this.inDaylightTime(date) ? "Daylight" : "Standard";
						var temp = new IString(this.zone.n);
						return temp.format({ c: str || "" });
					}
					return this.zone.n;
				}
				var temp = "GMT" + this.zone.o;
				if (this.inDaylightTime(date)) {
					temp += "+" + this.zone.s.v;
				}
				return temp;
				break;
		}
	};

	/**
	 * Convert the offset string to an object with an h, m, and possibly s property
	 * to indicate the hours, minutes, and seconds.
	 * 
	 * @private
	 * @param {string} str the offset string to convert to an object
	 * @return {Object.<{h:number,m:number,s:number}>} an object giving the offset for the zone at 
	 * the given date/time, in hours, minutes, and seconds
	 */
	TimeZone.prototype._offsetStringToObj = function (str) {
		var offsetParts = typeof str === 'string' ? str.split(":") : [],
		    ret = { h: 0 },
		    temp;

		if (offsetParts.length > 0) {
			ret.h = parseInt(offsetParts[0], 10);
			if (offsetParts.length > 1) {
				temp = parseInt(offsetParts[1], 10);
				if (temp) {
					ret.m = temp;
				}
				if (offsetParts.length > 2) {
					temp = parseInt(offsetParts[2], 10);
					if (temp) {
						ret.s = temp;
					}
				}
			}
		}

		return ret;
	};

	/**
	 * Returns the offset of this time zone from UTC at the given date/time. If daylight saving 
	 * time is in effect at the given date/time, this method will return the offset value 
	 * adjusted by the amount of daylight saving.
	 * @param {IDate=} date the date for which the offset is needed
	 * @return {Object.<{h:number,m:number}>} an object giving the offset for the zone at 
	 * the given date/time, in hours, minutes, and seconds  
	 */
	TimeZone.prototype.getOffset = function (date) {
		if (!date) {
			return this.getRawOffset();
		}
		var offset = this.getOffsetMillis(date) / 60000;

		var hours = MathUtils.down(offset / 60),
		    minutes = Math.abs(offset) - Math.abs(hours) * 60;

		var ret = {
			h: hours
		};
		if (minutes != 0) {
			ret.m = minutes;
		}
		return ret;
	};

	/**
	 * Returns the offset of this time zone from UTC at the given date/time expressed in 
	 * milliseconds. If daylight saving 
	 * time is in effect at the given date/time, this method will return the offset value 
	 * adjusted by the amount of daylight saving. Negative numbers indicate offsets west
	 * of UTC and conversely, positive numbers indicate offset east of UTC.
	 *  
	 * @param {IDate=} date the date for which the offset is needed, or null for the
	 * present date
	 * @return {number} the number of milliseconds of offset from UTC that the given date is
	 */
	TimeZone.prototype.getOffsetMillis = function (date) {
		var ret;

		// check if the dst property is defined -- the intrinsic JS Date object doesn't work so
		// well if we are in the overlap time at the end of DST
		if (this.isLocal && typeof date.dst === 'undefined') {
			var d = !date ? new Date() : new Date(date.getTimeExtended());
			return -d.getTimezoneOffset() * 60000;
		}

		ret = this.offset;

		if (date && this.inDaylightTime(date)) {
			ret += this.dstSavings;
		}

		return ret * 60000;
	};

	/**
	 * Return the offset in milliseconds when the date has an RD number in wall
	 * time rather than in UTC time.
	 * @protected
	 * @param date the date to check in wall time
	 * @returns {number} the number of milliseconds of offset from UTC that the given date is
	 */
	TimeZone.prototype._getOffsetMillisWallTime = function (date) {
		var ret;

		ret = this.offset;

		if (date && this.inDaylightTime(date, true)) {
			ret += this.dstSavings;
		}

		return ret * 60000;
	};

	/**
	 * Returns the offset of this time zone from UTC at the given date/time. If daylight saving 
	 * time is in effect at the given date/time, this method will return the offset value 
	 * adjusted by the amount of daylight saving.
	 * @param {IDate=} date the date for which the offset is needed
	 * @return {string} the offset for the zone at the given date/time as a string in the 
	 * format "h:m:s" 
	 */
	TimeZone.prototype.getOffsetStr = function (date) {
		var offset = this.getOffset(date),
		    ret;

		ret = offset.h;
		if (typeof offset.m !== 'undefined') {
			ret += ":" + offset.m;
			if (typeof offset.s !== 'undefined') {
				ret += ":" + offset.s;
			}
		} else {
			ret += ":0";
		}

		return ret;
	};

	/**
	 * Gets the offset from UTC for this time zone.
	 * @return {Object.<{h:number,m:number,s:number}>} an object giving the offset from 
	 * UTC for this time zone, in hours, minutes, and seconds 
	 */
	TimeZone.prototype.getRawOffset = function () {
		var hours = MathUtils.down(this.offset / 60),
		    minutes = Math.abs(this.offset) - Math.abs(hours) * 60;

		var ret = {
			h: hours
		};
		if (minutes != 0) {
			ret.m = minutes;
		}
		return ret;
	};

	/**
	 * Gets the offset from UTC for this time zone expressed in milliseconds. Negative numbers
	 * indicate zones west of UTC, and positive numbers indicate zones east of UTC.
	 * 
	 * @return {number} an number giving the offset from 
	 * UTC for this time zone in milliseconds 
	 */
	TimeZone.prototype.getRawOffsetMillis = function () {
		return this.offset * 60000;
	};

	/**
	 * Gets the offset from UTC for this time zone without DST savings.
	 * @return {string} the offset from UTC for this time zone, in the format "h:m:s" 
	 */
	TimeZone.prototype.getRawOffsetStr = function () {
		var off = this.getRawOffset();
		return off.h + ":" + (off.m || "0");
	};

	/**
	 * Return the amount of time in hours:minutes that the clock is advanced during
	 * daylight savings time.
	 * @return {Object.<{h:number,m:number,s:number}>} the amount of time that the 
	 * clock advances for DST in hours, minutes, and seconds 
	 */
	TimeZone.prototype.getDSTSavings = function () {
		if (this.isLocal) {
			// take the absolute because the difference in the offsets may be positive or
			// negative, depending on the hemisphere
			var savings = Math.abs(this.offsetJan1 - this.offsetJun1);
			var hours = MathUtils.down(savings / 60),
			    minutes = savings - hours * 60;
			return {
				h: hours,
				m: minutes
			};
		} else if (this.zone && this.zone.s) {
			return this._offsetStringToObj(this.zone.s.v); // this.zone.start.savings
		}
		return { h: 0 };
	};

	/**
	 * Return the amount of time in hours:minutes that the clock is advanced during
	 * daylight savings time.
	 * @return {string} the amount of time that the clock advances for DST in the
	 * format "h:m:s"
	 */
	TimeZone.prototype.getDSTSavingsStr = function () {
		if (this.isLocal) {
			var savings = this.getDSTSavings();
			return savings.h + ":" + savings.m;
		} else if (typeof this.offset !== 'undefined' && this.zone && this.zone.s) {
			return this.zone.s.v; // this.zone.start.savings
		}
		return "0:0";
	};

	/**
	 * return the rd of the start of DST transition for the given year
	 * @protected
	 * @param {Object} rule set of rules
	 * @param {number} year year to check
	 * @return {number} the rd of the start of DST for the year
	 */
	TimeZone.prototype._calcRuleStart = function (rule, year) {
		var type = "=",
		    weekday = 0,
		    day,
		    refDay,
		    cal,
		    hour = 0,
		    minute = 0,
		    second = 0,
		    time,
		    i;

		if (typeof rule.j !== 'undefined') {
			refDay = new GregRataDie({
				julianday: rule.j
			});
		} else {
			if (rule.r.charAt(0) == 'l' || rule.r.charAt(0) == 'f') {
				cal = CalendarFactory({ type: "gregorian" });
				type = rule.r.charAt(0);
				weekday = parseInt(rule.r.substring(1), 10);
				day = type === 'l' ? cal.getMonLength(rule.m, year) : 1;
				//console.log("_calcRuleStart: Calculating the " + 
				//		(rule.r.charAt(0) == 'f' ? "first " : "last ") + weekday + 
				//		" of month " + rule.m);
			} else {
				i = rule.r.indexOf('<');
				if (i == -1) {
					i = rule.r.indexOf('>');
				}

				if (i != -1) {
					type = rule.r.charAt(i);
					weekday = parseInt(rule.r.substring(0, i), 10);
					day = parseInt(rule.r.substring(i + 1), 10);
					//console.log("_calcRuleStart: Calculating the " + weekday + 
					//		type + day + " of month " + rule.m);
				} else {
					day = parseInt(rule.r, 10);
					//console.log("_calcRuleStart: Calculating the " + day + " of month " + rule.m);
				}
			}

			if (rule.t) {
				time = rule.t.split(":");
				hour = parseInt(time[0], 10);
				if (time.length > 1) {
					minute = parseInt(time[1], 10);
					if (time.length > 2) {
						second = parseInt(time[2], 10);
					}
				}
			}
			//console.log("calculating rd of " + year + "/" + rule.m + "/" + day);
			refDay = new GregRataDie({
				year: year,
				month: rule.m,
				day: day,
				hour: hour,
				minute: minute,
				second: second
			});
		}
		//console.log("refDay is " + JSON.stringify(refDay));
		var d = refDay.getRataDie();

		switch (type) {
			case 'l':
			case '<':
				//console.log("returning " + refDay.onOrBefore(rd, weekday));
				d = refDay.onOrBefore(weekday);
				break;
			case 'f':
			case '>':
				//console.log("returning " + refDay.onOrAfterRd(rd, weekday));
				d = refDay.onOrAfter(weekday);
				break;
		}
		return d;
	};

	/**
	 * @private
	 */
	TimeZone.prototype._calcDSTSavings = function () {
		var saveParts = this.getDSTSavings();

		/**
	  * @private
	  * @type {number} savings in minutes when DST is in effect 
	  */
		this.dstSavings = (Math.abs(saveParts.h || 0) * 60 + (saveParts.m || 0)) * MathUtils.signum(saveParts.h || 0);
	};

	/**
	 * @private
	 */
	TimeZone.prototype._getDSTStartRule = function (year) {
		// TODO: update this when historic/future zones are supported
		return this.zone.s;
	};

	/**
	 * @private
	 */
	TimeZone.prototype._getDSTEndRule = function (year) {
		// TODO: update this when historic/future zones are supported
		return this.zone.e;
	};

	/**
	 * Returns whether or not the given date is in daylight saving time for the current
	 * zone. Note that daylight savings time is observed for the summer. Because
	 * the seasons are reversed, daylight savings time in the southern hemisphere usually
	 * runs from the end of the year through New Years into the first few months of the
	 * next year. This method will correctly calculate the start and end of DST for any
	 * location.
	 * 
	 * @param {IDate=} date a date for which the info about daylight time is being sought,
	 * or undefined to tell whether we are currently in daylight savings time
	 * @param {boolean=} wallTime if true, then the given date is in wall time. If false or
	 * undefined, it is in the usual UTC time.
	 * @return {boolean} true if the given date is in DST for the current zone, and false
	 * otherwise.
	 */
	TimeZone.prototype.inDaylightTime = function (date, wallTime) {
		var rd, startRd, endRd, year;

		if (this.isLocal) {
			// check if the dst property is defined -- the intrinsic JS Date object doesn't work so
			// well if we are in the overlap time at the end of DST, so we have to work around that
			// problem by adding in the savings ourselves
			var offset = 0;
			if (typeof date.dst !== 'undefined' && !date.dst) {
				offset = this.dstSavings * 60000;
			}

			var d = new Date(date ? date.getTimeExtended() + offset : undefined);
			// the DST offset is always the one that is closest to positive infinity, no matter 
			// if you are in the northern or southern hemisphere, east or west
			var dst = Math.max(this.offsetJan1, this.offsetJun1);
			return -d.getTimezoneOffset() === dst;
		}

		if (!date || !date.cal || date.cal.type !== "gregorian") {
			// convert to Gregorian so that we can tell if it is in DST or not
			var time = date && typeof date.getTimeExtended === 'function' ? date.getTimeExtended() : undefined;
			rd = new GregRataDie({ unixtime: time }).getRataDie();
			year = new Date(time).getUTCFullYear();
		} else {
			rd = date.rd.getRataDie();
			year = date.year;
		}
		// rd should be a Gregorian RD number now, in UTC

		// if we aren't using daylight time in this zone for the given year, then we are 
		// not in daylight time
		if (!this.useDaylightTime(year)) {
			return false;
		}

		// these calculate the start/end in local wall time
		var startrule = this._getDSTStartRule(year);
		var endrule = this._getDSTEndRule(year);
		startRd = this._calcRuleStart(startrule, year);
		endRd = this._calcRuleStart(endrule, year);

		if (wallTime) {
			// rd is in wall time, so we have to make sure to skip the missing time
			// at the start of DST when standard time ends and daylight time begins
			startRd += this.dstSavings / 1440;
		} else {
			// rd is in UTC, so we have to convert the start/end to UTC time so 
			// that they can be compared directly to the UTC rd number of the date

			// when DST starts, time is standard time already, so we only have
			// to subtract the offset to get to UTC and not worry about the DST savings
			startRd -= this.offset / 1440;

			// when DST ends, time is in daylight time already, so we have to
			// subtract the DST savings to get back to standard time, then the
			// offset to get to UTC
			endRd -= (this.offset + this.dstSavings) / 1440;
		}

		// In the northern hemisphere, the start comes first some time in spring (Feb-Apr), 
		// then the end some time in the fall (Sept-Nov). In the southern
		// hemisphere, it is the other way around because the seasons are reversed. Standard
		// time is still in the winter, but the winter months are May-Aug, and daylight 
		// savings time usually starts Aug-Oct of one year and runs through Mar-May of the 
		// next year.
		if (rd < endRd && endRd - rd <= this.dstSavings / 1440 && typeof date.dst === 'boolean') {
			// take care of the magic overlap time at the end of DST
			return date.dst;
		}
		if (startRd < endRd) {
			// northern hemisphere
			return rd >= startRd && rd < endRd ? true : false;
		}
		// southern hemisphere
		return rd >= startRd || rd < endRd ? true : false;
	};

	/**
	 * Returns true if this time zone switches to daylight savings time at some point
	 * in the year, and false otherwise.
	 * @param {number} year Whether or not the time zone uses daylight time in the given year. If
	 * this parameter is not given, the current year is assumed.
	 * @return {boolean} true if the time zone uses daylight savings time
	 */
	TimeZone.prototype.useDaylightTime = function (year) {

		// this zone uses daylight savings time iff there is a rule defining when to start
		// and when to stop the DST
		return this.isLocal && this.offsetJan1 !== this.offsetJun1 || typeof this.zone !== 'undefined' && typeof this.zone.s !== 'undefined' && typeof this.zone.e !== 'undefined';
	};

	/**
	 * Returns the ISO 3166 code of the country for which this time zone is defined.
	 * @return {string} the ISO 3166 code of the country for this zone
	 */
	TimeZone.prototype.getCountry = function () {
		return this.zone.c;
	};

	module.exports = TimeZone;

/***/ },
/* 25 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
		return typeof obj === "undefined" ? "undefined" : _typeof2(obj);
	} : function (obj) {
		return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof2(obj);
	};

	/*
	 * Utils.js - Core utility routines
	 * 
	 * Copyright Â© 2012-2015, JEDLSoft
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 *
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */

	// !depends ilib.js Locale.js JSUtils.js

	var ilib = __webpack_require__(2);
	var Locale = __webpack_require__(12);
	var JSUtils = __webpack_require__(23);

	var Utils = {};

	/**
	 * Find and merge all the locale data for a particular prefix in the given locale
	 * and return it as a single javascript object. This merges the data in the 
	 * correct order:
	 * 
	 * <ol>
	 * <li>shared data (usually English)
	 * <li>data for language
	 * <li>data for language + region
	 * <li>data for language + region + script
	 * <li>data for language + region + script + variant
	 * </ol>
	 * 
	 * It is okay for any of the above to be missing. This function will just skip the 
	 * missing data. However, if everything except the shared data is missing, this 
	 * function returns undefined, allowing the caller to go and dynamically load the
	 * data instead.
	 * 
	 * @static
	 * @param {string} prefix prefix under ilib.data of the data to merge
	 * @param {Locale} locale locale of the data being sought
	 * @param {boolean=} replaceArrays if true, replace the array elements in object1 with those in object2.
	 * If false, concatenate array elements in object1 with items in object2.
	 * @param {boolean=} returnOne if true, only return the most locale-specific data. If false,
	 * merge all the relevant locale data together.
	 * @return {Object?} the merged locale data
	 */
	Utils.mergeLocData = function (prefix, locale, replaceArrays, returnOne) {
		var data = undefined;
		var loc = locale || new Locale();
		var foundLocaleData = false;
		var property = prefix;
		var mostSpecific;

		data = ilib.data[prefix] || {};

		mostSpecific = data;

		if (loc.getLanguage()) {
			property = prefix + '_' + loc.getLanguage();
			if (ilib.data[property]) {
				foundLocaleData = true;
				data = JSUtils.merge(data, ilib.data[property], replaceArrays);
				mostSpecific = ilib.data[property];
			}
		}

		if (loc.getRegion()) {
			property = prefix + '_' + loc.getRegion();
			if (ilib.data[property]) {
				foundLocaleData = true;
				data = JSUtils.merge(data, ilib.data[property], replaceArrays);
				mostSpecific = ilib.data[property];
			}
		}

		if (loc.getLanguage()) {
			property = prefix + '_' + loc.getLanguage();

			if (loc.getScript()) {
				property = prefix + '_' + loc.getLanguage() + '_' + loc.getScript();
				if (ilib.data[property]) {
					foundLocaleData = true;
					data = JSUtils.merge(data, ilib.data[property], replaceArrays);
					mostSpecific = ilib.data[property];
				}
			}

			if (loc.getRegion()) {
				property = prefix + '_' + loc.getLanguage() + '_' + loc.getRegion();
				if (ilib.data[property]) {
					foundLocaleData = true;
					data = JSUtils.merge(data, ilib.data[property], replaceArrays);
					mostSpecific = ilib.data[property];
				}
			}
		}

		if (loc.getRegion() && loc.getVariant()) {
			property = prefix + '_' + loc.getLanguage() + '_' + loc.getVariant();
			if (ilib.data[property]) {
				foundLocaleData = true;
				data = JSUtils.merge(data, ilib.data[property], replaceArrays);
				mostSpecific = ilib.data[property];
			}
		}

		if (loc.getLanguage() && loc.getScript() && loc.getRegion()) {
			property = prefix + '_' + loc.getLanguage() + '_' + loc.getScript() + '_' + loc.getRegion();
			if (ilib.data[property]) {
				foundLocaleData = true;
				data = JSUtils.merge(data, ilib.data[property], replaceArrays);
				mostSpecific = ilib.data[property];
			}
		}

		if (loc.getLanguage() && loc.getRegion() && loc.getVariant()) {
			property = prefix + '_' + loc.getLanguage() + '_' + loc.getRegion() + '_' + loc.getVariant();
			if (ilib.data[property]) {
				foundLocaleData = true;
				data = JSUtils.merge(data, ilib.data[property], replaceArrays);
				mostSpecific = ilib.data[property];
			}
		}

		if (loc.getLanguage() && loc.getScript() && loc.getRegion() && loc.getVariant()) {
			property = prefix + '_' + loc.getLanguage() + '_' + loc.getScript() + '_' + loc.getRegion() + '_' + loc.getVariant();
			if (ilib.data[property]) {
				foundLocaleData = true;
				data = JSUtils.merge(data, ilib.data[property], replaceArrays);
				mostSpecific = ilib.data[property];
			}
		}

		return foundLocaleData ? returnOne ? mostSpecific : data : undefined;
	};

	/**
	 * Return an array of relative path names for the
	 * files that represent the data for the given locale.<p>
	 * 
	 * Note that to prevent the situation where a directory for
	 * a language exists next to the directory for a region where
	 * the language code and region code differ only by case, the 
	 * plain region directories are located under the special 
	 * "undefined" language directory which has the ISO code "und".
	 * The reason is that some platforms have case-insensitive 
	 * file systems, and you cannot have 2 directories with the 
	 * same name which only differ by case. For example, "es" is
	 * the ISO 639 code for the language "Spanish" and "ES" is
	 * the ISO 3166 code for the region "Spain", so both the
	 * directories cannot exist underneath "locale". The region
	 * therefore will be loaded from "und/ES" instead.<p>  
	 * 
	 * <h4>Variations</h4>
	 * 
	 * With only language and region specified, the following
	 * sequence of paths will be generated:<p>
	 * 
	 * <pre>
	 * language
	 * und/region
	 * language/region
	 * </pre>
	 * 
	 * With only language and script specified:<p>
	 * 
	 * <pre>
	 * language
	 * language/script
	 * </pre>
	 * 
	 * With only script and region specified:<p>
	 * 
	 * <pre>
	 * und/region  
	 * </pre>
	 * 
	 * With only region and variant specified:<p>
	 * 
	 * <pre>
	 * und/region
	 * region/variant
	 * </pre>
	 * 
	 * With only language, script, and region specified:<p>
	 * 
	 * <pre>
	 * language
	 * und/region
	 * language/script
	 * language/region
	 * language/script/region
	 * </pre>
	 * 
	 * With only language, region, and variant specified:<p>
	 * 
	 * <pre>
	 * language
	 * und/region
	 * language/region
	 * region/variant
	 * language/region/variant
	 * </pre>
	 * 
	 * With all parts specified:<p>
	 * 
	 * <pre>
	 * language
	 * und/region
	 * language/script
	 * language/region
	 * region/variant
	 * language/script/region
	 * language/region/variant
	 * language/script/region/variant
	 * </pre>
	 * 
	 * @static
	 * @param {Locale} locale load the files for this locale
	 * @param {string?} name the file name of each file to load without
	 * any path
	 * @return {Array.<string>} An array of relative path names
	 * for the files that contain the locale data
	 */
	Utils.getLocFiles = function (locale, name) {
		var dir = "";
		var files = [];
		var filename = name || "resources.json";
		var loc = locale || new Locale();

		var language = loc.getLanguage();
		var region = loc.getRegion();
		var script = loc.getScript();
		var variant = loc.getVariant();

		files.push(filename); // generic shared file

		if (language) {
			dir = language + "/";
			files.push(dir + filename);
		}

		if (region) {
			dir = "und/" + region + "/";
			files.push(dir + filename);
		}

		if (language) {
			if (script) {
				dir = language + "/" + script + "/";
				files.push(dir + filename);
			}
			if (region) {
				dir = language + "/" + region + "/";
				files.push(dir + filename);
			}
		}

		if (region && variant) {
			dir = "und/" + region + "/" + variant + "/";
			files.push(dir + filename);
		}

		if (language && script && region) {
			dir = language + "/" + script + "/" + region + "/";
			files.push(dir + filename);
		}

		if (language && region && variant) {
			dir = language + "/" + region + "/" + variant + "/";
			files.push(dir + filename);
		}

		if (language && script && region && variant) {
			dir = language + "/" + script + "/" + region + "/" + variant + "/";
			files.push(dir + filename);
		}

		return files;
	};

	/**
	 * Load data using the new loader object or via the old function callback.
	 * @static
	 * @private
	 */
	Utils._callLoadData = function (files, sync, params, callback) {
		// console.log("Utils._callLoadData called");
		if (typeof ilib._load === 'function') {
			// console.log("Utils._callLoadData: calling as a regular function");
			return ilib._load(files, sync, params, callback);
		} else if (_typeof(ilib._load) === 'object' && typeof ilib._load.loadFiles === 'function') {
			// console.log("Utils._callLoadData: calling as an object");
			return ilib._load.loadFiles(files, sync, params, callback);
		}

		// console.log("Utils._callLoadData: not calling. Type is " + typeof(ilib._load) + " and instanceof says " + (ilib._load instanceof Loader));
		return undefined;
	};

	/**
	 * Find locale data or load it in. If the data with the given name is preassembled, it will
	 * find the data in ilib.data. If the data is not preassembled but there is a loader function,
	 * this function will call it to load the data. Otherwise, the callback will be called with
	 * undefined as the data. This function will create a cache under the given class object.
	 * If data was successfully loaded, it will be set into the cache so that future access to 
	 * the same data for the same locale is much quicker.<p>
	 * 
	 * The parameters can specify any of the following properties:<p>
	 * 
	 * <ul>
	 * <li><i>name</i> - String. The name of the file being loaded. Default: ResBundle.json
	 * <li><i>object</i> - Object. The class attempting to load data. The cache is stored inside of here.
	 * <li><i>locale</i> - Locale. The locale for which data is loaded. Default is the current locale.
	 * <li><i>nonlocale</i> - boolean. If true, the data being loaded is not locale-specific.
	 * <li><i>type</i> - String. Type of file to load. This can be "json" or "other" type. Default: "json" 
	 * <li><i>replace</i> - boolean. When merging json objects, this parameter controls whether to merge arrays
	 * or have arrays replace each other. If true, arrays in child objects replace the arrays in parent 
	 * objects. When false, the arrays in child objects are concatenated with the arrays in parent objects.  
	 * <li><i>loadParams</i> - Object. An object with parameters to pass to the loader function
	 * <li><i>sync</i> - boolean. Whether or not to load the data synchronously
	 * <li><i>callback</i> - function(?)=. callback Call back function to call when the data is available.
	 * Data is not returned from this method, so a callback function is mandatory.
	 * </ul>
	 * 
	 * @static
	 * @param {Object} params Parameters configuring how to load the files (see above)
	 */
	Utils.loadData = function (params) {
		var name = "resources.json",
		    object = undefined,
		    locale = new Locale(ilib.getLocale()),
		    sync = false,
		    type = undefined,
		    loadParams = {},
		    callback = undefined,
		    nonlocale = false,
		    replace = false,
		    basename;

		if (!params || typeof params.callback !== 'function') {
			return;
		}

		if (params.name) {
			name = params.name;
		}
		if (params.object) {
			object = params.object;
		}
		if (params.locale) {
			locale = typeof params.locale === 'string' ? new Locale(params.locale) : params.locale;
		}
		if (params.type) {
			type = params.type;
		}
		if (params.loadParams) {
			loadParams = params.loadParams;
		}
		if (params.sync) {
			sync = params.sync;
		}
		if (params.nonlocale) {
			nonlocale = !!params.nonlocale;
		}
		if (typeof params.replace === 'boolean') {
			replace = params.replace;
		}

		callback = params.callback;

		if (object && !object.cache) {
			object.cache = {};
		}

		if (!type) {
			var dot = name.lastIndexOf(".");
			type = dot !== -1 ? name.substring(dot + 1) : "text";
		}

		var spec = (!nonlocale && locale.getSpec().replace(/-/g, '_') || "root") + "," + name + "," + String(JSUtils.hashCode(loadParams));
		if (!object || typeof object.cache[spec] === 'undefined') {
			var data,
			    returnOne = loadParams && loadParams.returnOne;

			if (type === "json") {
				// console.log("type is json");
				basename = name.substring(0, name.lastIndexOf("."));
				if (nonlocale) {
					basename = basename.replace(/\//g, '.').replace(/[\\\+\-]/g, "_");
					data = ilib.data[basename];
				} else {
					data = Utils.mergeLocData(basename, locale, replace, returnOne);
				}
				if (data) {
					// console.log("found assembled data");
					if (object) {
						object.cache[spec] = data;
					}
					callback(data);
					return;
				}
			}

			// console.log("ilib._load is " + typeof(ilib._load));
			if (typeof ilib._load !== 'undefined') {
				// the data is not preassembled, so attempt to load it dynamically
				var files = nonlocale ? [name || "resources.json"] : Utils.getLocFiles(locale, name);
				if (type !== "json") {
					loadParams.returnOne = true;
				}

				Utils._callLoadData(files, sync, loadParams, ilib.bind(this, function (arr) {
					if (type === "json") {
						data = ilib.data[basename] || {};
						for (var i = 0; i < arr.length; i++) {
							if (typeof arr[i] !== 'undefined') {
								data = loadParams.returnOne ? arr[i] : JSUtils.merge(data, arr[i], replace);
							}
						}

						if (object) {
							object.cache[spec] = data;
						}
						callback(data);
					} else {
						var i = arr.length - 1;
						while (i > -1 && !arr[i]) {
							i--;
						}
						if (i > -1) {
							if (object) {
								object.cache[spec] = arr[i];
							}
							callback(arr[i]);
						} else {
							callback(undefined);
						}
					}
				}));
			} else {
				// no data other than the generic shared data
				if (type === "json") {
					data = ilib.data[basename];
				}
				if (object && data) {
					object.cache[spec] = data;
				}
				callback(data);
			}
		} else {
			callback(object.cache[spec]);
		}
	};

	module.exports = Utils;

/***/ },
/* 26 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _assign = __webpack_require__(7);

	var PooledClass = __webpack_require__(32);

	var emptyFunction = __webpack_require__(18);
	var warning = __webpack_require__(4);

	var didWarnForAddedNewProperty = false;
	var isProxySupported = typeof Proxy === 'function';

	var shouldBeReleasedProperties = ['dispatchConfig', '_targetInst', 'nativeEvent', 'isDefaultPrevented', 'isPropagationStopped', '_dispatchListeners', '_dispatchInstances'];

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var EventInterface = {
	  type: null,
	  target: null,
	  // currentTarget is set when dispatching; no use in copying it here
	  currentTarget: emptyFunction.thatReturnsNull,
	  eventPhase: null,
	  bubbles: null,
	  cancelable: null,
	  timeStamp: function (event) {
	    return event.timeStamp || Date.now();
	  },
	  defaultPrevented: null,
	  isTrusted: null
	};

	/**
	 * Synthetic events are dispatched by event plugins, typically in response to a
	 * top-level event delegation handler.
	 *
	 * These systems should generally use pooling to reduce the frequency of garbage
	 * collection. The system should check `isPersistent` to determine whether the
	 * event should be released into the pool after being dispatched. Users that
	 * need a persisted event should invoke `persist`.
	 *
	 * Synthetic events (and subclasses) implement the DOM Level 3 Events API by
	 * normalizing browser quirks. Subclasses do not necessarily have to implement a
	 * DOM interface; custom application-specific events can also subclass this.
	 *
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {*} targetInst Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @param {DOMEventTarget} nativeEventTarget Target node.
	 */
	function SyntheticEvent(dispatchConfig, targetInst, nativeEvent, nativeEventTarget) {
	  if (false) {
	    // these have a getter/setter for warnings
	    delete this.nativeEvent;
	    delete this.preventDefault;
	    delete this.stopPropagation;
	  }

	  this.dispatchConfig = dispatchConfig;
	  this._targetInst = targetInst;
	  this.nativeEvent = nativeEvent;

	  var Interface = this.constructor.Interface;
	  for (var propName in Interface) {
	    if (!Interface.hasOwnProperty(propName)) {
	      continue;
	    }
	    if (false) {
	      delete this[propName]; // this has a getter/setter for warnings
	    }
	    var normalize = Interface[propName];
	    if (normalize) {
	      this[propName] = normalize(nativeEvent);
	    } else {
	      if (propName === 'target') {
	        this.target = nativeEventTarget;
	      } else {
	        this[propName] = nativeEvent[propName];
	      }
	    }
	  }

	  var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
	  if (defaultPrevented) {
	    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
	  } else {
	    this.isDefaultPrevented = emptyFunction.thatReturnsFalse;
	  }
	  this.isPropagationStopped = emptyFunction.thatReturnsFalse;
	  return this;
	}

	_assign(SyntheticEvent.prototype, {

	  preventDefault: function () {
	    this.defaultPrevented = true;
	    var event = this.nativeEvent;
	    if (!event) {
	      return;
	    }

	    if (event.preventDefault) {
	      event.preventDefault();
	    } else if (typeof event.returnValue !== 'unknown') {
	      // eslint-disable-line valid-typeof
	      event.returnValue = false;
	    }
	    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
	  },

	  stopPropagation: function () {
	    var event = this.nativeEvent;
	    if (!event) {
	      return;
	    }

	    if (event.stopPropagation) {
	      event.stopPropagation();
	    } else if (typeof event.cancelBubble !== 'unknown') {
	      // eslint-disable-line valid-typeof
	      // The ChangeEventPlugin registers a "propertychange" event for
	      // IE. This event does not support bubbling or cancelling, and
	      // any references to cancelBubble throw "Member not found".  A
	      // typeof check of "unknown" circumvents this issue (and is also
	      // IE specific).
	      event.cancelBubble = true;
	    }

	    this.isPropagationStopped = emptyFunction.thatReturnsTrue;
	  },

	  /**
	   * We release all dispatched `SyntheticEvent`s after each event loop, adding
	   * them back into the pool. This allows a way to hold onto a reference that
	   * won't be added back into the pool.
	   */
	  persist: function () {
	    this.isPersistent = emptyFunction.thatReturnsTrue;
	  },

	  /**
	   * Checks if this event should be released back into the pool.
	   *
	   * @return {boolean} True if this should not be released, false otherwise.
	   */
	  isPersistent: emptyFunction.thatReturnsFalse,

	  /**
	   * `PooledClass` looks for `destructor` on each instance it releases.
	   */
	  destructor: function () {
	    var Interface = this.constructor.Interface;
	    for (var propName in Interface) {
	      if (false) {
	        Object.defineProperty(this, propName, getPooledWarningPropertyDefinition(propName, Interface[propName]));
	      } else {
	        this[propName] = null;
	      }
	    }
	    for (var i = 0; i < shouldBeReleasedProperties.length; i++) {
	      this[shouldBeReleasedProperties[i]] = null;
	    }
	    if (false) {
	      Object.defineProperty(this, 'nativeEvent', getPooledWarningPropertyDefinition('nativeEvent', null));
	      Object.defineProperty(this, 'preventDefault', getPooledWarningPropertyDefinition('preventDefault', emptyFunction));
	      Object.defineProperty(this, 'stopPropagation', getPooledWarningPropertyDefinition('stopPropagation', emptyFunction));
	    }
	  }

	});

	SyntheticEvent.Interface = EventInterface;

	if (false) {
	  if (isProxySupported) {
	    /*eslint-disable no-func-assign */
	    SyntheticEvent = new Proxy(SyntheticEvent, {
	      construct: function (target, args) {
	        return this.apply(target, Object.create(target.prototype), args);
	      },
	      apply: function (constructor, that, args) {
	        return new Proxy(constructor.apply(that, args), {
	          set: function (target, prop, value) {
	            if (prop !== 'isPersistent' && !target.constructor.Interface.hasOwnProperty(prop) && shouldBeReleasedProperties.indexOf(prop) === -1) {
	              process.env.NODE_ENV !== 'production' ? warning(didWarnForAddedNewProperty || target.isPersistent(), 'This synthetic event is reused for performance reasons. If you\'re ' + 'seeing this, you\'re adding a new property in the synthetic event object. ' + 'The property is never released. See ' + 'https://fb.me/react-event-pooling for more information.') : void 0;
	              didWarnForAddedNewProperty = true;
	            }
	            target[prop] = value;
	            return true;
	          }
	        });
	      }
	    });
	    /*eslint-enable no-func-assign */
	  }
	}
	/**
	 * Helper to reduce boilerplate when creating subclasses.
	 *
	 * @param {function} Class
	 * @param {?object} Interface
	 */
	SyntheticEvent.augmentClass = function (Class, Interface) {
	  var Super = this;

	  var E = function () {};
	  E.prototype = Super.prototype;
	  var prototype = new E();

	  _assign(prototype, Class.prototype);
	  Class.prototype = prototype;
	  Class.prototype.constructor = Class;

	  Class.Interface = _assign({}, Super.Interface, Interface);
	  Class.augmentClass = Super.augmentClass;

	  PooledClass.addPoolingTo(Class, PooledClass.fourArgumentPooler);
	};

	PooledClass.addPoolingTo(SyntheticEvent, PooledClass.fourArgumentPooler);

	module.exports = SyntheticEvent;

	/**
	  * Helper to nullify syntheticEvent instance properties when destructing
	  *
	  * @param {object} SyntheticEvent
	  * @param {String} propName
	  * @return {object} defineProperty object
	  */
	function getPooledWarningPropertyDefinition(propName, getVal) {
	  var isFunction = typeof getVal === 'function';
	  return {
	    configurable: true,
	    set: set,
	    get: get
	  };

	  function set(val) {
	    var action = isFunction ? 'setting the method' : 'setting the property';
	    warn(action, 'This is effectively a no-op');
	    return val;
	  }

	  function get() {
	    var action = isFunction ? 'accessing the method' : 'accessing the property';
	    var result = isFunction ? 'This is a no-op function' : 'This is set to null';
	    warn(action, result);
	    return getVal;
	  }

	  function warn(action, result) {
	    var warningCondition = false;
	     false ? warning(warningCondition, 'This synthetic event is reused for performance reasons. If you\'re seeing this, ' + 'you\'re %s `%s` on a released/nullified synthetic event. %s. ' + 'If you must keep the original synthetic event around, use event.persist(). ' + 'See https://fb.me/react-event-pooling for more information.', action, propName, result) : void 0;
	  }
	}

/***/ },
/* 27 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	/**
	 * Keeps track of the current owner.
	 *
	 * The current owner is the component who should own any components that are
	 * currently being constructed.
	 */
	var ReactCurrentOwner = {

	  /**
	   * @internal
	   * @type {ReactComponent}
	   */
	  current: null

	};

	module.exports = ReactCurrentOwner;

/***/ },
/* 28 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.extractAriaProps = exports.isRenderable = exports.Job = exports.coerceArray = exports.coerceFunction = exports.childrenEquals = exports.cap = undefined;

	var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
	  return typeof obj === "undefined" ? "undefined" : _typeof2(obj);
	} : function (obj) {
	  return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof2(obj);
	};

	var _always = __webpack_require__(86);

	var _always2 = _interopRequireDefault(_always);

	var _compose = __webpack_require__(62);

	var _compose2 = _interopRequireDefault(_compose);

	var _equals = __webpack_require__(87);

	var _equals2 = _interopRequireDefault(_equals);

	var _isArrayLike = __webpack_require__(158);

	var _isArrayLike2 = _interopRequireDefault(_isArrayLike);

	var _is = __webpack_require__(157);

	var _is2 = _interopRequireDefault(_is);

	var _map = __webpack_require__(90);

	var _map2 = _interopRequireDefault(_map);

	var _prop = __webpack_require__(91);

	var _prop2 = _interopRequireDefault(_prop);

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _sort = __webpack_require__(344);

	var _sort2 = _interopRequireDefault(_sort);

	var _unless = __webpack_require__(349);

	var _unless2 = _interopRequireDefault(_unless);

	var _useWith = __webpack_require__(161);

	var _useWith2 = _interopRequireDefault(_useWith);

	var _Job = __webpack_require__(202);

	var _Job2 = _interopRequireDefault(_Job);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	var orderedKeys = (0, _map2.default)((0, _prop2.default)('key'));
	var unorderedKeys = (0, _compose2.default)((0, _sort2.default)(function (a, b) {
	  return a - b;
	}), orderedKeys);
	var unorderedEquals = (0, _useWith2.default)(_equals2.default, [unorderedKeys, unorderedKeys]);
	var orderedEquals = (0, _useWith2.default)(_equals2.default, [orderedKeys, orderedKeys]);

	/**
	 * Compares the keys of two sets of children and returns `true` if they are equal.
	 *
	 * @param  {Node[]}		prev		Array of children
	 * @param  {Node[]}		next		Array of children
	 * @param  {Boolean}	[ordered]	`true` to require the same order
	 *
	 * @returns {Boolean}				`true` if the children are the same
	 */
	var childrenEquals = function childrenEquals(prev, next) {
	  var ordered = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

	  var prevChildren = _react2.default.Children.toArray(prev);
	  var nextChildren = _react2.default.Children.toArray(next);

	  if (prevChildren.length !== nextChildren.length) {
	    return false;
	  } else if (prevChildren.length === 1 && nextChildren.length === 1) {
	    var c1 = prevChildren[0];
	    var c2 = nextChildren[0];

	    return (0, _equals2.default)(c1, c2);
	  } else if (ordered) {
	    return orderedEquals(prevChildren, nextChildren);
	  } else {
	    return unorderedEquals(prevChildren, nextChildren);
	  }
	};

	/**
	* Capitalizes a given string.
	*
	* @param {String} str - The string to capitalize.
	* @returns {String} The capitalized string.
	* @public
	*/
	var cap = function cap(str) {
	  return str.slice(0, 1).toUpperCase() + str.slice(1);
	};

	/**
	 * If `arg` is a function, return it. Otherwise returns a function that returns `arg`
	 *
	 * @example
	 *	const returnsZero = coerceFunction(0);
	 *	const returnsArg = coerceFunction(() => 0);
	 *
	 * @param {*} arg Function or value
	 * @method
	 */
	var coerceFunction = (0, _unless2.default)((0, _is2.default)(Function), _always2.default);

	/**
	 * If `arg` is array-like, return it. Otherwise returns a single element array containing `arg`
	 *
	 * @example
	 *	const returnsArray = coerceArray(0); // [0]
	 *	const returnsArg = coerceArray([0]); // [0]
	 *	const returnsObjArg = coerceArray({0: 'zeroth', length: 1});
	 *
	 * @see http://ramdajs.com/docs/#isArrayLike
	 * @param {*} array Array or value
	 * @returns {Array}	Either `array` or `[array]`
	 * @method
	 */
	var coerceArray = function coerceArray(array) {
	  return (0, _isArrayLike2.default)(array) ? array : [array];
	};

	/**
	 * Loosely determines if `tag` is a renderable component (either a string or a function)
	 *
	 * @param  {*}  tag Component to tes
	 *
	 * @returns {Boolean} `true` if `tag` is renderable
	 */
	var isRenderable = function isRenderable(tag) {
	  var type = typeof tag === 'undefined' ? 'undefined' : _typeof(tag);
	  return type === 'function' || type === 'string';
	};

	/**
	 * Removes `aria-` prefixed props and the `role` prop from `props` and returns them in a new object.
	 * Useful when redirecting ARIA-related props from a non-focusable root element to a focusable
	 * child element.
	 *
	 * @param   {Object} props  Props object
	 *
	 * @returns {Object}        ARIA-related props
	 */
	var extractAriaProps = function extractAriaProps(props) {
	  var aria = {};
	  Object.keys(props).forEach(function (key) {
	    if (key === 'role' || key.indexOf('aria-') === 0) {
	      aria[key] = props[key];
	      delete props[key];
	    }
	  });

	  return aria;
	};

	exports.cap = cap;
	exports.childrenEquals = childrenEquals;
	exports.coerceFunction = coerceFunction;
	exports.coerceArray = coerceArray;
	exports.Job = _Job2.default;
	exports.isRenderable = isRenderable;
	exports.extractAriaProps = extractAriaProps;

/***/ },
/* 29 */
/***/ function(module, exports, __webpack_require__) {

	var _curry1 = __webpack_require__(19);
	var _curry2 = __webpack_require__(13);
	var _isPlaceholder = __webpack_require__(65);


	/**
	 * Optimized internal three-arity curry function.
	 *
	 * @private
	 * @category Function
	 * @param {Function} fn The function to curry.
	 * @return {Function} The curried function.
	 */
	module.exports = function _curry3(fn) {
	  return function f3(a, b, c) {
	    switch (arguments.length) {
	      case 0:
	        return f3;
	      case 1:
	        return _isPlaceholder(a) ? f3
	             : _curry2(function(_b, _c) { return fn(a, _b, _c); });
	      case 2:
	        return _isPlaceholder(a) && _isPlaceholder(b) ? f3
	             : _isPlaceholder(a) ? _curry2(function(_a, _c) { return fn(_a, b, _c); })
	             : _isPlaceholder(b) ? _curry2(function(_b, _c) { return fn(a, _b, _c); })
	             : _curry1(function(_c) { return fn(a, b, _c); });
	      default:
	        return _isPlaceholder(a) && _isPlaceholder(b) && _isPlaceholder(c) ? f3
	             : _isPlaceholder(a) && _isPlaceholder(b) ? _curry2(function(_a, _b) { return fn(_a, _b, c); })
	             : _isPlaceholder(a) && _isPlaceholder(c) ? _curry2(function(_a, _c) { return fn(_a, b, _c); })
	             : _isPlaceholder(b) && _isPlaceholder(c) ? _curry2(function(_b, _c) { return fn(a, _b, _c); })
	             : _isPlaceholder(a) ? _curry1(function(_a) { return fn(_a, b, c); })
	             : _isPlaceholder(b) ? _curry1(function(_b) { return fn(a, _b, c); })
	             : _isPlaceholder(c) ? _curry1(function(_c) { return fn(a, b, _c); })
	             : fn(a, b, c);
	    }
	  };
	};


/***/ },
/* 30 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	/*
	 * GregorianDate.js - Represent a date in the Gregorian calendar
	 * 
	 * Copyright Â© 2012-2015, JEDLSoft
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 *
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */

	/* !depends 
	ilib.js
	IDate.js 
	GregorianCal.js 
	SearchUtils.js
	MathUtils.js
	Locale.js
	LocaleInfo.js 
	JulianDay.js
	GregRataDie.js
	TimeZone.js
	*/

	var ilib = __webpack_require__(2);
	var SearchUtils = __webpack_require__(33);
	var MathUtils = __webpack_require__(6);

	var Locale = __webpack_require__(12);
	var LocaleInfo = __webpack_require__(14);
	var JulianDay = __webpack_require__(115);
	var IDate = __webpack_require__(21);
	var TimeZone = __webpack_require__(24);
	var Calendar = __webpack_require__(9);

	var GregorianCal = __webpack_require__(55);
	var GregRataDie = __webpack_require__(43);

	/**
	 * @class
	 * Construct a new Gregorian date object. The constructor parameters can 
	 * contain any of the following properties:
	 * 
	 * <ul>
	 * <li><i>unixtime<i> - sets the time of this instance according to the given 
	 * unix time. Unix time is the number of milliseconds since midnight on Jan 1, 1970.
	 * 
	 * <li><i>julianday</i> - sets the time of this instance according to the given
	 * Julian Day instance or the Julian Day given as a float
	 * 
	 * <li><i>year</i> - any integer, including 0
	 * 
	 * <li><i>month</i> - 1 to 12, where 1 means January, 2 means February, etc.
	 * 
	 * <li><i>day</i> - 1 to 31
	 * 
	 * <li><i>hour</i> - 0 to 23. A formatter is used to display 12 hour clocks, but this representation 
	 * is always done with an unambiguous 24 hour representation
	 * 
	 * <li><i>minute</i> - 0 to 59
	 * 
	 * <li><i>second</i> - 0 to 59
	 * 
	 * <li><i>millisecond</i> - 0 to 999
	 * 
	 * <li><i>dst</i> - boolean used to specify whether the given time components are
	 * intended to be in daylight time or not. This is only used in the overlap
	 * time when transitioning from DST to standard time, and the time components are 
	 * ambiguous. Otherwise at all other times of the year, this flag is ignored.
	 * If you specify the date using unix time (UTC) or a julian day, then the time is
	 * already unambiguous and this flag does not need to be specified.
	 * <p>
	 * For example, in the US, the transition out of daylight savings time 
	 * in 2014 happens at Nov 2, 2014 2:00am Daylight Time, when the time falls 
	 * back to Nov 2, 2014 1:00am Standard Time. If you give a date/time components as 
	 * "Nov 2, 2014 1:30am", then there are two 1:30am times in that day, and you would 
	 * have to give the standard flag to indicate which of those two you mean. 
	 * (dst=true means daylight time, dst=false means standard time).   
	 * 
	 * <li><i>timezone</i> - the TimeZone instance or time zone name as a string 
	 * of this gregorian date. The date/time is kept in the local time. The time zone
	 * is used later if this date is formatted according to a different time zone and
	 * the difference has to be calculated, or when the date format has a time zone
	 * component in it.
	 * 
	 * <li><i>locale</i> - locale for this gregorian date. If the time zone is not 
	 * given, it can be inferred from this locale. For locales that span multiple
	 * time zones, the one with the largest population is chosen as the one that 
	 * represents the locale.
	 * 
	 * <li><i>date</i> - use the given intrinsic Javascript date to initialize this one.
	 * </ul>
	 *
	 * If the constructor is called with another Gregorian date instance instead of
	 * a parameter block, the other instance acts as a parameter block and its
	 * settings are copied into the current instance.<p>
	 * 
	 * If the constructor is called with no arguments at all or if none of the 
	 * properties listed above 
	 * from <i>unixtime</i> through <i>millisecond</i> are present, then the date 
	 * components are 
	 * filled in with the current date at the time of instantiation. Note that if
	 * you do not give the time zone when defaulting to the current time and the 
	 * time zone for all of ilib was not set with <i>ilib.setTimeZone()</i>, then the
	 * time zone will default to UTC ("Universal Time, Coordinated" or "Greenwich 
	 * Mean Time").<p>
	 * 
	 * If any of the properties from <i>year</i> through <i>millisecond</i> are not
	 * specified in the params, it is assumed that they have the smallest possible
	 * value in the range for the property (zero or one).<p>
	 * 
	 * 
	 * @constructor
	 * @extends IDate
	 * @param {Object=} params parameters that govern the settings and behaviour of this Gregorian date
	 */
	var GregorianDate = function GregorianDate(params) {
	  this.cal = new GregorianCal();
	  this.timezone = "local";

	  if (params) {
	    if (typeof params.noinstance === 'boolean' && params.noinstance) {
	      // for doing inheritance, so don't need to fill in the data. The inheriting class only wants the methods.
	      return;
	    }
	    if (params.locale) {
	      this.locale = typeof params.locale === 'string' ? new Locale(params.locale) : params.locale;
	      var li = new LocaleInfo(this.locale);
	      this.timezone = li.getTimeZone();
	    }
	    if (params.timezone) {
	      this.timezone = params.timezone.toString();
	    }

	    if (params.year || params.month || params.day || params.hour || params.minute || params.second || params.millisecond) {
	      this.year = parseInt(params.year, 10) || 0;
	      this.month = parseInt(params.month, 10) || 1;
	      this.day = parseInt(params.day, 10) || 1;
	      this.hour = parseInt(params.hour, 10) || 0;
	      this.minute = parseInt(params.minute, 10) || 0;
	      this.second = parseInt(params.second, 10) || 0;
	      this.millisecond = parseInt(params.millisecond, 10) || 0;
	      if (typeof params.dst === 'boolean') {
	        this.dst = params.dst;
	      }
	      this.rd = this.newRd(params);

	      // add the time zone offset to the rd to convert to UTC
	      this.offset = 0;
	      if (this.timezone === "local" && typeof params.dst === 'undefined') {
	        // if dst is defined, the intrinsic Date object has no way of specifying which version of a time you mean
	        // in the overlap time at the end of DST. Do you mean the daylight 1:30am or the standard 1:30am? In this
	        // case, use the ilib calculations below, which can distinguish between the two properly
	        var d = new Date(this.year, this.month - 1, this.day, this.hour, this.minute, this.second, this.millisecond);
	        this.offset = -d.getTimezoneOffset() / 1440;
	      } else {
	        if (!this.tz) {
	          this.tz = new TimeZone({ id: this.timezone });
	        }
	        // getOffsetMillis requires that this.year, this.rd, and this.dst 
	        // are set in order to figure out which time zone rules apply and 
	        // what the offset is at that point in the year
	        this.offset = this.tz._getOffsetMillisWallTime(this) / 86400000;
	      }
	      if (this.offset !== 0) {
	        this.rd = this.newRd({
	          rd: this.rd.getRataDie() - this.offset
	        });
	      }
	    }
	  }

	  if (!this.rd) {
	    this.rd = this.newRd(params);
	    this._calcDateComponents();
	  }
	};

	GregorianDate.prototype = new IDate({ noinstance: true });
	GregorianDate.prototype.parent = IDate;
	GregorianDate.prototype.constructor = GregorianDate;

	/**
	 * Return a new RD for this date type using the given params.
	 * @private
	 * @param {Object=} params the parameters used to create this rata die instance
	 * @returns {RataDie} the new RD instance for the given params
	 */
	GregorianDate.prototype.newRd = function (params) {
	  return new GregRataDie(params);
	};

	/**
	 * Calculates the Gregorian year for a given rd number.
	 * @private
	 * @static
	 */
	GregorianDate._calcYear = function (rd) {
	  var days400, days100, days4, years400, years100, years4, years1, year;

	  years400 = Math.floor((rd - 1) / 146097);
	  days400 = MathUtils.mod(rd - 1, 146097);
	  years100 = Math.floor(days400 / 36524);
	  days100 = MathUtils.mod(days400, 36524);
	  years4 = Math.floor(days100 / 1461);
	  days4 = MathUtils.mod(days100, 1461);
	  years1 = Math.floor(days4 / 365);

	  year = 400 * years400 + 100 * years100 + 4 * years4 + years1;
	  if (years100 !== 4 && years1 !== 4) {
	    year++;
	  }
	  return year;
	};

	/**
	 * @private
	 */
	GregorianDate.prototype._calcYear = function (rd) {
	  return GregorianDate._calcYear(rd);
	};

	/**
	 * Calculate the date components for the current time zone
	 * @private
	 */
	GregorianDate.prototype._calcDateComponents = function () {
	  if (this.timezone === "local" && this.rd.getRataDie() >= -99280837 && this.rd.getRataDie() <= 100719163) {
	    // console.log("using js Date to calculate offset");
	    // use the intrinsic JS Date object to do the tz conversion for us, which 
	    // guarantees that it follows the system tz database settings 
	    var d = new Date(this.rd.getTimeExtended());

	    /**
	     * Year in the Gregorian calendar.
	     * @type number
	     */
	    this.year = d.getFullYear();

	    /**
	     * The month number, ranging from 1 (January) to 12 (December).
	     * @type number
	     */
	    this.month = d.getMonth() + 1;

	    /**
	     * The day of the month. This ranges from 1 to 31.
	     * @type number
	     */
	    this.day = d.getDate();

	    /**
	     * The hour of the day. This can be a number from 0 to 23, as times are
	     * stored unambiguously in the 24-hour clock.
	     * @type number
	     */
	    this.hour = d.getHours();

	    /**
	     * The minute of the hours. Ranges from 0 to 59.
	     * @type number
	     */
	    this.minute = d.getMinutes();

	    /**
	     * The second of the minute. Ranges from 0 to 59.
	     * @type number
	     */
	    this.second = d.getSeconds();

	    /**
	     * The millisecond of the second. Ranges from 0 to 999.
	     * @type number
	     */
	    this.millisecond = d.getMilliseconds();

	    this.offset = -d.getTimezoneOffset() / 1440;
	  } else {
	    // console.log("using ilib to calculate offset. tz is " + this.timezone);
	    // console.log("GregDate._calcDateComponents: date is " + JSON.stringify(this) + " parent is " + JSON.stringify(this.parent) + " and parent.parent is " + JSON.stringify(this.parent.parent));
	    if (typeof this.offset === "undefined") {
	      // console.log("calculating offset");
	      this.year = this._calcYear(this.rd.getRataDie());

	      // now offset the RD by the time zone, then recalculate in case we were 
	      // near the year boundary
	      if (!this.tz) {
	        this.tz = new TimeZone({ id: this.timezone });
	      }
	      this.offset = this.tz.getOffsetMillis(this) / 86400000;
	      // } else {
	      // console.log("offset is already defined somehow. type is " + typeof(this.offset));
	      // console.trace("Stack is this one");
	    }
	    // console.log("offset is " + this.offset);
	    var rd = this.rd.getRataDie();
	    if (this.offset !== 0) {
	      rd += this.offset;
	    }
	    this.year = this._calcYear(rd);

	    var yearStartRd = this.newRd({
	      year: this.year,
	      month: 1,
	      day: 1,
	      cal: this.cal
	    });

	    // remainder is days into the year
	    var remainder = rd - yearStartRd.getRataDie() + 1;

	    var cumulative = GregorianCal.prototype.isLeapYear.call(this.cal, this.year) ? GregRataDie.cumMonthLengthsLeap : GregRataDie.cumMonthLengths;

	    this.month = SearchUtils.bsearch(Math.floor(remainder), cumulative);
	    remainder = remainder - cumulative[this.month - 1];

	    this.day = Math.floor(remainder);
	    remainder -= this.day;
	    // now convert to milliseconds for the rest of the calculation
	    remainder = Math.round(remainder * 86400000);

	    this.hour = Math.floor(remainder / 3600000);
	    remainder -= this.hour * 3600000;

	    this.minute = Math.floor(remainder / 60000);
	    remainder -= this.minute * 60000;

	    this.second = Math.floor(remainder / 1000);
	    remainder -= this.second * 1000;

	    this.millisecond = Math.floor(remainder);
	  }
	};

	/**
	 * Return the day of the week of this date. The day of the week is encoded
	 * as number from 0 to 6, with 0=Sunday, 1=Monday, etc., until 6=Saturday.
	 * 
	 * @return {number} the day of the week
	 */
	GregorianDate.prototype.getDayOfWeek = function () {
	  var rd = Math.floor(this.rd.getRataDie() + (this.offset || 0));
	  return MathUtils.mod(rd, 7);
	};

	/**
	 * Return the ordinal day of the year. Days are counted from 1 and proceed linearly up to 
	 * 365, regardless of months or weeks, etc. That is, January 1st is day 1, and 
	 * December 31st is 365 in regular years, or 366 in leap years.
	 * @return {number} the ordinal day of the year
	 */
	GregorianDate.prototype.getDayOfYear = function () {
	  var cumulativeMap = this.cal.isLeapYear(this.year) ? GregRataDie.cumMonthLengthsLeap : GregRataDie.cumMonthLengths;

	  return cumulativeMap[this.month - 1] + this.day;
	};

	/**
	 * Return the era for this date as a number. The value for the era for Gregorian 
	 * calendars is -1 for "before the common era" (BCE) and 1 for "the common era" (CE). 
	 * BCE dates are any date before Jan 1, 1 CE. In the proleptic Gregorian calendar, 
	 * there is a year 0, so any years that are negative or zero are BCE. In the Julian
	 * calendar, there is no year 0. Instead, the calendar goes straight from year -1 to 
	 * 1.
	 * @return {number} 1 if this date is in the common era, -1 if it is before the 
	 * common era 
	 */
	GregorianDate.prototype.getEra = function () {
	  return this.year < 1 ? -1 : 1;
	};

	/**
	 * Return the name of the calendar that governs this date.
	 * 
	 * @return {string} a string giving the name of the calendar
	 */
	GregorianDate.prototype.getCalendar = function () {
	  return "gregorian";
	};

	// register with the factory method
	IDate._constructors["gregorian"] = GregorianDate;

	module.exports = GregorianDate;

/***/ },
/* 31 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	exports.Spotlight = exports.getDirection = undefined;

	var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
		return typeof obj === "undefined" ? "undefined" : _typeof2(obj);
	} : function (obj) {
		return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof2(obj);
	}; /*
	    * A javascript-based implementation of Spatial Navigation.
	    *
	    * Copyright (c) 2016 Luke Chang.
	    * https://github.com/luke-chang/js-spatial-navigation
	    *
	    * Licensed under the MPL license.
	    */

	/**
	 * Exports the {@link spotlight.Spotlight} object used for controlling spotlight behavior and the
	 * {@link spotlight.Spotlight.getDirection} function for mapping a keycode to a spotlight direction.
	 *
	 * The default export is {@link spotlight.Spotlight}.
	 *
	 * @module spotlight
	 */

	var _keymap = __webpack_require__(42);

	var _util = __webpack_require__(28);

	var _last = __webpack_require__(333);

	var _last2 = _interopRequireDefault(_last);

	var _Accelerator = __webpack_require__(247);

	var _Accelerator2 = _interopRequireDefault(_Accelerator);

	var _SpotlightRootDecorator = __webpack_require__(137);

	var _Spottable = __webpack_require__(34);

	function _interopRequireDefault(obj) {
		return obj && obj.__esModule ? obj : { default: obj };
	}

	function _toConsumableArray(arr) {
		if (Array.isArray(arr)) {
			for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
				arr2[i] = arr[i];
			}return arr2;
		} else {
			return Array.from(arr);
		}
	}

	var isDown = (0, _keymap.is)('down');
	var isEnter = (0, _keymap.is)('enter');
	var isLeft = (0, _keymap.is)('left');
	var isRight = (0, _keymap.is)('right');
	var isUp = (0, _keymap.is)('up');

	/**
	 * Translates keyCodes into 5-way direction descriptions (e.g. `'down'`)
	 *
	 * @function
	 * @memberof spotlight.Spotlight
	 * @param {Number} keyCode - Key code to analyze
	 * @returns {String|false} - One of `'up'`, `'down'`, `'left'`, `'right'` or `false` if not a direction key
	 * @public
	 */
	var getDirection = function getDirection(keyCode) {
		return isDown(keyCode) && 'down' || isLeft(keyCode) && 'left' || isRight(keyCode) && 'right' || isUp(keyCode) && 'up';
	};
	var isPointerEvent = function isPointerEvent(target) {
		return 'x' in target && 'y' in target;
	};
	var isPointerShow = (0, _keymap.is)('pointerShow');
	var isPointerHide = (0, _keymap.is)('pointerHide');

	var SpotlightAccelerator = new _Accelerator2.default();

	/**
	 * Provides 5-way navigation and focus support
	 *
	 * @class Spotlight
	 * @memberof spotlight
	 * @public
	 */
	var Spotlight = function () {
		'use strict';

		/*
	 /* config
	 */
		// Note: an <extSelector> can be one of following types:
		// - a valid selector string for "querySelectorAll"
		// - a NodeList or an array containing DOM elements
		// - a single DOM element
		// - a string "@<containerId>" to indicate the specified container
		// - a string "@" to indicate the default container

		var GlobalConfig = {
			selector: '', // can be a valid <extSelector> except "@" syntax.
			straightOnly: false,
			straightOverlapThreshold: 0.5,
			rememberSource: false,
			selectorDisabled: false,
			defaultElement: '', // <extSelector> except "@" syntax.
			enterTo: '', // '', 'last-focused', 'default-element'
			leaveFor: null, // {left: <extSelector>, right: <extSelector>, up: <extSelector>, down: <extSelector>}
			restrict: 'self-first', // 'self-first', 'self-only', 'none'
			tabIndexIgnoreList: 'a, input, select, textarea, button, iframe, [contentEditable=true]',
			navigableFilter: null
		};

		var _reverseDirections = {
			'left': 'right',
			'up': 'down',
			'right': 'left',
			'down': 'up'
		};

		var _containerPrefix = 'container-';

		/*
	 /* private vars
	 */
		var _ids = 0;
		var _initialized = false;
		var _pause = false;
		var _containers = new Map();
		var _defaultContainerId = '';
		var _lastContainerId = '';
		var _duringFocusChange = false;
		var _pointerX = null;
		var _pointerY = null;

		/*
	  * Whether a 5-way directional key is being held.
	  *
	  * @type {Boolean}
	  * @default false
	  */
		var _5WayKeyHold = false;

		/*
	  * Whether Spotlight is in pointer mode (as opposed to 5-way mode).
	  *
	  * @type {Boolean}
	  * @default true
	  */
		var _pointerMode = true;

		/*
	 * polyfills
	 */
		var elementMatchesSelector = function elementMatchesSelector(selector) {
			var matchedNodes = (this.parentNode || this.document).querySelectorAll(selector);
			return [].slice.call(matchedNodes).indexOf(this) >= 0;
		};
		if ((typeof window === 'undefined' ? 'undefined' : _typeof(window)) === 'object') {
			elementMatchesSelector = window.Element.prototype.matches || window.Element.prototype.matchesSelector || window.Element.prototype.mozMatchesSelector || window.Element.prototype.webkitMatchesSelector || window.Element.prototype.msMatchesSelector || window.Element.prototype.oMatchesSelector || elementMatchesSelector;
		}

		/*
	 * protected methods
	 */
		function getRect(elem) {
			var cr = elem.getBoundingClientRect();
			var rect = {
				left: cr.left,
				top: cr.top,
				width: cr.width,
				height: cr.height
			};
			rect.element = elem;
			rect.right = rect.left + rect.width;
			rect.bottom = rect.top + rect.height;
			rect.center = {
				x: rect.left + Math.floor(rect.width / 2),
				y: rect.top + Math.floor(rect.height / 2)
			};
			rect.center.left = rect.center.right = rect.center.x;
			rect.center.top = rect.center.bottom = rect.center.y;
			return rect;
		}

		function getPointRect(position) {
			var x = position.x,
			    y = position.y;

			return {
				left: x,
				top: y,
				width: 0,
				height: 0,
				right: x,
				bottom: y,
				center: {
					x: x,
					y: y,
					left: x,
					right: x,
					top: y,
					bottom: y
				}
			};
		}

		function partition(rects, targetRect, straightOverlapThreshold) {
			var groups = [[], [], [], [], [], [], [], [], []];

			for (var i = 0; i < rects.length; i++) {
				var rect = rects[i];
				var center = rect.center;
				var x = void 0,
				    y = void 0,
				    groupId = void 0;

				if (center.x < targetRect.left) {
					x = 0;
				} else if (center.x <= targetRect.right) {
					x = 1;
				} else {
					x = 2;
				}

				if (center.y < targetRect.top) {
					y = 0;
				} else if (center.y <= targetRect.bottom) {
					y = 1;
				} else {
					y = 2;
				}

				groupId = y * 3 + x;
				groups[groupId].push(rect);

				if ([0, 2, 6, 8].indexOf(groupId) !== -1) {
					var threshold = straightOverlapThreshold;

					if (rect.left <= targetRect.right - targetRect.width * threshold) {
						if (groupId === 2) {
							groups[1].push(rect);
						} else if (groupId === 8) {
							groups[7].push(rect);
						}
					}

					if (rect.right >= targetRect.left + targetRect.width * threshold) {
						if (groupId === 0) {
							groups[1].push(rect);
						} else if (groupId === 6) {
							groups[7].push(rect);
						}
					}

					if (rect.top <= targetRect.bottom - targetRect.height * threshold) {
						if (groupId === 6) {
							groups[3].push(rect);
						} else if (groupId === 8) {
							groups[5].push(rect);
						}
					}

					if (rect.bottom >= targetRect.top + targetRect.height * threshold) {
						if (groupId === 0) {
							groups[3].push(rect);
						} else if (groupId === 2) {
							groups[5].push(rect);
						}
					}
				}
			}

			return groups;
		}

		function generateDistancefunction(targetRect) {
			return {
				nearPlumbLineIsBetter: function nearPlumbLineIsBetter(rect) {
					var d = void 0;
					if (rect.center.x < targetRect.center.x) {
						d = targetRect.center.x - rect.right;
					} else {
						d = rect.left - targetRect.center.x;
					}
					return d < 0 ? 0 : d;
				},
				nearHorizonIsBetter: function nearHorizonIsBetter(rect) {
					var d = void 0;
					if (rect.center.y < targetRect.center.y) {
						d = targetRect.center.y - rect.bottom;
					} else {
						d = rect.top - targetRect.center.y;
					}
					return d < 0 ? 0 : d;
				},
				nearTargetLeftIsBetter: function nearTargetLeftIsBetter(rect) {
					var d = void 0;
					if (rect.center.x < targetRect.center.x) {
						d = targetRect.left - rect.right;
					} else {
						d = rect.left - targetRect.left;
					}
					return d < 0 ? 0 : d;
				},
				nearTargetTopIsBetter: function nearTargetTopIsBetter(rect) {
					var d = void 0;
					if (rect.center.y < targetRect.center.y) {
						d = targetRect.top - rect.bottom;
					} else {
						d = rect.top - targetRect.top;
					}
					return d < 0 ? 0 : d;
				},
				topIsBetter: function topIsBetter(rect) {
					return rect.top;
				},
				bottomIsBetter: function bottomIsBetter(rect) {
					return -1 * rect.bottom;
				},
				leftIsBetter: function leftIsBetter(rect) {
					return rect.left;
				},
				rightIsBetter: function rightIsBetter(rect) {
					return -1 * rect.right;
				}
			};
		}

		function prioritize(priorities) {
			var destPriority = null;
			for (var i = 0; i < priorities.length; i++) {
				if (priorities[i].group.length) {
					destPriority = priorities[i];
					break;
				}
			}

			if (!destPriority) {
				return null;
			}

			var destDistance = destPriority.distance;

			destPriority.group.sort(function (a, b) {
				for (var _i = 0; _i < destDistance.length; _i++) {
					var distance = destDistance[_i];
					var delta = distance(a) - distance(b);
					if (delta) {
						return delta;
					}
				}
				return 0;
			});

			return destPriority.group;
		}

		function navigate(target, direction, candidates, config) {
			if (!target || !direction || !candidates || !candidates.length) {
				return null;
			}

			var rects = [];
			for (var i = 0; i < candidates.length; i++) {
				var rect = getRect(candidates[i]);
				if (rect) {
					rects.push(rect);
				}
			}
			if (!rects.length) {
				return null;
			}

			var targetRect = isPointerEvent(target) ? getPointRect(target) : getRect(target);
			if (!targetRect) {
				return null;
			}

			var distanceFunction = generateDistancefunction(targetRect);

			var groups = partition(rects, targetRect, config.straightOverlapThreshold);

			var internalGroups = partition(groups[4], targetRect.center, config.straightOverlapThreshold);

			var priorities = void 0;

			switch (direction) {
				case 'left':
					priorities = [{
						group: internalGroups[0].concat(internalGroups[3]).concat(internalGroups[6]),
						distance: [distanceFunction.nearPlumbLineIsBetter, distanceFunction.topIsBetter]
					}, {
						group: groups[3],
						distance: [distanceFunction.nearPlumbLineIsBetter, distanceFunction.topIsBetter]
					}, {
						group: groups[0].concat(groups[6]),
						distance: [distanceFunction.nearHorizonIsBetter, distanceFunction.rightIsBetter, distanceFunction.nearTargetTopIsBetter]
					}];
					break;
				case 'right':
					priorities = [{
						group: internalGroups[2].concat(internalGroups[5]).concat(internalGroups[8]),
						distance: [distanceFunction.nearPlumbLineIsBetter, distanceFunction.topIsBetter]
					}, {
						group: groups[5],
						distance: [distanceFunction.nearPlumbLineIsBetter, distanceFunction.topIsBetter]
					}, {
						group: groups[2].concat(groups[8]),
						distance: [distanceFunction.nearHorizonIsBetter, distanceFunction.leftIsBetter, distanceFunction.nearTargetTopIsBetter]
					}];
					break;
				case 'up':
					priorities = [{
						group: internalGroups[0].concat(internalGroups[1]).concat(internalGroups[2]),
						distance: [distanceFunction.nearHorizonIsBetter, distanceFunction.leftIsBetter]
					}, {
						group: groups[1],
						distance: [distanceFunction.nearHorizonIsBetter, distanceFunction.leftIsBetter]
					}, {
						group: groups[0].concat(groups[2]),
						distance: [distanceFunction.nearPlumbLineIsBetter, distanceFunction.bottomIsBetter, distanceFunction.nearTargetLeftIsBetter]
					}];
					break;
				case 'down':
					priorities = [{
						group: internalGroups[6].concat(internalGroups[7]).concat(internalGroups[8]),
						distance: [distanceFunction.nearHorizonIsBetter, distanceFunction.leftIsBetter]
					}, {
						group: groups[7],
						distance: [distanceFunction.nearHorizonIsBetter, distanceFunction.leftIsBetter]
					}, {
						group: groups[6].concat(groups[8]),
						distance: [distanceFunction.nearPlumbLineIsBetter, distanceFunction.topIsBetter, distanceFunction.nearTargetLeftIsBetter]
					}];
					break;
				default:
					return null;
			}

			if (config.straightOnly) {
				priorities.pop();
			}

			var destGroup = prioritize(priorities);
			if (!destGroup) {
				return null;
			}

			var dest = null;
			if (config.rememberSource && config.previous && config.previous.destination === target && config.previous.reverse === direction) {
				for (var j = 0; j < destGroup.length; j++) {
					if (destGroup[j].element === config.previous.target) {
						dest = destGroup[j].element;
						break;
					}
				}
			}

			if (!dest) {
				dest = destGroup[0].element;
			}

			return dest;
		}

		function generateId() {
			var id = void 0;
			/* eslint no-constant-condition: ["error", { "checkLoops": false }]*/
			while (true) {
				id = _containerPrefix + String(++_ids);
				if (!_containers.get(id)) {
					break;
				}
			}
			return id;
		}

		function parseSelector(selector) {
			var result = void 0;
			if (typeof selector === 'string') {
				result = [].slice.call(document.querySelectorAll(selector));
			} else if ((typeof selector === 'undefined' ? 'undefined' : _typeof(selector)) === 'object' && selector.length) {
				result = [].slice.call(selector);
			} else if ((typeof selector === 'undefined' ? 'undefined' : _typeof(selector)) === 'object' && selector.nodeType === 1) {
				result = [selector];
			} else {
				result = [];
			}
			return result;
		}

		function matchSelector(elem, selector) {
			if (typeof selector === 'string') {
				return elementMatchesSelector.call(elem, selector);
			} else if ((typeof selector === 'undefined' ? 'undefined' : _typeof(selector)) === 'object' && selector.length) {
				return selector.indexOf(elem) >= 0;
			} else if ((typeof selector === 'undefined' ? 'undefined' : _typeof(selector)) === 'object' && selector.nodeType === 1) {
				return elem === selector;
			}
			return false;
		}

		function _getCurrent() {
			var activeElement = document.activeElement;
			if (activeElement && activeElement !== document.body) {
				return activeElement;
			}
		}

		function extend(out) {
			out = out || {};
			for (var i = 1; i < arguments.length; i++) {
				if (!arguments[i]) {
					continue;
				}
				for (var key in arguments[i]) {
					if (arguments[i].hasOwnProperty(key) && typeof arguments[i][key] !== 'undefined') {
						out[key] = arguments[i][key];
					}
				}
			}
			return out;
		}

		function exclude(elemList, excludedElem) {
			if (!Array.isArray(excludedElem)) {
				excludedElem = [excludedElem];
			}
			for (var i = 0, index; i < excludedElem.length; i++) {
				index = elemList.indexOf(excludedElem[i]);
				if (index >= 0) {
					elemList.splice(index, 1);
				}
			}
			return elemList;
		}

		function isNavigable(elem, containerId, verifyContainerSelector) {
			var config = _containers.get(containerId);

			if (!elem || !containerId || !config || config.selectorDisabled) {
				return false;
			}
			if (elem.offsetWidth <= 0 && elem.offsetHeight <= 0) {
				return false;
			}
			if (verifyContainerSelector && !matchSelector(elem, config.selector)) {
				return false;
			}
			if (typeof config.navigableFilter === 'function') {
				if (config.navigableFilter(elem, containerId) === false) {
					return false;
				}
			} else if (typeof GlobalConfig.navigableFilter === 'function') {
				if (GlobalConfig.navigableFilter(elem, containerId) === false) {
					return false;
				}
			}
			return true;
		}

		function getContainerId(elem) {
			var containers = [].concat(_toConsumableArray(_containers.keys()));

			for (var i = containers.length; i-- > 0;) {
				var id = containers[i];
				var config = _containers.get(id);
				if (!config.selectorDisabled && matchSelector(elem, config.selector)) {
					return id;
				}
			}
		}

		// returns an array of ids for containers that wrap the element, in order of outer-to-inner, with
		// the last array item being the immediate container id of the element.
		function getContainerIds(elem) {
			var containerIds = [].concat(_toConsumableArray(_containers.keys()));
			var matches = [];

			for (var i = 0, containers = containerIds.length; i < containers; ++i) {
				var id = containerIds[i];
				var config = _containers.get(id);
				if (!config.selectorDisabled && matchSelector(elem, config.selector)) {
					matches.push(id);
				}
			}
			return matches;
		}

		function getContainerNavigableElements(containerId) {
			return parseSelector(_containers.get(containerId).selector).filter(function (elem) {
				return isNavigable(elem, containerId);
			});
		}

		function getContainerDefaultElement(containerId) {
			var defaultElement = _containers.get(containerId).defaultElement;
			if (!defaultElement) {
				return null;
			}
			if (typeof defaultElement === 'string') {
				defaultElement = parseSelector(defaultElement)[0];
			}
			if (isNavigable(defaultElement, containerId, true)) {
				return defaultElement;
			}
			return null;
		}

		function getContainerLastFocusedElement(containerId) {
			var _containers$get = _containers.get(containerId),
			    lastFocusedElement = _containers$get.lastFocusedElement,
			    lastFocusedIndex = _containers$get.lastFocusedIndex;

			var element = lastFocusedElement;
			if (!element && lastFocusedIndex >= 0) {
				var spottableChildren = getContainerNavigableElements(containerId);
				element = spottableChildren[lastFocusedIndex];
			}

			return isNavigable(element, containerId, true) ? element : null;
		}

		function setContainerLastFocusedElement(elem, containerIds) {
			for (var i = 0, containers = containerIds.length; i < containers; ++i) {
				_containers.get(containerIds[i]).lastFocusedElement = elem;
			}
		}

		function focusElement(elem, containerIds, fromPointer) {
			if (!elem) {
				return false;
			}

			if (_pointerMode && !fromPointer) {
				setContainerLastFocusedElement(elem, containerIds);
				return false;
			}

			var currentFocusedElement = _getCurrent();

			var silentFocus = function silentFocus() {
				if (currentFocusedElement) {
					currentFocusedElement.blur();
				}
				elem.focus();
				focusChanged(elem, containerIds);
			};

			if (_duringFocusChange) {
				silentFocus();
				return true;
			}

			_duringFocusChange = true;

			if (_pause) {
				silentFocus();
				_duringFocusChange = false;
				return true;
			}

			if (currentFocusedElement) {
				currentFocusedElement.blur();
			}

			elem.focus();

			_duringFocusChange = false;

			focusChanged(elem, containerIds);
			return true;
		}

		function focusChanged(elem, containerIds) {
			if (!containerIds || !containerIds.length) {
				containerIds = getContainerIds(elem);
			}
			var containerId = (0, _last2.default)(containerIds);
			if (containerId) {
				setContainerLastFocusedElement(elem, containerIds);
				_lastContainerId = containerId;
			}
		}

		function focusExtendedSelector(selector) {
			if (selector.charAt(0) === '@') {
				if (selector.length === 1) {
					return focusContainer();
				} else {
					var containerId = selector.substr(1);
					return focusContainer(containerId);
				}
			} else {
				var next = parseSelector(selector)[0];
				if (next) {
					var nextContainerIds = getContainerIds(next);
					if (isNavigable(next, (0, _last2.default)(nextContainerIds))) {
						return focusElement(next, nextContainerIds);
					}
				}
			}
			return false;
		}

		function focusContainer(containerId) {
			var range = [];
			var addRange = function addRange(id) {
				var config = _containers.get(id);
				if (id && range.indexOf(id) < 0 && config && !config.selectorDisabled) {
					range.push(id);
				}
			};

			if (containerId) {
				addRange(containerId);
			} else {
				addRange(_defaultContainerId);
				addRange(_lastContainerId);
				[].concat(_toConsumableArray(_containers.keys())).map(addRange);
			}

			for (var i = 0; i < range.length; i++) {
				var id = range[i];
				var next = void 0;

				if (_containers.get(id).enterTo === 'last-focused') {
					next = getContainerLastFocusedElement(id) || getContainerDefaultElement(id) || getContainerNavigableElements(id)[0];
				} else {
					next = getContainerDefaultElement(id) || getContainerLastFocusedElement(id) || getContainerNavigableElements(id)[0];
				}

				if (next) {
					return focusElement(next, range);
				}
			}

			return false;
		}

		function gotoLeaveFor(containerId, direction) {
			var config = _containers.get(containerId);

			if (config.leaveFor && typeof config.leaveFor[direction] !== 'undefined') {
				var next = config.leaveFor[direction];

				if (typeof next === 'string') {
					if (next === '') {
						return null;
					}
					return focusExtendedSelector(next);
				}

				var nextContainerIds = getContainerIds(next);
				if (isNavigable(next, (0, _last2.default)(nextContainerIds))) {
					return focusElement(next, nextContainerIds);
				}
			}
			return false;
		}

		function getNavigableElements() {
			var containerNavigableElements = {};
			var allNavigableElements = [];

			var _iteratorNormalCompletion = true;
			var _didIteratorError = false;
			var _iteratorError = undefined;

			try {
				for (var _iterator = _containers.keys()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
					var id = _step.value;

					containerNavigableElements[id] = getContainerNavigableElements(id);
					allNavigableElements = allNavigableElements.concat(containerNavigableElements[id]);
				}
			} catch (err) {
				_didIteratorError = true;
				_iteratorError = err;
			} finally {
				try {
					if (!_iteratorNormalCompletion && _iterator.return) {
						_iterator.return();
					}
				} finally {
					if (_didIteratorError) {
						throw _iteratorError;
					}
				}
			}

			return { allNavigableElements: allNavigableElements, containerNavigableElements: containerNavigableElements };
		}

		function focusNext(next, direction, currentContainerId, currentFocusedElement) {
			var nextContainerIds = getContainerIds(next);
			var nextContainerId = (0, _last2.default)(nextContainerIds);

			if (currentContainerId !== nextContainerId) {
				if (_5WayKeyHold) {
					return false;
				}
				var result = gotoLeaveFor(currentContainerId, direction);
				if (result) {
					return true;
				} else if (result === null) {
					return false;
				}

				var enterToElement = void 0;
				if (!isNavigable(currentFocusedElement, nextContainerId, true)) {
					switch (_containers.get(nextContainerId).enterTo) {
						case 'last-focused':
							enterToElement = getContainerLastFocusedElement(nextContainerId) || getContainerDefaultElement(nextContainerId);
							break;
						case 'default-element':
							enterToElement = getContainerDefaultElement(nextContainerId);
							break;
					}
				}
				if (enterToElement) {
					next = enterToElement;
				}
			}

			return focusElement(next, nextContainerIds);
		}

		function spotNextFromPoint(direction, position, containerId) {
			var config = extend({}, GlobalConfig, _containers.get(containerId));

			var _getNavigableElements = getNavigableElements(),
			    allNavigableElements = _getNavigableElements.allNavigableElements,
			    containerNavigableElements = _getNavigableElements.containerNavigableElements;

			var next = void 0;

			if (config.restrict === 'self-only' || config.restrict === 'self-first') {
				next = navigate(position, direction, containerNavigableElements[containerId], config);
			} else {
				next = navigate(position, direction, allNavigableElements, config);
			}

			if (next) {
				_containers.get(containerId).previous = {
					target: getContainerLastFocusedElement(_lastContainerId),
					destination: next,
					reverse: _reverseDirections[direction]
				};
				return focusNext(next, direction, containerId);
			}

			return false;
		}

		function spotNext(direction, currentFocusedElement, currentContainerId) {
			var extSelector = currentFocusedElement.getAttribute('data-spot-' + direction);
			if (typeof extSelector === 'string') {
				if (extSelector === '' || !focusExtendedSelector(extSelector)) {
					return false;
				}
				return true;
			}

			var _getNavigableElements2 = getNavigableElements(),
			    allNavigableElements = _getNavigableElements2.allNavigableElements,
			    containerNavigableElements = _getNavigableElements2.containerNavigableElements;

			var config = extend({}, GlobalConfig, _containers.get(currentContainerId));
			var next = void 0;

			if (config.restrict === 'self-only' || config.restrict === 'self-first') {
				var currentContainerNavigableElements = containerNavigableElements[currentContainerId];

				next = navigate(currentFocusedElement, direction, exclude(currentContainerNavigableElements, currentFocusedElement), config);

				if (!next && config.restrict === 'self-first') {
					next = navigate(currentFocusedElement, direction, exclude(allNavigableElements, currentContainerNavigableElements), config);
				}
			} else {
				next = navigate(currentFocusedElement, direction, exclude(allNavigableElements, currentFocusedElement), config);
			}

			if (next) {
				_containers.get(currentContainerId).previous = {
					target: currentFocusedElement,
					destination: next,
					reverse: _reverseDirections[direction]
				};
				return focusNext(next, direction, currentContainerId, currentFocusedElement);
			} else if (gotoLeaveFor(currentContainerId, direction)) {
				return true;
			}

			return false;
		}

		// 30ms (_pointerHiddenToKeyTimeout) is semi-arbitrary, to account for the time it takes for the
		// following directional key event to fire, and to prevent momentary spotting of the last
		// focused item - needs to be a value large enough to account for the potentially-trailing
		// event, but not too large that another unrelated event can be fired inside the window
		var hidePointerJob = new _util.Job(function () {
			_pointerMode = false;
			if (!_getCurrent() && _lastContainerId) {
				Spotlight.focus(getContainerLastFocusedElement(_lastContainerId));
			}
		}, 30);

		function preventDefault(evt) {
			evt.preventDefault();
			evt.stopPropagation();
			return false;
		}

		function onAcceleratedKeyDown(evt) {
			var currentFocusedElement = _getCurrent();
			var direction = getDirection(evt.keyCode);

			if (!currentFocusedElement) {
				if (_lastContainerId) {
					currentFocusedElement = getContainerLastFocusedElement(_lastContainerId);
				}
				if (!currentFocusedElement) {
					focusContainer();
					return preventDefault(evt);
				}
			}

			var currentContainerIds = getContainerIds(currentFocusedElement);
			var currentContainerId = (0, _last2.default)(currentContainerIds);
			if (!currentContainerId) {
				return;
			}

			if (direction && !spotNext(direction, currentFocusedElement, currentContainerId) && currentFocusedElement !== document.activeElement) {
				focusElement(currentFocusedElement, currentContainerIds);
			}
		}

		function shouldPreventNavigation() {
			return !_containers.size || _pause;
		}

		function onKeyUp(evt) {
			var keyCode = evt.keyCode;

			if (getDirection(keyCode) || isEnter(keyCode)) {
				SpotlightAccelerator.reset();
				_5WayKeyHold = false;
			}
		}

		function onKeyDown(evt) {
			if (shouldPreventNavigation()) {
				return;
			}

			var keyCode = evt.keyCode;
			var direction = getDirection(keyCode);

			if (!direction && !(isPointerHide(keyCode) || isPointerShow(keyCode) || isEnter(keyCode))) {
				return;
			}

			if (isPointerHide(keyCode)) {
				hidePointerJob.start();
			} else if (isPointerShow(keyCode)) {
				_pointerMode = true;
			} else {
				_pointerMode = false;
				if (!_pause) {
					if (_getCurrent()) {
						SpotlightAccelerator.processKey(evt, onAcceleratedKeyDown);
					} else if (!spotNextFromPoint(direction, { x: _pointerX, y: _pointerY }, _lastContainerId)) {
						Spotlight.focus(getContainerLastFocusedElement(_lastContainerId));
					}
					_5WayKeyHold = true;
				}
			}

			if (direction) {
				preventDefault(evt);
			}
		}

		function onMouseOver(evt) {
			// a motionless pointer over animated spottable dom (such as list scrolling via 5-way) still emits
			// an `onMouseOver` event even when `_pointerMode` is `false`, in which case we terminate early.
			if (!_pointerMode || shouldPreventNavigation()) {
				return;
			}

			var target = getNavigableTarget(evt.target); // account for child controls

			if (target && target !== _getCurrent()) {
				// moving over a focusable element
				focusElement(target, getContainerIds(target), true);
				preventDefault(evt);
			}
		}

		function onMouseMove(evt) {
			var pointerMode = _pointerMode;

			// Chrome emits mousemove on scroll, but client coordinates do not change.
			if (!pointerMode && evt.clientX === _pointerX && evt.clientY === _pointerY) {
				return;
			}

			_pointerMode = true;

			// cache last-known pointer coordinates
			_pointerX = evt.clientX;
			_pointerY = evt.clientY;

			if (shouldPreventNavigation()) {
				return;
			}

			var current = _getCurrent();
			var currentContainsTarget = current ? current.contains(evt.target) : false;

			// calling `getNavigableTarget()` is a heavy operation during `mousemove`, so we specifically guard
			// against unnecessarily executing it
			if (pointerMode && current && !currentContainsTarget) {
				// we are moving over a non-focusable element, so we force a blur to occur
				current.blur();
			} else if (!pointerMode && !(current && currentContainsTarget)) {
				var target = getNavigableTarget(evt.target);

				if (!target && current) {
					// we are moving over a non-focusable element, so we force a blur to occur
					current.blur();
				} else if (target && (!current || target !== current)) {
					// we are moving over a focusable element, so we set focus to the target
					focusElement(target, getContainerIds(target), true);
				}
			}
		}

		function getNavigableTarget(target) {
			var parent = void 0;
			while (target && !isFocusable(target)) {
				parent = target.parentNode;
				target = parent === document ? null : parent; // calling isNavigable on document is problematic
			}
			return target;
		}

		function isFocusable(elem) {
			var _iteratorNormalCompletion2 = true;
			var _didIteratorError2 = false;
			var _iteratorError2 = undefined;

			try {
				for (var _iterator2 = _containers.keys()[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
					var id = _step2.value;
					// check *all* the containers to see if the specified element is a focusable element
					if (isNavigable(elem, id, true)) return true;
				}
			} catch (err) {
				_didIteratorError2 = true;
				_iteratorError2 = err;
			} finally {
				try {
					if (!_iteratorNormalCompletion2 && _iterator2.return) {
						_iterator2.return();
					}
				} finally {
					if (_didIteratorError2) {
						throw _iteratorError2;
					}
				}
			}

			return false;
		}

		/*
	  * public methods
	  */
		var exports = /** @lends spotlight.Spotlight.prototype */{ // eslint-disable-line no-shadow
			/**
	   * Initializes Spotlight. This is generally handled by
	   * {@link spotlight/SpotlightRootDecorator.SpotlightRootDecorator}.
	   *
	   * @memberof spotlight.Spotlight.prototype
	   * @public
	   */
			initialize: function initialize() {
				if (!_initialized) {
					window.addEventListener('keydown', onKeyDown);
					window.addEventListener('keyup', onKeyUp);
					window.addEventListener('mouseover', onMouseOver);
					window.addEventListener('mousemove', onMouseMove);
					_lastContainerId = _SpotlightRootDecorator.spotlightRootContainerName;
					_initialized = true;
				}
			},

			/**
	   * Terminates Spotlight. This is generally handled by {@link spotlight.SpotlightRootDecorator}.
	   *
	   * @memberof spotlight.Spotlight.prototype
	   * @public
	   */
			terminate: function terminate() {
				window.removeEventListener('keydown', onKeyDown);
				window.removeEventListener('keyup', onKeyUp);
				window.removeEventListener('mouseover', onMouseOver);
				window.removeEventListener('mousemove', onMouseMove);
				Spotlight.clear();
				_ids = 0;
				_initialized = false;
			},

			/**
	   * Resets spotlight container information
	   *
	   * @memberof spotlight.Spotlight.prototype
	   * @private
	   */
			clear: function clear() {
				_containers.clear();
				_defaultContainerId = '';
				_lastContainerId = '';
				_duringFocusChange = false;
			},

			// set(<config>);
			// set(<containerId>, <config>);
			/**
	   * Sets the config for spotlight or the specified containerID
	   *
	   * @memberof spotlight.Spotlight.prototype
	   * @param {String|Object} param1 Configuration object or container ID
	   * @param {Object|undefined} param2 Configuration object if container ID supplied in param1
	   * @returns {undefined}
	   * @public
	   */
			set: function set() {
				var containerId = void 0,
				    config = void 0,
				    existingConfig = void 0;

				if (_typeof(arguments[0]) === 'object') {
					config = arguments[0];
				} else if (typeof arguments[0] === 'string' && _typeof(arguments[1]) === 'object') {
					containerId = arguments[0];
					config = arguments[1];
					existingConfig = _containers.get(containerId);
					if (!existingConfig) {
						throw new Error('Container "' + containerId + '" doesn\'t exist!');
					}
				} else {
					return;
				}

				for (var key in config) {
					if (typeof GlobalConfig[key] !== 'undefined') {
						if (containerId) {
							existingConfig[key] = config[key];
						} else if (typeof config[key] !== 'undefined') {
							GlobalConfig[key] = config[key];
						}
					}
				}

				if (containerId) {
					// remove "undefined" items
					_containers.set(containerId, extend({}, existingConfig));
				}
			},

			// add(<config>);
			// add(<containerId>, <config>);
			/**
	   * Adds the config for a new container. The container ID may be passed in the configuration
	   * object. If no container ID is supplied, a new container ID will be generated.
	   *
	   * @memberof spotlight.Spotlight.prototype
	   * @param {String|Object} param1 Configuration object or container ID
	   * @param {Object|undefined} param2 Configuration object if container ID supplied in param1
	   * @returns {String} The container ID of the container
	   * @public
	   */
			add: function add() {
				var containerId = void 0;
				var config = {};

				if (_typeof(arguments[0]) === 'object') {
					config = arguments[0];
				} else if (typeof arguments[0] === 'string') {
					containerId = arguments[0];
					if (_typeof(arguments[1]) === 'object') {
						config = arguments[1];
					}
				}

				if (!containerId) {
					containerId = typeof config.id === 'string' ? config.id : generateId();
				}

				// if a previous config does not exist, initialize a new one
				if (!_containers.get(containerId)) {
					_containers.set(containerId, config);
				}

				// Either initialize the default config or merge the passed config with the existing
				Spotlight.set(containerId, config);

				return containerId;
			},

			unmount: function unmount(containerId) {
				if (!containerId || typeof containerId !== 'string') {
					throw new Error('Please assign the "containerId"!');
				}
				var cfg = _containers.get(containerId);
				if (cfg) {
					var lastFocusedElement = cfg.lastFocusedElement;

					if (lastFocusedElement) {
						var spottableChildren = getContainerNavigableElements(containerId);
						var lastFocusedIndex = [].slice.call(spottableChildren).indexOf(lastFocusedElement);

						// store last index and release node reference to lastFocusedElement
						cfg.lastFocusedIndex = lastFocusedIndex;
						cfg.lastFocusedElement = null;
					}
				}
			},

			/**
	   * Removes a container from Spotlight
	   *
	   * @memberof spotlight.Spotlight.prototype
	   * @param {String} containerId Container ID to remove
	   * @returns {Boolean} `true` if container removed, `false` if container does not exist
	   * @public
	   */
			remove: function remove(containerId) {
				if (!containerId || typeof containerId !== 'string') {
					throw new Error('Please assign the "containerId"!');
				}
				if (_containers.get(containerId)) {
					_containers.delete(containerId);
					if (_lastContainerId === containerId) {
						Spotlight.setActiveContainer(null);
					}
					return true;
				}
				return false;
			},

			/**
	   * Disables the selector rules of the specified container
	   *
	   * @memberof spotlight.Spotlight.prototype
	   * @param {String} containerId Container ID selector rules to disable
	   * @returns {Boolean} `true` if container's selector rules are disabled, `false` if container does not exist
	   * @public
	   */
			disableSelector: function disableSelector(containerId) {
				var config = _containers.get(containerId);

				if (config) {
					config.selectorDisabled = true;
					_containers.set(containerId, config);
					return true;
				}
				return false;
			},

			/**
	   * Enables the selector rules of the specified container
	   *
	   * @memberof spotlight.Spotlight.prototype
	   * @param {String} containerId Container ID selector rules to enable
	   * @returns {Boolean} `true` if container's selector rules are enabled, `false` if container does not exist
	   * @public
	   */
			enableSelector: function enableSelector(containerId) {
				var config = _containers.get(containerId);

				if (config) {
					config.selectorDisabled = false;
					_containers.set(containerId, config);
					return true;
				}
				return false;
			},

			/**
	   * Pauses Spotlight
	   *
	   * @memberof spotlight.Spotlight.prototype
	   * @returns {undefined}
	   * @public
	   */
			pause: function pause() {
				_pause = true;
			},

			/**
	   * Resumes Spotlight
	   *
	   * @memberof spotlight.Spotlight.prototype
	   * @returns {undefined}
	   * @public
	   */
			resume: function resume() {
				_pause = false;
			},

			// focus()
			// focus(<containerId>)
			// focus(<extSelector>)
			/**
	   * Focuses the specified element selector or container ID or the default container. Has no
	   * effect if Spotlight is paused.
	   *
	   * @memberof spotlight.Spotlight.prototype
	   * @param {String|Object|undefined} elem Element selector or the container ID.
	   *	If not supplied, the default container will be focused.
	   * @returns {Boolean} `true` if focus successful, `false` if not.
	   * @public
	   */
			focus: function focus(elem) {
				var result = false;

				if (!elem) {
					result = focusContainer();
				} else if (typeof elem === 'string') {
					if (_containers.get(elem)) {
						result = focusContainer(elem);
					} else {
						result = focusExtendedSelector(elem);
					}
				} else {
					var nextContainerIds = getContainerIds(elem);
					var nextContainerId = (0, _last2.default)(nextContainerIds);
					if (isNavigable(elem, nextContainerId)) {
						result = focusElement(elem, nextContainerIds);
					}
				}

				return result;
			},

			// move(<direction>)
			// move(<direction>, <selector>)
			/**
	   * Moves focus to the next spottable control in the direction specified. Optionally, a source
	   * element selector may be supplied as the starting point.
	   *
	   * @memberof spotlight.Spotlight.prototype
	   * @param {String} direction Direction to move, one of `'left'`, `'right'`, `'up'` or `'down'`
	   * @param {String|undefined} selector If supplied, the element to move from. If not supplied,
	   *	the currently focused item will be used.
	   * @returns {Boolean} `true` if focus successful, `false` if not.
	   * @public
	   */
			move: function move(direction, selector) {
				var elem = void 0,
				    containerId = void 0;

				direction = direction.toLowerCase();
				if (!_reverseDirections[direction]) {
					return false;
				}

				elem = selector ? parseSelector(selector)[0] : _getCurrent();
				if (!elem) {
					return false;
				}

				containerId = getContainerId(elem);
				if (!containerId) {
					return false;
				}

				return spotNext(direction, elem, containerId);
			},

			/**
	   * Sets or clears the default container that will receive focus.
	   *
	   * @memberof spotlight.Spotlight.prototype
	   * @param {String|undefined} containerId The container ID or a falsy value to clear default container
	   * @returns {undefined}
	   * @public
	   */
			setDefaultContainer: function setDefaultContainer(containerId) {
				if (!containerId) {
					_defaultContainerId = '';
				} else if (!_containers.get(containerId)) {
					throw new Error('Container "' + containerId + '" doesn\'t exist!');
				} else {
					_defaultContainerId = containerId;
				}
			},

			/**
	   * Sets the currently active container.
	   *
	   * @memberof spotlight.Spotlight.prototype
	   * @param {String} [containerId] The id of the currently active container. If this is not
	   *	provided, the root container is set as the currently active container.
	   * @public
	   */
			setActiveContainer: function setActiveContainer(containerId) {
				_lastContainerId = containerId || _SpotlightRootDecorator.spotlightRootContainerName;
			},

			/**
	   * Gets the current pointer mode
	   *
	   * @memberof spotlight.Spotlight.prototype
	   * @returns {Boolean} `true` if spotlight is in pointer mode
	   * @public
	   */
			getPointerMode: function getPointerMode() {
				return _pointerMode;
			},

			/**
	   * Sets the current pointer mode
	   *
	   * @memberof spotlight.Spotlight.prototype
	   * @param {Boolean} pointerMode The value of the pointer mode. This determines how
	   *	spotlight manages focus change behaviors.
	   * @public
	   */
			setPointerMode: function setPointerMode(pointerMode) {
				_pointerMode = pointerMode;
			},

			/**
	   * Gets the muted mode value of a spottable element.
	   *
	   * @memberof spotlight.Spotlight.prototype
	   * @param {Object} elem The dom element used to determine the muted status.
	   * @returns {Boolean} `true` if the passed-in control is in muted mode.
	   * @public
	   */
			isMuted: function isMuted(elem) {
				if (!elem) {
					return false;
				}

				return matchSelector(elem, '[data-container-muted="true"] .' + _Spottable.spottableClass);
			},

			/**
	   * Determines whether Spotlight is currently paused.
	   *
	   * @memberof spotlight.Spotlight.prototype
	   * @returns {Boolean} `true` if Spotlight is currently paused.
	   * @public
	   */
			isPaused: function isPaused() {
				return _pause;
			},

			/**
	   * Determines whether an element is spottable.
	   *
	   * @memberof spotlight.Spotlight.prototype
	   * @param {Object} elem The dom element used to determine the spottable status.
	   * @returns {Boolean} `true` if the element being evaluated is currently spottable.
	   * @public
	   */
			isSpottable: function isSpottable(elem) {
				if (!elem) {
					return false;
				}

				return matchSelector(elem, '.' + _Spottable.spottableClass);
			},

			/**
	   * Returns the currently spotted control.
	   *
	   * @memberof spotlight.Spotlight.prototype
	   * @returns {Object} The control that currently has focus, if available
	   * @public
	   */
			getCurrent: function getCurrent() {
				return _getCurrent();
			}
		};

		return exports;
	}();

	exports.default = Spotlight;
	exports.getDirection = getDirection;
	exports.Spotlight = Spotlight;

/***/ },
/* 32 */
[439, 5],
/* 33 */
/***/ function(module, exports) {

	'use strict';

	/*
	 * SearchUtils.js - Misc search utility routines
	 * 
	 * Copyright Â© 2013-2015, JEDLSoft
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 *
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */

	var SearchUtils = {};

	/**
	 * Binary search a sorted array for a particular target value.
	 * If the exact value is not found, it returns the index of the smallest 
	 * entry that is greater than the given target value.<p> 
	 * 
	 * The comparator
	 * parameter is a function that knows how to compare elements of the 
	 * array and the target. The function should return a value greater than 0
	 * if the array element is greater than the target, a value less than 0 if
	 * the array element is less than the target, and 0 if the array element 
	 * and the target are equivalent.<p>
	 * 
	 * If the comparator function is not specified, this function assumes
	 * the array and the target are numeric values and should be compared 
	 * as such.<p>
	 * 
	 * 
	 * @static
	 * @param {*} target element being sought 
	 * @param {Array} arr the array being searched
	 * @param {?function(*,*)=} comparator a comparator that is appropriate for comparing two entries
	 * in the array  
	 * @return the index of the array into which the value would fit if 
	 * inserted, or -1 if given array is not an array or the target is not 
	 * a number
	 */
	SearchUtils.bsearch = function (target, arr, comparator) {
	  if (typeof arr === 'undefined' || !arr || typeof target === 'undefined') {
	    return -1;
	  }

	  var high = arr.length - 1,
	      low = 0,
	      mid = 0,
	      value,
	      cmp = comparator || SearchUtils.bsearch.numbers;

	  while (low <= high) {
	    mid = Math.floor((high + low) / 2);
	    value = cmp(arr[mid], target);
	    if (value > 0) {
	      high = mid - 1;
	    } else if (value < 0) {
	      low = mid + 1;
	    } else {
	      return mid;
	    }
	  }

	  return low;
	};

	/**
	 * Returns whether or not the given element is greater than, less than,
	 * or equal to the given target.<p>
	 * 
	 * @private
	 * @static
	 * @param {number} element the element being tested
	 * @param {number} target the target being sought
	 */
	SearchUtils.bsearch.numbers = function (element, target) {
	  return element - target;
	};

	/**
	 * Do a bisection search of a function for a particular target value.<p> 
	 * 
	 * The function to search is a function that takes a numeric parameter, 
	 * does calculations, and returns gives a numeric result. The 
	 * function should should be smooth and not have any discontinuities 
	 * between the low and high values of the parameter.
	 *  
	 * 
	 * @static
	 * @param {number} target value being sought
	 * @param {number} low the lower bounds to start searching
	 * @param {number} high the upper bounds to start searching
	 * @param {number} precision minimum precision to support. Use 0 if you want to use the default.
	 * @param {?function(number)=} func function to search 
	 * @return an approximation of the input value to the function that gives the desired
	 * target output value, correct to within the error range of Javascript floating point 
	 * arithmetic, or NaN if there was some error
	 */
	SearchUtils.bisectionSearch = function (target, low, high, precision, func) {
	  if (typeof target !== 'number' || typeof low !== 'number' || typeof high !== 'number' || typeof func !== 'function') {
	    return NaN;
	  }

	  var mid = 0,
	      value,
	      pre = precision > 0 ? precision : 1e-13;

	  do {
	    mid = (high + low) / 2;
	    value = func(mid);
	    if (value > target) {
	      high = mid;
	    } else if (value < target) {
	      low = mid;
	    }
	  } while (high - low > pre);

	  return mid;
	};

	module.exports = SearchUtils;

/***/ },
/* 34 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	exports.spottableClass = exports.Spottable = undefined;

	var _extends = Object.assign || function (target) {
		for (var i = 1; i < arguments.length; i++) {
			var source = arguments[i];for (var key in source) {
				if (Object.prototype.hasOwnProperty.call(source, key)) {
					target[key] = source[key];
				}
			}
		}return target;
	};

	var _createClass = function () {
		function defineProperties(target, props) {
			for (var i = 0; i < props.length; i++) {
				var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
			}
		}return function (Constructor, protoProps, staticProps) {
			if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
		};
	}();

	var _handle = __webpack_require__(16);

	var _hoc = __webpack_require__(10);

	var _hoc2 = _interopRequireDefault(_hoc);

	var _keymap = __webpack_require__(42);

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _spotlight = __webpack_require__(31);

	var _spotlight2 = _interopRequireDefault(_spotlight);

	function _interopRequireDefault(obj) {
		return obj && obj.__esModule ? obj : { default: obj };
	}

	function _objectWithoutProperties(obj, keys) {
		var target = {};for (var i in obj) {
			if (keys.indexOf(i) >= 0) continue;if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;target[i] = obj[i];
		}return target;
	}

	function _classCallCheck(instance, Constructor) {
		if (!(instance instanceof Constructor)) {
			throw new TypeError("Cannot call a class as a function");
		}
	}

	function _possibleConstructorReturn(self, call) {
		if (!self) {
			throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
		}return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
		if (typeof superClass !== "function" && superClass !== null) {
			throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
		}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	} /**
	   * Exports the {@link spotlight/Spottable.Spottable} Higher-order Component and
	   * the {@link spotlight/Spottable.spottableClass} `className`. The default export is
	   * {@link spotlight/Spottable.Spottable}.
	   *
	   * @module spotlight/Spottable
	   */

	/**
	 * The class name for spottable components. In general, you do not need to directly access this class
	 *
	 * @memberof spotlight/Spottable
	 * @public
	 */
	var spottableClass = 'spottable';
	var spottableDisabledClass = 'spottableDisabled';

	var ENTER_KEY = 13;
	var REMOTE_OK_KEY = 16777221;

	var isKeyboardAccessible = function isKeyboardAccessible(node) {
		if (!node) return false;
		var name = node.nodeName.toUpperCase();
		var type = node.type ? node.type.toUpperCase() : null;
		return name === 'BUTTON' || name === 'A' || name === 'INPUT' && (type === 'BUTTON' || type === 'CHECKBOX' || type === 'IMAGE' || type === 'RADIO' || type === 'RESET' || type === 'SUBMIT');
	};

	var shouldEmulateMouse = function shouldEmulateMouse(ev) {
		var which = ev.which,
		    type = ev.type,
		    currentTarget = ev.currentTarget;

		return (
			// emulate mouse events for any remote okay button event
			which === REMOTE_OK_KEY ||
			// or a non-keypress enter event or any enter event on a non-keyboard accessible control
			which === ENTER_KEY && (type !== 'keypress' || !isKeyboardAccessible(currentTarget))
		);
	};

	var forwardEnter = function forwardEnter(keyEvent, mouseEvent) {
		return function (props) {
			var keyHandler = props[keyEvent];
			var mouseHandler = props[mouseEvent];
			return function (ev) {
				if (keyHandler) keyHandler(ev);
				if (mouseHandler && !ev.repeat && shouldEmulateMouse(ev)) mouseHandler(ev);
			};
		};
	};

	/**
	 * Default configuration for Spottable
	 *
	 * @hocconfig
	 * @memberof spotlight/Spottable.Spottable
	 */
	var defaultConfig = {
		/**
	  * Whether or not the component should emulate mouse events as a response
	  * to Spotlight 5-way events.
	  *
	  * @type {Boolean}
	  * @default false
	  * @public
	  * @memberof spotlight/Spottable.Spottable.defaultConfig
	  */
		emulateMouse: true
	};

	/**
	 * Constructs a Spotlight 5-way navigation-enabled Higher-order Component.
	 *
	 * @example
	 *	const SpottableComponent = Spottable(Component);
	 *
	 * @class Spottable
	 * @memberof spotlight/Spottable
	 * @param  {Object} defaultConfig Set of default configuration parameters
	 * @param  {Function} Wrapped Component to wrap
	 *
	 * @hoc
	 * @returns {Function} Spottable
	 */
	var Spottable = (0, _hoc2.default)(defaultConfig, function (config, Wrapped) {
		var _class, _temp;

		var emulateMouse = config.emulateMouse;

		var forwardBlur = (0, _handle.forward)('onBlur');
		var forwardFocus = (0, _handle.forward)('onFocus');
		var forwardEnterKeyPress = forwardEnter('onKeyPress', 'onClick');
		var forwardEnterKeyDown = forwardEnter('onKeyDown', 'onMouseDown');
		var forwardEnterKeyUp = forwardEnter('onKeyUp', 'onMouseUp');
		var forwardKeyDown = (0, _handle.forward)('onKeyDown');

		return _temp = _class = function (_React$Component) {
			_inherits(_class, _React$Component);

			function _class(props) {
				_classCallCheck(this, _class);

				var _this = _possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).call(this, props));

				_this.onBlur = function (e) {
					if (e.currentTarget === e.target) {
						_this.setState({ spotted: false });
					}

					if (_spotlight2.default.isMuted(e.target)) {
						e.stopPropagation();
					} else {
						forwardBlur(e, _this.props);
					}
				};

				_this.onFocus = function (e) {
					if (e.currentTarget === e.target) {
						_this.setState({ spotted: true });
					}

					if (_spotlight2.default.isMuted(e.target)) {
						e.stopPropagation();
					} else {
						forwardFocus(e, _this.props);
					}
				};

				_this.onKeyDown = function (e) {
					var _this$props = _this.props,
					    disabled = _this$props.disabled,
					    onSpotlightDown = _this$props.onSpotlightDown,
					    onSpotlightLeft = _this$props.onSpotlightLeft,
					    onSpotlightRight = _this$props.onSpotlightRight,
					    onSpotlightUp = _this$props.onSpotlightUp;

					var keyCode = e.keyCode;

					if (onSpotlightDown && (0, _keymap.is)('down', keyCode)) {
						onSpotlightDown(e);
					} else if (onSpotlightLeft && (0, _keymap.is)('left', keyCode)) {
						onSpotlightLeft(e);
					} else if (onSpotlightRight && (0, _keymap.is)('right', keyCode)) {
						onSpotlightRight(e);
					} else if (onSpotlightUp && (0, _keymap.is)('up', keyCode)) {
						onSpotlightUp(e);
					}

					if (emulateMouse && !(_this.state.spotted && disabled) && (0, _keymap.is)('enter', keyCode)) {
						forwardEnterKeyDown(_this.props)(e);
					} else {
						forwardKeyDown(e, _this.props);
					}
				};

				_this.state = {
					spotted: false
				};
				return _this;
			}

			_createClass(_class, [{
				key: 'componentWillUnmount',
				value: function componentWillUnmount() {
					var onSpotlightDisappear = this.props.onSpotlightDisappear;

					if (this.state.spotted && onSpotlightDisappear) {
						onSpotlightDisappear();
					}
				}
			}, {
				key: 'render',
				value: function render() {
					var _props = this.props,
					    disabled = _props.disabled,
					    spotlightDisabled = _props.spotlightDisabled,
					    rest = _objectWithoutProperties(_props, ['disabled', 'spotlightDisabled']);

					var spottableDisabled = this.state.spotted && disabled;
					var spottable = (spottableDisabled || !disabled) && !spotlightDisabled;
					var classes = spottableDisabled ? spottableClass + ' ' + spottableDisabledClass : spottableClass;
					var componentDisabled = !spottable && disabled;
					var tabIndex = rest.tabIndex;

					delete rest.onSpotlightDisappear;
					delete rest.onSpotlightDown;
					delete rest.onSpotlightLeft;
					delete rest.onSpotlightRight;
					delete rest.onSpotlightUp;

					if (tabIndex == null && spottable) {
						tabIndex = -1;
					}

					if (spottable) {
						rest['onBlur'] = this.onBlur;
						rest['onFocus'] = this.onFocus;
						rest['onKeyDown'] = this.onKeyDown;

						if (emulateMouse && !spottableDisabled) {
							rest['onKeyPress'] = forwardEnterKeyPress(this.props);
							rest['onKeyUp'] = forwardEnterKeyUp(this.props);
						}
						if (rest.className) {
							rest.className += ' ' + classes;
						} else {
							rest.className = classes;
						}
					}

					return _react2.default.createElement(Wrapped, _extends({}, rest, {
						disabled: componentDisabled,
						tabIndex: tabIndex
					}));
				}
			}]);

			return _class;
		}(_react2.default.Component), _class.displayName = 'Spottable', _class.propTypes = /** @lends spotlight/Spottable.Spottable.prototype */{
			/**
	   * Whether or not the component is in a disabled state.
	   *
	   * @type {Boolean}
	   * @default false
	   * @public
	   */
			disabled: _react2.default.PropTypes.bool,

			/**
	   * The handler to run when the component is removed while retaining focus.
	   *
	   * @type {Function}
	   * @param {Object} event
	   * @public
	   */
			onSpotlightDisappear: _react2.default.PropTypes.func,

			/**
	   * The handler to run when the 5-way down key is pressed.
	   *
	   * @type {Function}
	   * @param {Object} event
	   * @public
	   */
			onSpotlightDown: _react2.default.PropTypes.func,

			/**
	   * The handler to run when the 5-way left key is pressed.
	   *
	   * @type {Function}
	   * @param {Object} event
	   * @public
	   */
			onSpotlightLeft: _react2.default.PropTypes.func,

			/**
	   * The handler to run when the 5-way right key is pressed.
	   *
	   * @type {Function}
	   * @param {Object} event
	   * @public
	   */
			onSpotlightRight: _react2.default.PropTypes.func,

			/**
	   * The handler to run when the 5-way up key is pressed.
	   *
	   * @type {Function}
	   * @param {Object} event
	   * @public
	   */
			onSpotlightUp: _react2.default.PropTypes.func,

			/**
	   * When `true`, the component cannot be navigated using spotlight.
	   *
	   * @type {Boolean}
	   * @default false
	   * @public
	   */
			spotlightDisabled: _react2.default.PropTypes.bool,

			/**
	   * The tabIndex of the component. This value will default to -1 if left
	   * unset and the control is spottable.
	   *
	   * @type {Number}
	   * @public
	   */
			tabIndex: _react2.default.PropTypes.number
		}, _temp;
	});

	exports.default = Spottable;
	exports.Spottable = Spottable;
	exports.spottableClass = spottableClass;

/***/ },
/* 35 */
/***/ function(module, exports) {

	/**
	 * An optimized, private array `slice` implementation.
	 *
	 * @private
	 * @param {Arguments|Array} args The array or arguments object to consider.
	 * @param {Number} [from=0] The array index to slice from, inclusive.
	 * @param {Number} [to=args.length] The array index to slice to, exclusive.
	 * @return {Array} A new, sliced array.
	 * @example
	 *
	 *      _slice([1, 2, 3, 4, 5], 1, 3); //=> [2, 3]
	 *
	 *      var firstThreeArgs = function(a, b, c, d) {
	 *        return _slice(arguments, 0, 3);
	 *      };
	 *      firstThreeArgs(1, 2, 3, 4); //=> [1, 2, 3]
	 */
	module.exports = function _slice(args, from, to) {
	  switch (arguments.length) {
	    case 1: return _slice(args, 0, args.length);
	    case 2: return _slice(args, from, args.length);
	    default:
	      var list = [];
	      var idx = 0;
	      var len = Math.max(0, Math.min(args.length, to) - from);
	      while (idx < len) {
	        list[idx] = args[from + idx];
	        idx += 1;
	      }
	      return list;
	  }
	};


/***/ },
/* 36 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2015-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var DOMNamespaces = __webpack_require__(93);
	var setInnerHTML = __webpack_require__(70);

	var createMicrosoftUnsafeLocalFunction = __webpack_require__(101);
	var setTextContent = __webpack_require__(180);

	var ELEMENT_NODE_TYPE = 1;
	var DOCUMENT_FRAGMENT_NODE_TYPE = 11;

	/**
	 * In IE (8-11) and Edge, appending nodes with no children is dramatically
	 * faster than appending a full subtree, so we essentially queue up the
	 * .appendChild calls here and apply them so each node is added to its parent
	 * before any children are added.
	 *
	 * In other browsers, doing so is slower or neutral compared to the other order
	 * (in Firefox, twice as slow) so we only do this inversion in IE.
	 *
	 * See https://github.com/spicyj/innerhtml-vs-createelement-vs-clonenode.
	 */
	var enableLazy = typeof document !== 'undefined' && typeof document.documentMode === 'number' || typeof navigator !== 'undefined' && typeof navigator.userAgent === 'string' && /\bEdge\/\d/.test(navigator.userAgent);

	function insertTreeChildren(tree) {
	  if (!enableLazy) {
	    return;
	  }
	  var node = tree.node;
	  var children = tree.children;
	  if (children.length) {
	    for (var i = 0; i < children.length; i++) {
	      insertTreeBefore(node, children[i], null);
	    }
	  } else if (tree.html != null) {
	    setInnerHTML(node, tree.html);
	  } else if (tree.text != null) {
	    setTextContent(node, tree.text);
	  }
	}

	var insertTreeBefore = createMicrosoftUnsafeLocalFunction(function (parentNode, tree, referenceNode) {
	  // DocumentFragments aren't actually part of the DOM after insertion so
	  // appending children won't update the DOM. We need to ensure the fragment
	  // is properly populated first, breaking out of our lazy approach for just
	  // this level. Also, some <object> plugins (like Flash Player) will read
	  // <param> nodes immediately upon insertion into the DOM, so <object>
	  // must also be populated prior to insertion into the DOM.
	  if (tree.node.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE || tree.node.nodeType === ELEMENT_NODE_TYPE && tree.node.nodeName.toLowerCase() === 'object' && (tree.node.namespaceURI == null || tree.node.namespaceURI === DOMNamespaces.html)) {
	    insertTreeChildren(tree);
	    parentNode.insertBefore(tree.node, referenceNode);
	  } else {
	    parentNode.insertBefore(tree.node, referenceNode);
	    insertTreeChildren(tree);
	  }
	});

	function replaceChildWithTree(oldNode, newTree) {
	  oldNode.parentNode.replaceChild(newTree.node, oldNode);
	  insertTreeChildren(newTree);
	}

	function queueChild(parentTree, childTree) {
	  if (enableLazy) {
	    parentTree.children.push(childTree);
	  } else {
	    parentTree.node.appendChild(childTree.node);
	  }
	}

	function queueHTML(tree, html) {
	  if (enableLazy) {
	    tree.html = html;
	  } else {
	    setInnerHTML(tree.node, html);
	  }
	}

	function queueText(tree, text) {
	  if (enableLazy) {
	    tree.text = text;
	  } else {
	    setTextContent(tree.node, text);
	  }
	}

	function toString() {
	  return this.node.nodeName;
	}

	function DOMLazyTree(node) {
	  return {
	    node: node,
	    children: [],
	    html: null,
	    text: null,
	    toString: toString
	  };
	}

	DOMLazyTree.insertTreeBefore = insertTreeBefore;
	DOMLazyTree.replaceChildWithTree = replaceChildWithTree;
	DOMLazyTree.queueChild = queueChild;
	DOMLazyTree.queueHTML = queueHTML;
	DOMLazyTree.queueText = queueText;

	module.exports = DOMLazyTree;

/***/ },
/* 37 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(5);

	var invariant = __webpack_require__(3);

	function checkMask(value, bitmask) {
	  return (value & bitmask) === bitmask;
	}

	var DOMPropertyInjection = {
	  /**
	   * Mapping from normalized, camelcased property names to a configuration that
	   * specifies how the associated DOM property should be accessed or rendered.
	   */
	  MUST_USE_PROPERTY: 0x1,
	  HAS_BOOLEAN_VALUE: 0x4,
	  HAS_NUMERIC_VALUE: 0x8,
	  HAS_POSITIVE_NUMERIC_VALUE: 0x10 | 0x8,
	  HAS_OVERLOADED_BOOLEAN_VALUE: 0x20,

	  /**
	   * Inject some specialized knowledge about the DOM. This takes a config object
	   * with the following properties:
	   *
	   * isCustomAttribute: function that given an attribute name will return true
	   * if it can be inserted into the DOM verbatim. Useful for data-* or aria-*
	   * attributes where it's impossible to enumerate all of the possible
	   * attribute names,
	   *
	   * Properties: object mapping DOM property name to one of the
	   * DOMPropertyInjection constants or null. If your attribute isn't in here,
	   * it won't get written to the DOM.
	   *
	   * DOMAttributeNames: object mapping React attribute name to the DOM
	   * attribute name. Attribute names not specified use the **lowercase**
	   * normalized name.
	   *
	   * DOMAttributeNamespaces: object mapping React attribute name to the DOM
	   * attribute namespace URL. (Attribute names not specified use no namespace.)
	   *
	   * DOMPropertyNames: similar to DOMAttributeNames but for DOM properties.
	   * Property names not specified use the normalized name.
	   *
	   * DOMMutationMethods: Properties that require special mutation methods. If
	   * `value` is undefined, the mutation method should unset the property.
	   *
	   * @param {object} domPropertyConfig the config as described above.
	   */
	  injectDOMPropertyConfig: function (domPropertyConfig) {
	    var Injection = DOMPropertyInjection;
	    var Properties = domPropertyConfig.Properties || {};
	    var DOMAttributeNamespaces = domPropertyConfig.DOMAttributeNamespaces || {};
	    var DOMAttributeNames = domPropertyConfig.DOMAttributeNames || {};
	    var DOMPropertyNames = domPropertyConfig.DOMPropertyNames || {};
	    var DOMMutationMethods = domPropertyConfig.DOMMutationMethods || {};

	    if (domPropertyConfig.isCustomAttribute) {
	      DOMProperty._isCustomAttributeFunctions.push(domPropertyConfig.isCustomAttribute);
	    }

	    for (var propName in Properties) {
	      !!DOMProperty.properties.hasOwnProperty(propName) ?  false ? invariant(false, 'injectDOMPropertyConfig(...): You\'re trying to inject DOM property \'%s\' which has already been injected. You may be accidentally injecting the same DOM property config twice, or you may be injecting two configs that have conflicting property names.', propName) : _prodInvariant('48', propName) : void 0;

	      var lowerCased = propName.toLowerCase();
	      var propConfig = Properties[propName];

	      var propertyInfo = {
	        attributeName: lowerCased,
	        attributeNamespace: null,
	        propertyName: propName,
	        mutationMethod: null,

	        mustUseProperty: checkMask(propConfig, Injection.MUST_USE_PROPERTY),
	        hasBooleanValue: checkMask(propConfig, Injection.HAS_BOOLEAN_VALUE),
	        hasNumericValue: checkMask(propConfig, Injection.HAS_NUMERIC_VALUE),
	        hasPositiveNumericValue: checkMask(propConfig, Injection.HAS_POSITIVE_NUMERIC_VALUE),
	        hasOverloadedBooleanValue: checkMask(propConfig, Injection.HAS_OVERLOADED_BOOLEAN_VALUE)
	      };
	      !(propertyInfo.hasBooleanValue + propertyInfo.hasNumericValue + propertyInfo.hasOverloadedBooleanValue <= 1) ?  false ? invariant(false, 'DOMProperty: Value can be one of boolean, overloaded boolean, or numeric value, but not a combination: %s', propName) : _prodInvariant('50', propName) : void 0;

	      if (false) {
	        DOMProperty.getPossibleStandardName[lowerCased] = propName;
	      }

	      if (DOMAttributeNames.hasOwnProperty(propName)) {
	        var attributeName = DOMAttributeNames[propName];
	        propertyInfo.attributeName = attributeName;
	        if (false) {
	          DOMProperty.getPossibleStandardName[attributeName] = propName;
	        }
	      }

	      if (DOMAttributeNamespaces.hasOwnProperty(propName)) {
	        propertyInfo.attributeNamespace = DOMAttributeNamespaces[propName];
	      }

	      if (DOMPropertyNames.hasOwnProperty(propName)) {
	        propertyInfo.propertyName = DOMPropertyNames[propName];
	      }

	      if (DOMMutationMethods.hasOwnProperty(propName)) {
	        propertyInfo.mutationMethod = DOMMutationMethods[propName];
	      }

	      DOMProperty.properties[propName] = propertyInfo;
	    }
	  }
	};

	/* eslint-disable max-len */
	var ATTRIBUTE_NAME_START_CHAR = ':A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD';
	/* eslint-enable max-len */

	/**
	 * DOMProperty exports lookup objects that can be used like functions:
	 *
	 *   > DOMProperty.isValid['id']
	 *   true
	 *   > DOMProperty.isValid['foobar']
	 *   undefined
	 *
	 * Although this may be confusing, it performs better in general.
	 *
	 * @see http://jsperf.com/key-exists
	 * @see http://jsperf.com/key-missing
	 */
	var DOMProperty = {

	  ID_ATTRIBUTE_NAME: 'data-reactid',
	  ROOT_ATTRIBUTE_NAME: 'data-reactroot',

	  ATTRIBUTE_NAME_START_CHAR: ATTRIBUTE_NAME_START_CHAR,
	  ATTRIBUTE_NAME_CHAR: ATTRIBUTE_NAME_START_CHAR + '\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040',

	  /**
	   * Map from property "standard name" to an object with info about how to set
	   * the property in the DOM. Each object contains:
	   *
	   * attributeName:
	   *   Used when rendering markup or with `*Attribute()`.
	   * attributeNamespace
	   * propertyName:
	   *   Used on DOM node instances. (This includes properties that mutate due to
	   *   external factors.)
	   * mutationMethod:
	   *   If non-null, used instead of the property or `setAttribute()` after
	   *   initial render.
	   * mustUseProperty:
	   *   Whether the property must be accessed and mutated as an object property.
	   * hasBooleanValue:
	   *   Whether the property should be removed when set to a falsey value.
	   * hasNumericValue:
	   *   Whether the property must be numeric or parse as a numeric and should be
	   *   removed when set to a falsey value.
	   * hasPositiveNumericValue:
	   *   Whether the property must be positive numeric or parse as a positive
	   *   numeric and should be removed when set to a falsey value.
	   * hasOverloadedBooleanValue:
	   *   Whether the property can be used as a flag as well as with a value.
	   *   Removed when strictly equal to false; present without a value when
	   *   strictly equal to true; present with a value otherwise.
	   */
	  properties: {},

	  /**
	   * Mapping from lowercase property names to the properly cased version, used
	   * to warn in the case of missing properties. Available only in __DEV__.
	   *
	   * autofocus is predefined, because adding it to the property whitelist
	   * causes unintended side effects.
	   *
	   * @type {Object}
	   */
	  getPossibleStandardName:  false ? { autofocus: 'autoFocus' } : null,

	  /**
	   * All of the isCustomAttribute() functions that have been injected.
	   */
	  _isCustomAttributeFunctions: [],

	  /**
	   * Checks whether a property name is a custom attribute.
	   * @method
	   */
	  isCustomAttribute: function (attributeName) {
	    for (var i = 0; i < DOMProperty._isCustomAttributeFunctions.length; i++) {
	      var isCustomAttributeFn = DOMProperty._isCustomAttributeFunctions[i];
	      if (isCustomAttributeFn(attributeName)) {
	        return true;
	      }
	    }
	    return false;
	  },

	  injection: DOMPropertyInjection
	};

	module.exports = DOMProperty;

/***/ },
/* 38 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var ReactRef = __webpack_require__(387);
	var ReactInstrumentation = __webpack_require__(20);

	var warning = __webpack_require__(4);

	/**
	 * Helper to call ReactRef.attachRefs with this composite component, split out
	 * to avoid allocations in the transaction mount-ready queue.
	 */
	function attachRefs() {
	  ReactRef.attachRefs(this, this._currentElement);
	}

	var ReactReconciler = {

	  /**
	   * Initializes the component, renders markup, and registers event listeners.
	   *
	   * @param {ReactComponent} internalInstance
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {?object} the containing host component instance
	   * @param {?object} info about the host container
	   * @return {?string} Rendered markup to be inserted into the DOM.
	   * @final
	   * @internal
	   */
	  mountComponent: function (internalInstance, transaction, hostParent, hostContainerInfo, context, parentDebugID // 0 in production and for roots
	  ) {
	    if (false) {
	      if (internalInstance._debugID !== 0) {
	        ReactInstrumentation.debugTool.onBeforeMountComponent(internalInstance._debugID, internalInstance._currentElement, parentDebugID);
	      }
	    }
	    var markup = internalInstance.mountComponent(transaction, hostParent, hostContainerInfo, context, parentDebugID);
	    if (internalInstance._currentElement && internalInstance._currentElement.ref != null) {
	      transaction.getReactMountReady().enqueue(attachRefs, internalInstance);
	    }
	    if (false) {
	      if (internalInstance._debugID !== 0) {
	        ReactInstrumentation.debugTool.onMountComponent(internalInstance._debugID);
	      }
	    }
	    return markup;
	  },

	  /**
	   * Returns a value that can be passed to
	   * ReactComponentEnvironment.replaceNodeWithMarkup.
	   */
	  getHostNode: function (internalInstance) {
	    return internalInstance.getHostNode();
	  },

	  /**
	   * Releases any resources allocated by `mountComponent`.
	   *
	   * @final
	   * @internal
	   */
	  unmountComponent: function (internalInstance, safely) {
	    if (false) {
	      if (internalInstance._debugID !== 0) {
	        ReactInstrumentation.debugTool.onBeforeUnmountComponent(internalInstance._debugID);
	      }
	    }
	    ReactRef.detachRefs(internalInstance, internalInstance._currentElement);
	    internalInstance.unmountComponent(safely);
	    if (false) {
	      if (internalInstance._debugID !== 0) {
	        ReactInstrumentation.debugTool.onUnmountComponent(internalInstance._debugID);
	      }
	    }
	  },

	  /**
	   * Update a component using a new element.
	   *
	   * @param {ReactComponent} internalInstance
	   * @param {ReactElement} nextElement
	   * @param {ReactReconcileTransaction} transaction
	   * @param {object} context
	   * @internal
	   */
	  receiveComponent: function (internalInstance, nextElement, transaction, context) {
	    var prevElement = internalInstance._currentElement;

	    if (nextElement === prevElement && context === internalInstance._context) {
	      // Since elements are immutable after the owner is rendered,
	      // we can do a cheap identity compare here to determine if this is a
	      // superfluous reconcile. It's possible for state to be mutable but such
	      // change should trigger an update of the owner which would recreate
	      // the element. We explicitly check for the existence of an owner since
	      // it's possible for an element created outside a composite to be
	      // deeply mutated and reused.

	      // TODO: Bailing out early is just a perf optimization right?
	      // TODO: Removing the return statement should affect correctness?
	      return;
	    }

	    if (false) {
	      if (internalInstance._debugID !== 0) {
	        ReactInstrumentation.debugTool.onBeforeUpdateComponent(internalInstance._debugID, nextElement);
	      }
	    }

	    var refsChanged = ReactRef.shouldUpdateRefs(prevElement, nextElement);

	    if (refsChanged) {
	      ReactRef.detachRefs(internalInstance, prevElement);
	    }

	    internalInstance.receiveComponent(nextElement, transaction, context);

	    if (refsChanged && internalInstance._currentElement && internalInstance._currentElement.ref != null) {
	      transaction.getReactMountReady().enqueue(attachRefs, internalInstance);
	    }

	    if (false) {
	      if (internalInstance._debugID !== 0) {
	        ReactInstrumentation.debugTool.onUpdateComponent(internalInstance._debugID);
	      }
	    }
	  },

	  /**
	   * Flush any dirty changes in a component.
	   *
	   * @param {ReactComponent} internalInstance
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  performUpdateIfNecessary: function (internalInstance, transaction, updateBatchNumber) {
	    if (internalInstance._updateBatchNumber !== updateBatchNumber) {
	      // The component's enqueued batch number should always be the current
	      // batch or the following one.
	       false ? warning(internalInstance._updateBatchNumber == null || internalInstance._updateBatchNumber === updateBatchNumber + 1, 'performUpdateIfNecessary: Unexpected batch number (current %s, ' + 'pending %s)', updateBatchNumber, internalInstance._updateBatchNumber) : void 0;
	      return;
	    }
	    if (false) {
	      if (internalInstance._debugID !== 0) {
	        ReactInstrumentation.debugTool.onBeforeUpdateComponent(internalInstance._debugID, internalInstance._currentElement);
	      }
	    }
	    internalInstance.performUpdateIfNecessary(transaction);
	    if (false) {
	      if (internalInstance._debugID !== 0) {
	        ReactInstrumentation.debugTool.onUpdateComponent(internalInstance._debugID);
	      }
	    }
	  }

	};

	module.exports = ReactReconciler;

/***/ },
/* 39 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _assign = __webpack_require__(7);

	var ReactChildren = __webpack_require__(416);
	var ReactComponent = __webpack_require__(108);
	var ReactPureComponent = __webpack_require__(421);
	var ReactClass = __webpack_require__(417);
	var ReactDOMFactories = __webpack_require__(418);
	var ReactElement = __webpack_require__(40);
	var ReactPropTypes = __webpack_require__(420);
	var ReactVersion = __webpack_require__(422);

	var onlyChild = __webpack_require__(425);
	var warning = __webpack_require__(4);

	var createElement = ReactElement.createElement;
	var createFactory = ReactElement.createFactory;
	var cloneElement = ReactElement.cloneElement;

	if (false) {
	  var canDefineProperty = require('./canDefineProperty');
	  var ReactElementValidator = require('./ReactElementValidator');
	  var didWarnPropTypesDeprecated = false;
	  createElement = ReactElementValidator.createElement;
	  createFactory = ReactElementValidator.createFactory;
	  cloneElement = ReactElementValidator.cloneElement;
	}

	var __spread = _assign;

	if (false) {
	  var warned = false;
	  __spread = function () {
	    process.env.NODE_ENV !== 'production' ? warning(warned, 'React.__spread is deprecated and should not be used. Use ' + 'Object.assign directly or another helper function with similar ' + 'semantics. You may be seeing this warning due to your compiler. ' + 'See https://fb.me/react-spread-deprecation for more details.') : void 0;
	    warned = true;
	    return _assign.apply(null, arguments);
	  };
	}

	var React = {

	  // Modern

	  Children: {
	    map: ReactChildren.map,
	    forEach: ReactChildren.forEach,
	    count: ReactChildren.count,
	    toArray: ReactChildren.toArray,
	    only: onlyChild
	  },

	  Component: ReactComponent,
	  PureComponent: ReactPureComponent,

	  createElement: createElement,
	  cloneElement: cloneElement,
	  isValidElement: ReactElement.isValidElement,

	  // Classic

	  PropTypes: ReactPropTypes,
	  createClass: ReactClass.createClass,
	  createFactory: createFactory,
	  createMixin: function (mixin) {
	    // Currently a noop. Will be used to validate and trace mixins.
	    return mixin;
	  },

	  // This looks DOM specific but these are actually isomorphic helpers
	  // since they are just generating DOM strings.
	  DOM: ReactDOMFactories,

	  version: ReactVersion,

	  // Deprecated hook for JSX spread, don't use this for anything.
	  __spread: __spread
	};

	// TODO: Fix tests so that this deprecation warning doesn't cause failures.
	if (false) {
	  if (canDefineProperty) {
	    Object.defineProperty(React, 'PropTypes', {
	      get: function () {
	        process.env.NODE_ENV !== 'production' ? warning(didWarnPropTypesDeprecated, 'Accessing PropTypes via the main React package is deprecated. Use ' + 'the prop-types package from npm instead.') : void 0;
	        didWarnPropTypesDeprecated = true;
	        return ReactPropTypes;
	      }
	    });
	  }
	}

	module.exports = React;

/***/ },
/* 40 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _assign = __webpack_require__(7);

	var ReactCurrentOwner = __webpack_require__(27);

	var warning = __webpack_require__(4);
	var canDefineProperty = __webpack_require__(184);
	var hasOwnProperty = Object.prototype.hasOwnProperty;

	var REACT_ELEMENT_TYPE = __webpack_require__(183);

	var RESERVED_PROPS = {
	  key: true,
	  ref: true,
	  __self: true,
	  __source: true
	};

	var specialPropKeyWarningShown, specialPropRefWarningShown;

	function hasValidRef(config) {
	  if (false) {
	    if (hasOwnProperty.call(config, 'ref')) {
	      var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;
	      if (getter && getter.isReactWarning) {
	        return false;
	      }
	    }
	  }
	  return config.ref !== undefined;
	}

	function hasValidKey(config) {
	  if (false) {
	    if (hasOwnProperty.call(config, 'key')) {
	      var getter = Object.getOwnPropertyDescriptor(config, 'key').get;
	      if (getter && getter.isReactWarning) {
	        return false;
	      }
	    }
	  }
	  return config.key !== undefined;
	}

	function defineKeyPropWarningGetter(props, displayName) {
	  var warnAboutAccessingKey = function () {
	    if (!specialPropKeyWarningShown) {
	      specialPropKeyWarningShown = true;
	       false ? warning(false, '%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName) : void 0;
	    }
	  };
	  warnAboutAccessingKey.isReactWarning = true;
	  Object.defineProperty(props, 'key', {
	    get: warnAboutAccessingKey,
	    configurable: true
	  });
	}

	function defineRefPropWarningGetter(props, displayName) {
	  var warnAboutAccessingRef = function () {
	    if (!specialPropRefWarningShown) {
	      specialPropRefWarningShown = true;
	       false ? warning(false, '%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName) : void 0;
	    }
	  };
	  warnAboutAccessingRef.isReactWarning = true;
	  Object.defineProperty(props, 'ref', {
	    get: warnAboutAccessingRef,
	    configurable: true
	  });
	}

	/**
	 * Factory method to create a new React element. This no longer adheres to
	 * the class pattern, so do not use new to call it. Also, no instanceof check
	 * will work. Instead test $$typeof field against Symbol.for('react.element') to check
	 * if something is a React Element.
	 *
	 * @param {*} type
	 * @param {*} key
	 * @param {string|object} ref
	 * @param {*} self A *temporary* helper to detect places where `this` is
	 * different from the `owner` when React.createElement is called, so that we
	 * can warn. We want to get rid of owner and replace string `ref`s with arrow
	 * functions, and as long as `this` and owner are the same, there will be no
	 * change in behavior.
	 * @param {*} source An annotation object (added by a transpiler or otherwise)
	 * indicating filename, line number, and/or other information.
	 * @param {*} owner
	 * @param {*} props
	 * @internal
	 */
	var ReactElement = function (type, key, ref, self, source, owner, props) {
	  var element = {
	    // This tag allow us to uniquely identify this as a React Element
	    $$typeof: REACT_ELEMENT_TYPE,

	    // Built-in properties that belong on the element
	    type: type,
	    key: key,
	    ref: ref,
	    props: props,

	    // Record the component responsible for creating this element.
	    _owner: owner
	  };

	  if (false) {
	    // The validation flag is currently mutative. We put it on
	    // an external backing store so that we can freeze the whole object.
	    // This can be replaced with a WeakMap once they are implemented in
	    // commonly used development environments.
	    element._store = {};

	    // To make comparing ReactElements easier for testing purposes, we make
	    // the validation flag non-enumerable (where possible, which should
	    // include every environment we run tests in), so the test framework
	    // ignores it.
	    if (canDefineProperty) {
	      Object.defineProperty(element._store, 'validated', {
	        configurable: false,
	        enumerable: false,
	        writable: true,
	        value: false
	      });
	      // self and source are DEV only properties.
	      Object.defineProperty(element, '_self', {
	        configurable: false,
	        enumerable: false,
	        writable: false,
	        value: self
	      });
	      // Two elements created in two different places should be considered
	      // equal for testing purposes and therefore we hide it from enumeration.
	      Object.defineProperty(element, '_source', {
	        configurable: false,
	        enumerable: false,
	        writable: false,
	        value: source
	      });
	    } else {
	      element._store.validated = false;
	      element._self = self;
	      element._source = source;
	    }
	    if (Object.freeze) {
	      Object.freeze(element.props);
	      Object.freeze(element);
	    }
	  }

	  return element;
	};

	/**
	 * Create and return a new ReactElement of the given type.
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.createelement
	 */
	ReactElement.createElement = function (type, config, children) {
	  var propName;

	  // Reserved names are extracted
	  var props = {};

	  var key = null;
	  var ref = null;
	  var self = null;
	  var source = null;

	  if (config != null) {
	    if (hasValidRef(config)) {
	      ref = config.ref;
	    }
	    if (hasValidKey(config)) {
	      key = '' + config.key;
	    }

	    self = config.__self === undefined ? null : config.__self;
	    source = config.__source === undefined ? null : config.__source;
	    // Remaining properties are added to a new props object
	    for (propName in config) {
	      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
	        props[propName] = config[propName];
	      }
	    }
	  }

	  // Children can be more than one argument, and those are transferred onto
	  // the newly allocated props object.
	  var childrenLength = arguments.length - 2;
	  if (childrenLength === 1) {
	    props.children = children;
	  } else if (childrenLength > 1) {
	    var childArray = Array(childrenLength);
	    for (var i = 0; i < childrenLength; i++) {
	      childArray[i] = arguments[i + 2];
	    }
	    if (false) {
	      if (Object.freeze) {
	        Object.freeze(childArray);
	      }
	    }
	    props.children = childArray;
	  }

	  // Resolve default props
	  if (type && type.defaultProps) {
	    var defaultProps = type.defaultProps;
	    for (propName in defaultProps) {
	      if (props[propName] === undefined) {
	        props[propName] = defaultProps[propName];
	      }
	    }
	  }
	  if (false) {
	    if (key || ref) {
	      if (typeof props.$$typeof === 'undefined' || props.$$typeof !== REACT_ELEMENT_TYPE) {
	        var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;
	        if (key) {
	          defineKeyPropWarningGetter(props, displayName);
	        }
	        if (ref) {
	          defineRefPropWarningGetter(props, displayName);
	        }
	      }
	    }
	  }
	  return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
	};

	/**
	 * Return a function that produces ReactElements of a given type.
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.createfactory
	 */
	ReactElement.createFactory = function (type) {
	  var factory = ReactElement.createElement.bind(null, type);
	  // Expose the type on the factory and the prototype so that it can be
	  // easily accessed on elements. E.g. `<Foo />.type === Foo`.
	  // This should not be named `constructor` since this may not be the function
	  // that created the element, and it may not even be a constructor.
	  // Legacy hook TODO: Warn if this is accessed
	  factory.type = type;
	  return factory;
	};

	ReactElement.cloneAndReplaceKey = function (oldElement, newKey) {
	  var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);

	  return newElement;
	};

	/**
	 * Clone and return a new ReactElement using element as the starting point.
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.cloneelement
	 */
	ReactElement.cloneElement = function (element, config, children) {
	  var propName;

	  // Original props are copied
	  var props = _assign({}, element.props);

	  // Reserved names are extracted
	  var key = element.key;
	  var ref = element.ref;
	  // Self is preserved since the owner is preserved.
	  var self = element._self;
	  // Source is preserved since cloneElement is unlikely to be targeted by a
	  // transpiler, and the original source is probably a better indicator of the
	  // true owner.
	  var source = element._source;

	  // Owner will be preserved, unless ref is overridden
	  var owner = element._owner;

	  if (config != null) {
	    if (hasValidRef(config)) {
	      // Silently steal the ref from the parent.
	      ref = config.ref;
	      owner = ReactCurrentOwner.current;
	    }
	    if (hasValidKey(config)) {
	      key = '' + config.key;
	    }

	    // Remaining properties override existing props
	    var defaultProps;
	    if (element.type && element.type.defaultProps) {
	      defaultProps = element.type.defaultProps;
	    }
	    for (propName in config) {
	      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
	        if (config[propName] === undefined && defaultProps !== undefined) {
	          // Resolve default props
	          props[propName] = defaultProps[propName];
	        } else {
	          props[propName] = config[propName];
	        }
	      }
	    }
	  }

	  // Children can be more than one argument, and those are transferred onto
	  // the newly allocated props object.
	  var childrenLength = arguments.length - 2;
	  if (childrenLength === 1) {
	    props.children = children;
	  } else if (childrenLength > 1) {
	    var childArray = Array(childrenLength);
	    for (var i = 0; i < childrenLength; i++) {
	      childArray[i] = arguments[i + 2];
	    }
	    props.children = childArray;
	  }

	  return ReactElement(element.type, key, ref, self, source, owner, props);
	};

	/**
	 * Verifies the object is a ReactElement.
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.isvalidelement
	 * @param {?object} object
	 * @return {boolean} True if `object` is a valid component.
	 * @final
	 */
	ReactElement.isValidElement = function (object) {
	  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
	};

	module.exports = ReactElement;

/***/ },
/* 41 */
5,
/* 42 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
		value: true
	});

	var _keymap = __webpack_require__(193);

	Object.keys(_keymap).forEach(function (key) {
		if (key === "default" || key === "__esModule") return;
		Object.defineProperty(exports, key, {
			enumerable: true,
			get: function get() {
				return _keymap[key];
			}
		});
	});

	// Add the default 5-way navigation key codes
	(0, _keymap.addAll)({
		enter: [13, 16777221],
		left: 37,
		up: 38,
		right: 39,
		down: 40
	}); // keymap uses a singleton object, map, to manage the keymap. since webpack may make multiple copies
	// of the module available if the import path is different, we ensure a consistent import path for
	// the singleton instance by facading it with this module.

/***/ },
/* 43 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	/*
	 * gregratadie.js - Represent the RD date number in the Gregorian calendar
	 * 
	 * Copyright Â© 2014-2015, JEDLSoft
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 *
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */

	/* !depends 
	ilib.js
	GregorianCal.js
	RataDie.js
	MathUtils.js
	*/

	var ilib = __webpack_require__(2);
	var MathUtils = __webpack_require__(6);
	var GregorianCal = __webpack_require__(55);
	var RataDie = __webpack_require__(17);

	/**
	 * @class
	 * Construct a new Gregorian RD date number object. The constructor parameters can 
	 * contain any of the following properties:
	 * 
	 * <ul>
	 * <li><i>unixtime<i> - sets the time of this instance according to the given 
	 * unix time. Unix time is the number of milliseconds since midnight on Jan 1, 1970.
	 * 
	 * <li><i>julianday</i> - sets the time of this instance according to the given
	 * Julian Day instance or the Julian Day given as a float
	 * 
	 * <li><i>year</i> - any integer, including 0
	 * 
	 * <li><i>month</i> - 1 to 12, where 1 means January, 2 means February, etc.
	 * 
	 * <li><i>day</i> - 1 to 31
	 * 
	 * <li><i>hour</i> - 0 to 23. A formatter is used to display 12 hour clocks, but this representation 
	 * is always done with an unambiguous 24 hour representation
	 * 
	 * <li><i>minute</i> - 0 to 59
	 * 
	 * <li><i>second</i> - 0 to 59
	 * 
	 * <li><i>millisecond</i> - 0 to 999
	 * 
	 * <li><i>date</i> - use the given intrinsic Javascript date to initialize this one.
	 * </ul>
	 *
	 * If the constructor is called with another Gregorian date instance instead of
	 * a parameter block, the other instance acts as a parameter block and its
	 * settings are copied into the current instance.<p>
	 * 
	 * If the constructor is called with no arguments at all or if none of the 
	 * properties listed above are present, then the RD is calculate based on 
	 * the current date at the time of instantiation. <p>
	 * 
	 * If any of the properties from <i>year</i> through <i>millisecond</i> are not
	 * specified in the params, it is assumed that they have the smallest possible
	 * value in the range for the property (zero or one).<p>
	 * 
	 * 
	 * @private
	 * @constructor
	 * @extends RataDie
	 * @param {Object=} params parameters that govern the settings and behaviour of this Gregorian RD date
	 */
	var GregRataDie = function GregRataDie(params) {
	  this.cal = params && params.cal || new GregorianCal();
	  /** @type {number|undefined} */
	  this.rd = undefined;
	  RataDie.call(this, params);
	};

	GregRataDie.prototype = new RataDie();
	GregRataDie.prototype.parent = RataDie;
	GregRataDie.prototype.constructor = GregRataDie;

	/**
	 * the cumulative lengths of each month, for a non-leap year 
	 * @private
	 * @const
	 * @type Array.<number>
	 */
	GregRataDie.cumMonthLengths = [0, /* Jan */
	31, /* Feb */
	59, /* Mar */
	90, /* Apr */
	120, /* May */
	151, /* Jun */
	181, /* Jul */
	212, /* Aug */
	243, /* Sep */
	273, /* Oct */
	304, /* Nov */
	334, /* Dec */
	365];

	/**
	 * the cumulative lengths of each month, for a leap year 
	 * @private
	 * @const
	 * @type Array.<number>
	 */
	GregRataDie.cumMonthLengthsLeap = [0, /* Jan */
	31, /* Feb */
	60, /* Mar */
	91, /* Apr */
	121, /* May */
	152, /* Jun */
	182, /* Jul */
	213, /* Aug */
	244, /* Sep */
	274, /* Oct */
	305, /* Nov */
	335, /* Dec */
	366];

	/**
	 * Calculate the Rata Die (fixed day) number of the given date.
	 * 
	 * @private
	 * @param {Object} date the date components to calculate the RD from
	 */
	GregRataDie.prototype._setDateComponents = function (date) {
	  var year = parseInt(date.year, 10) || 0;
	  var month = parseInt(date.month, 10) || 1;
	  var day = parseInt(date.day, 10) || 1;
	  var hour = parseInt(date.hour, 10) || 0;
	  var minute = parseInt(date.minute, 10) || 0;
	  var second = parseInt(date.second, 10) || 0;
	  var millisecond = parseInt(date.millisecond, 10) || 0;

	  var years = 365 * (year - 1) + Math.floor((year - 1) / 4) - Math.floor((year - 1) / 100) + Math.floor((year - 1) / 400);

	  var dayInYear = (month > 1 ? GregRataDie.cumMonthLengths[month - 1] : 0) + day + (GregorianCal.prototype.isLeapYear.call(this.cal, year) && month > 2 ? 1 : 0);
	  var rdtime = (hour * 3600000 + minute * 60000 + second * 1000 + millisecond) / 86400000;
	  /*
	  debug("getRataDie: converting " +  JSON.stringify(this));
	  debug("getRataDie: year is " +  years);
	  debug("getRataDie: day in year is " +  dayInYear);
	  debug("getRataDie: rdtime is " +  rdtime);
	  debug("getRataDie: rd is " +  (years + dayInYear + rdtime));
	  */

	  /**
	   * @type {number|undefined} the RD number of this Gregorian date
	   */
	  this.rd = years + dayInYear + rdtime;
	};

	/**
	 * Return the rd number of the particular day of the week on or before the 
	 * given rd. eg. The Sunday on or before the given rd.
	 * @private
	 * @param {number} rd the rata die date of the reference date
	 * @param {number} dayOfWeek the day of the week that is being sought relative 
	 * to the current date
	 * @return {number} the rd of the day of the week
	 */
	GregRataDie.prototype._onOrBefore = function (rd, dayOfWeek) {
	  return rd - MathUtils.mod(Math.floor(rd) - dayOfWeek, 7);
	};

	module.exports = GregRataDie;

/***/ },
/* 44 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	exports.BreadcrumbBase = exports.Breadcrumb = exports.breadcrumbWidth = undefined;

	var _extends = Object.assign || function (target) {
		for (var i = 1; i < arguments.length; i++) {
			var source = arguments[i];for (var key in source) {
				if (Object.prototype.hasOwnProperty.call(source, key)) {
					target[key] = source[key];
				}
			}
		}return target;
	};

	var _$L = __webpack_require__(112);

	var _$L2 = _interopRequireDefault(_$L);

	var _kind = __webpack_require__(8);

	var _kind2 = _interopRequireDefault(_kind);

	var _Spottable = __webpack_require__(34);

	var _Spottable2 = _interopRequireDefault(_Spottable);

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _Panels = __webpack_require__(59);

	var _Panels2 = _interopRequireDefault(_Panels);

	function _interopRequireDefault(obj) {
		return obj && obj.__esModule ? obj : { default: obj };
	}

	function _objectWithoutProperties(obj, keys) {
		var target = {};for (var i in obj) {
			if (keys.indexOf(i) >= 0) continue;if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;target[i] = obj[i];
		}return target;
	}

	// Since we expose `onSelect` to handle breadcrumb selection, we need that handler to be set on a
	// component that proxies mouse events for key events so we create a spottable div that will
	// get the right classes as well as handle events correctly.
	var SpottableDiv = (0, _Spottable2.default)('div');

	/**
	 * The width of a breadcrumb which may be used to allocate space for it in a panels layout.
	 *
	 * @type {Number}
	 * @default 96;
	 * @private
	 * @memberof moonstone/Panels
	 */
	var breadcrumbWidth = exports.breadcrumbWidth = 96;

	/**
	 * Vertical, transparent bar generally laid out horizontally used to navigate to a prior Panel.
	 *
	 * @class Breadcrumb
	 * @memberof moonstone/Panels
	 */
	var BreadcrumbBase = (0, _kind2.default)({
		name: 'Breadcrumb',

		propTypes: /** @lends moonstone/Panels.Breadcrumb.prototype */{
			/**
	   * Index of the panel for which this is the breadcrumb
	   *
	   * @type {Number}
	   */
			index: _react2.default.PropTypes.number.isRequired,

			/**
	   * Called when the breadcrumb is clicked
	   *
	   * @type {Function}
	   */
			onClick: _react2.default.PropTypes.func,

			/**
	   * Called when the breadcrumb is clicked
	   *
	   * @type {Function}
	   */
			onSelect: _react2.default.PropTypes.func
		},

		styles: {
			css: _Panels2.default,
			className: 'breadcrumb'
		},

		handlers: {
			onSelect: function onSelect(ev, _ref) {
				var index = _ref.index,
				    _onSelect = _ref.onSelect,
				    onClick = _ref.onClick;

				// clear Spotlight focus
				ev.target.blur();

				if (onClick) onClick(ev);
				if (_onSelect) _onSelect({ index: index });
			}
		},

		render: function render(_ref2) {
			var children = _ref2.children,
			    index = _ref2.index,
			    onSelect = _ref2.onSelect,
			    rest = _objectWithoutProperties(_ref2, ['children', 'index', 'onSelect']);

			return _react2.default.createElement(SpottableDiv, _extends({}, rest, {
				'aria-label': (0, _$L2.default)('go to previous'),
				'data-index': index,
				onClick: onSelect
			}), _react2.default.createElement('div', { className: _Panels2.default.breadcrumbHeader }, children));
		}
	});

	exports.default = BreadcrumbBase;
	exports.Breadcrumb = BreadcrumbBase;
	exports.BreadcrumbBase = BreadcrumbBase;

/***/ },
/* 45 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.ResolutionDecorator = undefined;

	var _resolution = __webpack_require__(141);

	Object.keys(_resolution).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function get() {
	      return _resolution[key];
	    }
	  });
	});

	var ri = _interopRequireWildcard(_resolution);

	var _ResolutionDecorator = __webpack_require__(257);

	var _ResolutionDecorator2 = _interopRequireDefault(_ResolutionDecorator);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	function _interopRequireWildcard(obj) {
	  if (obj && obj.__esModule) {
	    return obj;
	  } else {
	    var newObj = {};if (obj != null) {
	      for (var key in obj) {
	        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
	      }
	    }newObj.default = obj;return newObj;
	  }
	}

	/**
	 * Exports a number of useful methods for resolution independence as well as the
	 * {@link ui/resolution.ResolutionDecorator} Higher-order Component (HOC). The default export is an
	 * object containing the resolution independence methods.
	 *
	 * @module ui/resolution
	 */

	exports.default = ri;
	exports.ResolutionDecorator = _ResolutionDecorator2.default;

/***/ },
/* 46 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var emptyObject = {};

	if (false) {
	  Object.freeze(emptyObject);
	}

	module.exports = emptyObject;

/***/ },
/* 47 */
/***/ function(module, exports, __webpack_require__) {

	var _curry1 = __webpack_require__(19);
	var curryN = __webpack_require__(48);


	/**
	 * Returns a curried equivalent of the provided function. The curried function
	 * has two unusual capabilities. First, its arguments needn't be provided one
	 * at a time. If `f` is a ternary function and `g` is `R.curry(f)`, the
	 * following are equivalent:
	 *
	 *   - `g(1)(2)(3)`
	 *   - `g(1)(2, 3)`
	 *   - `g(1, 2)(3)`
	 *   - `g(1, 2, 3)`
	 *
	 * Secondly, the special placeholder value `R.__` may be used to specify
	 * "gaps", allowing partial application of any combination of arguments,
	 * regardless of their positions. If `g` is as above and `_` is `R.__`, the
	 * following are equivalent:
	 *
	 *   - `g(1, 2, 3)`
	 *   - `g(_, 2, 3)(1)`
	 *   - `g(_, _, 3)(1)(2)`
	 *   - `g(_, _, 3)(1, 2)`
	 *   - `g(_, 2)(1)(3)`
	 *   - `g(_, 2)(1, 3)`
	 *   - `g(_, 2)(_, 3)(1)`
	 *
	 * @func
	 * @memberOf R
	 * @since v0.1.0
	 * @category Function
	 * @sig (* -> a) -> (* -> a)
	 * @param {Function} fn The function to curry.
	 * @return {Function} A new, curried function.
	 * @see R.curryN
	 * @example
	 *
	 *      var addFourNumbers = (a, b, c, d) => a + b + c + d;
	 *
	 *      var curriedAddFourNumbers = R.curry(addFourNumbers);
	 *      var f = curriedAddFourNumbers(1, 2);
	 *      var g = f(3);
	 *      g(4); //=> 10
	 */
	module.exports = _curry1(function curry(fn) {
	  return curryN(fn.length, fn);
	});


/***/ },
/* 48 */
/***/ function(module, exports, __webpack_require__) {

	var _arity = __webpack_require__(63);
	var _curry1 = __webpack_require__(19);
	var _curry2 = __webpack_require__(13);
	var _curryN = __webpack_require__(320);


	/**
	 * Returns a curried equivalent of the provided function, with the specified
	 * arity. The curried function has two unusual capabilities. First, its
	 * arguments needn't be provided one at a time. If `g` is `R.curryN(3, f)`, the
	 * following are equivalent:
	 *
	 *   - `g(1)(2)(3)`
	 *   - `g(1)(2, 3)`
	 *   - `g(1, 2)(3)`
	 *   - `g(1, 2, 3)`
	 *
	 * Secondly, the special placeholder value `R.__` may be used to specify
	 * "gaps", allowing partial application of any combination of arguments,
	 * regardless of their positions. If `g` is as above and `_` is `R.__`, the
	 * following are equivalent:
	 *
	 *   - `g(1, 2, 3)`
	 *   - `g(_, 2, 3)(1)`
	 *   - `g(_, _, 3)(1)(2)`
	 *   - `g(_, _, 3)(1, 2)`
	 *   - `g(_, 2)(1)(3)`
	 *   - `g(_, 2)(1, 3)`
	 *   - `g(_, 2)(_, 3)(1)`
	 *
	 * @func
	 * @memberOf R
	 * @since v0.5.0
	 * @category Function
	 * @sig Number -> (* -> a) -> (* -> a)
	 * @param {Number} length The arity for the returned function.
	 * @param {Function} fn The function to curry.
	 * @return {Function} A new, curried function.
	 * @see R.curry
	 * @example
	 *
	 *      var sumArgs = (...args) => R.sum(args);
	 *
	 *      var curriedAddFourNumbers = R.curryN(4, sumArgs);
	 *      var f = curriedAddFourNumbers(1, 2);
	 *      var g = f(3);
	 *      g(4); //=> 10
	 */
	module.exports = _curry2(function curryN(length, fn) {
	  if (length === 1) {
	    return _curry1(fn);
	  }
	  return _arity(length, _curryN(length, [], fn));
	});


/***/ },
/* 49 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(5);

	var EventPluginRegistry = __webpack_require__(94);
	var EventPluginUtils = __webpack_require__(95);
	var ReactErrorUtils = __webpack_require__(99);

	var accumulateInto = __webpack_require__(174);
	var forEachAccumulated = __webpack_require__(175);
	var invariant = __webpack_require__(3);

	/**
	 * Internal store for event listeners
	 */
	var listenerBank = {};

	/**
	 * Internal queue of events that have accumulated their dispatches and are
	 * waiting to have their dispatches executed.
	 */
	var eventQueue = null;

	/**
	 * Dispatches an event and releases it back into the pool, unless persistent.
	 *
	 * @param {?object} event Synthetic event to be dispatched.
	 * @param {boolean} simulated If the event is simulated (changes exn behavior)
	 * @private
	 */
	var executeDispatchesAndRelease = function (event, simulated) {
	  if (event) {
	    EventPluginUtils.executeDispatchesInOrder(event, simulated);

	    if (!event.isPersistent()) {
	      event.constructor.release(event);
	    }
	  }
	};
	var executeDispatchesAndReleaseSimulated = function (e) {
	  return executeDispatchesAndRelease(e, true);
	};
	var executeDispatchesAndReleaseTopLevel = function (e) {
	  return executeDispatchesAndRelease(e, false);
	};

	var getDictionaryKey = function (inst) {
	  // Prevents V8 performance issue:
	  // https://github.com/facebook/react/pull/7232
	  return '.' + inst._rootNodeID;
	};

	function isInteractive(tag) {
	  return tag === 'button' || tag === 'input' || tag === 'select' || tag === 'textarea';
	}

	function shouldPreventMouseEvent(name, type, props) {
	  switch (name) {
	    case 'onClick':
	    case 'onClickCapture':
	    case 'onDoubleClick':
	    case 'onDoubleClickCapture':
	    case 'onMouseDown':
	    case 'onMouseDownCapture':
	    case 'onMouseMove':
	    case 'onMouseMoveCapture':
	    case 'onMouseUp':
	    case 'onMouseUpCapture':
	      return !!(props.disabled && isInteractive(type));
	    default:
	      return false;
	  }
	}

	/**
	 * This is a unified interface for event plugins to be installed and configured.
	 *
	 * Event plugins can implement the following properties:
	 *
	 *   `extractEvents` {function(string, DOMEventTarget, string, object): *}
	 *     Required. When a top-level event is fired, this method is expected to
	 *     extract synthetic events that will in turn be queued and dispatched.
	 *
	 *   `eventTypes` {object}
	 *     Optional, plugins that fire events must publish a mapping of registration
	 *     names that are used to register listeners. Values of this mapping must
	 *     be objects that contain `registrationName` or `phasedRegistrationNames`.
	 *
	 *   `executeDispatch` {function(object, function, string)}
	 *     Optional, allows plugins to override how an event gets dispatched. By
	 *     default, the listener is simply invoked.
	 *
	 * Each plugin that is injected into `EventsPluginHub` is immediately operable.
	 *
	 * @public
	 */
	var EventPluginHub = {

	  /**
	   * Methods for injecting dependencies.
	   */
	  injection: {

	    /**
	     * @param {array} InjectedEventPluginOrder
	     * @public
	     */
	    injectEventPluginOrder: EventPluginRegistry.injectEventPluginOrder,

	    /**
	     * @param {object} injectedNamesToPlugins Map from names to plugin modules.
	     */
	    injectEventPluginsByName: EventPluginRegistry.injectEventPluginsByName

	  },

	  /**
	   * Stores `listener` at `listenerBank[registrationName][key]`. Is idempotent.
	   *
	   * @param {object} inst The instance, which is the source of events.
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   * @param {function} listener The callback to store.
	   */
	  putListener: function (inst, registrationName, listener) {
	    !(typeof listener === 'function') ?  false ? invariant(false, 'Expected %s listener to be a function, instead got type %s', registrationName, typeof listener) : _prodInvariant('94', registrationName, typeof listener) : void 0;

	    var key = getDictionaryKey(inst);
	    var bankForRegistrationName = listenerBank[registrationName] || (listenerBank[registrationName] = {});
	    bankForRegistrationName[key] = listener;

	    var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
	    if (PluginModule && PluginModule.didPutListener) {
	      PluginModule.didPutListener(inst, registrationName, listener);
	    }
	  },

	  /**
	   * @param {object} inst The instance, which is the source of events.
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   * @return {?function} The stored callback.
	   */
	  getListener: function (inst, registrationName) {
	    // TODO: shouldPreventMouseEvent is DOM-specific and definitely should not
	    // live here; needs to be moved to a better place soon
	    var bankForRegistrationName = listenerBank[registrationName];
	    if (shouldPreventMouseEvent(registrationName, inst._currentElement.type, inst._currentElement.props)) {
	      return null;
	    }
	    var key = getDictionaryKey(inst);
	    return bankForRegistrationName && bankForRegistrationName[key];
	  },

	  /**
	   * Deletes a listener from the registration bank.
	   *
	   * @param {object} inst The instance, which is the source of events.
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   */
	  deleteListener: function (inst, registrationName) {
	    var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
	    if (PluginModule && PluginModule.willDeleteListener) {
	      PluginModule.willDeleteListener(inst, registrationName);
	    }

	    var bankForRegistrationName = listenerBank[registrationName];
	    // TODO: This should never be null -- when is it?
	    if (bankForRegistrationName) {
	      var key = getDictionaryKey(inst);
	      delete bankForRegistrationName[key];
	    }
	  },

	  /**
	   * Deletes all listeners for the DOM element with the supplied ID.
	   *
	   * @param {object} inst The instance, which is the source of events.
	   */
	  deleteAllListeners: function (inst) {
	    var key = getDictionaryKey(inst);
	    for (var registrationName in listenerBank) {
	      if (!listenerBank.hasOwnProperty(registrationName)) {
	        continue;
	      }

	      if (!listenerBank[registrationName][key]) {
	        continue;
	      }

	      var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
	      if (PluginModule && PluginModule.willDeleteListener) {
	        PluginModule.willDeleteListener(inst, registrationName);
	      }

	      delete listenerBank[registrationName][key];
	    }
	  },

	  /**
	   * Allows registered plugins an opportunity to extract events from top-level
	   * native browser events.
	   *
	   * @return {*} An accumulation of synthetic events.
	   * @internal
	   */
	  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	    var events;
	    var plugins = EventPluginRegistry.plugins;
	    for (var i = 0; i < plugins.length; i++) {
	      // Not every plugin in the ordering may be loaded at runtime.
	      var possiblePlugin = plugins[i];
	      if (possiblePlugin) {
	        var extractedEvents = possiblePlugin.extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget);
	        if (extractedEvents) {
	          events = accumulateInto(events, extractedEvents);
	        }
	      }
	    }
	    return events;
	  },

	  /**
	   * Enqueues a synthetic event that should be dispatched when
	   * `processEventQueue` is invoked.
	   *
	   * @param {*} events An accumulation of synthetic events.
	   * @internal
	   */
	  enqueueEvents: function (events) {
	    if (events) {
	      eventQueue = accumulateInto(eventQueue, events);
	    }
	  },

	  /**
	   * Dispatches all synthetic events on the event queue.
	   *
	   * @internal
	   */
	  processEventQueue: function (simulated) {
	    // Set `eventQueue` to null before processing it so that we can tell if more
	    // events get enqueued while processing.
	    var processingEventQueue = eventQueue;
	    eventQueue = null;
	    if (simulated) {
	      forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseSimulated);
	    } else {
	      forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseTopLevel);
	    }
	    !!eventQueue ?  false ? invariant(false, 'processEventQueue(): Additional events were enqueued while processing an event queue. Support for this has not yet been implemented.') : _prodInvariant('95') : void 0;
	    // This would be a good time to rethrow if any of the event handlers threw.
	    ReactErrorUtils.rethrowCaughtError();
	  },

	  /**
	   * These are needed for tests only. Do not use!
	   */
	  __purge: function () {
	    listenerBank = {};
	  },

	  __getListenerBank: function () {
	    return listenerBank;
	  }

	};

	module.exports = EventPluginHub;

/***/ },
/* 50 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var EventPluginHub = __webpack_require__(49);
	var EventPluginUtils = __webpack_require__(95);

	var accumulateInto = __webpack_require__(174);
	var forEachAccumulated = __webpack_require__(175);
	var warning = __webpack_require__(4);

	var getListener = EventPluginHub.getListener;

	/**
	 * Some event types have a notion of different registration names for different
	 * "phases" of propagation. This finds listeners by a given phase.
	 */
	function listenerAtPhase(inst, event, propagationPhase) {
	  var registrationName = event.dispatchConfig.phasedRegistrationNames[propagationPhase];
	  return getListener(inst, registrationName);
	}

	/**
	 * Tags a `SyntheticEvent` with dispatched listeners. Creating this function
	 * here, allows us to not have to bind or create functions for each event.
	 * Mutating the event's members allows us to not have to create a wrapping
	 * "dispatch" object that pairs the event with the listener.
	 */
	function accumulateDirectionalDispatches(inst, phase, event) {
	  if (false) {
	    process.env.NODE_ENV !== 'production' ? warning(inst, 'Dispatching inst must not be null') : void 0;
	  }
	  var listener = listenerAtPhase(inst, event, phase);
	  if (listener) {
	    event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
	    event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
	  }
	}

	/**
	 * Collect dispatches (must be entirely collected before dispatching - see unit
	 * tests). Lazily allocate the array to conserve memory.  We must loop through
	 * each event and perform the traversal for each one. We cannot perform a
	 * single traversal for the entire collection of events because each event may
	 * have a different target.
	 */
	function accumulateTwoPhaseDispatchesSingle(event) {
	  if (event && event.dispatchConfig.phasedRegistrationNames) {
	    EventPluginUtils.traverseTwoPhase(event._targetInst, accumulateDirectionalDispatches, event);
	  }
	}

	/**
	 * Same as `accumulateTwoPhaseDispatchesSingle`, but skips over the targetID.
	 */
	function accumulateTwoPhaseDispatchesSingleSkipTarget(event) {
	  if (event && event.dispatchConfig.phasedRegistrationNames) {
	    var targetInst = event._targetInst;
	    var parentInst = targetInst ? EventPluginUtils.getParentInstance(targetInst) : null;
	    EventPluginUtils.traverseTwoPhase(parentInst, accumulateDirectionalDispatches, event);
	  }
	}

	/**
	 * Accumulates without regard to direction, does not look for phased
	 * registration names. Same as `accumulateDirectDispatchesSingle` but without
	 * requiring that the `dispatchMarker` be the same as the dispatched ID.
	 */
	function accumulateDispatches(inst, ignoredDirection, event) {
	  if (event && event.dispatchConfig.registrationName) {
	    var registrationName = event.dispatchConfig.registrationName;
	    var listener = getListener(inst, registrationName);
	    if (listener) {
	      event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
	      event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
	    }
	  }
	}

	/**
	 * Accumulates dispatches on an `SyntheticEvent`, but only for the
	 * `dispatchMarker`.
	 * @param {SyntheticEvent} event
	 */
	function accumulateDirectDispatchesSingle(event) {
	  if (event && event.dispatchConfig.registrationName) {
	    accumulateDispatches(event._targetInst, null, event);
	  }
	}

	function accumulateTwoPhaseDispatches(events) {
	  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);
	}

	function accumulateTwoPhaseDispatchesSkipTarget(events) {
	  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingleSkipTarget);
	}

	function accumulateEnterLeaveDispatches(leave, enter, from, to) {
	  EventPluginUtils.traverseEnterLeave(from, to, accumulateDispatches, leave, enter);
	}

	function accumulateDirectDispatches(events) {
	  forEachAccumulated(events, accumulateDirectDispatchesSingle);
	}

	/**
	 * A small set of propagation patterns, each of which will accept a small amount
	 * of information, and generate a set of "dispatch ready event objects" - which
	 * are sets of events that have already been annotated with a set of dispatched
	 * listener functions/ids. The API is designed this way to discourage these
	 * propagation strategies from actually executing the dispatches, since we
	 * always want to collect the entire set of dispatches before executing event a
	 * single one.
	 *
	 * @constructor EventPropagators
	 */
	var EventPropagators = {
	  accumulateTwoPhaseDispatches: accumulateTwoPhaseDispatches,
	  accumulateTwoPhaseDispatchesSkipTarget: accumulateTwoPhaseDispatchesSkipTarget,
	  accumulateDirectDispatches: accumulateDirectDispatches,
	  accumulateEnterLeaveDispatches: accumulateEnterLeaveDispatches
	};

	module.exports = EventPropagators;

/***/ },
/* 51 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	/**
	 * `ReactInstanceMap` maintains a mapping from a public facing stateful
	 * instance (key) and the internal representation (value). This allows public
	 * methods to accept the user facing instance as an argument and map them back
	 * to internal methods.
	 */

	// TODO: Replace this with ES6: var ReactInstanceMap = new Map();

	var ReactInstanceMap = {

	  /**
	   * This API should be called `delete` but we'd have to make sure to always
	   * transform these to strings for IE support. When this transform is fully
	   * supported we can rename it.
	   */
	  remove: function (key) {
	    key._reactInternalInstance = undefined;
	  },

	  get: function (key) {
	    return key._reactInternalInstance;
	  },

	  has: function (key) {
	    return key._reactInternalInstance !== undefined;
	  },

	  set: function (key, value) {
	    key._reactInternalInstance = value;
	  }

	};

	module.exports = ReactInstanceMap;

/***/ },
/* 52 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var SyntheticEvent = __webpack_require__(26);

	var getEventTarget = __webpack_require__(104);

	/**
	 * @interface UIEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var UIEventInterface = {
	  view: function (event) {
	    if (event.view) {
	      return event.view;
	    }

	    var target = getEventTarget(event);
	    if (target.window === target) {
	      // target is a window object
	      return target;
	    }

	    var doc = target.ownerDocument;
	    // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
	    if (doc) {
	      return doc.defaultView || doc.parentWindow;
	    } else {
	      return window;
	    }
	  },
	  detail: function (event) {
	    return event.detail || 0;
	  }
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticEvent}
	 */
	function SyntheticUIEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticEvent.augmentClass(SyntheticUIEvent, UIEventInterface);

	module.exports = SyntheticUIEvent;

/***/ },
/* 53 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	/*
	 * astro.js - Static functions to support astronomical calculations
	 * 
	 * Copyright Â© 2014-2015, JEDLSoft
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 *
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */

	/* !depends
	ilib.js
	IDate.js
	Utils.js
	MathUtils.js
	SearchUtils.js
	GregorianDate.js
	GregRataDie.js
	*/

	// !data astro

	/*
	 * These routines were derived from a public domain set of JavaScript 
	 * functions for positional astronomy by John Walker of Fourmilab, 
	 * September 1999.
	 */

	var ilib = __webpack_require__(2);
	var Utils = __webpack_require__(25);
	var MathUtils = __webpack_require__(6);
	var SearchUtils = __webpack_require__(33);

	var GregorianDate = __webpack_require__(30);
	var RataDie = __webpack_require__(17);
	var GregRataDie = __webpack_require__(43);

	var Astro = {};

	/**
	 * Load in all the data needed for astrological calculations.
	 * 
	 * @private
	 * @param {boolean} sync
	 * @param {*} loadParams
	 * @param {function(*)|undefined} callback
	 */
	Astro.initAstro = function (sync, loadParams, callback) {
		if (!ilib.data.astro) {
			Utils.loadData({
				name: "astro.json", // countries in their own language 
				locale: "-", // only need to load the root file 
				nonLocale: true,
				sync: sync,
				loadParams: loadParams,
				callback: ilib.bind(this, /** @type function() */function (astroData) {
					/** 
	     * @type {{
	     *  	_EquinoxpTerms:Array.<number>, 
	     *  	_JDE0tab1000:Array.<number>, 
	     *  	_JDE0tab2000:Array.<number>, 
	     *  	_deltaTtab:Array.<number>,
	     *  	_oterms:Array.<number>,
	     *  	_nutArgMult:Array.<number>, 
	     *  	_nutArgCoeff:Array.<number>, 
	     *  	_nutCoeffA:Array.<number>,
	     *  	_nutCoeffB:Array.<number>,
	     *  	_coeff19th:Array.<number>,
	     *  	_coeff18th:Array.<number>,
	     *  	_solarLongCoeff:Array.<number>, 
	     *  	_solarLongMultipliers:Array.<number>, 
	     *  	_solarLongAddends:Array.<number>, 
	     *  	_meanMoonCoeff:Array.<number>,
	     *  	_elongationCoeff:Array.<number>,
	     *  	_solarAnomalyCoeff:Array.<number>,
	     *  	_lunarAnomalyCoeff:Array.<number>,
	     *  	_moonFromNodeCoeff:Array.<number>,
	     *  	_eCoeff:Array.<number>,
	     *  	_lunarElongationLongCoeff:Array.<number>,
	     *  	_solarAnomalyLongCoeff:Array.<number>,
	     *  	_lunarAnomalyLongCoeff:Array.<number>,
	     *  	_moonFromNodeLongCoeff:Array.<number>,
	     *  	_sineCoeff:Array.<number>,
	     *  	_nmApproxCoeff:Array.<number>,
	     *  	_nmCapECoeff:Array.<number>,
	     *  	_nmSolarAnomalyCoeff:Array.<number>,
	     *  	_nmLunarAnomalyCoeff:Array.<number>,
	     *  	_nmMoonArgumentCoeff:Array.<number>,
	     *  	_nmCapOmegaCoeff:Array.<number>,
	     *  	_nmEFactor:Array.<number>,
	     *  	_nmSolarCoeff:Array.<number>,
	     *  	_nmLunarCoeff:Array.<number>,
	     *  	_nmMoonCoeff:Array.<number>,
	     *  	_nmSineCoeff:Array.<number>,
	     *  	_nmAddConst:Array.<number>,
	     *  	_nmAddCoeff:Array.<number>,
	     *  	_nmAddFactor:Array.<number>,
	     *  	_nmExtra:Array.<number>
	     *  }}
	     */
					ilib.data.astro = astroData;
					if (callback && typeof callback === 'function') {
						callback(astroData);
					}
				})
			});
		} else {
			if (callback && typeof callback === 'function') {
				callback(ilib.data.astro);
			}
		}
	};

	/**
	 * Convert degrees to radians.
	 * 
	 * @static
	 * @protected
	 * @param {number} d angle in degrees
	 * @return {number} angle in radians 
	 */
	Astro._dtr = function (d) {
		return d * Math.PI / 180.0;
	};

	/**
	 * Convert radians to degrees.
	 * 
	 * @static
	 * @protected
	 * @param {number} r angle in radians
	 * @return {number} angle in degrees 
	 */
	Astro._rtd = function (r) {
		return r * 180.0 / Math.PI;
	};

	/**
	 * Return the cosine of an angle given in degrees.
	 * @static
	 * @protected
	 * @param {number} d angle in degrees
	 * @return {number} cosine of the angle.
	 */
	Astro._dcos = function (d) {
		return Math.cos(Astro._dtr(d));
	};

	/**
	 * Return the sine of an angle given in degrees.
	 * @static
	 * @protected
	 * @param {number} d angle in degrees
	 * @return {number} sine of the angle.
	 */
	Astro._dsin = function (d) {
		return Math.sin(Astro._dtr(d));
	};

	/**
	 * Return the tan of an angle given in degrees.
	 * @static
	 * @protected
	 * @param {number} d angle in degrees
	 * @return {number} tan of the angle.
	 */
	Astro._dtan = function (d) {
		return Math.tan(Astro._dtr(d));
	};

	/**
	 * Range reduce angle in degrees.
	 * 
	 * @static
	 * @param {number} a angle to reduce
	 * @return {number} the reduced angle  
	 */
	Astro._fixangle = function (a) {
		return a - 360.0 * Math.floor(a / 360.0);
	};

	/**
	 * Range reduce angle in radians.
	 * 
	 * @static
	 * @protected
	 * @param {number} a angle to reduce
	 * @return {number} the reduced angle  
	 */
	Astro._fixangr = function (a) {
		return a - 2 * Math.PI * Math.floor(a / (2 * Math.PI));
	};

	/**
	 * Determine the Julian Ephemeris Day of an equinox or solstice.  The "which" 
	 * argument selects the item to be computed:
	 * 
	 * <ul>
	 * <li>0   March equinox
	 * <li>1   June solstice
	 * <li>2   September equinox
	 * <li>3   December solstice
	 * </ul>
	 * 
	 * @static
	 * @protected
	 * @param {number} year Gregorian year to calculate for
	 * @param {number} which Which equinox or solstice to calculate
	 */
	Astro._equinox = function (year, which) {
		var deltaL, i, j, JDE0, JDE, JDE0tab, S, T, W, Y;

		/*  Initialize terms for mean equinox and solstices.  We
	     have two sets: one for years prior to 1000 and a second
	     for subsequent years.  */

		if (year < 1000) {
			JDE0tab = ilib.data.astro._JDE0tab1000;
			Y = year / 1000;
		} else {
			JDE0tab = ilib.data.astro._JDE0tab2000;
			Y = (year - 2000) / 1000;
		}

		JDE0 = JDE0tab[which][0] + JDE0tab[which][1] * Y + JDE0tab[which][2] * Y * Y + JDE0tab[which][3] * Y * Y * Y + JDE0tab[which][4] * Y * Y * Y * Y;

		//document.debug.log.value += "JDE0 = " + JDE0 + "\n";

		T = (JDE0 - 2451545.0) / 36525;
		//document.debug.log.value += "T = " + T + "\n";
		W = 35999.373 * T - 2.47;
		//document.debug.log.value += "W = " + W + "\n";
		deltaL = 1 + 0.0334 * Astro._dcos(W) + 0.0007 * Astro._dcos(2 * W);
		//document.debug.log.value += "deltaL = " + deltaL + "\n";

		//  Sum the periodic terms for time T

		S = 0;
		j = 0;
		for (i = 0; i < 24; i++) {
			S += ilib.data.astro._EquinoxpTerms[j] * Astro._dcos(ilib.data.astro._EquinoxpTerms[j + 1] + ilib.data.astro._EquinoxpTerms[j + 2] * T);
			j += 3;
		}

		//document.debug.log.value += "S = " + S + "\n";
		//document.debug.log.value += "Corr = " + ((S * 0.00001) / deltaL) + "\n";

		JDE = JDE0 + S * 0.00001 / deltaL;

		return JDE;
	};

	/* 
	 * The table of observed Delta T values at the beginning of
	 * years from 1620 through 2014 as found in astro.json is taken from
	 * http://www.staff.science.uu.nl/~gent0113/deltat/deltat.htm
	 * and
	 * ftp://maia.usno.navy.mil/ser7/deltat.data
	 */

	/**  
	 * Determine the difference, in seconds, between dynamical time and universal time.
	 * 
	 * @static
	 * @protected
	 * @param {number} year to calculate the difference for
	 * @return {number} difference in seconds between dynamical time and universal time  
	 */
	Astro._deltat = function (year) {
		var dt, f, i, t;

		if (year >= 1620 && year <= 2014) {
			i = Math.floor(year - 1620);
			f = year - 1620 - i; /* Fractional part of year */
			dt = ilib.data.astro._deltaTtab[i] + (ilib.data.astro._deltaTtab[i + 1] - ilib.data.astro._deltaTtab[i]) * f;
		} else {
			t = (year - 2000) / 100;
			if (year < 948) {
				dt = 2177 + 497 * t + 44.1 * t * t;
			} else {
				dt = 102 + 102 * t + 25.3 * t * t;
				if (year > 2000 && year < 2100) {
					dt += 0.37 * (year - 2100);
				}
			}
		}
		return dt;
	};

	/**
	 * Calculate the obliquity of the ecliptic for a given
	 * Julian date.  This uses Laskar's tenth-degree
	 * polynomial fit (J. Laskar, Astronomy and
	 * Astrophysics, Vol. 157, page 68 [1986]) which is
	 * accurate to within 0.01 arc second between AD 1000
	 * and AD 3000, and within a few seconds of arc for
	 * +/-10000 years around AD 2000.  If we're outside the
	 * range in which this fit is valid (deep time) we
	 * simply return the J2000 value of the obliquity, which
	 * happens to be almost precisely the mean.
	 * 
	 * @static
	 * @protected
	 * @param {number} jd Julian Day to calculate the obliquity for
	 * @return {number} the obliquity
	 */
	Astro._obliqeq = function (jd) {
		var eps, u, v, i;

		v = u = (jd - 2451545.0) / 3652500.0;

		eps = 23 + 26 / 60.0 + 21.448 / 3600.0;

		if (Math.abs(u) < 1.0) {
			for (i = 0; i < 10; i++) {
				eps += ilib.data.astro._oterms[i] / 3600.0 * v;
				v *= u;
			}
		}
		return eps;
	};

	/**
	 * Return the position of the sun.  We return
	 * intermediate values because they are useful in a
	 * variety of other contexts.
	 * @static
	 * @protected
	 * @param {number} jd find the position of sun on this Julian Day
	 * @return {Object} the position of the sun and many intermediate
	 * values
	 */
	Astro._sunpos = function (jd) {
		var ret = {},
		    T,
		    T2,
		    T3,
		    Omega,
		    epsilon,
		    epsilon0;

		T = (jd - 2451545.0) / 36525.0;
		//document.debug.log.value += "Sunpos.  T = " + T + "\n";
		T2 = T * T;
		T3 = T * T2;
		ret.meanLongitude = Astro._fixangle(280.46646 + 36000.76983 * T + 0.0003032 * T2);
		//document.debug.log.value += "ret.meanLongitude = " + ret.meanLongitude + "\n";
		ret.meanAnomaly = Astro._fixangle(357.52911 + 35999.05029 * T - 0.0001537 * T2 - 0.00000048 * T3);
		//document.debug.log.value += "ret.meanAnomaly = " + ret.meanAnomaly + "\n";
		ret.eccentricity = 0.016708634 - 0.000042037 * T - 0.0000001267 * T2;
		//document.debug.log.value += "e = " + e + "\n";
		ret.equationOfCenter = (1.914602 - 0.004817 * T - 0.000014 * T2) * Astro._dsin(ret.meanAnomaly) + (0.019993 - 0.000101 * T) * Astro._dsin(2 * ret.meanAnomaly) + 0.000289 * Astro._dsin(3 * ret.meanAnomaly);
		//document.debug.log.value += "ret.equationOfCenter = " + ret.equationOfCenter + "\n";
		ret.sunLongitude = ret.meanLongitude + ret.equationOfCenter;
		//document.debug.log.value += "ret.sunLongitude = " + ret.sunLongitude + "\n";
		//ret.sunAnomaly = ret.meanAnomaly + ret.equationOfCenter;
		//document.debug.log.value += "ret.sunAnomaly = " + ret.sunAnomaly + "\n";
		// ret.sunRadius = (1.000001018 * (1 - (ret.eccentricity * ret.eccentricity))) / (1 + (ret.eccentricity * Astro._dcos(ret.sunAnomaly)));
		//document.debug.log.value += "ret.sunRadius = " + ret.sunRadius + "\n";
		Omega = 125.04 - 1934.136 * T;
		//document.debug.log.value += "Omega = " + Omega + "\n";
		ret.apparentLong = ret.sunLongitude + -0.00569 + -0.00478 * Astro._dsin(Omega);
		//document.debug.log.value += "ret.apparentLong = " + ret.apparentLong + "\n";
		epsilon0 = Astro._obliqeq(jd);
		//document.debug.log.value += "epsilon0 = " + epsilon0 + "\n";
		epsilon = epsilon0 + 0.00256 * Astro._dcos(Omega);
		//document.debug.log.value += "epsilon = " + epsilon + "\n";
		//ret.rightAscension = Astro._fixangle(Astro._rtd(Math.atan2(Astro._dcos(epsilon0) * Astro._dsin(ret.sunLongitude), Astro._dcos(ret.sunLongitude))));
		//document.debug.log.value += "ret.rightAscension = " + ret.rightAscension + "\n";
		// ret.declination = Astro._rtd(Math.asin(Astro._dsin(epsilon0) * Astro._dsin(ret.sunLongitude)));
		////document.debug.log.value += "ret.declination = " + ret.declination + "\n";
		ret.inclination = Astro._fixangle(23.4392911 - 0.013004167 * T - 0.00000016389 * T2 + 0.0000005036 * T3);
		ret.apparentRightAscension = Astro._fixangle(Astro._rtd(Math.atan2(Astro._dcos(epsilon) * Astro._dsin(ret.apparentLong), Astro._dcos(ret.apparentLong))));
		//document.debug.log.value += "ret.apparentRightAscension = " + ret.apparentRightAscension + "\n";
		//ret.apparentDeclination = Astro._rtd(Math.asin(Astro._dsin(epsilon) * Astro._dsin(ret.apparentLong)));
		//document.debug.log.value += "ret.apparentDecliation = " + ret.apparentDecliation + "\n";

		// Angular quantities are expressed in decimal degrees
		return ret;
	};

	/**
	 * Calculate the nutation in longitude, deltaPsi, and obliquity, 
	 * deltaEpsilon for a given Julian date jd. Results are returned as an object
	 * giving deltaPsi and deltaEpsilon in degrees.
	 * 
	 * @static
	 * @protected
	 * @param {number} jd calculate the nutation of this Julian Day
	 * @return {Object} the deltaPsi and deltaEpsilon of the nutation
	 */
	Astro._nutation = function (jd) {
		var i,
		    j,
		    t = (jd - 2451545.0) / 36525.0,
		    t2,
		    t3,
		    to10,
		    ta = [],
		    dp = 0,
		    de = 0,
		    ang,
		    ret = {};

		t3 = t * (t2 = t * t);

		/*
	  * Calculate angles. The correspondence between the elements of our array
	  * and the terms cited in Meeus are:
	  * 
	  * ta[0] = D ta[0] = M ta[2] = M' ta[3] = F ta[4] = \Omega
	  * 
	  */

		ta[0] = Astro._dtr(297.850363 + 445267.11148 * t - 0.0019142 * t2 + t3 / 189474.0);
		ta[1] = Astro._dtr(357.52772 + 35999.05034 * t - 0.0001603 * t2 - t3 / 300000.0);
		ta[2] = Astro._dtr(134.96298 + 477198.867398 * t + 0.0086972 * t2 + t3 / 56250.0);
		ta[3] = Astro._dtr(93.27191 + 483202.017538 * t - 0.0036825 * t2 + t3 / 327270);
		ta[4] = Astro._dtr(125.04452 - 1934.136261 * t + 0.0020708 * t2 + t3 / 450000.0);

		/*
	  * Range reduce the angles in case the sine and cosine functions don't do it
	  * as accurately or quickly.
	  */

		for (i = 0; i < 5; i++) {
			ta[i] = Astro._fixangr(ta[i]);
		}

		to10 = t / 10.0;
		for (i = 0; i < 63; i++) {
			ang = 0;
			for (j = 0; j < 5; j++) {
				if (ilib.data.astro._nutArgMult[i * 5 + j] != 0) {
					ang += ilib.data.astro._nutArgMult[i * 5 + j] * ta[j];
				}
			}
			dp += (ilib.data.astro._nutArgCoeff[i * 4 + 0] + ilib.data.astro._nutArgCoeff[i * 4 + 1] * to10) * Math.sin(ang);
			de += (ilib.data.astro._nutArgCoeff[i * 4 + 2] + ilib.data.astro._nutArgCoeff[i * 4 + 3] * to10) * Math.cos(ang);
		}

		/*
	  * Return the result, converting from ten thousandths of arc seconds to
	  * radians in the process.
	  */

		ret.deltaPsi = dp / (3600.0 * 10000.0);
		ret.deltaEpsilon = de / (3600.0 * 10000.0);

		return ret;
	};

	/**
	 * Returns the equation of time as a fraction of a day.
	 * 
	 * @static
	 * @protected
	 * @param {number} jd the Julian Day of the day to calculate for
	 * @return {number} the equation of time for the given day  
	 */
	Astro._equationOfTime = function (jd) {
		var alpha, deltaPsi, E, epsilon, L0, tau, pos;

		// 2451545.0 is the Julian day of J2000 epoch
		// 365250.0 is the number of days in a Julian millenium
		tau = (jd - 2451545.0) / 365250.0;
		//console.log("equationOfTime.  tau = " + tau);
		L0 = 280.4664567 + 360007.6982779 * tau + 0.03032028 * tau * tau + tau * tau * tau / 49931 + -(tau * tau * tau * tau / 15300) + -(tau * tau * tau * tau * tau / 2000000);
		//console.log("L0 = " + L0);
		L0 = Astro._fixangle(L0);
		//console.log("L0 = " + L0);
		pos = Astro._sunpos(jd);
		alpha = pos.apparentRightAscension;
		//console.log("alpha = " + alpha);
		var nut = Astro._nutation(jd);
		deltaPsi = nut.deltaPsi;
		//console.log("deltaPsi = " + deltaPsi);
		epsilon = Astro._obliqeq(jd) + nut.deltaEpsilon;
		//console.log("epsilon = " + epsilon);
		//console.log("L0 - 0.0057183 = " + (L0 - 0.0057183));
		//console.log("L0 - 0.0057183 - alpha = " + (L0 - 0.0057183 - alpha));
		//console.log("deltaPsi * cos(epsilon) = " + deltaPsi * Astro._dcos(epsilon));

		E = L0 - 0.0057183 - alpha + deltaPsi * Astro._dcos(epsilon);
		// if alpha and L0 are in different quadrants, then renormalize
		// so that the difference between them is in the right range
		if (E > 180) {
			E -= 360;
		}
		//console.log("E = " + E);
		// E = E - 20.0 * (Math.floor(E / 20.0));
		E = E * 4;
		//console.log("Efixed = " + E);
		E = E / (24 * 60);
		//console.log("Eday = " + E);

		return E;
	};

	/**
	 * @private
	 * @static
	 */
	Astro._poly = function (x, coefficients) {
		var result = coefficients[0];
		var xpow = x;
		for (var i = 1; i < coefficients.length; i++) {
			result += coefficients[i] * xpow;
			xpow *= x;
		}
		return result;
	};

	/**
	 * Calculate the UTC RD from the local RD given "zone" number of minutes
	 * worth of offset.
	 * 
	 * @static
	 * @protected
	 * @param {number} local RD of the locale time, given in any calendar
	 * @param {number} zone number of minutes of offset from UTC for the time zone 
	 * @return {number} the UTC equivalent of the local RD
	 */
	Astro._universalFromLocal = function (local, zone) {
		return local - zone / 1440;
	};

	/**
	 * Calculate the local RD from the UTC RD given "zone" number of minutes
	 * worth of offset.
	 * 
	 * @static
	 * @protected
	 * @param {number} local RD of the locale time, given in any calendar
	 * @param {number} zone number of minutes of offset from UTC for the time zone 
	 * @return {number} the UTC equivalent of the local RD
	 */
	Astro._localFromUniversal = function (local, zone) {
		return local + zone / 1440;
	};

	/**
	 * @private
	 * @static
	 * @param {number} c julian centuries of the date to calculate
	 * @return {number} the aberration
	 */
	Astro._aberration = function (c) {
		return 9.74e-05 * Astro._dcos(177.63 + 35999.01847999999 * c) - 0.005575;
	};

	/**
	 * @private
	 *
	ilib.data.astro._nutCoeffA = [124.90, -1934.134, 0.002063];
	ilib.data.astro._nutCoeffB q= [201.11, 72001.5377, 0.00057];
	*/

	/**
	 * @private
	 * @static
	 * @param {number} c julian centuries of the date to calculate
	 * @return {number} the nutation for the given julian century in radians
	 */
	Astro._nutation2 = function (c) {
		var a = Astro._poly(c, ilib.data.astro._nutCoeffA);
		var b = Astro._poly(c, ilib.data.astro._nutCoeffB);
		// return -0.0000834 * Astro._dsin(a) - 0.0000064 * Astro._dsin(b);
		return -0.004778 * Astro._dsin(a) - 0.0003667 * Astro._dsin(b);
	};

	/**
	 * @static
	 * @private
	 */
	Astro._ephemerisCorrection = function (jd) {
		var year = GregorianDate._calcYear(jd - 1721424.5);

		if (1988 <= year && year <= 2019) {
			return (year - 1933) / 86400;
		}

		if (1800 <= year && year <= 1987) {
			var jul1 = new GregRataDie({
				year: year,
				month: 7,
				day: 1,
				hour: 0,
				minute: 0,
				second: 0
			});
			// 693596 is the rd of Jan 1, 1900
			var theta = (jul1.getRataDie() - 693596) / 36525;
			return Astro._poly(theta, 1900 <= year ? ilib.data.astro._coeff19th : ilib.data.astro._coeff18th);
		}

		if (1620 <= year && year <= 1799) {
			year -= 1600;
			return (196.58333 - 4.0675 * year + 0.0219167 * year * year) / 86400;
		}

		// 660724 is the rd of Jan 1, 1810
		var jan1 = new GregRataDie({
			year: year,
			month: 1,
			day: 1,
			hour: 0,
			minute: 0,
			second: 0
		});
		// var x = 0.5 + (jan1.getRataDie() - 660724);
		var x = 0.5 + (jan1.getRataDie() - 660724);

		return (x * x / 41048480 - 15) / 86400;
	};

	/**
	 * @static
	 * @private
	 */
	Astro._ephemerisFromUniversal = function (jd) {
		return jd + Astro._ephemerisCorrection(jd);
	};

	/**
	 * @static
	 * @private
	 */
	Astro._universalFromEphemeris = function (jd) {
		return jd - Astro._ephemerisCorrection(jd);
	};

	/**
	 * @static
	 * @private
	 */
	Astro._julianCenturies = function (jd) {
		// 2451545.0 is the Julian day of J2000 epoch
		// 730119.5 is the Gregorian RD of J2000 epoch
		// 36525.0 is the number of days in a Julian century
		return (Astro._ephemerisFromUniversal(jd) - 2451545.0) / 36525.0;
	};

	/**
	 * Calculate the solar longitude
	 * 
	 * @static
	 * @protected
	 * @param {number} jd julian day of the date to calculate the longitude for 
	 * @return {number} the solar longitude in degrees
	 */
	Astro._solarLongitude = function (jd) {
		var c = Astro._julianCenturies(jd),
		    longitude = 0,
		    len = ilib.data.astro._solarLongCoeff.length,
		    row;

		for (var i = 0; i < len; i++) {
			longitude += ilib.data.astro._solarLongCoeff[i] * Astro._dsin(ilib.data.astro._solarLongAddends[i] + ilib.data.astro._solarLongMultipliers[i] * c);
		}
		longitude *= 5.729577951308232e-06;
		longitude += 282.77718340000001 + 36000.769537439999 * c;
		longitude += Astro._aberration(c) + Astro._nutation2(c);
		return Astro._fixangle(longitude);
	};

	/**
	 * @static
	 * @protected
	 * @param {number} jd
	 * @return {number}
	 */
	Astro._lunarLongitude = function (jd) {
		var c = Astro._julianCenturies(jd),
		    meanMoon = Astro._fixangle(Astro._poly(c, ilib.data.astro._meanMoonCoeff)),
		    elongation = Astro._fixangle(Astro._poly(c, ilib.data.astro._elongationCoeff)),
		    solarAnomaly = Astro._fixangle(Astro._poly(c, ilib.data.astro._solarAnomalyCoeff)),
		    lunarAnomaly = Astro._fixangle(Astro._poly(c, ilib.data.astro._lunarAnomalyCoeff)),
		    moonNode = Astro._fixangle(Astro._poly(c, ilib.data.astro._moonFromNodeCoeff)),
		    e = Astro._poly(c, ilib.data.astro._eCoeff);

		var sum = 0;
		for (var i = 0; i < ilib.data.astro._lunarElongationLongCoeff.length; i++) {
			var x = ilib.data.astro._solarAnomalyLongCoeff[i];

			sum += ilib.data.astro._sineCoeff[i] * Math.pow(e, Math.abs(x)) * Astro._dsin(ilib.data.astro._lunarElongationLongCoeff[i] * elongation + x * solarAnomaly + ilib.data.astro._lunarAnomalyLongCoeff[i] * lunarAnomaly + ilib.data.astro._moonFromNodeLongCoeff[i] * moonNode);
		}
		var longitude = sum / 1000000;
		var venus = 3958.0 / 1000000 * Astro._dsin(119.75 + c * 131.84899999999999);
		var jupiter = 318.0 / 1000000 * Astro._dsin(53.090000000000003 + c * 479264.28999999998);
		var flatEarth = 1962.0 / 1000000 * Astro._dsin(meanMoon - moonNode);

		return Astro._fixangle(meanMoon + longitude + venus + jupiter + flatEarth + Astro._nutation2(c));
	};

	/**
	 * @static
	 * @protected
	 * @param {number} n
	 * @return {number} julian day of the n'th new moon
	 */
	Astro._newMoonTime = function (n) {
		var k = n - 24724;
		var c = k / 1236.8499999999999;
		var approx = Astro._poly(c, ilib.data.astro._nmApproxCoeff);
		var capE = Astro._poly(c, ilib.data.astro._nmCapECoeff);
		var solarAnomaly = Astro._poly(c, ilib.data.astro._nmSolarAnomalyCoeff);
		var lunarAnomaly = Astro._poly(c, ilib.data.astro._nmLunarAnomalyCoeff);
		var moonArgument = Astro._poly(c, ilib.data.astro._nmMoonArgumentCoeff);
		var capOmega = Astro._poly(c, ilib.data.astro._nmCapOmegaCoeff);
		var correction = -0.00017 * Astro._dsin(capOmega);
		for (var i = 0; i < ilib.data.astro._nmSineCoeff.length; i++) {
			correction = correction + ilib.data.astro._nmSineCoeff[i] * Math.pow(capE, ilib.data.astro._nmEFactor[i]) * Astro._dsin(ilib.data.astro._nmSolarCoeff[i] * solarAnomaly + ilib.data.astro._nmLunarCoeff[i] * lunarAnomaly + ilib.data.astro._nmMoonCoeff[i] * moonArgument);
		}
		var additional = 0;
		for (var i = 0; i < ilib.data.astro._nmAddConst.length; i++) {
			additional = additional + ilib.data.astro._nmAddFactor[i] * Astro._dsin(ilib.data.astro._nmAddConst[i] + ilib.data.astro._nmAddCoeff[i] * k);
		}
		var extra = 0.000325 * Astro._dsin(Astro._poly(c, ilib.data.astro._nmExtra));
		return Astro._universalFromEphemeris(approx + correction + extra + additional + RataDie.gregorianEpoch);
	};

	/**
	 * @static
	 * @protected
	 * @param {number} jd
	 * @return {number}
	 */
	Astro._lunarSolarAngle = function (jd) {
		var lunar = Astro._lunarLongitude(jd);
		var solar = Astro._solarLongitude(jd);
		return Astro._fixangle(lunar - solar);
	};

	/**
	 * @static
	 * @protected
	 * @param {number} jd
	 * @return {number}
	 */
	Astro._newMoonBefore = function (jd) {
		var phase = Astro._lunarSolarAngle(jd);
		// 11.450086114414322 is the julian day of the 0th full moon
		// 29.530588853000001 is the average length of a month
		var guess = Math.round((jd - 11.450086114414322 - RataDie.gregorianEpoch) / 29.530588853000001 - phase / 360) - 1;
		var current, last;
		current = last = Astro._newMoonTime(guess);
		while (current < jd) {
			guess++;
			last = current;
			current = Astro._newMoonTime(guess);
		}
		return last;
	};

	/**
	 * @static
	 * @protected
	 * @param {number} jd
	 * @return {number}
	 */
	Astro._newMoonAtOrAfter = function (jd) {
		var phase = Astro._lunarSolarAngle(jd);
		// 11.450086114414322 is the julian day of the 0th full moon
		// 29.530588853000001 is the average length of a month
		var guess = Math.round((jd - 11.450086114414322 - RataDie.gregorianEpoch) / 29.530588853000001 - phase / 360);
		var current;
		while ((current = Astro._newMoonTime(guess)) < jd) {
			guess++;
		}
		return current;
	};

	/**
	 * @static
	 * @protected
	 * @param {number} jd JD to calculate from
	 * @param {number} longitude longitude to seek 
	 * @returns {number} the JD of the next time that the solar longitude 
	 * is a multiple of the given longitude
	 */
	Astro._nextSolarLongitude = function (jd, longitude) {
		var rate = 365.242189 / 360.0;
		var tau = jd + rate * Astro._fixangle(longitude - Astro._solarLongitude(jd));
		var start = Math.max(jd, tau - 5.0);
		var end = tau + 5.0;

		return SearchUtils.bisectionSearch(0, start, end, 1e-6, function (l) {
			return 180 - Astro._fixangle(Astro._solarLongitude(l) - longitude);
		});
	};

	/**
	 * Floor the julian day to midnight of the current julian day.
	 * 
	 * @static
	 * @protected
	 * @param {number} jd the julian to round
	 * @return {number} the jd floored to the midnight of the julian day
	 */
	Astro._floorToJD = function (jd) {
		return Math.floor(jd - 0.5) + 0.5;
	};

	/**
	 * Floor the julian day to midnight of the current julian day.
	 * 
	 * @static
	 * @protected
	 * @param {number} jd the julian to round
	 * @return {number} the jd floored to the midnight of the julian day
	 */
	Astro._ceilToJD = function (jd) {
		return Math.ceil(jd + 0.5) - 0.5;
	};

	module.exports = Astro;

/***/ },
/* 54 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
	  return typeof obj === "undefined" ? "undefined" : _typeof2(obj);
	} : function (obj) {
	  return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof2(obj);
	};

	/*
	 * ethiopic.js - Represent a Ethiopic calendar object.
	 * 
	 * Copyright Â© 2015, JEDLSoft
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 *
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */

	/* !depends ilib.js Calendar.js Utils.js MathUtils.js */

	var ilib = __webpack_require__(2);
	var Utils = __webpack_require__(25);
	var MathUtils = __webpack_require__(6);

	var Calendar = __webpack_require__(9);

	/**
	 * @class
	 * Construct a new Ethiopic calendar object. This class encodes information about
	 * a Ethiopic calendar.<p>
	 * 
	 * 
	 * @constructor
	 * @extends Calendar
	 */
	var EthiopicCal = function EthiopicCal() {
	  this.type = "ethiopic";
	};

	/**
	 * Return the number of months in the given year. The number of months in a year varies
	 * for lunar calendars because in some years, an extra month is needed to extend the 
	 * days in a year to an entire solar year. The month is represented as a 1-based number
	 * where 1=Maskaram, 2=Teqemt, etc. until 13=Paguemen.
	 * 
	 * @param {number} year a year for which the number of months is sought
	 */
	EthiopicCal.prototype.getNumMonths = function (year) {
	  return 13;
	};

	/**
	 * Return the number of days in a particular month in a particular year. This function
	 * can return a different number for a month depending on the year because of things
	 * like leap years.
	 * 
	 * @param {number|string} month the month for which the length is sought
	 * @param {number} year the year within which that month can be found
	 * @return {number} the number of days within the given month in the given year
	 */
	EthiopicCal.prototype.getMonLength = function (month, year) {
	  var m = month;
	  switch (typeof m === "undefined" ? "undefined" : _typeof(m)) {
	    case "string":
	      m = parseInt(m, 10);
	      break;
	    case "function":
	    case "object":
	    case "undefined":
	      return 30;
	      break;
	  }
	  if (m < 13) {
	    return 30;
	  } else {
	    return this.isLeapYear(year) ? 6 : 5;
	  }
	};

	/**
	 * Return true if the given year is a leap year in the Ethiopic calendar.
	 * The year parameter may be given as a number, or as a JulDate object.
	 * @param {number|EthiopicDate|string} year the year for which the leap year information is being sought
	 * @return {boolean} true if the given year is a leap year
	 */
	EthiopicCal.prototype.isLeapYear = function (year) {
	  var y = year;
	  switch (typeof y === "undefined" ? "undefined" : _typeof(y)) {
	    case "string":
	      y = parseInt(y, 10);
	      break;
	    case "object":
	      if (typeof y.year !== "number") {
	        // in case it is an ilib.Date object
	        return false;
	      }
	      y = y.year;
	      break;
	    case "function":
	    case "undefined":
	      return false;
	      break;
	  }
	  return MathUtils.mod(y, 4) === 3;
	};

	/**
	 * Return the type of this calendar.
	 * 
	 * @return {string} the name of the type of this calendar 
	 */
	EthiopicCal.prototype.getType = function () {
	  return this.type;
	};

	/* register this calendar for the factory method */
	Calendar._constructors["ethiopic"] = EthiopicCal;

	module.exports = EthiopicCal;

/***/ },
/* 55 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	/*
	 * gregorian.js - Represent a Gregorian calendar object.
	 * 
	 * Copyright Â© 2012-2015, JEDLSoft
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 *
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */

	/* !depends ilib.js Calendar.js Utils.js MathUtils.js */

	var ilib = __webpack_require__(2);
	var Utils = __webpack_require__(25);
	var MathUtils = __webpack_require__(6);
	var Calendar = __webpack_require__(9);

	/**
	 * @class
	 * Construct a new Gregorian calendar object. This class encodes information about
	 * a Gregorian calendar.<p>
	 * 
	 * 
	 * @constructor
	 * @param {{noinstance:boolean}=} options
	 * @extends Calendar
	 */
	var GregorianCal = function GregorianCal(options) {
	  if (!options || !options.noinstance) {
	    this.type = "gregorian";
	  }
	};

	/**
	 * the lengths of each month 
	 * @private
	 * @const
	 * @type Array.<number> 
	 */
	GregorianCal.monthLengths = [31, /* Jan */
	28, /* Feb */
	31, /* Mar */
	30, /* Apr */
	31, /* May */
	30, /* Jun */
	31, /* Jul */
	31, /* Aug */
	30, /* Sep */
	31, /* Oct */
	30, /* Nov */
	31 /* Dec */
	];

	/**
	 * Return the number of months in the given year. The number of months in a year varies
	 * for some luni-solar calendars because in some years, an extra month is needed to extend the 
	 * days in a year to an entire solar year. The month is represented as a 1-based number
	 * where 1=first month, 2=second month, etc.
	 * 
	 * @param {number} year a year for which the number of months is sought
	 * @return {number} The number of months in the given year
	 */
	GregorianCal.prototype.getNumMonths = function (year) {
	  return 12;
	};

	/**
	 * Return the number of days in a particular month in a particular year. This function
	 * can return a different number for a month depending on the year because of things
	 * like leap years.
	 * 
	 * @param {number} month the month for which the length is sought
	 * @param {number} year the year within which that month can be found
	 * @return {number} the number of days within the given month in the given year
	 */
	GregorianCal.prototype.getMonLength = function (month, year) {
	  if (month !== 2 || !this.isLeapYear(year)) {
	    return GregorianCal.monthLengths[month - 1];
	  } else {
	    return 29;
	  }
	};

	/**
	 * Return true if the given year is a leap year in the Gregorian calendar.
	 * The year parameter may be given as a number, or as a GregDate object.
	 * @param {number|GregorianDate} year the year for which the leap year information is being sought
	 * @return {boolean} true if the given year is a leap year
	 */
	GregorianCal.prototype.isLeapYear = function (year) {
	  var y = typeof year === 'number' ? year : year.getYears();
	  var centuries = MathUtils.mod(y, 400);
	  return MathUtils.mod(y, 4) === 0 && centuries !== 100 && centuries !== 200 && centuries !== 300;
	};

	/**
	 * Return the type of this calendar.
	 * 
	 * @return {string} the name of the type of this calendar 
	 */
	GregorianCal.prototype.getType = function () {
	  return this.type;
	};

	/* register this calendar for the factory method */
	Calendar._constructors["gregorian"] = GregorianCal;

	module.exports = GregorianCal;

/***/ },
/* 56 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
	  return typeof obj === "undefined" ? "undefined" : _typeof2(obj);
	} : function (obj) {
	  return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof2(obj);
	};

	/*
	 * IString.js - ilib string subclass definition
	 * 
	 * Copyright Â© 2012-2015, JEDLSoft
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 *
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */

	// !depends ilib.js Utils.js Locale.js MathUtils.js

	// !data plurals

	var ilib = __webpack_require__(2);
	var Utils = __webpack_require__(25);
	var MathUtils = __webpack_require__(6);
	var Locale = __webpack_require__(12);

	/**
	 * @class
	 * Create a new ilib string instance. This string inherits from and
	 * extends the Javascript String class. It can be
	 * used almost anywhere that a normal Javascript string is used, though in
	 * some instances you will need to call the {@link #toString} method when
	 * a built-in Javascript string is needed. The formatting methods are 
	 * methods that are not in the intrinsic String class and are most useful
	 * when localizing strings in an app or web site in combination with 
	 * the ResBundle class.<p>
	 * 
	 * This class is named IString ("ilib string") so as not to conflict with the 
	 * built-in Javascript String class.
	 * 
	 * @constructor
	 * @param {string|IString=} string initialize this instance with this string 
	 */
	var IString = function IString(string) {
	  if ((typeof string === "undefined" ? "undefined" : _typeof(string)) === 'object') {
	    if (string instanceof IString) {
	      this.str = string.str;
	    } else {
	      this.str = string.toString();
	    }
	  } else if (typeof string === 'string') {
	    this.str = new String(string);
	  } else {
	    this.str = "";
	  }
	  this.length = this.str.length;
	  this.cpLength = -1;
	  this.localeSpec = ilib.getLocale();
	};

	/**
	 * Return true if the given character is a Unicode surrogate character,
	 * either high or low.
	 * 
	 * @private
	 * @static
	 * @param {string} ch character to check
	 * @return {boolean} true if the character is a surrogate
	 */
	IString._isSurrogate = function (ch) {
	  var n = ch.charCodeAt(0);
	  return n >= 0xDC00 && n <= 0xDFFF || n >= 0xD800 && n <= 0xDBFF;
	};

	/**
	 * Convert a UCS-4 code point to a Javascript string. The codepoint can be any valid 
	 * UCS-4 Unicode character, including supplementary characters. Standard Javascript
	 * only supports supplementary characters using the UTF-16 encoding, which has 
	 * values in the range 0x0000-0xFFFF. String.fromCharCode() will only
	 * give you a string containing 16-bit characters, and will not properly convert 
	 * the code point for a supplementary character (which has a value > 0xFFFF) into 
	 * two UTF-16 surrogate characters. Instead, it will just just give you whatever
	 * single character happens to be the same as your code point modulo 0x10000, which
	 * is almost never what you want.<p> 
	 * 
	 * Similarly, that means if you use String.charCodeAt()
	 * you will only retrieve a 16-bit value, which may possibly be a single
	 * surrogate character that is part of a surrogate pair representing a character
	 * in the supplementary plane. It will not give you a code point. Use 
	 * IString.codePointAt() to access code points in a string, or use 
	 * an iterator to walk through the code points in a string. 
	 * 
	 * @static
	 * @param {number} codepoint UCS-4 code point to convert to a character
	 * @return {string} a string containing the character represented by the codepoint
	 */
	IString.fromCodePoint = function (codepoint) {
	  if (codepoint < 0x10000) {
	    return String.fromCharCode(codepoint);
	  } else {
	    var high = Math.floor(codepoint / 0x10000) - 1;
	    var low = codepoint & 0xFFFF;

	    return String.fromCharCode(0xD800 | (high & 0x000F) << 6 | (low & 0xFC00) >> 10) + String.fromCharCode(0xDC00 | low & 0x3FF);
	  }
	};

	/**
	 * Convert the character or the surrogate pair at the given
	 * index into the intrinsic Javascript string to a Unicode 
	 * UCS-4 code point.
	 * 
	 * @param {string} str string to get the code point from
	 * @param {number} index index into the string
	 * @return {number} code point of the character at the
	 * given index into the string
	 */
	IString.toCodePoint = function (str, index) {
	  if (!str || str.length === 0) {
	    return -1;
	  }
	  var code = -1,
	      high = str.charCodeAt(index);
	  if (high >= 0xD800 && high <= 0xDBFF) {
	    if (str.length > index + 1) {
	      var low = str.charCodeAt(index + 1);
	      if (low >= 0xDC00 && low <= 0xDFFF) {
	        code = ((high & 0x3C0) >> 6) + 1 << 16 | ((high & 0x3F) << 10 | low & 0x3FF);
	      }
	    }
	  } else {
	    code = high;
	  }

	  return code;
	};

	/**
	 * Load the plural the definitions of plurals for the locale.
	 * @param {boolean=} sync
	 * @param {Locale|string=} locale
	 * @param {Object=} loadParams
	 * @param {function(*)=} onLoad
	 */
	IString.loadPlurals = function (sync, locale, loadParams, onLoad) {
	  var loc;
	  if (locale) {
	    loc = typeof locale === 'string' ? new Locale(locale) : locale;
	  } else {
	    loc = new Locale(ilib.getLocale());
	  }
	  var spec = loc.getLanguage();
	  if (!ilib.data["plurals_" + spec]) {
	    Utils.loadData({
	      name: "plurals.json",
	      object: IString,
	      locale: loc,
	      sync: sync,
	      loadParams: loadParams,
	      callback: /** @type function(Object=):undefined */ilib.bind(this, /** @type function() */function (plurals) {
	        if (!plurals) {
	          IString.cache[spec] = {};
	        }
	        ilib.data["plurals_" + spec] = plurals || {};
	        if (onLoad && typeof onLoad === 'function') {
	          onLoad(ilib.data["plurals_" + spec]);
	        }
	      })
	    });
	  } else {
	    if (onLoad && typeof onLoad === 'function') {
	      onLoad(ilib.data["plurals_" + spec]);
	    }
	  }
	};

	/**
	 * @private
	 * @static
	 */
	IString._fncs = {
	  /**
	   * @private
	   * @param {Object} obj
	   * @return {string|undefined}
	   */
	  firstProp: function firstProp(obj) {
	    for (var p in obj) {
	      if (p && obj[p]) {
	        return p;
	      }
	    }
	    return undefined; // should never get here
	  },

	  /**
	   * @private
	   * @param {Object} obj
	   * @param {number} n
	   * @return {?}
	   */
	  getValue: function getValue(obj, n) {
	    if ((typeof obj === "undefined" ? "undefined" : _typeof(obj)) === 'object') {
	      var subrule = IString._fncs.firstProp(obj);
	      return IString._fncs[subrule](obj[subrule], n);
	    } else if (typeof obj === 'string') {
	      return n;
	    } else {
	      return obj;
	    }
	  },

	  /**
	   * @private
	   * @param {number} n
	   * @param {Array.<number|Array.<number>>} range
	   * @return {boolean}
	   */
	  matchRangeContinuous: function matchRangeContinuous(n, range) {
	    for (var num in range) {
	      if (typeof num !== 'undefined' && typeof range[num] !== 'undefined') {
	        var obj = /** @type {Object|null|undefined} */range[num];
	        if (typeof obj === 'number') {
	          if (n === range[num]) {
	            return true;
	          }
	        } else if (Object.prototype.toString.call(obj) === '[object Array]') {
	          if (n >= obj[0] && n <= obj[1]) {
	            return true;
	          }
	        }
	      }
	    }
	    return false;
	  },

	  /**
	   * @private
	   * @param {number} n
	   * @param {Array.<number|Array.<number>>} range
	   * @return {boolean}
	   */
	  matchRange: function matchRange(n, range) {
	    if (Math.floor(n) !== n) {
	      return false;
	    }
	    return IString._fncs.matchRangeContinuous(n, range);
	  },

	  /**
	   * @private
	   * @param {Object} rule
	   * @param {number} n
	   * @return {boolean}
	   */
	  is: function is(rule, n) {
	    var left = IString._fncs.getValue(rule[0], n);
	    var right = IString._fncs.getValue(rule[1], n);
	    return left == right;
	    // return IString._fncs.getValue(rule[0]) == IString._fncs.getValue(rule[1]);
	  },

	  /**
	   * @private
	   * @param {Object} rule
	   * @param {number} n
	   * @return {boolean}
	   */
	  isnot: function isnot(rule, n) {
	    return IString._fncs.getValue(rule[0], n) != IString._fncs.getValue(rule[1], n);
	  },

	  /**
	   * @private
	   * @param {Object} rule
	   * @param {number} n
	   * @return {boolean}
	   */
	  inrange: function inrange(rule, n) {
	    return IString._fncs.matchRange(IString._fncs.getValue(rule[0], n), rule[1]);
	  },

	  /**
	   * @private
	   * @param {Object} rule
	   * @param {number} n
	   * @return {boolean}
	   */
	  notin: function notin(rule, n) {
	    return !IString._fncs.matchRange(IString._fncs.getValue(rule[0], n), rule[1]);
	  },

	  /**
	   * @private
	   * @param {Object} rule
	   * @param {number} n
	   * @return {boolean}
	   */
	  within: function within(rule, n) {
	    return IString._fncs.matchRangeContinuous(IString._fncs.getValue(rule[0], n), rule[1]);
	  },

	  /**
	   * @private
	   * @param {Object} rule
	   * @param {number} n
	   * @return {number}
	   */
	  mod: function mod(rule, n) {
	    return MathUtils.mod(IString._fncs.getValue(rule[0], n), IString._fncs.getValue(rule[1], n));
	  },

	  /**
	   * @private
	   * @param {Object} rule
	   * @param {number} n
	   * @return {number}
	   */
	  n: function n(rule, _n) {
	    return _n;
	  },

	  /**
	   * @private
	   * @param {Object} rule
	   * @param {number} n
	   * @return {boolean}
	   */
	  or: function or(rule, n) {
	    return IString._fncs.getValue(rule[0], n) || IString._fncs.getValue(rule[1], n);
	  },

	  /**
	   * @private
	   * @param {Object} rule
	   * @param {number} n
	   * @return {boolean}
	   */
	  and: function and(rule, n) {
	    return IString._fncs.getValue(rule[0], n) && IString._fncs.getValue(rule[1], n);
	  }
	};

	IString.prototype = {
	  /**
	   * Return the length of this string in characters. This function defers to the regular
	   * Javascript string class in order to perform the length function. Please note that this
	   * method is a real method, whereas the length property of Javascript strings is 
	   * implemented by native code and appears as a property.<p>
	   * 
	   * Example:
	   * 
	   * <pre>
	   * var str = new IString("this is a string");
	   * console.log("String is " + str._length() + " characters long.");
	   * </pre>
	   * @private
	   */
	  _length: function _length() {
	    return this.str.length;
	  },

	  /**
	   * Format this string instance as a message, replacing the parameters with 
	   * the given values.<p>
	   * 
	   * The string can contain any text that a regular Javascript string can
	   * contain. Replacement parameters have the syntax:
	   * 
	   * <pre>
	   * {name}
	   * </pre>
	   * 
	   * Where "name" can be any string surrounded by curly brackets. The value of 
	   * "name" is taken from the parameters argument.<p>
	   * 
	   * Example:
	   * 
	   * <pre>
	   * var str = new IString("There are {num} objects.");
	   * console.log(str.format({
	   *   num: 12
	   * });
	   * </pre>
	   * 
	   * Would give the output:
	   * 
	   * <pre>
	   * There are 12 objects.
	   * </pre>
	   * 
	   * If a property is missing from the parameter block, the replacement
	   * parameter substring is left untouched in the string, and a different
	   * set of parameters may be applied a second time. This way, different
	   * parts of the code may format different parts of the message that they
	   * happen to know about.<p>
	   * 
	   * Example:
	   * 
	   * <pre>
	   * var str = new IString("There are {num} objects in the {container}.");
	   * console.log(str.format({
	   *   num: 12
	   * });
	   * </pre>
	   * 
	   * Would give the output:<p>
	   * 
	   * <pre>
	   * There are 12 objects in the {container}.
	   * </pre>
	   * 
	   * The result can then be formatted again with a different parameter block that
	   * specifies a value for the container property.
	   * 
	   * @param params a Javascript object containing values for the replacement 
	   * parameters in the current string
	   * @return a new IString instance with as many replacement parameters filled
	   * out as possible with real values.
	   */
	  format: function format(params) {
	    var formatted = this.str;
	    if (params) {
	      var regex;
	      for (var p in params) {
	        if (typeof params[p] !== 'undefined') {
	          regex = new RegExp("\{" + p + "\}", "g");
	          formatted = formatted.replace(regex, params[p]);
	        }
	      }
	    }
	    return formatted.toString();
	  },

	  /**
	   * Format a string as one of a choice of strings dependent on the value of
	   * a particular argument index.<p>
	   * 
	   * The syntax of the choice string is as follows. The string contains a
	   * series of choices separated by a vertical bar character "|". Each choice
	   * has a value or range of values to match followed by a hash character "#"
	   * followed by the string to use if the variable matches the criteria.<p>
	   * 
	   * Example string:
	   * 
	   * <pre>
	   * var num = 2;
	   * var str = new IString("0#There are no objects.|1#There is one object.|2#There are {number} objects.");
	   * console.log(str.formatChoice(num, {
	   *   number: num
	   * }));
	   * </pre>
	   * 
	   * Gives the output:
	   * 
	   * <pre>
	   * "There are 2 objects."
	   * </pre>
	   * 
	   * The strings to format may contain replacement variables that will be formatted
	   * using the format() method above and the params argument as a source of values
	   * to use while formatting those variables.<p>
	   * 
	   * If the criterion for a particular choice is empty, that choice will be used
	   * as the default one for use when none of the other choice's criteria match.<p>
	   * 
	   * Example string:
	   * 
	   * <pre>
	   * var num = 22;
	   * var str = new IString("0#There are no objects.|1#There is one object.|#There are {number} objects.");
	   * console.log(str.formatChoice(num, {
	   *   number: num
	   * }));
	   * </pre>
	   * 
	   * Gives the output:
	   * 
	   * <pre>
	   * "There are 22 objects."
	   * </pre>
	   * 
	   * If multiple choice patterns can match a given argument index, the first one 
	   * encountered in the string will be used. If no choice patterns match the 
	   * argument index, then the default choice will be used. If there is no default
	   * choice defined, then this method will return an empty string.<p>
	   * 
	   * <b>Special Syntax</b><p>
	   * 
	   * For any choice format string, all of the patterns in the string should be
	   * of a single type: numeric, boolean, or string/regexp. The type of the 
	   * patterns is determined by the type of the argument index parameter.<p>
	   * 
	   * If the argument index is numeric, then some special syntax can be used 
	   * in the patterns to match numeric ranges.<p>
	   * 
	   * <ul>
	   * <li><i>&gt;x</i> - match any number that is greater than x 
	   * <li><i>&gt;=x</i> - match any number that is greater than or equal to x
	   * <li><i>&lt;x</i> - match any number that is less than x
	   * <li><i>&lt;=x</i> - match any number that is less than or equal to x
	   * <li><i>start-end</i> - match any number in the range [start,end)
	   * <li><i>zero</i> - match any number in the class "zero". (See below for
	   * a description of number classes.)
	   * <li><i>one</i> - match any number in the class "one"
	   * <li><i>two</i> - match any number in the class "two"
	   * <li><i>few</i> - match any number in the class "few"
	   * <li><i>many</i> - match any number in the class "many"
	   * </ul>
	   * 
	   * A number class defines a set of numbers that receive a particular syntax
	   * in the strings. For example, in Slovenian, integers ending in the digit
	   * "1" are in the "one" class, including 1, 21, 31, ... 101, 111, etc.
	   * Similarly, integers ending in the digit "2" are in the "two" class. 
	   * Integers ending in the digits "3" or "4" are in the "few" class, and
	   * every other integer is handled by the default string.<p>
	   * 
	   * The definition of what numbers are included in a class is locale-dependent.
	   * They are defined in the data file plurals.json. If your string is in a
	   * different locale than the default for ilib, you should call the setLocale()
	   * method of the string instance before calling this method.<p> 
	   * 
	   * <b>Other Pattern Types</b><p>
	   * 
	   * If the argument index is a boolean, the string values "true" and "false" 
	   * may appear as the choice patterns.<p>
	   * 
	   * If the argument index is of type string, then the choice patterns may contain
	   * regular expressions, or static strings as degenerate regexps.
	   * 
	   * @param {*} argIndex The index into the choice array of the current parameter
	   * @param {Object} params The hash of parameter values that replace the replacement 
	   * variables in the string
	   * @throws "syntax error in choice format pattern: " if there is a syntax error
	   * @return {string} the formatted string
	   */
	  formatChoice: function formatChoice(argIndex, params) {
	    var choices = this.str.split("|");
	    var type = typeof argIndex === "undefined" ? "undefined" : _typeof(argIndex);
	    var limits = [];
	    var strings = [];
	    var i;
	    var parts;
	    var limit;
	    var arg;
	    var result = undefined;
	    var defaultCase = "";

	    if (this.str.length === 0) {
	      // nothing to do
	      return "";
	    }

	    // first parse all the choices
	    for (i = 0; i < choices.length; i++) {
	      parts = choices[i].split("#");
	      if (parts.length > 2) {
	        limits[i] = parts[0];
	        parts = parts.shift();
	        strings[i] = parts.join("#");
	      } else if (parts.length === 2) {
	        limits[i] = parts[0];
	        strings[i] = parts[1];
	      } else {
	        // syntax error
	        throw "syntax error in choice format pattern: " + choices[i];
	      }
	    }

	    // then apply the argument index
	    for (i = 0; i < limits.length; i++) {
	      if (limits[i].length === 0) {
	        // this is default case
	        defaultCase = new IString(strings[i]);
	      } else {
	        switch (type) {
	          case 'number':
	            arg = parseInt(argIndex, 10);

	            if (limits[i].substring(0, 2) === "<=") {
	              limit = parseFloat(limits[i].substring(2));
	              if (arg <= limit) {
	                result = new IString(strings[i]);
	                i = limits.length;
	              }
	            } else if (limits[i].substring(0, 2) === ">=") {
	              limit = parseFloat(limits[i].substring(2));
	              if (arg >= limit) {
	                result = new IString(strings[i]);
	                i = limits.length;
	              }
	            } else if (limits[i].charAt(0) === "<") {
	              limit = parseFloat(limits[i].substring(1));
	              if (arg < limit) {
	                result = new IString(strings[i]);
	                i = limits.length;
	              }
	            } else if (limits[i].charAt(0) === ">") {
	              limit = parseFloat(limits[i].substring(1));
	              if (arg > limit) {
	                result = new IString(strings[i]);
	                i = limits.length;
	              }
	            } else {
	              this.locale = this.locale || new Locale(this.localeSpec);
	              switch (limits[i]) {
	                case "zero":
	                case "one":
	                case "two":
	                case "few":
	                case "many":
	                  // CLDR locale-dependent number classes
	                  var ruleset = ilib.data["plurals_" + this.locale.getLanguage()];
	                  if (ruleset) {
	                    var rule = ruleset[limits[i]];
	                    if (IString._fncs.getValue(rule, arg)) {
	                      result = new IString(strings[i]);
	                      i = limits.length;
	                    }
	                  }
	                  break;
	                default:
	                  var dash = limits[i].indexOf("-");
	                  if (dash !== -1) {
	                    // range
	                    var start = limits[i].substring(0, dash);
	                    var end = limits[i].substring(dash + 1);
	                    if (arg >= parseInt(start, 10) && arg <= parseInt(end, 10)) {
	                      result = new IString(strings[i]);
	                      i = limits.length;
	                    }
	                  } else if (arg === parseInt(limits[i], 10)) {
	                    // exact amount
	                    result = new IString(strings[i]);
	                    i = limits.length;
	                  }
	                  break;
	              }
	            }
	            break;
	          case 'boolean':
	            if (limits[i] === "true" && argIndex === true) {
	              result = new IString(strings[i]);
	              i = limits.length;
	            } else if (limits[i] === "false" && argIndex === false) {
	              result = new IString(strings[i]);
	              i = limits.length;
	            }
	            break;
	          case 'string':
	            var regexp = new RegExp(limits[i], "i");
	            if (regexp.test(argIndex)) {
	              result = new IString(strings[i]);
	              i = limits.length;
	            }
	            break;
	          case 'object':
	            throw "syntax error: fmtChoice parameter for the argument index cannot be an object";
	        }
	      }
	    }

	    if (!result) {
	      result = defaultCase || new IString("");
	    }

	    result = result.format(params);

	    return result.toString();
	  },

	  // delegates
	  /**
	   * Same as String.toString()
	   * @return {string} this instance as regular Javascript string
	   */
	  toString: function toString() {
	    return this.str.toString();
	  },

	  /**
	   * Same as String.valueOf()
	   * @return {string} this instance as a regular Javascript string
	   */
	  valueOf: function valueOf() {
	    return this.str.valueOf();
	  },

	  /**
	   * Same as String.charAt()
	   * @param {number} index the index of the character being sought
	   * @return {IString} the character at the given index
	   */
	  charAt: function charAt(index) {
	    return new IString(this.str.charAt(index));
	  },

	  /**
	   * Same as String.charCodeAt(). This only reports on 
	   * 2-byte UCS-2 Unicode values, and does not take into
	   * account supplementary characters encoded in UTF-16.
	   * If you would like to take account of those characters,
	   * use codePointAt() instead.
	   * @param {number} index the index of the character being sought
	   * @return {number} the character code of the character at the 
	   * given index in the string 
	   */
	  charCodeAt: function charCodeAt(index) {
	    return this.str.charCodeAt(index);
	  },

	  /**
	   * Same as String.concat()
	   * @param {string} strings strings to concatenate to the current one
	   * @return {IString} a concatenation of the given strings
	   */
	  concat: function concat(strings) {
	    return new IString(this.str.concat(strings));
	  },

	  /**
	   * Same as String.indexOf()
	   * @param {string} searchValue string to search for
	   * @param {number} start index into the string to start searching, or
	   * undefined to search the entire string
	   * @return {number} index into the string of the string being sought,
	   * or -1 if the string is not found 
	   */
	  indexOf: function indexOf(searchValue, start) {
	    return this.str.indexOf(searchValue, start);
	  },

	  /**
	   * Same as String.lastIndexOf()
	   * @param {string} searchValue string to search for
	   * @param {number} start index into the string to start searching, or
	   * undefined to search the entire string
	   * @return {number} index into the string of the string being sought,
	   * or -1 if the string is not found 
	   */
	  lastIndexOf: function lastIndexOf(searchValue, start) {
	    return this.str.lastIndexOf(searchValue, start);
	  },

	  /**
	   * Same as String.match()
	   * @param {string} regexp the regular expression to match
	   * @return {Array.<string>} an array of matches
	   */
	  match: function match(regexp) {
	    return this.str.match(regexp);
	  },

	  /**
	   * Same as String.replace()
	   * @param {string} searchValue a regular expression to search for
	   * @param {string} newValue the string to replace the matches with
	   * @return {IString} a new string with all the matches replaced
	   * with the new value
	   */
	  replace: function replace(searchValue, newValue) {
	    return new IString(this.str.replace(searchValue, newValue));
	  },

	  /**
	   * Same as String.search()
	   * @param {string} regexp the regular expression to search for
	   * @return {number} position of the match, or -1 for no match
	   */
	  search: function search(regexp) {
	    return this.str.search(regexp);
	  },

	  /**
	   * Same as String.slice()
	   * @param {number} start first character to include in the string
	   * @param {number} end include all characters up to, but not including
	   * the end character
	   * @return {IString} a slice of the current string
	   */
	  slice: function slice(start, end) {
	    return new IString(this.str.slice(start, end));
	  },

	  /**
	   * Same as String.split()
	   * @param {string} separator regular expression to match to find
	   * separations between the parts of the text
	   * @param {number} limit maximum number of items in the final 
	   * output array. Any items beyond that limit will be ignored.
	   * @return {Array.<string>} the parts of the current string split 
	   * by the separator
	   */
	  split: function split(separator, limit) {
	    return this.str.split(separator, limit);
	  },

	  /**
	   * Same as String.substr()
	   * @param {number} start the index of the character that should 
	   * begin the returned substring
	   * @param {number} length the number of characters to return after
	   * the start character.
	   * @return {IString} the requested substring 
	   */
	  substr: function substr(start, length) {
	    var plat = ilib._getPlatform();
	    if (plat === "qt" || plat === "rhino" || plat === "trireme") {
	      // qt and rhino have a broken implementation of substr(), so
	      // work around it
	      if (typeof length === "undefined") {
	        length = this.str.length - start;
	      }
	    }
	    return new IString(this.str.substr(start, length));
	  },

	  /**
	   * Same as String.substring()
	   * @param {number} from the index of the character that should 
	   * begin the returned substring
	   * @param {number} to the index where to stop the extraction. If
	   * omitted, extracts the rest of the string
	   * @return {IString} the requested substring 
	   */
	  substring: function substring(from, to) {
	    return this.str.substring(from, to);
	  },

	  /**
	   * Same as String.toLowerCase(). Note that this method is
	   * not locale-sensitive. 
	   * @return {IString} a string with the first character
	   * lower-cased
	   */
	  toLowerCase: function toLowerCase() {
	    return this.str.toLowerCase();
	  },

	  /**
	   * Same as String.toUpperCase(). Note that this method is
	   * not locale-sensitive. Use toLocaleUpperCase() instead
	   * to get locale-sensitive behaviour. 
	   * @return {IString} a string with the first character
	   * upper-cased
	   */
	  toUpperCase: function toUpperCase() {
	    return this.str.toUpperCase();
	  },

	  /**
	   * Convert the character or the surrogate pair at the given
	   * index into the string to a Unicode UCS-4 code point.
	   * @protected
	   * @param {number} index index into the string
	   * @return {number} code point of the character at the
	   * given index into the string
	   */
	  _toCodePoint: function _toCodePoint(index) {
	    return IString.toCodePoint(this.str, index);
	  },

	  /**
	   * Call the callback with each character in the string one at 
	   * a time, taking care to step through the surrogate pairs in 
	   * the UTF-16 encoding properly.<p>
	   * 
	   * The standard Javascript String's charAt() method only
	   * returns a particular 16-bit character in the 
	   * UTF-16 encoding scheme.
	   * If the index to charAt() is pointing to a low- or 
	   * high-surrogate character,
	   * it will return the surrogate character rather 
	   * than the the character 
	   * in the supplementary planes that the two surrogates together 
	   * encode. This function will call the callback with the full
	   * character, making sure to join two  
	   * surrogates into one character in the supplementary planes
	   * where necessary.<p>
	   * 
	   * @param {function(string)} callback a callback function to call with each
	   * full character in the current string
	   */
	  forEach: function forEach(callback) {
	    if (typeof callback === 'function') {
	      var it = this.charIterator();
	      while (it.hasNext()) {
	        callback(it.next());
	      }
	    }
	  },

	  /**
	   * Call the callback with each numeric code point in the string one at 
	   * a time, taking care to step through the surrogate pairs in 
	   * the UTF-16 encoding properly.<p>
	   * 
	   * The standard Javascript String's charCodeAt() method only
	   * returns information about a particular 16-bit character in the 
	   * UTF-16 encoding scheme.
	   * If the index to charCodeAt() is pointing to a low- or 
	   * high-surrogate character,
	   * it will return the code point of the surrogate character rather 
	   * than the code point of the character 
	   * in the supplementary planes that the two surrogates together 
	   * encode. This function will call the callback with the full
	   * code point of each character, making sure to join two  
	   * surrogates into one code point in the supplementary planes.<p>
	   * 
	   * @param {function(string)} callback a callback function to call with each
	   * code point in the current string
	   */
	  forEachCodePoint: function forEachCodePoint(callback) {
	    if (typeof callback === 'function') {
	      var it = this.iterator();
	      while (it.hasNext()) {
	        callback(it.next());
	      }
	    }
	  },

	  /**
	   * Return an iterator that will step through all of the characters
	   * in the string one at a time and return their code points, taking 
	   * care to step through the surrogate pairs in UTF-16 encoding 
	   * properly.<p>
	   * 
	   * The standard Javascript String's charCodeAt() method only
	   * returns information about a particular 16-bit character in the 
	   * UTF-16 encoding scheme.
	   * If the index is pointing to a low- or high-surrogate character,
	   * it will return a code point of the surrogate character rather 
	   * than the code point of the character 
	   * in the supplementary planes that the two surrogates together 
	   * encode.<p>
	   * 
	   * The iterator instance returned has two methods, hasNext() which
	   * returns true if the iterator has more code points to iterate through,
	   * and next() which returns the next code point as a number.<p>
	   * 
	   * @return {Object} an iterator 
	   * that iterates through all the code points in the string
	   */
	  iterator: function iterator() {
	    /**
	     * @constructor
	     */
	    function _iterator(istring) {
	      this.index = 0;
	      this.hasNext = function () {
	        return this.index < istring.str.length;
	      };
	      this.next = function () {
	        if (this.index < istring.str.length) {
	          var num = istring._toCodePoint(this.index);
	          this.index += num > 0xFFFF ? 2 : 1;
	        } else {
	          num = -1;
	        }
	        return num;
	      };
	    };
	    return new _iterator(this);
	  },

	  /**
	   * Return an iterator that will step through all of the characters
	   * in the string one at a time, taking 
	   * care to step through the surrogate pairs in UTF-16 encoding 
	   * properly.<p>
	   * 
	   * The standard Javascript String's charAt() method only
	   * returns information about a particular 16-bit character in the 
	   * UTF-16 encoding scheme.
	   * If the index is pointing to a low- or high-surrogate character,
	   * it will return that surrogate character rather 
	   * than the surrogate pair which represents a character 
	   * in the supplementary planes.<p>
	   * 
	   * The iterator instance returned has two methods, hasNext() which
	   * returns true if the iterator has more characters to iterate through,
	   * and next() which returns the next character.<p>
	   * 
	   * @return {Object} an iterator 
	   * that iterates through all the characters in the string
	   */
	  charIterator: function charIterator() {
	    /**
	     * @constructor
	     */
	    function _chiterator(istring) {
	      this.index = 0;
	      this.hasNext = function () {
	        return this.index < istring.str.length;
	      };
	      this.next = function () {
	        var ch;
	        if (this.index < istring.str.length) {
	          ch = istring.str.charAt(this.index);
	          if (IString._isSurrogate(ch) && this.index + 1 < istring.str.length && IString._isSurrogate(istring.str.charAt(this.index + 1))) {
	            this.index++;
	            ch += istring.str.charAt(this.index);
	          }
	          this.index++;
	        }
	        return ch;
	      };
	    };
	    return new _chiterator(this);
	  },

	  /**
	   * Return the code point at the given index when the string is viewed 
	   * as an array of code points. If the index is beyond the end of the
	   * array of code points or if the index is negative, -1 is returned.
	   * @param {number} index index of the code point 
	   * @return {number} code point of the character at the given index into
	   * the string
	   */
	  codePointAt: function codePointAt(index) {
	    if (index < 0) {
	      return -1;
	    }
	    var count,
	        it = this.iterator(),
	        ch;
	    for (count = index; count >= 0 && it.hasNext(); count--) {
	      ch = it.next();
	    }
	    return count < 0 ? ch : -1;
	  },

	  /**
	   * Set the locale to use when processing choice formats. The locale
	   * affects how number classes are interpretted. In some cultures,
	   * the limit "few" maps to "any integer that ends in the digits 2 to 9" and
	   * in yet others, "few" maps to "any integer that ends in the digits
	   * 3 or 4".
	   * @param {Locale|string} locale locale to use when processing choice
	   * formats with this string
	   * @param {boolean=} sync [optional] whether to load the locale data synchronously 
	   * or not
	   * @param {Object=} loadParams [optional] parameters to pass to the loader function
	   * @param {function(*)=} onLoad [optional] function to call when the loading is done
	   */
	  setLocale: function setLocale(locale, sync, loadParams, onLoad) {
	    if ((typeof locale === "undefined" ? "undefined" : _typeof(locale)) === 'object') {
	      this.locale = locale;
	    } else {
	      this.localeSpec = locale;
	      this.locale = new Locale(locale);
	    }

	    IString.loadPlurals(typeof sync !== 'undefined' ? sync : true, this.locale, loadParams, onLoad);
	  },

	  /**
	   * Return the locale to use when processing choice formats. The locale
	   * affects how number classes are interpretted. In some cultures,
	   * the limit "few" maps to "any integer that ends in the digits 2 to 9" and
	   * in yet others, "few" maps to "any integer that ends in the digits
	   * 3 or 4".
	   * @return {string} localespec to use when processing choice
	   * formats with this string
	   */
	  getLocale: function getLocale() {
	    return (this.locale ? this.locale.getSpec() : this.localeSpec) || ilib.getLocale();
	  },

	  /**
	   * Return the number of code points in this string. This may be different
	   * than the number of characters, as the UTF-16 encoding that Javascript
	   * uses for its basis returns surrogate pairs separately. Two 2-byte 
	   * surrogate characters together make up one character/code point in 
	   * the supplementary character planes. If your string contains no
	   * characters in the supplementary planes, this method will return the
	   * same thing as the length() method.
	   * @return {number} the number of code points in this string
	   */
	  codePointLength: function codePointLength() {
	    if (this.cpLength === -1) {
	      var it = this.iterator();
	      this.cpLength = 0;
	      while (it.hasNext()) {
	        this.cpLength++;
	        it.next();
	      };
	    }
	    return this.cpLength;
	  }
	};

	module.exports = IString;

/***/ },
/* 57 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	exports.toUpperCase = exports.toLowerCase = exports.isRtlText = undefined;

	__webpack_require__(81);

	var _case = __webpack_require__(119);

	/**
	* This regex pattern is used by the [isRtlText()]{@link i18n/utils.isRtlText} function.
	*
	* Arabic: \u0600-\u06FF\u0750-\u077F\u08A0-\u08FF\uFB50-\uFDFF\uFE70-\uFEFE
	* Hebrew: \u0590-\u05FF\uFB1D-\uFB4F
	*
	* @private
	*/
	var rtlPattern = /[\u0600-\u06FF\u0750-\u077F\u08A0-\u08FF\uFB50-\uFDFF\uFE70-\uFEFE\u0590-\u05FF\uFB1D-\uFB4F]/;

	/**
	* Takes content `str` and determines whether or not it is [RTL]{@glossary RTL}.
	*
	* @param {String} str - A [String]{@glossary String} to check the [RTL]{@glossary RTL}-ness of.
	* @returns {Boolean} `true` if `str` should be RTL; `false` if not.
	* @public
	*/
	var isRtlText = function isRtlText(str) {
		if (typeof str === 'string') {
			return rtlPattern.test(str);
		}

		return false;
	};

	exports.isRtlText = isRtlText;
	exports.toLowerCase = _case.toLowerCase;
	exports.toUpperCase = _case.toUpperCase;

/***/ },
/* 58 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {module.exports = global["ReactDOM"] = __webpack_require__(350);
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 59 */
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin
	module.exports = {"viewport":"_2t-c6fMsPNHtPWxR_5-7Nz","breadcrumbs":"_30HjSRzlSE1rQu9ibh5SzU","breadcrumb":"_3Ax4pvSnedDLg8usd4q7xy","breadcrumbHeader":"_2eAuLDgmROyyAKhhpaVBYc","panels":"_2HibR7H23Rq_p0uScjBrd3","activity":"_2cqYE59rERyNa3tAqFV0LP","alwaysViewing":"_1uvkcxXPgyQkJa5FFJLzV-"};

/***/ },
/* 60 */
/***/ function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 * 
	 */

	/*eslint-disable no-self-compare */

	'use strict';

	var hasOwnProperty = Object.prototype.hasOwnProperty;

	/**
	 * inlined Object.is polyfill to avoid requiring consumers ship their own
	 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
	 */
	function is(x, y) {
	  // SameValue algorithm
	  if (x === y) {
	    // Steps 1-5, 7-10
	    // Steps 6.b-6.e: +0 != -0
	    // Added the nonzero y check to make Flow happy, but it is redundant
	    return x !== 0 || y !== 0 || 1 / x === 1 / y;
	  } else {
	    // Step 6.a: NaN == NaN
	    return x !== x && y !== y;
	  }
	}

	/**
	 * Performs equality by iterating through keys on an object and returning false
	 * when any key has values which are not strictly equal between the arguments.
	 * Returns true when the values of all keys are strictly equal.
	 */
	function shallowEqual(objA, objB) {
	  if (is(objA, objB)) {
	    return true;
	  }

	  if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {
	    return false;
	  }

	  var keysA = Object.keys(objA);
	  var keysB = Object.keys(objB);

	  if (keysA.length !== keysB.length) {
	    return false;
	  }

	  // Test for A's keys different from B.
	  for (var i = 0; i < keysA.length; i++) {
	    if (!hasOwnProperty.call(objB, keysA[i]) || !is(objA[keysA[i]], objB[keysA[i]])) {
	      return false;
	    }
	  }

	  return true;
	}

	module.exports = shallowEqual;

/***/ },
/* 61 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 */

	'use strict';

	/**
	 * Use invariant() to assert state which your program assumes to be true.
	 *
	 * Provide sprintf-style format (only %s is supported) and arguments
	 * to provide information about what broke and what you were
	 * expecting.
	 *
	 * The invariant message will be stripped in production, but the invariant
	 * will remain to ensure logic does not differ in production.
	 */

	var invariant = function(condition, format, a, b, c, d, e, f) {
	  if (false) {
	    if (format === undefined) {
	      throw new Error('invariant requires an error message argument');
	    }
	  }

	  if (!condition) {
	    var error;
	    if (format === undefined) {
	      error = new Error(
	        'Minified exception occurred; use the non-minified dev environment ' +
	        'for the full error message and additional helpful warnings.'
	      );
	    } else {
	      var args = [a, b, c, d, e, f];
	      var argIndex = 0;
	      error = new Error(
	        format.replace(/%s/g, function() { return args[argIndex++]; })
	      );
	      error.name = 'Invariant Violation';
	    }

	    error.framesToPop = 1; // we don't care about invariant's own frame
	    throw error;
	  }
	};

	module.exports = invariant;


/***/ },
/* 62 */
/***/ function(module, exports, __webpack_require__) {

	var pipe = __webpack_require__(338);
	var reverse = __webpack_require__(342);


	/**
	 * Performs right-to-left function composition. The rightmost function may have
	 * any arity; the remaining functions must be unary.
	 *
	 * **Note:** The result of compose is not automatically curried.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.1.0
	 * @category Function
	 * @sig ((y -> z), (x -> y), ..., (o -> p), ((a, b, ..., n) -> o)) -> ((a, b, ..., n) -> z)
	 * @param {...Function} functions
	 * @return {Function}
	 * @see R.pipe
	 * @example
	 *
	 *      var f = R.compose(R.inc, R.negate, Math.pow);
	 *
	 *      f(3, 4); // -(3^4) + 1
	 */
	module.exports = function compose() {
	  if (arguments.length === 0) {
	    throw new Error('compose requires at least one argument');
	  }
	  return pipe.apply(this, reverse(arguments));
	};


/***/ },
/* 63 */
/***/ function(module, exports) {

	module.exports = function _arity(n, fn) {
	  /* eslint-disable no-unused-vars */
	  switch (n) {
	    case 0: return function() { return fn.apply(this, arguments); };
	    case 1: return function(a0) { return fn.apply(this, arguments); };
	    case 2: return function(a0, a1) { return fn.apply(this, arguments); };
	    case 3: return function(a0, a1, a2) { return fn.apply(this, arguments); };
	    case 4: return function(a0, a1, a2, a3) { return fn.apply(this, arguments); };
	    case 5: return function(a0, a1, a2, a3, a4) { return fn.apply(this, arguments); };
	    case 6: return function(a0, a1, a2, a3, a4, a5) { return fn.apply(this, arguments); };
	    case 7: return function(a0, a1, a2, a3, a4, a5, a6) { return fn.apply(this, arguments); };
	    case 8: return function(a0, a1, a2, a3, a4, a5, a6, a7) { return fn.apply(this, arguments); };
	    case 9: return function(a0, a1, a2, a3, a4, a5, a6, a7, a8) { return fn.apply(this, arguments); };
	    case 10: return function(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9) { return fn.apply(this, arguments); };
	    default: throw new Error('First argument to _arity must be a non-negative integer no greater than ten');
	  }
	};


/***/ },
/* 64 */
/***/ function(module, exports) {

	module.exports = function _has(prop, obj) {
	  return Object.prototype.hasOwnProperty.call(obj, prop);
	};


/***/ },
/* 65 */
/***/ function(module, exports) {

	module.exports = function _isPlaceholder(a) {
	  return a != null &&
	         typeof a === 'object' &&
	         a['@@functional/placeholder'] === true;
	};


/***/ },
/* 66 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _assign = __webpack_require__(7);

	var EventPluginRegistry = __webpack_require__(94);
	var ReactEventEmitterMixin = __webpack_require__(379);
	var ViewportMetrics = __webpack_require__(173);

	var getVendorPrefixedEventName = __webpack_require__(411);
	var isEventSupported = __webpack_require__(105);

	/**
	 * Summary of `ReactBrowserEventEmitter` event handling:
	 *
	 *  - Top-level delegation is used to trap most native browser events. This
	 *    may only occur in the main thread and is the responsibility of
	 *    ReactEventListener, which is injected and can therefore support pluggable
	 *    event sources. This is the only work that occurs in the main thread.
	 *
	 *  - We normalize and de-duplicate events to account for browser quirks. This
	 *    may be done in the worker thread.
	 *
	 *  - Forward these native events (with the associated top-level type used to
	 *    trap it) to `EventPluginHub`, which in turn will ask plugins if they want
	 *    to extract any synthetic events.
	 *
	 *  - The `EventPluginHub` will then process each event by annotating them with
	 *    "dispatches", a sequence of listeners and IDs that care about that event.
	 *
	 *  - The `EventPluginHub` then dispatches the events.
	 *
	 * Overview of React and the event system:
	 *
	 * +------------+    .
	 * |    DOM     |    .
	 * +------------+    .
	 *       |           .
	 *       v           .
	 * +------------+    .
	 * | ReactEvent |    .
	 * |  Listener  |    .
	 * +------------+    .                         +-----------+
	 *       |           .               +--------+|SimpleEvent|
	 *       |           .               |         |Plugin     |
	 * +-----|------+    .               v         +-----------+
	 * |     |      |    .    +--------------+                    +------------+
	 * |     +-----------.--->|EventPluginHub|                    |    Event   |
	 * |            |    .    |              |     +-----------+  | Propagators|
	 * | ReactEvent |    .    |              |     |TapEvent   |  |------------|
	 * |  Emitter   |    .    |              |<---+|Plugin     |  |other plugin|
	 * |            |    .    |              |     +-----------+  |  utilities |
	 * |     +-----------.--->|              |                    +------------+
	 * |     |      |    .    +--------------+
	 * +-----|------+    .                ^        +-----------+
	 *       |           .                |        |Enter/Leave|
	 *       +           .                +-------+|Plugin     |
	 * +-------------+   .                         +-----------+
	 * | application |   .
	 * |-------------|   .
	 * |             |   .
	 * |             |   .
	 * +-------------+   .
	 *                   .
	 *    React Core     .  General Purpose Event Plugin System
	 */

	var hasEventPageXY;
	var alreadyListeningTo = {};
	var isMonitoringScrollValue = false;
	var reactTopListenersCounter = 0;

	// For events like 'submit' which don't consistently bubble (which we trap at a
	// lower node than `document`), binding at `document` would cause duplicate
	// events so we don't include them here
	var topEventMapping = {
	  topAbort: 'abort',
	  topAnimationEnd: getVendorPrefixedEventName('animationend') || 'animationend',
	  topAnimationIteration: getVendorPrefixedEventName('animationiteration') || 'animationiteration',
	  topAnimationStart: getVendorPrefixedEventName('animationstart') || 'animationstart',
	  topBlur: 'blur',
	  topCanPlay: 'canplay',
	  topCanPlayThrough: 'canplaythrough',
	  topChange: 'change',
	  topClick: 'click',
	  topCompositionEnd: 'compositionend',
	  topCompositionStart: 'compositionstart',
	  topCompositionUpdate: 'compositionupdate',
	  topContextMenu: 'contextmenu',
	  topCopy: 'copy',
	  topCut: 'cut',
	  topDoubleClick: 'dblclick',
	  topDrag: 'drag',
	  topDragEnd: 'dragend',
	  topDragEnter: 'dragenter',
	  topDragExit: 'dragexit',
	  topDragLeave: 'dragleave',
	  topDragOver: 'dragover',
	  topDragStart: 'dragstart',
	  topDrop: 'drop',
	  topDurationChange: 'durationchange',
	  topEmptied: 'emptied',
	  topEncrypted: 'encrypted',
	  topEnded: 'ended',
	  topError: 'error',
	  topFocus: 'focus',
	  topInput: 'input',
	  topKeyDown: 'keydown',
	  topKeyPress: 'keypress',
	  topKeyUp: 'keyup',
	  topLoadedData: 'loadeddata',
	  topLoadedMetadata: 'loadedmetadata',
	  topLoadStart: 'loadstart',
	  topMouseDown: 'mousedown',
	  topMouseMove: 'mousemove',
	  topMouseOut: 'mouseout',
	  topMouseOver: 'mouseover',
	  topMouseUp: 'mouseup',
	  topPaste: 'paste',
	  topPause: 'pause',
	  topPlay: 'play',
	  topPlaying: 'playing',
	  topProgress: 'progress',
	  topRateChange: 'ratechange',
	  topScroll: 'scroll',
	  topSeeked: 'seeked',
	  topSeeking: 'seeking',
	  topSelectionChange: 'selectionchange',
	  topStalled: 'stalled',
	  topSuspend: 'suspend',
	  topTextInput: 'textInput',
	  topTimeUpdate: 'timeupdate',
	  topTouchCancel: 'touchcancel',
	  topTouchEnd: 'touchend',
	  topTouchMove: 'touchmove',
	  topTouchStart: 'touchstart',
	  topTransitionEnd: getVendorPrefixedEventName('transitionend') || 'transitionend',
	  topVolumeChange: 'volumechange',
	  topWaiting: 'waiting',
	  topWheel: 'wheel'
	};

	/**
	 * To ensure no conflicts with other potential React instances on the page
	 */
	var topListenersIDKey = '_reactListenersID' + String(Math.random()).slice(2);

	function getListeningForDocument(mountAt) {
	  // In IE8, `mountAt` is a host object and doesn't have `hasOwnProperty`
	  // directly.
	  if (!Object.prototype.hasOwnProperty.call(mountAt, topListenersIDKey)) {
	    mountAt[topListenersIDKey] = reactTopListenersCounter++;
	    alreadyListeningTo[mountAt[topListenersIDKey]] = {};
	  }
	  return alreadyListeningTo[mountAt[topListenersIDKey]];
	}

	/**
	 * `ReactBrowserEventEmitter` is used to attach top-level event listeners. For
	 * example:
	 *
	 *   EventPluginHub.putListener('myID', 'onClick', myFunction);
	 *
	 * This would allocate a "registration" of `('onClick', myFunction)` on 'myID'.
	 *
	 * @internal
	 */
	var ReactBrowserEventEmitter = _assign({}, ReactEventEmitterMixin, {

	  /**
	   * Injectable event backend
	   */
	  ReactEventListener: null,

	  injection: {
	    /**
	     * @param {object} ReactEventListener
	     */
	    injectReactEventListener: function (ReactEventListener) {
	      ReactEventListener.setHandleTopLevel(ReactBrowserEventEmitter.handleTopLevel);
	      ReactBrowserEventEmitter.ReactEventListener = ReactEventListener;
	    }
	  },

	  /**
	   * Sets whether or not any created callbacks should be enabled.
	   *
	   * @param {boolean} enabled True if callbacks should be enabled.
	   */
	  setEnabled: function (enabled) {
	    if (ReactBrowserEventEmitter.ReactEventListener) {
	      ReactBrowserEventEmitter.ReactEventListener.setEnabled(enabled);
	    }
	  },

	  /**
	   * @return {boolean} True if callbacks are enabled.
	   */
	  isEnabled: function () {
	    return !!(ReactBrowserEventEmitter.ReactEventListener && ReactBrowserEventEmitter.ReactEventListener.isEnabled());
	  },

	  /**
	   * We listen for bubbled touch events on the document object.
	   *
	   * Firefox v8.01 (and possibly others) exhibited strange behavior when
	   * mounting `onmousemove` events at some node that was not the document
	   * element. The symptoms were that if your mouse is not moving over something
	   * contained within that mount point (for example on the background) the
	   * top-level listeners for `onmousemove` won't be called. However, if you
	   * register the `mousemove` on the document object, then it will of course
	   * catch all `mousemove`s. This along with iOS quirks, justifies restricting
	   * top-level listeners to the document object only, at least for these
	   * movement types of events and possibly all events.
	   *
	   * @see http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
	   *
	   * Also, `keyup`/`keypress`/`keydown` do not bubble to the window on IE, but
	   * they bubble to document.
	   *
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   * @param {object} contentDocumentHandle Document which owns the container
	   */
	  listenTo: function (registrationName, contentDocumentHandle) {
	    var mountAt = contentDocumentHandle;
	    var isListening = getListeningForDocument(mountAt);
	    var dependencies = EventPluginRegistry.registrationNameDependencies[registrationName];

	    for (var i = 0; i < dependencies.length; i++) {
	      var dependency = dependencies[i];
	      if (!(isListening.hasOwnProperty(dependency) && isListening[dependency])) {
	        if (dependency === 'topWheel') {
	          if (isEventSupported('wheel')) {
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topWheel', 'wheel', mountAt);
	          } else if (isEventSupported('mousewheel')) {
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topWheel', 'mousewheel', mountAt);
	          } else {
	            // Firefox needs to capture a different mouse scroll event.
	            // @see http://www.quirksmode.org/dom/events/tests/scroll.html
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topWheel', 'DOMMouseScroll', mountAt);
	          }
	        } else if (dependency === 'topScroll') {

	          if (isEventSupported('scroll', true)) {
	            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent('topScroll', 'scroll', mountAt);
	          } else {
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topScroll', 'scroll', ReactBrowserEventEmitter.ReactEventListener.WINDOW_HANDLE);
	          }
	        } else if (dependency === 'topFocus' || dependency === 'topBlur') {

	          if (isEventSupported('focus', true)) {
	            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent('topFocus', 'focus', mountAt);
	            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent('topBlur', 'blur', mountAt);
	          } else if (isEventSupported('focusin')) {
	            // IE has `focusin` and `focusout` events which bubble.
	            // @see http://www.quirksmode.org/blog/archives/2008/04/delegating_the.html
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topFocus', 'focusin', mountAt);
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topBlur', 'focusout', mountAt);
	          }

	          // to make sure blur and focus event listeners are only attached once
	          isListening.topBlur = true;
	          isListening.topFocus = true;
	        } else if (topEventMapping.hasOwnProperty(dependency)) {
	          ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(dependency, topEventMapping[dependency], mountAt);
	        }

	        isListening[dependency] = true;
	      }
	    }
	  },

	  trapBubbledEvent: function (topLevelType, handlerBaseName, handle) {
	    return ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelType, handlerBaseName, handle);
	  },

	  trapCapturedEvent: function (topLevelType, handlerBaseName, handle) {
	    return ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelType, handlerBaseName, handle);
	  },

	  /**
	   * Protect against document.createEvent() returning null
	   * Some popup blocker extensions appear to do this:
	   * https://github.com/facebook/react/issues/6887
	   */
	  supportsEventPageXY: function () {
	    if (!document.createEvent) {
	      return false;
	    }
	    var ev = document.createEvent('MouseEvent');
	    return ev != null && 'pageX' in ev;
	  },

	  /**
	   * Listens to window scroll and resize events. We cache scroll values so that
	   * application code can access them without triggering reflows.
	   *
	   * ViewportMetrics is only used by SyntheticMouse/TouchEvent and only when
	   * pageX/pageY isn't supported (legacy browsers).
	   *
	   * NOTE: Scroll events do not bubble.
	   *
	   * @see http://www.quirksmode.org/dom/events/scroll.html
	   */
	  ensureScrollValueMonitoring: function () {
	    if (hasEventPageXY === undefined) {
	      hasEventPageXY = ReactBrowserEventEmitter.supportsEventPageXY();
	    }
	    if (!hasEventPageXY && !isMonitoringScrollValue) {
	      var refresh = ViewportMetrics.refreshScrollValues;
	      ReactBrowserEventEmitter.ReactEventListener.monitorScrollValue(refresh);
	      isMonitoringScrollValue = true;
	    }
	  }

	});

	module.exports = ReactBrowserEventEmitter;

/***/ },
/* 67 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var SyntheticUIEvent = __webpack_require__(52);
	var ViewportMetrics = __webpack_require__(173);

	var getEventModifierState = __webpack_require__(103);

	/**
	 * @interface MouseEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var MouseEventInterface = {
	  screenX: null,
	  screenY: null,
	  clientX: null,
	  clientY: null,
	  ctrlKey: null,
	  shiftKey: null,
	  altKey: null,
	  metaKey: null,
	  getModifierState: getEventModifierState,
	  button: function (event) {
	    // Webkit, Firefox, IE9+
	    // which:  1 2 3
	    // button: 0 1 2 (standard)
	    var button = event.button;
	    if ('which' in event) {
	      return button;
	    }
	    // IE<9
	    // which:  undefined
	    // button: 0 0 0
	    // button: 1 4 2 (onmouseup)
	    return button === 2 ? 2 : button === 4 ? 1 : 0;
	  },
	  buttons: null,
	  relatedTarget: function (event) {
	    return event.relatedTarget || (event.fromElement === event.srcElement ? event.toElement : event.fromElement);
	  },
	  // "Proprietary" Interface.
	  pageX: function (event) {
	    return 'pageX' in event ? event.pageX : event.clientX + ViewportMetrics.currentScrollLeft;
	  },
	  pageY: function (event) {
	    return 'pageY' in event ? event.pageY : event.clientY + ViewportMetrics.currentScrollTop;
	  }
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticMouseEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticUIEvent.augmentClass(SyntheticMouseEvent, MouseEventInterface);

	module.exports = SyntheticMouseEvent;

/***/ },
/* 68 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(5);

	var invariant = __webpack_require__(3);

	var OBSERVED_ERROR = {};

	/**
	 * `Transaction` creates a black box that is able to wrap any method such that
	 * certain invariants are maintained before and after the method is invoked
	 * (Even if an exception is thrown while invoking the wrapped method). Whoever
	 * instantiates a transaction can provide enforcers of the invariants at
	 * creation time. The `Transaction` class itself will supply one additional
	 * automatic invariant for you - the invariant that any transaction instance
	 * should not be run while it is already being run. You would typically create a
	 * single instance of a `Transaction` for reuse multiple times, that potentially
	 * is used to wrap several different methods. Wrappers are extremely simple -
	 * they only require implementing two methods.
	 *
	 * <pre>
	 *                       wrappers (injected at creation time)
	 *                                      +        +
	 *                                      |        |
	 *                    +-----------------|--------|--------------+
	 *                    |                 v        |              |
	 *                    |      +---------------+   |              |
	 *                    |   +--|    wrapper1   |---|----+         |
	 *                    |   |  +---------------+   v    |         |
	 *                    |   |          +-------------+  |         |
	 *                    |   |     +----|   wrapper2  |--------+   |
	 *                    |   |     |    +-------------+  |     |   |
	 *                    |   |     |                     |     |   |
	 *                    |   v     v                     v     v   | wrapper
	 *                    | +---+ +---+   +---------+   +---+ +---+ | invariants
	 * perform(anyMethod) | |   | |   |   |         |   |   | |   | | maintained
	 * +----------------->|-|---|-|---|-->|anyMethod|---|---|-|---|-|-------->
	 *                    | |   | |   |   |         |   |   | |   | |
	 *                    | |   | |   |   |         |   |   | |   | |
	 *                    | |   | |   |   |         |   |   | |   | |
	 *                    | +---+ +---+   +---------+   +---+ +---+ |
	 *                    |  initialize                    close    |
	 *                    +-----------------------------------------+
	 * </pre>
	 *
	 * Use cases:
	 * - Preserving the input selection ranges before/after reconciliation.
	 *   Restoring selection even in the event of an unexpected error.
	 * - Deactivating events while rearranging the DOM, preventing blurs/focuses,
	 *   while guaranteeing that afterwards, the event system is reactivated.
	 * - Flushing a queue of collected DOM mutations to the main UI thread after a
	 *   reconciliation takes place in a worker thread.
	 * - Invoking any collected `componentDidUpdate` callbacks after rendering new
	 *   content.
	 * - (Future use case): Wrapping particular flushes of the `ReactWorker` queue
	 *   to preserve the `scrollTop` (an automatic scroll aware DOM).
	 * - (Future use case): Layout calculations before and after DOM updates.
	 *
	 * Transactional plugin API:
	 * - A module that has an `initialize` method that returns any precomputation.
	 * - and a `close` method that accepts the precomputation. `close` is invoked
	 *   when the wrapped process is completed, or has failed.
	 *
	 * @param {Array<TransactionalWrapper>} transactionWrapper Wrapper modules
	 * that implement `initialize` and `close`.
	 * @return {Transaction} Single transaction for reuse in thread.
	 *
	 * @class Transaction
	 */
	var TransactionImpl = {
	  /**
	   * Sets up this instance so that it is prepared for collecting metrics. Does
	   * so such that this setup method may be used on an instance that is already
	   * initialized, in a way that does not consume additional memory upon reuse.
	   * That can be useful if you decide to make your subclass of this mixin a
	   * "PooledClass".
	   */
	  reinitializeTransaction: function () {
	    this.transactionWrappers = this.getTransactionWrappers();
	    if (this.wrapperInitData) {
	      this.wrapperInitData.length = 0;
	    } else {
	      this.wrapperInitData = [];
	    }
	    this._isInTransaction = false;
	  },

	  _isInTransaction: false,

	  /**
	   * @abstract
	   * @return {Array<TransactionWrapper>} Array of transaction wrappers.
	   */
	  getTransactionWrappers: null,

	  isInTransaction: function () {
	    return !!this._isInTransaction;
	  },

	  /**
	   * Executes the function within a safety window. Use this for the top level
	   * methods that result in large amounts of computation/mutations that would
	   * need to be safety checked. The optional arguments helps prevent the need
	   * to bind in many cases.
	   *
	   * @param {function} method Member of scope to call.
	   * @param {Object} scope Scope to invoke from.
	   * @param {Object?=} a Argument to pass to the method.
	   * @param {Object?=} b Argument to pass to the method.
	   * @param {Object?=} c Argument to pass to the method.
	   * @param {Object?=} d Argument to pass to the method.
	   * @param {Object?=} e Argument to pass to the method.
	   * @param {Object?=} f Argument to pass to the method.
	   *
	   * @return {*} Return value from `method`.
	   */
	  perform: function (method, scope, a, b, c, d, e, f) {
	    !!this.isInTransaction() ?  false ? invariant(false, 'Transaction.perform(...): Cannot initialize a transaction when there is already an outstanding transaction.') : _prodInvariant('27') : void 0;
	    var errorThrown;
	    var ret;
	    try {
	      this._isInTransaction = true;
	      // Catching errors makes debugging more difficult, so we start with
	      // errorThrown set to true before setting it to false after calling
	      // close -- if it's still set to true in the finally block, it means
	      // one of these calls threw.
	      errorThrown = true;
	      this.initializeAll(0);
	      ret = method.call(scope, a, b, c, d, e, f);
	      errorThrown = false;
	    } finally {
	      try {
	        if (errorThrown) {
	          // If `method` throws, prefer to show that stack trace over any thrown
	          // by invoking `closeAll`.
	          try {
	            this.closeAll(0);
	          } catch (err) {}
	        } else {
	          // Since `method` didn't throw, we don't want to silence the exception
	          // here.
	          this.closeAll(0);
	        }
	      } finally {
	        this._isInTransaction = false;
	      }
	    }
	    return ret;
	  },

	  initializeAll: function (startIndex) {
	    var transactionWrappers = this.transactionWrappers;
	    for (var i = startIndex; i < transactionWrappers.length; i++) {
	      var wrapper = transactionWrappers[i];
	      try {
	        // Catching errors makes debugging more difficult, so we start with the
	        // OBSERVED_ERROR state before overwriting it with the real return value
	        // of initialize -- if it's still set to OBSERVED_ERROR in the finally
	        // block, it means wrapper.initialize threw.
	        this.wrapperInitData[i] = OBSERVED_ERROR;
	        this.wrapperInitData[i] = wrapper.initialize ? wrapper.initialize.call(this) : null;
	      } finally {
	        if (this.wrapperInitData[i] === OBSERVED_ERROR) {
	          // The initializer for wrapper i threw an error; initialize the
	          // remaining wrappers but silence any exceptions from them to ensure
	          // that the first error is the one to bubble up.
	          try {
	            this.initializeAll(i + 1);
	          } catch (err) {}
	        }
	      }
	    }
	  },

	  /**
	   * Invokes each of `this.transactionWrappers.close[i]` functions, passing into
	   * them the respective return values of `this.transactionWrappers.init[i]`
	   * (`close`rs that correspond to initializers that failed will not be
	   * invoked).
	   */
	  closeAll: function (startIndex) {
	    !this.isInTransaction() ?  false ? invariant(false, 'Transaction.closeAll(): Cannot close transaction when none are open.') : _prodInvariant('28') : void 0;
	    var transactionWrappers = this.transactionWrappers;
	    for (var i = startIndex; i < transactionWrappers.length; i++) {
	      var wrapper = transactionWrappers[i];
	      var initData = this.wrapperInitData[i];
	      var errorThrown;
	      try {
	        // Catching errors makes debugging more difficult, so we start with
	        // errorThrown set to true before setting it to false after calling
	        // close -- if it's still set to true in the finally block, it means
	        // wrapper.close threw.
	        errorThrown = true;
	        if (initData !== OBSERVED_ERROR && wrapper.close) {
	          wrapper.close.call(this, initData);
	        }
	        errorThrown = false;
	      } finally {
	        if (errorThrown) {
	          // The closer for wrapper i threw an error; close the remaining
	          // wrappers but silence any exceptions from them to ensure that the
	          // first error is the one to bubble up.
	          try {
	            this.closeAll(i + 1);
	          } catch (e) {}
	        }
	      }
	    }
	    this.wrapperInitData.length = 0;
	  }
	};

	module.exports = TransactionImpl;

/***/ },
/* 69 */
/***/ function(module, exports) {

	/**
	 * Copyright 2016-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * Based on the escape-html library, which is used under the MIT License below:
	 *
	 * Copyright (c) 2012-2013 TJ Holowaychuk
	 * Copyright (c) 2015 Andreas Lubbe
	 * Copyright (c) 2015 Tiancheng "Timothy" Gu
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining
	 * a copy of this software and associated documentation files (the
	 * 'Software'), to deal in the Software without restriction, including
	 * without limitation the rights to use, copy, modify, merge, publish,
	 * distribute, sublicense, and/or sell copies of the Software, and to
	 * permit persons to whom the Software is furnished to do so, subject to
	 * the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be
	 * included in all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,
	 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
	 * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
	 * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
	 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
	 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
	 *
	 */

	'use strict';

	// code copied and modified from escape-html
	/**
	 * Module variables.
	 * @private
	 */

	var matchHtmlRegExp = /["'&<>]/;

	/**
	 * Escape special characters in the given string of html.
	 *
	 * @param  {string} string The string to escape for inserting into HTML
	 * @return {string}
	 * @public
	 */

	function escapeHtml(string) {
	  var str = '' + string;
	  var match = matchHtmlRegExp.exec(str);

	  if (!match) {
	    return str;
	  }

	  var escape;
	  var html = '';
	  var index = 0;
	  var lastIndex = 0;

	  for (index = match.index; index < str.length; index++) {
	    switch (str.charCodeAt(index)) {
	      case 34:
	        // "
	        escape = '&quot;';
	        break;
	      case 38:
	        // &
	        escape = '&amp;';
	        break;
	      case 39:
	        // '
	        escape = '&#x27;'; // modified from escape-html; used to be '&#39'
	        break;
	      case 60:
	        // <
	        escape = '&lt;';
	        break;
	      case 62:
	        // >
	        escape = '&gt;';
	        break;
	      default:
	        continue;
	    }

	    if (lastIndex !== index) {
	      html += str.substring(lastIndex, index);
	    }

	    lastIndex = index + 1;
	    html += escape;
	  }

	  return lastIndex !== index ? html + str.substring(lastIndex, index) : html;
	}
	// end code copied and modified from escape-html


	/**
	 * Escapes text to prevent scripting attacks.
	 *
	 * @param {*} text Text value to escape.
	 * @return {string} An escaped string.
	 */
	function escapeTextContentForBrowser(text) {
	  if (typeof text === 'boolean' || typeof text === 'number') {
	    // this shortcircuit helps perf for types that we know will never have
	    // special characters, especially given that this function is used often
	    // for numeric dom ids.
	    return '' + text;
	  }
	  return escapeHtml(text);
	}

	module.exports = escapeTextContentForBrowser;

/***/ },
/* 70 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(15);
	var DOMNamespaces = __webpack_require__(93);

	var WHITESPACE_TEST = /^[ \r\n\t\f]/;
	var NONVISIBLE_TEST = /<(!--|link|noscript|meta|script|style)[ \r\n\t\f\/>]/;

	var createMicrosoftUnsafeLocalFunction = __webpack_require__(101);

	// SVG temp container for IE lacking innerHTML
	var reusableSVGContainer;

	/**
	 * Set the innerHTML property of a node, ensuring that whitespace is preserved
	 * even in IE8.
	 *
	 * @param {DOMElement} node
	 * @param {string} html
	 * @internal
	 */
	var setInnerHTML = createMicrosoftUnsafeLocalFunction(function (node, html) {
	  // IE does not have innerHTML for SVG nodes, so instead we inject the
	  // new markup in a temp node and then move the child nodes across into
	  // the target node
	  if (node.namespaceURI === DOMNamespaces.svg && !('innerHTML' in node)) {
	    reusableSVGContainer = reusableSVGContainer || document.createElement('div');
	    reusableSVGContainer.innerHTML = '<svg>' + html + '</svg>';
	    var svgNode = reusableSVGContainer.firstChild;
	    while (svgNode.firstChild) {
	      node.appendChild(svgNode.firstChild);
	    }
	  } else {
	    node.innerHTML = html;
	  }
	});

	if (ExecutionEnvironment.canUseDOM) {
	  // IE8: When updating a just created node with innerHTML only leading
	  // whitespace is removed. When updating an existing node with innerHTML
	  // whitespace in root TextNodes is also collapsed.
	  // @see quirksmode.org/bugreports/archives/2004/11/innerhtml_and_t.html

	  // Feature detection; only IE8 is known to behave improperly like this.
	  var testElement = document.createElement('div');
	  testElement.innerHTML = ' ';
	  if (testElement.innerHTML === '') {
	    setInnerHTML = function (node, html) {
	      // Magic theory: IE8 supposedly differentiates between added and updated
	      // nodes when processing innerHTML, innerHTML on updated nodes suffers
	      // from worse whitespace behavior. Re-adding a node like this triggers
	      // the initial and more favorable whitespace behavior.
	      // TODO: What to do on a detached node?
	      if (node.parentNode) {
	        node.parentNode.replaceChild(node, node);
	      }

	      // We also implement a workaround for non-visible tags disappearing into
	      // thin air on IE8, this only happens if there is no visible text
	      // in-front of the non-visible tags. Piggyback on the whitespace fix
	      // and simply check if any non-visible tags appear in the source.
	      if (WHITESPACE_TEST.test(html) || html[0] === '<' && NONVISIBLE_TEST.test(html)) {
	        // Recover leading whitespace by temporarily prepending any character.
	        // \uFEFF has the potential advantage of being zero-width/invisible.
	        // UglifyJS drops U+FEFF chars when parsing, so use String.fromCharCode
	        // in hopes that this is preserved even if "\uFEFF" is transformed to
	        // the actual Unicode character (by Babel, for example).
	        // https://github.com/mishoo/UglifyJS2/blob/v2.4.20/lib/parse.js#L216
	        node.innerHTML = String.fromCharCode(0xFEFF) + html;

	        // deleteData leaves an empty `TextNode` which offsets the index of all
	        // children. Definitely want to avoid this.
	        var textNode = node.firstChild;
	        if (textNode.data.length === 1) {
	          node.removeChild(textNode);
	        } else {
	          textNode.deleteData(0, 1);
	        }
	      } else {
	        node.innerHTML = html;
	      }
	    };
	  }
	  testElement = null;
	}

	module.exports = setInnerHTML;

/***/ },
/* 71 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.once = exports.on = exports.off = undefined;

	var _curry = __webpack_require__(47);

	var _curry2 = _interopRequireDefault(_curry);

	var _listeners = __webpack_require__(191);

	var _listeners2 = _interopRequireDefault(_listeners);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	/**
	 * Checks if the default target of `document` exists before returning it, otherwise returns `false`.
	 *
	 * @returns {Node|Boolean}
	 * @memberof core/dispatcher
	 * @private
	 */
	/**
	 * Provides methods to add and remove global event listeners
	 *
	 * @module core/dispatcher
	 */

	var getDefaultTarget = function getDefaultTarget() {
	  return typeof document !== 'undefined' && document;
	};

	/**
	 * Wraps event callbacks with a try-catch block to prevent unrelated code from blocking
	 *
	 * @function
	 * @param	{Event}		ev	Event payload
	 * @param	{Function}	fn	Event callback
	 *
	 * @returns	{undefined}
	 * @memberof core/dispatcher
	 * @private
	 */
	var invoker = (0, _curry2.default)(function (ev, fn) {
	  try {
	    fn(ev);
	  } catch (e) {
	    // eslint-disable-next-line no-console
	    console.error('A ' + e.name + ' occurred during event handling with the message \'' + e.message + '\'');
	  }
	});

	/**
	 * Dispatches an event to the registered handlers
	 *
	 * @function
	 * @param	{Event}		ev	Event payload
	 *
	 * @returns {undefined}
	 * @memberof core/dispatcher
	 * @private
	 */
	var dispatcher = function dispatcher(ev) {
	  var name = ev.type;
	  var listeners = (0, _listeners2.default)(ev.currentTarget, name);

	  if (listeners) {
	    var inv = invoker(ev);
	    listeners.forEach(inv);
	  }
	};

	/**
	 * Adds a new global event listener
	 *
	 * @function
	 * @param	{String}	name				Event name
	 * @param	{Function}	fn					Event handler
	 * @param	{Node}		[target=`document`]	Event listener target
	 *
	 * @returns {undefined}
	 * @memberof core/dispatcher
	 */
	var on = function on(name, fn) {
	  var target = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : getDefaultTarget();

	  if (target) {
	    var listeners = (0, _listeners2.default)(target, name);

	    var length = listeners.push(fn);
	    if (length === 1) {
	      target.addEventListener(name, dispatcher);
	    }
	  }
	};

	/**
	 * Removes a global event listener
	 *
	 * @function
	 * @param	{String}	name				Event name
	 * @param	{Function}	fn					Event handler
	 * @param	{Node}		[target=`document`]	Event listener target
	 *
	 * @returns {undefined}
	 * @memberof core/dispatcher
	 */
	var off = function off(name, fn) {
	  var target = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : getDefaultTarget();

	  if (target) {
	    var listeners = (0, _listeners2.default)(target, name);
	    var index = listeners.indexOf(fn);

	    if (index >= 0) {
	      listeners.splice(index, 1);
	      if (listeners.length === 0) {
	        target.removeEventListener(name, dispatcher);
	      }
	    }
	  }
	};

	/**
	 * Adds a new global event listener that removes itself after handling one event
	 *
	 * @function
	 * @param	{String}	name		Event name
	 * @param	{Function}	fn			Event handler
	 * @param	{Node}		[target]	Event listener target
	 *
	 * @returns {Function}						The single-use handler which can be passed to `off` to
	 *											remove it.
	 * @memberof core/dispatcher
	 */
	var once = function once(name, fn, target) {
	  var onceFn = function onceFn(ev) {
	    fn(ev);
	    off(name, onceFn, target);
	  };

	  on(name, onceFn, target);

	  return onceFn;
	};

	exports.off = off;
	exports.on = on;
	exports.once = once;

/***/ },
/* 72 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	exports.contextTypes = exports.I18nDecorator = undefined;

	var _extends = Object.assign || function (target) {
		for (var i = 1; i < arguments.length; i++) {
			var source = arguments[i];for (var key in source) {
				if (Object.prototype.hasOwnProperty.call(source, key)) {
					target[key] = source[key];
				}
			}
		}return target;
	};

	var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
		return typeof obj === "undefined" ? "undefined" : _typeof2(obj);
	} : function (obj) {
		return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof2(obj);
	};

	var _createClass = function () {
		function defineProperties(target, props) {
			for (var i = 0; i < props.length; i++) {
				var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
			}
		}return function (Constructor, protoProps, staticProps) {
			if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
		};
	}();

	var _hoc = __webpack_require__(10);

	var _hoc2 = _interopRequireDefault(_hoc);

	var _dispatcher = __webpack_require__(71);

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _index = __webpack_require__(120);

	var _index2 = _interopRequireDefault(_index);

	var _locale = __webpack_require__(80);

	var _getI18nClasses = __webpack_require__(203);

	var _getI18nClasses2 = _interopRequireDefault(_getI18nClasses);

	function _interopRequireDefault(obj) {
		return obj && obj.__esModule ? obj : { default: obj };
	}

	function _classCallCheck(instance, Constructor) {
		if (!(instance instanceof Constructor)) {
			throw new TypeError("Cannot call a class as a function");
		}
	}

	function _possibleConstructorReturn(self, call) {
		if (!self) {
			throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
		}return call && ((typeof call === "undefined" ? "undefined" : _typeof2(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
		if (typeof superClass !== "function" && superClass !== null) {
			throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof2(superClass)));
		}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	} /**
	   * Exports the {@link i18n/I18nDecorator.I18nDecorator} component and
	   * {@link i18n/I18nDecorator.contextTypes} validation rules.
	   *
	   * @module i18n/I18nDecorator
	   */

	/**
	 * `contextTypes` is an object that exports the default context validation rules. These must be applied
	 * to any child components that wish to receive the i18n context.
	 *
	 * ```
	 * import {contextTypes} from '@enact/i18n/I18nDecorator';
	 * ...
	 * myComponent.contextTypes = contextTypes;
	 * ```
	 *
	 * @memberof i18n/I18nDecorator
	 * @public
	 */
	var contextTypes = {
		rtl: _react2.default.PropTypes.bool,
		updateLocale: _react2.default.PropTypes.func
	};

	/**
	 * {@link i18n/I18nDecorator.I18nDecorator} is a Higher Order Component that is used to wrap
	 * the root element in an app. It provides an `rtl` member on the context of the wrapped component, allowing
	 * the children to check the current text directionality as well as an `updateLocale` method that can be
	 * used to update the current locale.
	 *
	 * There are no configurable options on this HOC.
	 *
	 * @class I18nDecorator
	 * @memberof i18n/I18nDecorator
	 * @hoc
	 * @public
	 */
	var IntlHoc = (0, _hoc2.default)(function (config, Wrapped) {
		var _class, _temp, _initialiseProps;

		return _temp = _class = function (_React$Component) {
			_inherits(I18nDecorator, _React$Component);

			_createClass(I18nDecorator, [{
				key: 'getChildContext',
				value: function getChildContext() {
					return {
						rtl: (0, _locale.isRtlLocale)(),
						updateLocale: this.updateLocale
					};
				}
			}]);

			function I18nDecorator(props) {
				_classCallCheck(this, I18nDecorator);

				var _this = _possibleConstructorReturn(this, (I18nDecorator.__proto__ || Object.getPrototypeOf(I18nDecorator)).call(this, props));

				_initialiseProps.call(_this);

				var ilibLocale = _index2.default.getLocale();
				var locale = props.locale && props.locale !== ilibLocale ? (0, _locale.updateLocale)(props.locale) : ilibLocale;

				_this.state = {
					locale: locale
				};
				return _this;
			}

			_createClass(I18nDecorator, [{
				key: 'componentDidMount',
				value: function componentDidMount() {
					if ((typeof window === 'undefined' ? 'undefined' : _typeof(window)) === 'object') {
						(0, _dispatcher.on)('languagechange', this.handleLocaleChange, window);
					}
				}
			}, {
				key: 'componentWillReceiveProps',
				value: function componentWillReceiveProps(newProps) {
					if (newProps.locale) {
						this.updateLocale(newProps.locale);
					}
				}
			}, {
				key: 'componentWillUnmount',
				value: function componentWillUnmount() {
					if ((typeof window === 'undefined' ? 'undefined' : _typeof(window)) === 'object') {
						(0, _dispatcher.off)('languagechange', this.handleLocaleChange, window);
					}
				}

				/**
	    * Updates the locale for the application. If `newLocale` is omitted, the locale will be
	    * reset to the device's default locale.
	    *
	    * @param	{String}	newLocale	Locale identifier string
	    *
	    * @returns	{undefined}
	    * @public
	    */

			}, {
				key: 'render',
				value: function render() {
					var props = Object.assign({}, this.props);
					var classes = (0, _getI18nClasses2.default)();
					if (this.props.className) {
						classes = this.props.className + ' ' + classes;
					}

					delete props.locale;

					return _react2.default.createElement(Wrapped, _extends({}, props, { className: classes }));
				}
			}]);

			return I18nDecorator;
		}(_react2.default.Component), _class.childContextTypes = contextTypes, _class.propTypes = /** @lends i18n/I18nDecorator.I18nDecorator.prototype */{
			className: _react2.default.PropTypes.string,
			locale: _react2.default.PropTypes.string
		}, _initialiseProps = function _initialiseProps() {
			var _this2 = this;

			this.handleLocaleChange = function () {
				_this2.updateLocale();
			};

			this.updateLocale = function (newLocale) {
				var locale = (0, _locale.updateLocale)(newLocale);
				_this2.setState({ locale: locale });
			};
		}, _temp;
	});

	exports.default = IntlHoc;
	exports.I18nDecorator = IntlHoc;
	exports.contextTypes = contextTypes;

/***/ },
/* 73 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	exports.Uppercase = undefined;

	var _hoc = __webpack_require__(10);

	var _hoc2 = _interopRequireDefault(_hoc);

	var _kind = __webpack_require__(8);

	var _kind2 = _interopRequireDefault(_kind);

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _util = __webpack_require__(57);

	function _interopRequireDefault(obj) {
		return obj && obj.__esModule ? obj : { default: obj };
	}

	/**
	 * {@link i18n/Uppercase.Uppercase} is a Higher Order Component that is used to wrap
	 * an element to provide locale-aware uppercasing of `children`, provided that `children` is a single
	 * string. Other values for `children` are unchanged. It supports a `preserveCase` property which can be
	 * used to override the uppercase as-needed.
	 *
	 * There are no configurable options on this HOC.
	 *
	 * @class Uppercase
	 * @memberof i18n/Uppercase
	 * @hoc
	 * @public
	 */
	/**
	 * Exports the {@link i18n/Uppercase.Uppercase} Higher-Order Component (HOC)
	 *
	 * @module i18n/Uppercase
	 */

	var Uppercase = (0, _hoc2.default)(function (config, Wrapped) {
		return (0, _kind2.default)({
			name: 'Uppercase',

			propTypes: /** @lends i18n/Uppercase.Uppercase.prototype */{
				/**
	    * The children string will be uppercased, unless this is set to true.
	    *
	    * @type {Boolean}
	    * @default false
	    * @public
	    */
				preserveCase: _react2.default.PropTypes.bool
			},

			defaultProps: {
				preserveCase: false
			},

			computed: {
				children: function children(_ref) {
					var _children = _ref.children,
					    preserveCase = _ref.preserveCase;

					if (!preserveCase && _react2.default.Children.count(_children) === 1) {
						var content = _react2.default.Children.toArray(_children)[0];
						if (typeof content == 'string') {
							return (0, _util.toUpperCase)(content);
						}
					}
					return _children;
				}
			},

			render: function render(props) {
				delete props.preserveCase;
				return _react2.default.createElement(Wrapped, props);
			}
		});
	});

	exports.default = Uppercase;
	exports.Uppercase = Uppercase;

/***/ },
/* 74 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	/*
	 * coptic.js - Represent a Coptic calendar object.
	 * 
	 * Copyright Â© 2015, JEDLSoft
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 *
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */

	/* !depends ilib.js Calendar.js Locale.js Utils.js EthiopicCal.js */

	var ilib = __webpack_require__(2);
	var Utils = __webpack_require__(25);
	var Locale = __webpack_require__(12);
	var Calendar = __webpack_require__(9);
	var EthiopicCal = __webpack_require__(54);

	/**
	 * @class
	 * Construct a new Coptic calendar object. This class encodes information about
	 * a Coptic calendar.<p>
	 * 
	 * 
	 * @constructor
	 * @extends EthiopicCal
	 */
	var CopticCal = function CopticCal() {
	  this.type = "coptic";
	};

	CopticCal.prototype = new EthiopicCal();
	CopticCal.prototype.parent = EthiopicCal;
	CopticCal.prototype.constructor = CopticCal;

	/* register this calendar for the factory method */
	Calendar._constructors["coptic"] = CopticCal;

	module.exports = CopticCal;

/***/ },
/* 75 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	/*
	 * han.js - Represent a Han Chinese Lunar calendar object.
	 * 
	 * Copyright Â© 2014-2015, JEDLSoft
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 *
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */

	/* !depends 
	ilib.js 
	Calendar.js 
	MathUtils.js 
	Astro.js
	GregorianDate.js
	GregRataDie.js
	RataDie.js
	*/

	var ilib = __webpack_require__(2);
	var MathUtils = __webpack_require__(6);

	var Calendar = __webpack_require__(9);

	var Astro = __webpack_require__(53);
	var RataDie = __webpack_require__(17);
	var GregorianDate = __webpack_require__(30);
	var GregRataDie = __webpack_require__(43);

	/**
	 * @class
	 * Construct a new Han algorithmic calendar object. This class encodes information about
	 * a Han algorithmic calendar.<p>
	 * 
	 * 
	 * @constructor
	 * @param {Object=} params optional parameters to load the calendrical data
	 * @extends Calendar
	 */
	var HanCal = function HanCal(params) {
	  this.type = "han";
	  var sync = params && typeof params.sync === 'boolean' ? params.sync : true;

	  Astro.initAstro(sync, params && params.loadParams, /** @type {function ((Object|null)=): ?} */ilib.bind(this, function (x) {
	    if (params && typeof params.callback === 'function') {
	      params.callback(this);
	    }
	  }));
	};

	/**
	 * @protected
	 * @static
	 * @param {number} year
	 * @param {number=} cycle
	 * @return {number}
	 */
	HanCal._getElapsedYear = function (year, cycle) {
	  var elapsedYear = year || 0;
	  if (typeof year !== 'undefined' && year < 61 && typeof cycle !== 'undefined') {
	    elapsedYear = 60 * cycle + year;
	  }
	  return elapsedYear;
	};

	/**
	 * @protected
	 * @static
	 * @param {number} jd julian day to calculate from
	 * @param {number} longitude longitude to seek 
	 * @returns {number} the julian day of the next time that the solar longitude 
	 * is a multiple of the given longitude
	 */
	HanCal._hanNextSolarLongitude = function (jd, longitude) {
	  var tz = HanCal._chineseTZ(jd);
	  var uni = Astro._universalFromLocal(jd, tz);
	  var sol = Astro._nextSolarLongitude(uni, longitude);
	  return Astro._localFromUniversal(sol, tz);
	};

	/**
	 * @protected
	 * @static
	 * @param {number} jd julian day to calculate from 
	 * @returns {number} the major solar term for the julian day
	 */
	HanCal._majorSTOnOrAfter = function (jd) {
	  var tz = HanCal._chineseTZ(jd);
	  var uni = Astro._universalFromLocal(jd, tz);
	  var next = Astro._fixangle(30 * Math.ceil(Astro._solarLongitude(uni) / 30));
	  return HanCal._hanNextSolarLongitude(jd, next);
	};

	/**
	 * @protected
	 * @static
	 * @param {number} year the year for which the leap year information is being sought
	 * @param {number=} cycle if the given year < 60, this can specify the cycle. If the
	 * cycle is not given, then the year should be given as elapsed years since the beginning
	 * of the epoch
	 */
	HanCal._solsticeBefore = function (year, cycle) {
	  var elapsedYear = HanCal._getElapsedYear(year, cycle);
	  var gregyear = elapsedYear - 2697;
	  var rd = new GregRataDie({
	    year: gregyear - 1,
	    month: 12,
	    day: 15,
	    hour: 0,
	    minute: 0,
	    second: 0,
	    millisecond: 0
	  });
	  return HanCal._majorSTOnOrAfter(rd.getRataDie() + RataDie.gregorianEpoch);
	};

	/**
	 * @protected
	 * @static
	 * @param {number} jd julian day to calculate from
	 * @returns {number} the current major solar term
	 */
	HanCal._chineseTZ = function (jd) {
	  var year = GregorianDate._calcYear(jd - RataDie.gregorianEpoch);
	  return year < 1929 ? 465.6666666666666666 : 480;
	};

	/**
	 * @protected
	 * @static
	 * @param {number} jd julian day to calculate from 
	 * @returns {number} the julian day of next new moon on or after the given julian day date
	 */
	HanCal._newMoonOnOrAfter = function (jd) {
	  var tz = HanCal._chineseTZ(jd);
	  var uni = Astro._universalFromLocal(jd, tz);
	  var moon = Astro._newMoonAtOrAfter(uni);
	  // floor to the start of the julian day
	  return Astro._floorToJD(Astro._localFromUniversal(moon, tz));
	};

	/**
	 * @protected
	 * @static
	 * @param {number} jd julian day to calculate from 
	 * @returns {number} the julian day of previous new moon before the given julian day date
	 */
	HanCal._newMoonBefore = function (jd) {
	  var tz = HanCal._chineseTZ(jd);
	  var uni = Astro._universalFromLocal(jd, tz);
	  var moon = Astro._newMoonBefore(uni);
	  // floor to the start of the julian day
	  return Astro._floorToJD(Astro._localFromUniversal(moon, tz));
	};

	/**
	 * @static
	 * @protected
	 * @param {number} year the year for which the leap year information is being sought
	 * @param {number=} cycle if the given year < 60, this can specify the cycle. If the
	 * cycle is not given, then the year should be given as elapsed years since the beginning
	 * of the epoch
	 */
	HanCal._leapYearCalc = function (year, cycle) {
	  var ret = {
	    elapsedYear: HanCal._getElapsedYear(year, cycle)
	  };
	  ret.solstice1 = HanCal._solsticeBefore(ret.elapsedYear);
	  ret.solstice2 = HanCal._solsticeBefore(ret.elapsedYear + 1);
	  // ceil to the end of the julian day
	  ret.m1 = HanCal._newMoonOnOrAfter(Astro._ceilToJD(ret.solstice1));
	  ret.m2 = HanCal._newMoonBefore(Astro._ceilToJD(ret.solstice2));

	  return ret;
	};

	/**
	 * @protected
	 * @static
	 * @param {number} jd julian day to calculate from
	 * @returns {number} the current major solar term
	 */
	HanCal._currentMajorST = function (jd) {
	  var s = Astro._solarLongitude(Astro._universalFromLocal(jd, HanCal._chineseTZ(jd)));
	  return MathUtils.amod(2 + Math.floor(s / 30), 12);
	};

	/**
	 * @protected
	 * @static
	 * @param {number} jd julian day to calculate from
	 * @returns {boolean} true if there is no major solar term in the same year
	 */
	HanCal._noMajorST = function (jd) {
	  return HanCal._currentMajorST(jd) === HanCal._currentMajorST(HanCal._newMoonOnOrAfter(jd + 1));
	};

	/**
	 * Return the number of months in the given year. The number of months in a year varies
	 * for some luni-solar calendars because in some years, an extra month is needed to extend the 
	 * days in a year to an entire solar year. The month is represented as a 1-based number
	 * where 1=first month, 2=second month, etc.
	 * 
	 * @param {number} year a year for which the number of months is sought
	 * @param {number=} cycle if the given year < 60, this can specify the cycle. If the
	 * cycle is not given, then the year should be given as elapsed years since the beginning
	 * of the epoch
	 * @return {number} The number of months in the given year
	 */
	HanCal.prototype.getNumMonths = function (year, cycle) {
	  return this.isLeapYear(year, cycle) ? 13 : 12;
	};

	/**
	 * Return the number of days in a particular month in a particular year. This function
	 * can return a different number for a month depending on the year because of things
	 * like leap years.
	 * 
	 * @param {number} month the elapsed month for which the length is sought
	 * @param {number} year the elapsed year within which that month can be found
	 * @return {number} the number of days within the given month in the given year
	 */
	HanCal.prototype.getMonLength = function (month, year) {
	  // distance between two new moons in Nanjing China
	  var calc = HanCal._leapYearCalc(year);
	  var priorNewMoon = HanCal._newMoonOnOrAfter(calc.m1 + month * 29);
	  var postNewMoon = HanCal._newMoonOnOrAfter(priorNewMoon + 1);
	  return postNewMoon - priorNewMoon;
	};

	/**
	 * Return the equivalent year in the 2820 year cycle that begins on 
	 * Far 1, 474. This particular cycle obeys the cycle-of-years formula 
	 * whereas the others do not specifically. This cycle can be used as
	 * a proxy for other years outside of the cycle by shifting them into 
	 * the cycle.   
	 * @param {number} year year to find the equivalent cycle year for
	 * @returns {number} the equivalent cycle year
	 */
	HanCal.prototype.equivalentCycleYear = function (year) {
	  var y = year - (year >= 0 ? 474 : 473);
	  return MathUtils.mod(y, 2820) + 474;
	};

	/**
	 * Return true if the given year is a leap year in the Han calendar.
	 * If the year is given as a year/cycle combination, then the year should be in the 
	 * range [1,60] and the given cycle is the cycle in which the year is located. If 
	 * the year is greater than 60, then
	 * it represents the total number of years elapsed in the proleptic calendar since
	 * the beginning of the Chinese epoch in on 15 Feb, -2636 (Gregorian). In this 
	 * case, the cycle parameter is ignored.
	 * 
	 * @param {number} year the year for which the leap year information is being sought
	 * @param {number=} cycle if the given year < 60, this can specify the cycle. If the
	 * cycle is not given, then the year should be given as elapsed years since the beginning
	 * of the epoch
	 * @return {boolean} true if the given year is a leap year
	 */
	HanCal.prototype.isLeapYear = function (year, cycle) {
	  var calc = HanCal._leapYearCalc(year, cycle);
	  return Math.round((calc.m2 - calc.m1) / 29.530588853000001) === 12;
	};

	/**
	 * Return the month of the year that is the leap month. If the given year is
	 * not a leap year, then this method will return -1.
	 * 
	 * @param {number} year the year for which the leap year information is being sought
	 * @param {number=} cycle if the given year < 60, this can specify the cycle. If the
	 * cycle is not given, then the year should be given as elapsed years since the beginning
	 * of the epoch
	 * @return {number} the number of the month that is doubled in this leap year, or -1
	 * if this is not a leap year
	 */
	HanCal.prototype.getLeapMonth = function (year, cycle) {
	  var calc = HanCal._leapYearCalc(year, cycle);

	  if (Math.round((calc.m2 - calc.m1) / 29.530588853000001) != 12) {
	    return -1; // no leap month
	  }

	  // search between rd1 and rd2 for the first month with no major solar term. That is our leap month.
	  var month = 0;
	  var m = HanCal._newMoonOnOrAfter(calc.m1 + 1);
	  while (!HanCal._noMajorST(m)) {
	    month++;
	    m = HanCal._newMoonOnOrAfter(m + 1);
	  }

	  // return the number of the month that is doubled
	  return month;
	};

	/**
	 * Return the date of Chinese New Years in the given calendar year.
	 * 
	 * @param {number} year the Chinese year for which the new year information is being sought
	 * @param {number=} cycle if the given year < 60, this can specify the cycle. If the
	 * cycle is not given, then the year should be given as elapsed years since the beginning
	 * of the epoch
	 * @return {number} the julian day of the beginning of the given year 
	 */
	HanCal.prototype.newYears = function (year, cycle) {
	  var calc = HanCal._leapYearCalc(year, cycle);
	  var m2 = HanCal._newMoonOnOrAfter(calc.m1 + 1);
	  if (Math.round((calc.m2 - calc.m1) / 29.530588853000001) === 12 && (HanCal._noMajorST(calc.m1) || HanCal._noMajorST(m2))) {
	    return HanCal._newMoonOnOrAfter(m2 + 1);
	  }
	  return m2;
	};

	/**
	 * Return the type of this calendar.
	 * 
	 * @return {string} the name of the type of this calendar 
	 */
	HanCal.prototype.getType = function () {
	  return this.type;
	};

	/* register this calendar for the factory method */
	Calendar._constructors["han"] = HanCal;

	module.exports = HanCal;

/***/ },
/* 76 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	/*
	 * hebrew.js - Represent a Hebrew calendar object.
	 * 
	 * Copyright Â© 2012-2015, JEDLSoft
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 *
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */

	/* !depends ilib.js Calendar.js MathUtils.js */

	var ilib = __webpack_require__(2);
	var MathUtils = __webpack_require__(6);
	var Calendar = __webpack_require__(9);

	/**
	 * @class
	 * Construct a new Hebrew calendar object. This class encodes information about
	 * the Hebrew (Jewish) calendar. The Hebrew calendar is a tabular hebrew 
	 * calendar where the dates are calculated by arithmetic rules. This differs from 
	 * the religious Hebrew calendar which is used to mark the beginning of particular 
	 * holidays. The religious calendar depends on the first sighting of the new 
	 * crescent moon to determine the first day of the new month. Because humans and 
	 * weather are both involved, the actual time of sighting varies, so it is not 
	 * really possible to precalculate the religious calendar. Certain groups, such 
	 * as the Hebrew Society of North America, decreed in in 2007 that they will use
	 * a calendar based on calculations rather than observations to determine the 
	 * beginning of lunar months, and therefore the dates of holidays.<p>
	 * 
	 * 
	 * @constructor
	 * @extends Calendar
	 */
	var HebrewCal = function HebrewCal() {
	  this.type = "hebrew";
	};

	/**
	 * Return the number of days elapsed in the Hebrew calendar before the
	 * given year starts.
	 * @private
	 * @param {number} year the year for which the number of days is sought
	 * @return {number} the number of days elapsed in the Hebrew calendar before the
	 * given year starts
	 */
	HebrewCal.elapsedDays = function (year) {
	  var months = Math.floor((235 * year - 234) / 19);
	  var parts = 204 + 793 * MathUtils.mod(months, 1080);
	  var hours = 11 + 12 * months + 793 * Math.floor(months / 1080) + Math.floor(parts / 1080);
	  var days = 29 * months + Math.floor(hours / 24);
	  return MathUtils.mod(3 * (days + 1), 7) < 3 ? days + 1 : days;
	};

	/**
	 * Return the number of days that the New Year's (Rosh HaShanah) in the Hebrew 
	 * calendar will be corrected for the given year. Corrections are caused because New 
	 * Year's is not allowed to start on certain days of the week. To deal with 
	 * it, the start of the new year is corrected for the next year by adding a 
	 * day to the 8th month (Heshvan) and/or the 9th month (Kislev) in the current
	 * year to make them 30 days long instead of 29.
	 * 
	 * @private
	 * @param {number} year the year for which the correction is sought
	 * @param {number} elapsed number of days elapsed up to this year
	 * @return {number} the number of days correction in the current year to make sure
	 * Rosh HaShanah does not fall on undesirable days of the week
	 */
	HebrewCal.newYearsCorrection = function (year, elapsed) {
	  var lastYear = HebrewCal.elapsedDays(year - 1),
	      thisYear = elapsed,
	      nextYear = HebrewCal.elapsedDays(year + 1);

	  return nextYear - thisYear == 356 ? 2 : thisYear - lastYear == 382 ? 1 : 0;
	};

	/**
	 * Return the rata die date of the new year for the given hebrew year.
	 * @private
	 * @param {number} year the year for which the new year is needed
	 * @return {number} the rata die date of the new year
	 */
	HebrewCal.newYear = function (year) {
	  var elapsed = HebrewCal.elapsedDays(year);

	  return elapsed + HebrewCal.newYearsCorrection(year, elapsed);
	};

	/**
	 * Return the number of days in the given year. Years contain a variable number of
	 * days because the date of Rosh HaShanah (New Year's) changes so that it doesn't
	 * fall on particular days of the week. Days are added to the months of Heshvan
	 * and/or Kislev in the previous year in order to prevent the current year's New
	 * Year from being on Sunday, Wednesday, or Friday.
	 * 
	 * @param {number} year the year for which the length is sought
	 * @return {number} number of days in the given year
	 */
	HebrewCal.daysInYear = function (year) {
	  return HebrewCal.newYear(year + 1) - HebrewCal.newYear(year);
	};

	/**
	 * Return true if the given year contains a long month of Heshvan. That is,
	 * it is 30 days instead of 29.
	 * 
	 * @private
	 * @param {number} year the year in which that month is questioned
	 * @return {boolean} true if the given year contains a long month of Heshvan
	 */
	HebrewCal.longHeshvan = function (year) {
	  return MathUtils.mod(HebrewCal.daysInYear(year), 10) === 5;
	};

	/**
	 * Return true if the given year contains a long month of Kislev. That is,
	 * it is 30 days instead of 29.
	 * 
	 * @private
	 * @param {number} year the year in which that month is questioned
	 * @return {boolean} true if the given year contains a short month of Kislev
	 */
	HebrewCal.longKislev = function (year) {
	  return MathUtils.mod(HebrewCal.daysInYear(year), 10) !== 3;
	};

	/**
	 * Return the date of the last day of the month for the given year. The date of
	 * the last day of the month is variable because a number of months gain an extra 
	 * day in leap years, and it is variable which months gain a day for each leap 
	 * year and which do not.
	 * 
	 * @param {number} month the month for which the number of days is sought
	 * @param {number} year the year in which that month is
	 * @return {number} the number of days in the given month and year
	 */
	HebrewCal.prototype.lastDayOfMonth = function (month, year) {
	  switch (month) {
	    case 2:
	    case 4:
	    case 6:
	    case 10:
	      return 29;
	    case 13:
	      return this.isLeapYear(year) ? 29 : 0;
	    case 8:
	      return HebrewCal.longHeshvan(year) ? 30 : 29;
	    case 9:
	      return HebrewCal.longKislev(year) ? 30 : 29;
	    case 12:
	    case 1:
	    case 3:
	    case 5:
	    case 7:
	    case 11:
	      return 30;
	    default:
	      return 0;
	  }
	};

	/**
	 * Return the number of months in the given year. The number of months in a year varies
	 * for luni-solar calendars because in some years, an extra month is needed to extend the 
	 * days in a year to an entire solar year. The month is represented as a 1-based number
	 * where 1=first month, 2=second month, etc.
	 * 
	 * @param {number} year a year for which the number of months is sought
	 */
	HebrewCal.prototype.getNumMonths = function (year) {
	  return this.isLeapYear(year) ? 13 : 12;
	};

	/**
	 * Return the number of days in a particular month in a particular year. This function
	 * can return a different number for a month depending on the year because of leap years.
	 *
	 * @param {number} month the month for which the length is sought
	 * @param {number} year the year within which that month can be found
	 * @returns {number} the number of days within the given month in the given year, or
	 * 0 for an invalid month in the year
	 */
	HebrewCal.prototype.getMonLength = function (month, year) {
	  if (month < 1 || month > 13 || month == 13 && !this.isLeapYear(year)) {
	    return 0;
	  }
	  return this.lastDayOfMonth(month, year);
	};

	/**
	 * Return true if the given year is a leap year in the Hebrew calendar.
	 * The year parameter may be given as a number, or as a HebrewDate object.
	 * @param {number|Object} year the year for which the leap year information is being sought
	 * @returns {boolean} true if the given year is a leap year
	 */
	HebrewCal.prototype.isLeapYear = function (year) {
	  var y = typeof year == 'number' ? year : year.year;
	  return MathUtils.mod(1 + 7 * y, 19) < 7;
	};

	/**
	 * Return the type of this calendar.
	 * 
	 * @returns {string} the name of the type of this calendar 
	 */
	HebrewCal.prototype.getType = function () {
	  return this.type;
	};

	/*register this calendar for the factory method */
	Calendar._constructors["hebrew"] = HebrewCal;

	module.exports = HebrewCal;

/***/ },
/* 77 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	/*
	 * islamic.js - Represent a Islamic calendar object.
	 * 
	 * Copyright Â© 2012-2015, JEDLSoft
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 *
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */

	/* !depends 
	ilib.js
	Calendar.js 
	MathUtils.js 
	*/

	var ilib = __webpack_require__(2);
	var MathUtils = __webpack_require__(6);
	var Calendar = __webpack_require__(9);

	/**
	 * @class
	 * Construct a new Islamic calendar object. This class encodes information about
	 * the civil Islamic calendar. The civil Islamic calendar is a tabular islamic 
	 * calendar where the dates are calculated by arithmetic rules. This differs from 
	 * the religious Islamic calendar which is used to mark the beginning of particular 
	 * holidays. The religious calendar depends on the first sighting of the new 
	 * crescent moon to determine the first day of the new month. Because humans and 
	 * weather are both involved, the actual time of sighting varies, so it is not 
	 * really possible to precalculate the religious calendar. Certain groups, such 
	 * as the Islamic Society of North America, decreed in in 2007 that they will use
	 * a calendar based on calculations rather than observations to determine the 
	 * beginning of lunar months, and therefore the dates of holidays.<p>
	 * 
	 * 
	 * @constructor
	 * @extends Calendar
	 */
	var IslamicCal = function IslamicCal() {
	  this.type = "islamic";
	};

	/**
	 * the lengths of each month 
	 * @private
	 * @const
	 * @type Array.<number>
	 */
	IslamicCal.monthLengths = [30, /* Muharram */
	29, /* Saffar */
	30, /* Rabi'I */
	29, /* Rabi'II */
	30, /* Jumada I */
	29, /* Jumada II */
	30, /* Rajab */
	29, /* Sha'ban */
	30, /* Ramadan */
	29, /* Shawwal */
	30, /* Dhu al-Qa'da */
	29 /* Dhu al-Hijja */
	];

	/**
	 * Return the number of months in the given year. The number of months in a year varies
	 * for luni-solar calendars because in some years, an extra month is needed to extend the 
	 * days in a year to an entire solar year. The month is represented as a 1-based number
	 * where 1=first month, 2=second month, etc.
	 * 
	 * @param {number} year a year for which the number of months is sought
	 */
	IslamicCal.prototype.getNumMonths = function (year) {
	  return 12;
	};

	/**
	 * Return the number of days in a particular month in a particular year. This function
	 * can return a different number for a month depending on the year because of things
	 * like leap years.
	 *
	 * @param {number} month the month for which the length is sought
	 * @param {number} year the year within which that month can be found
	 * @return {number} the number of days within the given month in the given year
	 */
	IslamicCal.prototype.getMonLength = function (month, year) {
	  if (month !== 12) {
	    return IslamicCal.monthLengths[month - 1];
	  } else {
	    return this.isLeapYear(year) ? 30 : 29;
	  }
	};

	/**
	 * Return true if the given year is a leap year in the Islamic calendar.
	 * The year parameter may be given as a number, or as a IslamicDate object.
	 * @param {number} year the year for which the leap year information is being sought
	 * @return {boolean} true if the given year is a leap year
	 */
	IslamicCal.prototype.isLeapYear = function (year) {
	  return MathUtils.mod(14 + 11 * year, 30) < 11;
	};

	/**
	 * Return the type of this calendar.
	 * 
	 * @return {string} the name of the type of this calendar 
	 */
	IslamicCal.prototype.getType = function () {
	  return this.type;
	};

	/*register this calendar for the factory method */
	Calendar._constructors["islamic"] = IslamicCal;

	module.exports = IslamicCal;

/***/ },
/* 78 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	/*
	 * julian.js - Represent a Julian calendar object.
	 * 
	 * Copyright Â© 2012-2015, JEDLSoft
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 *
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */

	/* !depends ilib.js Calendar.js MathUtils.js */

	var ilib = __webpack_require__(2);
	var MathUtils = __webpack_require__(6);
	var Calendar = __webpack_require__(9);

	/**
	 * @class
	 * Construct a new Julian calendar object. This class encodes information about
	 * a Julian calendar.<p>
	 * 
	 * 
	 * @constructor
	 * @extends Calendar
	 */
	var JulianCal = function JulianCal() {
	  this.type = "julian";
	};

	/* the lengths of each month */
	JulianCal.monthLengths = [31, /* Jan */
	28, /* Feb */
	31, /* Mar */
	30, /* Apr */
	31, /* May */
	30, /* Jun */
	31, /* Jul */
	31, /* Aug */
	30, /* Sep */
	31, /* Oct */
	30, /* Nov */
	31 /* Dec */
	];

	/**
	 * the cumulative lengths of each month, for a non-leap year 
	 * @private
	 * @const
	 * @type Array.<number>
	 */
	JulianCal.cumMonthLengths = [0, /* Jan */
	31, /* Feb */
	59, /* Mar */
	90, /* Apr */
	120, /* May */
	151, /* Jun */
	181, /* Jul */
	212, /* Aug */
	243, /* Sep */
	273, /* Oct */
	304, /* Nov */
	334, /* Dec */
	365];

	/**
	 * the cumulative lengths of each month, for a leap year 
	 * @private
	 * @const
	 * @type Array.<number>
	 */
	JulianCal.cumMonthLengthsLeap = [0, /* Jan */
	31, /* Feb */
	60, /* Mar */
	91, /* Apr */
	121, /* May */
	152, /* Jun */
	182, /* Jul */
	213, /* Aug */
	244, /* Sep */
	274, /* Oct */
	305, /* Nov */
	335, /* Dec */
	366];

	/**
	 * Return the number of months in the given year. The number of months in a year varies
	 * for lunar calendars because in some years, an extra month is needed to extend the 
	 * days in a year to an entire solar year. The month is represented as a 1-based number
	 * where 1=Jaunary, 2=February, etc. until 12=December.
	 * 
	 * @param {number} year a year for which the number of months is sought
	 */
	JulianCal.prototype.getNumMonths = function (year) {
	  return 12;
	};

	/**
	 * Return the number of days in a particular month in a particular year. This function
	 * can return a different number for a month depending on the year because of things
	 * like leap years.
	 * 
	 * @param {number} month the month for which the length is sought
	 * @param {number} year the year within which that month can be found
	 * @return {number} the number of days within the given month in the given year
	 */
	JulianCal.prototype.getMonLength = function (month, year) {
	  if (month !== 2 || !this.isLeapYear(year)) {
	    return JulianCal.monthLengths[month - 1];
	  } else {
	    return 29;
	  }
	};

	/**
	 * Return true if the given year is a leap year in the Julian calendar.
	 * The year parameter may be given as a number, or as a JulDate object.
	 * @param {number|JulianDate} year the year for which the leap year information is being sought
	 * @return {boolean} true if the given year is a leap year
	 */
	JulianCal.prototype.isLeapYear = function (year) {
	  var y = typeof year === 'number' ? year : year.year;
	  return MathUtils.mod(y, 4) === (year > 0 ? 0 : 3);
	};

	/**
	 * Return the type of this calendar.
	 * 
	 * @return {string} the name of the type of this calendar 
	 */
	JulianCal.prototype.getType = function () {
	  return this.type;
	};

	/* register this calendar for the factory method */
	Calendar._constructors["julian"] = JulianCal;

	module.exports = JulianCal;

/***/ },
/* 79 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	/*
	 * persian.js - Represent a Persian algorithmic calendar object.
	 * 
	 * Copyright Â© 2014-2015, JEDLSoft
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 *
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */

	/* !depends ilib.js Calendar.js MathUtils.js */

	var ilib = __webpack_require__(2);
	var MathUtils = __webpack_require__(6);
	var Calendar = __webpack_require__(9);

	/**
	 * @class
	 * Construct a new Persian algorithmic calendar object. This class encodes information about
	 * a Persian algorithmic calendar.<p>
	 * 
	 * 
	 * @constructor
	 * @extends Calendar
	 */
	var PersianAlgoCal = function PersianAlgoCal() {
	  this.type = "persian-algo";
	};

	/**
	 * @private
	 * @const
	 * @type Array.<number> 
	 * the lengths of each month 
	 */
	PersianAlgoCal.monthLengths = [31, // Farvardin
	31, // Ordibehesht
	31, // Khordad
	31, // Tir
	31, // Mordad
	31, // Shahrivar
	30, // Mehr
	30, // Aban
	30, // Azar
	30, // Dey
	30, // Bahman
	29 // Esfand
	];

	/**
	 * Return the number of months in the given year. The number of months in a year varies
	 * for some luni-solar calendars because in some years, an extra month is needed to extend the 
	 * days in a year to an entire solar year. The month is represented as a 1-based number
	 * where 1=first month, 2=second month, etc.
	 * 
	 * @param {number} year a year for which the number of months is sought
	 * @return {number} The number of months in the given year
	 */
	PersianAlgoCal.prototype.getNumMonths = function (year) {
	  return 12;
	};

	/**
	 * Return the number of days in a particular month in a particular year. This function
	 * can return a different number for a month depending on the year because of things
	 * like leap years.
	 * 
	 * @param {number} month the month for which the length is sought
	 * @param {number} year the year within which that month can be found
	 * @return {number} the number of days within the given month in the given year
	 */
	PersianAlgoCal.prototype.getMonLength = function (month, year) {
	  if (month !== 12 || !this.isLeapYear(year)) {
	    return PersianAlgoCal.monthLengths[month - 1];
	  } else {
	    // Month 12, Esfand, has 30 days instead of 29 in leap years
	    return 30;
	  }
	};

	/**
	 * Return the equivalent year in the 2820 year cycle that begins on 
	 * Far 1, 474. This particular cycle obeys the cycle-of-years formula 
	 * whereas the others do not specifically. This cycle can be used as
	 * a proxy for other years outside of the cycle by shifting them into 
	 * the cycle.   
	 * @param {number} year year to find the equivalent cycle year for
	 * @returns {number} the equivalent cycle year
	 */
	PersianAlgoCal.prototype.equivalentCycleYear = function (year) {
	  var y = year - (year >= 0 ? 474 : 473);
	  return MathUtils.mod(y, 2820) + 474;
	};

	/**
	 * Return true if the given year is a leap year in the Persian calendar.
	 * The year parameter may be given as a number, or as a PersAlgoDate object.
	 * @param {number} year the year for which the leap year information is being sought
	 * @return {boolean} true if the given year is a leap year
	 */
	PersianAlgoCal.prototype.isLeapYear = function (year) {
	  return MathUtils.mod((this.equivalentCycleYear(year) + 38) * 682, 2816) < 682;
	};

	/**
	 * Return the type of this calendar.
	 * 
	 * @return {string} the name of the type of this calendar 
	 */
	PersianAlgoCal.prototype.getType = function () {
	  return this.type;
	};

	/* register this calendar for the factory method */
	Calendar._constructors["persian-algo"] = PersianAlgoCal;

	module.exports = PersianAlgoCal;

/***/ },
/* 80 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	exports.updateLocale = exports.isRtlLocale = exports.isNonLatinLocale = undefined;

	var _ilib = __webpack_require__(2);

	var _ilib2 = _interopRequireDefault(_ilib);

	var _LocaleInfo = __webpack_require__(14);

	var _LocaleInfo2 = _interopRequireDefault(_LocaleInfo);

	var _ScriptInfo = __webpack_require__(222);

	var _ScriptInfo2 = _interopRequireDefault(_ScriptInfo);

	var _case = __webpack_require__(119);

	var _resBundle = __webpack_require__(121);

	function _interopRequireDefault(obj) {
		return obj && obj.__esModule ? obj : { default: obj };
	}

	/**
	 * Tell whether or not the given locale is considered a non-Latin locale for webOS purposes. This
	 * controls which fonts are used in various places to show the various languages. An undefined spec
	 * parameter means to test the current locale.
	 *
	 * @memberof i18n/locale
	 * @param {ilib.Locale|string|undefined} spec locale specifier or locale object of the locale to
	 *	test, or undefined to test the current locale
	 * @returns {Boolean} `true` if non-Latin locale
	 */
	function isNonLatinLocale(spec) {
		var li = new _LocaleInfo2.default(spec),
		    locale = li.getLocale();

		// We use the non-latin fonts for these languages (even though their scripts are technically
		// considered latin)
		var nonLatinLanguageOverrides = ['en-JP'];
		// We use the latin fonts (with non-Latin fallback) for these languages (even though their
		// scripts are non-latin)
		var latinLanguageOverrides = ['ko', 'ha'];

		return (
		// the language actually is non-latin
		li.getScript() !== 'Latn' ||
		// the language is treated as non-latin
		nonLatinLanguageOverrides.indexOf(locale.getLanguage()) !== -1 ||
		// the combination of language and region is treated as non-latin
		nonLatinLanguageOverrides.indexOf(locale.toString()) !== -1) &&
		// the non-latin language should be treated as latin
		latinLanguageOverrides.indexOf(locale.getLanguage()) < 0;
	}

	/**
	 * Returns `true` if current locale is a right-to-left locale
	 *
	 * @memberof i18n/locale
	 * @returns {Boolean} `true` if current locale is a right-to-left locale
	 */
	/**
	 * Exports the {@link i18n/locale.isNonLatinLocale}, {@link i18n/locale.isRtlLocale} and
	 * {@link i18n/locale.updateLocale} functions.
	 *
	 * @module i18n/locale
	 * @private
	 */

	function isRtlLocale() {
		var li = new _LocaleInfo2.default();
		var scriptName = li.getScript();
		var script = new _ScriptInfo2.default(scriptName);
		return script.getScriptDirection() === 'rtl';
	}

	/**
	 * This Enact hook lets us know that the system locale has changed and gives
	 * us a chance to update the iLib locale before Enact broadcasts its
	 * `onlocalechange` signal.
	 * Provide a locale string, like 'en-US' or 'ja-JP', to conveniently set
	 * that locale immediately. Provide nothing, and reset the locale back to the
	 * browser's default language.
	 *
	 * @memberof i18n/locale
	 * @param {String} locale Locale identifier
	 * @returns {undefined}
	 */
	var updateLocale = function updateLocale(locale) {
		// blow away the cache to force it to reload the manifest files for the new app
		// eslint-disable-next-line no-undefined
		if (_ilib2.default._load) _ilib2.default._load.manifest = undefined;
		// remove the cache of the platform name to allow transition between snapshot and browser
		delete _ilib2.default._platform;
		// ilib handles falsy values and automatically uses local locale when encountered which
		// is expected and desired
		_ilib2.default.setLocale(locale);
		var newLocale = _ilib2.default.getLocale();
		// we supply whatever ilib determined was actually the locale based on what was passed in
		(0, _resBundle.setResBundleLocale)(newLocale);
		// Recreate the case mappers to use the just-recently-set locale
		(0, _case.initCaseMappers)();

		return newLocale;
	};

	exports.isNonLatinLocale = isNonLatinLocale;
	exports.isRtlLocale = isRtlLocale;
	exports.updateLocale = updateLocale;

/***/ },
/* 81 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
	                                                                                                                                                                                                                                                                               return typeof obj === "undefined" ? "undefined" : _typeof2(obj);
	} : function (obj) {
	                                                                                                                                                                                                                                                                               return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof2(obj);
	}; /*
	    * glue.js - glue code to fit ilib into enyo
	    *
	    * Copyright Â© 2013-2014 LG Electronics, Inc.
	    *
	    * Licensed under the Apache License, Version 2.0 (the 'License');
	    * you may not use this file except in compliance with the License.
	    * You may obtain a copy of the License at
	    *
	    *     http://www.apache.org/licenses/LICENSE-2.0
	    *
	    * Unless required by applicable law or agreed to in writing, software
	    * distributed under the License is distributed on an 'AS IS' BASIS,
	    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	    *
	    * See the License for the specific language governing permissions and
	    * limitations under the License.
	    */

	__webpack_require__(225);

	var _ilib = __webpack_require__(2);

	var _ilib2 = _interopRequireDefault(_ilib);

	var _Loader = __webpack_require__(224);

	var _Loader2 = _interopRequireDefault(_Loader);

	var _locale = __webpack_require__(80);

	function _interopRequireDefault(obj) {
	                                                                                                                                                                                                                                                                               return obj && obj.__esModule ? obj : { default: obj };
	}

	_ilib2.default.setLoaderCallback(new _Loader2.default());

	if ((typeof window === 'undefined' ? 'undefined' : _typeof(window)) === 'object' && typeof window.UILocale !== 'undefined') {
	                                                                                                                                                                                                                                                                               // this is a hack until GF-1581 is fixed
	                                                                                                                                                                                                                                                                               _ilib2.default.setLocale(window.UILocale);
	}

	// we go ahead and run this once during loading of iLib settings are valid
	// during the loads of later libraries.
	(0, _locale.updateLocale)(null, true);

/***/ },
/* 82 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.FloatingLayerDecorator = exports.FloatingLayer = undefined;

	var _FloatingLayer = __webpack_require__(250);

	var _FloatingLayer2 = _interopRequireDefault(_FloatingLayer);

	var _FloatingLayerDecorator = __webpack_require__(251);

	var _FloatingLayerDecorator2 = _interopRequireDefault(_FloatingLayerDecorator);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	/**
	 * Exports the {@link ui/FloatingLayer.FloatingLayer} component and
	 * {@link ui/FloatingLayer.FloatingLayerDecorator} Higher-order Component (HOC).
	 * The default export is {@link ui/FloatingLayer.FloatingLayer}.
	 *
	 * @module ui/FloatingLayer
	 */

	exports.default = _FloatingLayer2.default;
	exports.FloatingLayer = _FloatingLayer2.default;
	exports.FloatingLayerDecorator = _FloatingLayerDecorator2.default;

/***/ },
/* 83 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	exports.ViewManager = undefined;

	var _extends = Object.assign || function (target) {
		for (var i = 1; i < arguments.length; i++) {
			var source = arguments[i];for (var key in source) {
				if (Object.prototype.hasOwnProperty.call(source, key)) {
					target[key] = source[key];
				}
			}
		}return target;
	};

	var _createClass = function () {
		function defineProperties(target, props) {
			for (var i = 0; i < props.length; i++) {
				var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
			}
		}return function (Constructor, protoProps, staticProps) {
			if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
		};
	}();

	var _Arranger = __webpack_require__(140);

	Object.keys(_Arranger).forEach(function (key) {
		if (key === "default" || key === "__esModule") return;
		Object.defineProperty(exports, key, {
			enumerable: true,
			get: function get() {
				return _Arranger[key];
			}
		});
	});

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _TransitionGroup = __webpack_require__(255);

	var _TransitionGroup2 = _interopRequireDefault(_TransitionGroup);

	var _View = __webpack_require__(256);

	function _interopRequireDefault(obj) {
		return obj && obj.__esModule ? obj : { default: obj };
	}

	function _objectWithoutProperties(obj, keys) {
		var target = {};for (var i in obj) {
			if (keys.indexOf(i) >= 0) continue;if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;target[i] = obj[i];
		}return target;
	}

	function _classCallCheck(instance, Constructor) {
		if (!(instance instanceof Constructor)) {
			throw new TypeError("Cannot call a class as a function");
		}
	}

	function _possibleConstructorReturn(self, call) {
		if (!self) {
			throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
		}return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
		if (typeof superClass !== "function" && superClass !== null) {
			throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
		}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	} /**
	   * Exports the {@link ui/ViewManager.ViewManager} component and the
	   * arrangers for use with it.
	   *
	   * @module ui/ViewManager
	   */

	/**
	 * A `ViewManager` controls the visibility of a configurable number of views, allowing for them to be
	 * transitioned on and off the viewport.
	 *
	 * @class ViewManager
	 * @memberof ui/ViewManager
	 * @public
	 */
	var ViewManager = function (_React$Component) {
		_inherits(ViewManager, _React$Component);

		function ViewManager() {
			_classCallCheck(this, ViewManager);

			return _possibleConstructorReturn(this, (ViewManager.__proto__ || Object.getPrototypeOf(ViewManager)).apply(this, arguments));
		}

		_createClass(ViewManager, [{
			key: 'componentWillReceiveProps',
			value: function componentWillReceiveProps(nextProps) {
				this.previousIndex = this.props.index;
				this.checkReverse(nextProps);
			}

			/**
	   * Determines if we should be reversing the transition based on the index of the keys of the
	   * children.
	   *
	   * @param  {Object} nextProps New props
	   * @returns {undefined}
	   * @private
	   */

		}, {
			key: 'checkReverse',
			value: function checkReverse(nextProps) {
				// null or undefined => determine automatically
				if (nextProps.reverseTransition != null) {
					this.reverseTransition = !!nextProps.reverseTransition;
				} else if (this.props.index !== nextProps.index) {
					this.reverseTransition = this.props.index > nextProps.index;
				} else {
					this.reverseTransition = false;
				}
			}
		}, {
			key: 'render',
			value: function render() {
				var _props = this.props,
				    arranger = _props.arranger,
				    children = _props.children,
				    duration = _props.duration,
				    end = _props.end,
				    index = _props.index,
				    noAnimation = _props.noAnimation,
				    start = _props.start,
				    enteringDelay = _props.enteringDelay,
				    enteringProp = _props.enteringProp,
				    rest = _objectWithoutProperties(_props, ['arranger', 'children', 'duration', 'end', 'index', 'noAnimation', 'start', 'enteringDelay', 'enteringProp']);

				var previousIndex = this.previousIndex,
				    reverseTransition = this.reverseTransition;

				var childrenList = _react2.default.Children.toArray(children);

				var from = start || start === 0 ? start : index;
				var to = (end || end === 0) && end >= index ? end : index;
				var size = to - from + 1;

				var views = childrenList.slice(from, to + 1);
				var childFactory = (0, _View.wrapWithView)({
					arranger: arranger,
					duration: duration,
					index: index,
					noAnimation: noAnimation,
					previousIndex: previousIndex,
					reverseTransition: reverseTransition,
					enteringDelay: enteringDelay,
					enteringProp: enteringProp
				});

				delete rest.reverseTransition;

				return _react2.default.createElement(_TransitionGroup2.default, _extends({}, rest, { childFactory: childFactory, size: size + 1 }), views);
			}
		}]);

		return ViewManager;
	}(_react2.default.Component);

	ViewManager.propTypes = /** @lends ui/ViewManager.ViewManager.prototype */{
		/**
	  * Arranger to control the animation
	  *
	  * @type {Arranger}
	  */
		arranger: _Arranger.shape,

		/**
	  * Views to be managed. May be any renderable component including custom React components or
	  * primitive DOM nodes.
	  *
	  * @type {Node}
	  */
		children: _react2.default.PropTypes.node,

		/**
	  * Type of component wrapping the children. May be a DOM node or a custom React component.
	  *
	  * @type {String|Component}
	  * @default 'div'
	  */
		component: _react2.default.PropTypes.oneOfType([_react2.default.PropTypes.func, _react2.default.PropTypes.string]),

		/**
	  * Time in milliseconds to complete a transition
	  *
	  * @type {Number}
	  * @default 300
	  */
		duration: _react2.default.PropTypes.number,

		/**
	  * Index of last visible view. Defaults to the current value of `index`.
	  *
	  * @type {Number}
	  * @default value of index
	  */
		end: _react2.default.PropTypes.number,

		/**
	  * Time, in milliseconds, to wait after a view has entered to inform it by pass the
	  * `enteringProp` as false.
	  *
	  * @type {Number}
	  * @default 0
	  */
		enteringDelay: _react2.default.PropTypes.number,

		/**
	  * Name of the property to pass to the wrapped view to indicate when it is entering the
	  * viewport. When `true`, the view has been created but has not transitioned into place.
	  * When `false`, the view has finished its transition.
	  *
	  * The notification can be delayed by setting `enteringDelay`. If not set, the view will not
	  * be notified of the change in transition.
	  *
	  * @type {String}
	  */
		enteringProp: _react2.default.PropTypes.string,

		/**
	  * Index of active view
	  *
	  * @type {Number}
	  * @default 0
	  */
		index: _react2.default.PropTypes.number,

		/**
	  * Indicates if the transition should be animated
	  *
	  * @type {Boolean}
	  * @default false
	  */
		noAnimation: _react2.default.PropTypes.bool,

		/**
	  * Called when each view is rendered during initial construction.
	  *
	  * @type {Function}
	  */
		onAppear: _react2.default.PropTypes.func,

		/**
	  * Called when each view completes its transition into the viewport.
	  *
	  * @type {Function}
	  */
		onEnter: _react2.default.PropTypes.func,

		/**
	  * Called when each view completes its transition out of the viewport.
	  *
	  * @type {Function}
	  */
		onLeave: _react2.default.PropTypes.func,

		/**
	  * Called when each view completes its transition within the viewport.
	  *
	  * @type {Function}
	  */
		onStay: _react2.default.PropTypes.func,

		/**
	  * Called once when all views have completed their transition.
	  *
	  * @type {Function}
	  */
		onTransition: _react2.default.PropTypes.func,

		/**
	  * Called once before views begin their transition.
	  *
	  * @type {Function}
	  */
		onWillTransition: _react2.default.PropTypes.func,

		/**
	  * Explicitly sets the transition direction. If omitted, the direction is determined
	  * automaticallly based on the change of index or a string comparison of the first child's
	  * key
	  *
	  * @type {Boolean}
	  */
		reverseTransition: _react2.default.PropTypes.bool,

		/**
	  * Index of first visible view. Defaults to the current value of `index`.
	  *
	  * @type {Number}
	  * @default value of index
	  */
		start: _react2.default.PropTypes.number
	};
	ViewManager.defaultProps = {
		component: 'div',
		duration: 300,
		index: 0
	};
	exports.default = ViewManager;
	exports.ViewManager = ViewManager;

/***/ },
/* 84 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	exports.compose = exports.ease = exports.endBy = exports.startAfter = exports.reverse = exports.slideOut = exports.slideIn = exports.slideOutPartial = exports.slideInPartial = exports.accelerate = exports.fadeIn = exports.fadeOut = exports.clearTransform = exports.replaceTransform = exports.prependTransform = exports.appendTransform = exports.transform = undefined;

	var _extends = Object.assign || function (target) {
		for (var i = 1; i < arguments.length; i++) {
			var source = arguments[i];for (var key in source) {
				if (Object.prototype.hasOwnProperty.call(source, key)) {
					target[key] = source[key];
				}
			}
		}return target;
	};

	var _curry = __webpack_require__(47);

	var _curry2 = _interopRequireDefault(_curry);

	function _interopRequireDefault(obj) {
		return obj && obj.__esModule ? obj : { default: obj };
	}

	function _objectWithoutProperties(obj, keys) {
		var target = {};for (var i in obj) {
			if (keys.indexOf(i) >= 0) continue;if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;target[i] = obj[i];
		}return target;
	} /*
	   * Exports a number of methods for use with {@link ui/ViewManager}.
	   */

	var transform = exports.transform = (0, _curry2.default)(function (action, spec, _ref) {
		var node = _ref.node;

		var current = node.style.transform;
		var next = current;
		if (!current || action === 'replace') {
			next = spec;
		} else if (action === 'append') {
			next = current + ' ' + spec;
		} else if (action === 'prepend') {
			next = spec + ' ' + current;
		}

		node.style.transform = next;
	});

	var appendTransform = exports.appendTransform = transform('append');
	var prependTransform = exports.prependTransform = transform('prepend');
	var replaceTransform = exports.replaceTransform = transform('replace');
	var clearTransform = exports.clearTransform = transform('replace', '');

	var fadeOut = exports.fadeOut = function fadeOut(_ref2) {
		var node = _ref2.node,
		    percent = _ref2.percent;

		node.style.opacity = 1 - percent;
	};

	var fadeIn = exports.fadeIn = function fadeIn(_ref3) {
		var node = _ref3.node,
		    percent = _ref3.percent;

		node.style.opacity = percent;
	};

	var accelerate = exports.accelerate = prependTransform('translateZ(0)');

	var slideInOut = (0, _curry2.default)(function (direction, total, orientation, config) {
		var percent = config.percent;

		var p = total * (direction === 'out' ? percent : 1 - percent);

		var spec = orientation === 'top' && 'translateY(' + -p + '%)' || orientation === 'bottom' && 'translateY(' + p + '%)' || orientation === 'left' && 'translateX(' + -p + '%)' || orientation === 'right' && 'translateX(' + p + '%)';

		appendTransform(spec, config);
	});

	var slideInPartial = exports.slideInPartial = slideInOut('in');
	var slideOutPartial = exports.slideOutPartial = slideInOut('out');

	var slideIn = exports.slideIn = slideInPartial(100);
	var slideOut = exports.slideOut = slideOutPartial(100);

	var reverse = (0, _curry2.default)(function (fn, _ref4) {
		var reverseTransition = _ref4.reverseTransition,
		    percent = _ref4.percent,
		    rest = _objectWithoutProperties(_ref4, ['reverseTransition', 'percent']);

		fn(_extends({}, rest, {
			percent: reverseTransition ? 1 - percent : percent,
			reverseTransition: reverseTransition
		}));
	});

	exports.reverse = reverse;
	var startAfter = (0, _curry2.default)(function (startPercent, fn, config) {
		var percent = config.percent,
		    rest = _objectWithoutProperties(config, ['percent']);

		var p = percent >= startPercent ? (percent - startPercent) / (1 - startPercent) : 0;
		fn(_extends({}, rest, {
			percent: p
		}));
	});

	exports.startAfter = startAfter;
	var endBy = (0, _curry2.default)(function (endPercent, fn, config) {
		var percent = config.percent,
		    rest = _objectWithoutProperties(config, ['percent']);

		var p = percent <= endPercent ? percent / endPercent : 1;
		fn(_extends({}, rest, {
			percent: p
		}));
	});

	exports.endBy = endBy;
	var ease = (0, _curry2.default)(function (easing, fn, config) {
		var percent = config.percent,
		    rest = _objectWithoutProperties(config, ['percent']);

		fn(_extends({}, rest, {
			percent: easing(percent)
		}));
	});

	exports.ease = ease;
	var compose = exports.compose = function compose() {
		for (var _len = arguments.length, arrangers = Array(_len), _key = 0; _key < _len; _key++) {
			arrangers[_key] = arguments[_key];
		}

		return function () {
			for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
				args[_key2] = arguments[_key2];
			}

			arrangers.forEach(function (fn) {
				return fn.apply(undefined, args);
			});
		};
	};

/***/ },
/* 85 */
/***/ function(module, exports) {

	// shim for using process in browser
	var process = module.exports = {};

	// cached from whatever global is present so that test runners that stub it
	// don't break things.  But we need to wrap it in a try catch in case it is
	// wrapped in strict mode code which doesn't define any globals.  It's inside a
	// function because try/catches deoptimize in certain engines.

	var cachedSetTimeout;
	var cachedClearTimeout;

	function defaultSetTimout() {
	    throw new Error('setTimeout has not been defined');
	}
	function defaultClearTimeout () {
	    throw new Error('clearTimeout has not been defined');
	}
	(function () {
	    try {
	        if (typeof setTimeout === 'function') {
	            cachedSetTimeout = setTimeout;
	        } else {
	            cachedSetTimeout = defaultSetTimout;
	        }
	    } catch (e) {
	        cachedSetTimeout = defaultSetTimout;
	    }
	    try {
	        if (typeof clearTimeout === 'function') {
	            cachedClearTimeout = clearTimeout;
	        } else {
	            cachedClearTimeout = defaultClearTimeout;
	        }
	    } catch (e) {
	        cachedClearTimeout = defaultClearTimeout;
	    }
	} ())
	function runTimeout(fun) {
	    if (cachedSetTimeout === setTimeout) {
	        //normal enviroments in sane situations
	        return setTimeout(fun, 0);
	    }
	    // if setTimeout wasn't available but was latter defined
	    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
	        cachedSetTimeout = setTimeout;
	        return setTimeout(fun, 0);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedSetTimeout(fun, 0);
	    } catch(e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
	            return cachedSetTimeout.call(null, fun, 0);
	        } catch(e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
	            return cachedSetTimeout.call(this, fun, 0);
	        }
	    }


	}
	function runClearTimeout(marker) {
	    if (cachedClearTimeout === clearTimeout) {
	        //normal enviroments in sane situations
	        return clearTimeout(marker);
	    }
	    // if clearTimeout wasn't available but was latter defined
	    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
	        cachedClearTimeout = clearTimeout;
	        return clearTimeout(marker);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedClearTimeout(marker);
	    } catch (e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
	            return cachedClearTimeout.call(null, marker);
	        } catch (e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
	            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
	            return cachedClearTimeout.call(this, marker);
	        }
	    }



	}
	var queue = [];
	var draining = false;
	var currentQueue;
	var queueIndex = -1;

	function cleanUpNextTick() {
	    if (!draining || !currentQueue) {
	        return;
	    }
	    draining = false;
	    if (currentQueue.length) {
	        queue = currentQueue.concat(queue);
	    } else {
	        queueIndex = -1;
	    }
	    if (queue.length) {
	        drainQueue();
	    }
	}

	function drainQueue() {
	    if (draining) {
	        return;
	    }
	    var timeout = runTimeout(cleanUpNextTick);
	    draining = true;

	    var len = queue.length;
	    while(len) {
	        currentQueue = queue;
	        queue = [];
	        while (++queueIndex < len) {
	            if (currentQueue) {
	                currentQueue[queueIndex].run();
	            }
	        }
	        queueIndex = -1;
	        len = queue.length;
	    }
	    currentQueue = null;
	    draining = false;
	    runClearTimeout(timeout);
	}

	process.nextTick = function (fun) {
	    var args = new Array(arguments.length - 1);
	    if (arguments.length > 1) {
	        for (var i = 1; i < arguments.length; i++) {
	            args[i - 1] = arguments[i];
	        }
	    }
	    queue.push(new Item(fun, args));
	    if (queue.length === 1 && !draining) {
	        runTimeout(drainQueue);
	    }
	};

	// v8 likes predictible objects
	function Item(fun, array) {
	    this.fun = fun;
	    this.array = array;
	}
	Item.prototype.run = function () {
	    this.fun.apply(null, this.array);
	};
	process.title = 'browser';
	process.browser = true;
	process.env = {};
	process.argv = [];
	process.version = ''; // empty string to avoid regexp issues
	process.versions = {};

	function noop() {}

	process.on = noop;
	process.addListener = noop;
	process.once = noop;
	process.off = noop;
	process.removeListener = noop;
	process.removeAllListeners = noop;
	process.emit = noop;

	process.binding = function (name) {
	    throw new Error('process.binding is not supported');
	};

	process.cwd = function () { return '/' };
	process.chdir = function (dir) {
	    throw new Error('process.chdir is not supported');
	};
	process.umask = function() { return 0; };


/***/ },
/* 86 */
/***/ function(module, exports, __webpack_require__) {

	var _curry1 = __webpack_require__(19);


	/**
	 * Returns a function that always returns the given value. Note that for
	 * non-primitives the value returned is a reference to the original value.
	 *
	 * This function is known as `const`, `constant`, or `K` (for K combinator) in
	 * other languages and libraries.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.1.0
	 * @category Function
	 * @sig a -> (* -> a)
	 * @param {*} val The value to wrap in a function
	 * @return {Function} A Function :: * -> val.
	 * @example
	 *
	 *      var t = R.always('Tee');
	 *      t(); //=> 'Tee'
	 */
	module.exports = _curry1(function always(val) {
	  return function() {
	    return val;
	  };
	});


/***/ },
/* 87 */
/***/ function(module, exports, __webpack_require__) {

	var _curry2 = __webpack_require__(13);
	var _equals = __webpack_require__(321);


	/**
	 * Returns `true` if its arguments are equivalent, `false` otherwise. Handles
	 * cyclical data structures.
	 *
	 * Dispatches symmetrically to the `equals` methods of both arguments, if
	 * present.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.15.0
	 * @category Relation
	 * @sig a -> b -> Boolean
	 * @param {*} a
	 * @param {*} b
	 * @return {Boolean}
	 * @example
	 *
	 *      R.equals(1, 1); //=> true
	 *      R.equals(1, '1'); //=> false
	 *      R.equals([1, 2, 3], [1, 2, 3]); //=> true
	 *
	 *      var a = {}; a.v = a;
	 *      var b = {}; b.v = b;
	 *      R.equals(a, b); //=> true
	 */
	module.exports = _curry2(function equals(a, b) {
	  return _equals(a, b, [], []);
	});


/***/ },
/* 88 */
/***/ function(module, exports) {

	/**
	 * Tests whether or not an object is an array.
	 *
	 * @private
	 * @param {*} val The object to test.
	 * @return {Boolean} `true` if `val` is an array, `false` otherwise.
	 * @example
	 *
	 *      _isArray([]); //=> true
	 *      _isArray(null); //=> false
	 *      _isArray({}); //=> false
	 */
	module.exports = Array.isArray || function _isArray(val) {
	  return (val != null &&
	          val.length >= 0 &&
	          Object.prototype.toString.call(val) === '[object Array]');
	};


/***/ },
/* 89 */
/***/ function(module, exports) {

	module.exports = function _isString(x) {
	  return Object.prototype.toString.call(x) === '[object String]';
	};


/***/ },
/* 90 */
/***/ function(module, exports, __webpack_require__) {

	var _curry2 = __webpack_require__(13);
	var _dispatchable = __webpack_require__(154);
	var _map = __webpack_require__(326);
	var _reduce = __webpack_require__(155);
	var _xmap = __webpack_require__(331);
	var curryN = __webpack_require__(48);
	var keys = __webpack_require__(159);


	/**
	 * Takes a function and
	 * a [functor](https://github.com/fantasyland/fantasy-land#functor),
	 * applies the function to each of the functor's values, and returns
	 * a functor of the same shape.
	 *
	 * Ramda provides suitable `map` implementations for `Array` and `Object`,
	 * so this function may be applied to `[1, 2, 3]` or `{x: 1, y: 2, z: 3}`.
	 *
	 * Dispatches to the `map` method of the second argument, if present.
	 *
	 * Acts as a transducer if a transformer is given in list position.
	 *
	 * Also treats functions as functors and will compose them together.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.1.0
	 * @category List
	 * @sig Functor f => (a -> b) -> f a -> f b
	 * @param {Function} fn The function to be called on every element of the input `list`.
	 * @param {Array} list The list to be iterated over.
	 * @return {Array} The new list.
	 * @see R.transduce, R.addIndex
	 * @example
	 *
	 *      var double = x => x * 2;
	 *
	 *      R.map(double, [1, 2, 3]); //=> [2, 4, 6]
	 *
	 *      R.map(double, {x: 1, y: 2, z: 3}); //=> {x: 2, y: 4, z: 6}
	 */
	module.exports = _curry2(_dispatchable('map', _xmap, function map(fn, functor) {
	  switch (Object.prototype.toString.call(functor)) {
	    case '[object Function]':
	      return curryN(functor.length, function() {
	        return fn.call(this, functor.apply(this, arguments));
	      });
	    case '[object Object]':
	      return _reduce(function(acc, key) {
	        acc[key] = fn(functor[key]);
	        return acc;
	      }, {}, keys(functor));
	    default:
	      return _map(fn, functor);
	  }
	}));


/***/ },
/* 91 */
/***/ function(module, exports, __webpack_require__) {

	var _curry2 = __webpack_require__(13);


	/**
	 * Returns a function that when supplied an object returns the indicated
	 * property of that object, if it exists.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.1.0
	 * @category Object
	 * @sig s -> {s: a} -> a | Undefined
	 * @param {String} p The property name
	 * @param {Object} obj The object to query
	 * @return {*} The value at `obj.p`.
	 * @see R.path
	 * @example
	 *
	 *      R.prop('x', {x: 100}); //=> 100
	 *      R.prop('x', {}); //=> undefined
	 */
	module.exports = _curry2(function prop(p, obj) { return obj[p]; });


/***/ },
/* 92 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var DOMLazyTree = __webpack_require__(36);
	var Danger = __webpack_require__(356);
	var ReactDOMComponentTree = __webpack_require__(11);
	var ReactInstrumentation = __webpack_require__(20);

	var createMicrosoftUnsafeLocalFunction = __webpack_require__(101);
	var setInnerHTML = __webpack_require__(70);
	var setTextContent = __webpack_require__(180);

	function getNodeAfter(parentNode, node) {
	  // Special case for text components, which return [open, close] comments
	  // from getHostNode.
	  if (Array.isArray(node)) {
	    node = node[1];
	  }
	  return node ? node.nextSibling : parentNode.firstChild;
	}

	/**
	 * Inserts `childNode` as a child of `parentNode` at the `index`.
	 *
	 * @param {DOMElement} parentNode Parent node in which to insert.
	 * @param {DOMElement} childNode Child node to insert.
	 * @param {number} index Index at which to insert the child.
	 * @internal
	 */
	var insertChildAt = createMicrosoftUnsafeLocalFunction(function (parentNode, childNode, referenceNode) {
	  // We rely exclusively on `insertBefore(node, null)` instead of also using
	  // `appendChild(node)`. (Using `undefined` is not allowed by all browsers so
	  // we are careful to use `null`.)
	  parentNode.insertBefore(childNode, referenceNode);
	});

	function insertLazyTreeChildAt(parentNode, childTree, referenceNode) {
	  DOMLazyTree.insertTreeBefore(parentNode, childTree, referenceNode);
	}

	function moveChild(parentNode, childNode, referenceNode) {
	  if (Array.isArray(childNode)) {
	    moveDelimitedText(parentNode, childNode[0], childNode[1], referenceNode);
	  } else {
	    insertChildAt(parentNode, childNode, referenceNode);
	  }
	}

	function removeChild(parentNode, childNode) {
	  if (Array.isArray(childNode)) {
	    var closingComment = childNode[1];
	    childNode = childNode[0];
	    removeDelimitedText(parentNode, childNode, closingComment);
	    parentNode.removeChild(closingComment);
	  }
	  parentNode.removeChild(childNode);
	}

	function moveDelimitedText(parentNode, openingComment, closingComment, referenceNode) {
	  var node = openingComment;
	  while (true) {
	    var nextNode = node.nextSibling;
	    insertChildAt(parentNode, node, referenceNode);
	    if (node === closingComment) {
	      break;
	    }
	    node = nextNode;
	  }
	}

	function removeDelimitedText(parentNode, startNode, closingComment) {
	  while (true) {
	    var node = startNode.nextSibling;
	    if (node === closingComment) {
	      // The closing comment is removed by ReactMultiChild.
	      break;
	    } else {
	      parentNode.removeChild(node);
	    }
	  }
	}

	function replaceDelimitedText(openingComment, closingComment, stringText) {
	  var parentNode = openingComment.parentNode;
	  var nodeAfterComment = openingComment.nextSibling;
	  if (nodeAfterComment === closingComment) {
	    // There are no text nodes between the opening and closing comments; insert
	    // a new one if stringText isn't empty.
	    if (stringText) {
	      insertChildAt(parentNode, document.createTextNode(stringText), nodeAfterComment);
	    }
	  } else {
	    if (stringText) {
	      // Set the text content of the first node after the opening comment, and
	      // remove all following nodes up until the closing comment.
	      setTextContent(nodeAfterComment, stringText);
	      removeDelimitedText(parentNode, nodeAfterComment, closingComment);
	    } else {
	      removeDelimitedText(parentNode, openingComment, closingComment);
	    }
	  }

	  if (false) {
	    ReactInstrumentation.debugTool.onHostOperation({
	      instanceID: ReactDOMComponentTree.getInstanceFromNode(openingComment)._debugID,
	      type: 'replace text',
	      payload: stringText
	    });
	  }
	}

	var dangerouslyReplaceNodeWithMarkup = Danger.dangerouslyReplaceNodeWithMarkup;
	if (false) {
	  dangerouslyReplaceNodeWithMarkup = function (oldChild, markup, prevInstance) {
	    Danger.dangerouslyReplaceNodeWithMarkup(oldChild, markup);
	    if (prevInstance._debugID !== 0) {
	      ReactInstrumentation.debugTool.onHostOperation({
	        instanceID: prevInstance._debugID,
	        type: 'replace with',
	        payload: markup.toString()
	      });
	    } else {
	      var nextInstance = ReactDOMComponentTree.getInstanceFromNode(markup.node);
	      if (nextInstance._debugID !== 0) {
	        ReactInstrumentation.debugTool.onHostOperation({
	          instanceID: nextInstance._debugID,
	          type: 'mount',
	          payload: markup.toString()
	        });
	      }
	    }
	  };
	}

	/**
	 * Operations for updating with DOM children.
	 */
	var DOMChildrenOperations = {

	  dangerouslyReplaceNodeWithMarkup: dangerouslyReplaceNodeWithMarkup,

	  replaceDelimitedText: replaceDelimitedText,

	  /**
	   * Updates a component's children by processing a series of updates. The
	   * update configurations are each expected to have a `parentNode` property.
	   *
	   * @param {array<object>} updates List of update configurations.
	   * @internal
	   */
	  processUpdates: function (parentNode, updates) {
	    if (false) {
	      var parentNodeDebugID = ReactDOMComponentTree.getInstanceFromNode(parentNode)._debugID;
	    }

	    for (var k = 0; k < updates.length; k++) {
	      var update = updates[k];
	      switch (update.type) {
	        case 'INSERT_MARKUP':
	          insertLazyTreeChildAt(parentNode, update.content, getNodeAfter(parentNode, update.afterNode));
	          if (false) {
	            ReactInstrumentation.debugTool.onHostOperation({
	              instanceID: parentNodeDebugID,
	              type: 'insert child',
	              payload: { toIndex: update.toIndex, content: update.content.toString() }
	            });
	          }
	          break;
	        case 'MOVE_EXISTING':
	          moveChild(parentNode, update.fromNode, getNodeAfter(parentNode, update.afterNode));
	          if (false) {
	            ReactInstrumentation.debugTool.onHostOperation({
	              instanceID: parentNodeDebugID,
	              type: 'move child',
	              payload: { fromIndex: update.fromIndex, toIndex: update.toIndex }
	            });
	          }
	          break;
	        case 'SET_MARKUP':
	          setInnerHTML(parentNode, update.content);
	          if (false) {
	            ReactInstrumentation.debugTool.onHostOperation({
	              instanceID: parentNodeDebugID,
	              type: 'replace children',
	              payload: update.content.toString()
	            });
	          }
	          break;
	        case 'TEXT_CONTENT':
	          setTextContent(parentNode, update.content);
	          if (false) {
	            ReactInstrumentation.debugTool.onHostOperation({
	              instanceID: parentNodeDebugID,
	              type: 'replace text',
	              payload: update.content.toString()
	            });
	          }
	          break;
	        case 'REMOVE_NODE':
	          removeChild(parentNode, update.fromNode);
	          if (false) {
	            ReactInstrumentation.debugTool.onHostOperation({
	              instanceID: parentNodeDebugID,
	              type: 'remove child',
	              payload: { fromIndex: update.fromIndex }
	            });
	          }
	          break;
	      }
	    }
	  }

	};

	module.exports = DOMChildrenOperations;

/***/ },
/* 93 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var DOMNamespaces = {
	  html: 'http://www.w3.org/1999/xhtml',
	  mathml: 'http://www.w3.org/1998/Math/MathML',
	  svg: 'http://www.w3.org/2000/svg'
	};

	module.exports = DOMNamespaces;

/***/ },
/* 94 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(5);

	var invariant = __webpack_require__(3);

	/**
	 * Injectable ordering of event plugins.
	 */
	var eventPluginOrder = null;

	/**
	 * Injectable mapping from names to event plugin modules.
	 */
	var namesToPlugins = {};

	/**
	 * Recomputes the plugin list using the injected plugins and plugin ordering.
	 *
	 * @private
	 */
	function recomputePluginOrdering() {
	  if (!eventPluginOrder) {
	    // Wait until an `eventPluginOrder` is injected.
	    return;
	  }
	  for (var pluginName in namesToPlugins) {
	    var pluginModule = namesToPlugins[pluginName];
	    var pluginIndex = eventPluginOrder.indexOf(pluginName);
	    !(pluginIndex > -1) ?  false ? invariant(false, 'EventPluginRegistry: Cannot inject event plugins that do not exist in the plugin ordering, `%s`.', pluginName) : _prodInvariant('96', pluginName) : void 0;
	    if (EventPluginRegistry.plugins[pluginIndex]) {
	      continue;
	    }
	    !pluginModule.extractEvents ?  false ? invariant(false, 'EventPluginRegistry: Event plugins must implement an `extractEvents` method, but `%s` does not.', pluginName) : _prodInvariant('97', pluginName) : void 0;
	    EventPluginRegistry.plugins[pluginIndex] = pluginModule;
	    var publishedEvents = pluginModule.eventTypes;
	    for (var eventName in publishedEvents) {
	      !publishEventForPlugin(publishedEvents[eventName], pluginModule, eventName) ?  false ? invariant(false, 'EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.', eventName, pluginName) : _prodInvariant('98', eventName, pluginName) : void 0;
	    }
	  }
	}

	/**
	 * Publishes an event so that it can be dispatched by the supplied plugin.
	 *
	 * @param {object} dispatchConfig Dispatch configuration for the event.
	 * @param {object} PluginModule Plugin publishing the event.
	 * @return {boolean} True if the event was successfully published.
	 * @private
	 */
	function publishEventForPlugin(dispatchConfig, pluginModule, eventName) {
	  !!EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName) ?  false ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same event name, `%s`.', eventName) : _prodInvariant('99', eventName) : void 0;
	  EventPluginRegistry.eventNameDispatchConfigs[eventName] = dispatchConfig;

	  var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;
	  if (phasedRegistrationNames) {
	    for (var phaseName in phasedRegistrationNames) {
	      if (phasedRegistrationNames.hasOwnProperty(phaseName)) {
	        var phasedRegistrationName = phasedRegistrationNames[phaseName];
	        publishRegistrationName(phasedRegistrationName, pluginModule, eventName);
	      }
	    }
	    return true;
	  } else if (dispatchConfig.registrationName) {
	    publishRegistrationName(dispatchConfig.registrationName, pluginModule, eventName);
	    return true;
	  }
	  return false;
	}

	/**
	 * Publishes a registration name that is used to identify dispatched events and
	 * can be used with `EventPluginHub.putListener` to register listeners.
	 *
	 * @param {string} registrationName Registration name to add.
	 * @param {object} PluginModule Plugin publishing the event.
	 * @private
	 */
	function publishRegistrationName(registrationName, pluginModule, eventName) {
	  !!EventPluginRegistry.registrationNameModules[registrationName] ?  false ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same registration name, `%s`.', registrationName) : _prodInvariant('100', registrationName) : void 0;
	  EventPluginRegistry.registrationNameModules[registrationName] = pluginModule;
	  EventPluginRegistry.registrationNameDependencies[registrationName] = pluginModule.eventTypes[eventName].dependencies;

	  if (false) {
	    var lowerCasedName = registrationName.toLowerCase();
	    EventPluginRegistry.possibleRegistrationNames[lowerCasedName] = registrationName;

	    if (registrationName === 'onDoubleClick') {
	      EventPluginRegistry.possibleRegistrationNames.ondblclick = registrationName;
	    }
	  }
	}

	/**
	 * Registers plugins so that they can extract and dispatch events.
	 *
	 * @see {EventPluginHub}
	 */
	var EventPluginRegistry = {

	  /**
	   * Ordered list of injected plugins.
	   */
	  plugins: [],

	  /**
	   * Mapping from event name to dispatch config
	   */
	  eventNameDispatchConfigs: {},

	  /**
	   * Mapping from registration name to plugin module
	   */
	  registrationNameModules: {},

	  /**
	   * Mapping from registration name to event name
	   */
	  registrationNameDependencies: {},

	  /**
	   * Mapping from lowercase registration names to the properly cased version,
	   * used to warn in the case of missing event handlers. Available
	   * only in __DEV__.
	   * @type {Object}
	   */
	  possibleRegistrationNames:  false ? {} : null,
	  // Trust the developer to only use possibleRegistrationNames in __DEV__

	  /**
	   * Injects an ordering of plugins (by plugin name). This allows the ordering
	   * to be decoupled from injection of the actual plugins so that ordering is
	   * always deterministic regardless of packaging, on-the-fly injection, etc.
	   *
	   * @param {array} InjectedEventPluginOrder
	   * @internal
	   * @see {EventPluginHub.injection.injectEventPluginOrder}
	   */
	  injectEventPluginOrder: function (injectedEventPluginOrder) {
	    !!eventPluginOrder ?  false ? invariant(false, 'EventPluginRegistry: Cannot inject event plugin ordering more than once. You are likely trying to load more than one copy of React.') : _prodInvariant('101') : void 0;
	    // Clone the ordering so it cannot be dynamically mutated.
	    eventPluginOrder = Array.prototype.slice.call(injectedEventPluginOrder);
	    recomputePluginOrdering();
	  },

	  /**
	   * Injects plugins to be used by `EventPluginHub`. The plugin names must be
	   * in the ordering injected by `injectEventPluginOrder`.
	   *
	   * Plugins can be injected as part of page initialization or on-the-fly.
	   *
	   * @param {object} injectedNamesToPlugins Map from names to plugin modules.
	   * @internal
	   * @see {EventPluginHub.injection.injectEventPluginsByName}
	   */
	  injectEventPluginsByName: function (injectedNamesToPlugins) {
	    var isOrderingDirty = false;
	    for (var pluginName in injectedNamesToPlugins) {
	      if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {
	        continue;
	      }
	      var pluginModule = injectedNamesToPlugins[pluginName];
	      if (!namesToPlugins.hasOwnProperty(pluginName) || namesToPlugins[pluginName] !== pluginModule) {
	        !!namesToPlugins[pluginName] ?  false ? invariant(false, 'EventPluginRegistry: Cannot inject two different event plugins using the same name, `%s`.', pluginName) : _prodInvariant('102', pluginName) : void 0;
	        namesToPlugins[pluginName] = pluginModule;
	        isOrderingDirty = true;
	      }
	    }
	    if (isOrderingDirty) {
	      recomputePluginOrdering();
	    }
	  },

	  /**
	   * Looks up the plugin for the supplied event.
	   *
	   * @param {object} event A synthetic event.
	   * @return {?object} The plugin that created the supplied event.
	   * @internal
	   */
	  getPluginModuleForEvent: function (event) {
	    var dispatchConfig = event.dispatchConfig;
	    if (dispatchConfig.registrationName) {
	      return EventPluginRegistry.registrationNameModules[dispatchConfig.registrationName] || null;
	    }
	    if (dispatchConfig.phasedRegistrationNames !== undefined) {
	      // pulling phasedRegistrationNames out of dispatchConfig helps Flow see
	      // that it is not undefined.
	      var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;

	      for (var phase in phasedRegistrationNames) {
	        if (!phasedRegistrationNames.hasOwnProperty(phase)) {
	          continue;
	        }
	        var pluginModule = EventPluginRegistry.registrationNameModules[phasedRegistrationNames[phase]];
	        if (pluginModule) {
	          return pluginModule;
	        }
	      }
	    }
	    return null;
	  },

	  /**
	   * Exposed for unit testing.
	   * @private
	   */
	  _resetEventPlugins: function () {
	    eventPluginOrder = null;
	    for (var pluginName in namesToPlugins) {
	      if (namesToPlugins.hasOwnProperty(pluginName)) {
	        delete namesToPlugins[pluginName];
	      }
	    }
	    EventPluginRegistry.plugins.length = 0;

	    var eventNameDispatchConfigs = EventPluginRegistry.eventNameDispatchConfigs;
	    for (var eventName in eventNameDispatchConfigs) {
	      if (eventNameDispatchConfigs.hasOwnProperty(eventName)) {
	        delete eventNameDispatchConfigs[eventName];
	      }
	    }

	    var registrationNameModules = EventPluginRegistry.registrationNameModules;
	    for (var registrationName in registrationNameModules) {
	      if (registrationNameModules.hasOwnProperty(registrationName)) {
	        delete registrationNameModules[registrationName];
	      }
	    }

	    if (false) {
	      var possibleRegistrationNames = EventPluginRegistry.possibleRegistrationNames;
	      for (var lowerCasedName in possibleRegistrationNames) {
	        if (possibleRegistrationNames.hasOwnProperty(lowerCasedName)) {
	          delete possibleRegistrationNames[lowerCasedName];
	        }
	      }
	    }
	  }

	};

	module.exports = EventPluginRegistry;

/***/ },
/* 95 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(5);

	var ReactErrorUtils = __webpack_require__(99);

	var invariant = __webpack_require__(3);
	var warning = __webpack_require__(4);

	/**
	 * Injected dependencies:
	 */

	/**
	 * - `ComponentTree`: [required] Module that can convert between React instances
	 *   and actual node references.
	 */
	var ComponentTree;
	var TreeTraversal;
	var injection = {
	  injectComponentTree: function (Injected) {
	    ComponentTree = Injected;
	    if (false) {
	      process.env.NODE_ENV !== 'production' ? warning(Injected && Injected.getNodeFromInstance && Injected.getInstanceFromNode, 'EventPluginUtils.injection.injectComponentTree(...): Injected ' + 'module is missing getNodeFromInstance or getInstanceFromNode.') : void 0;
	    }
	  },
	  injectTreeTraversal: function (Injected) {
	    TreeTraversal = Injected;
	    if (false) {
	      process.env.NODE_ENV !== 'production' ? warning(Injected && Injected.isAncestor && Injected.getLowestCommonAncestor, 'EventPluginUtils.injection.injectTreeTraversal(...): Injected ' + 'module is missing isAncestor or getLowestCommonAncestor.') : void 0;
	    }
	  }
	};

	function isEndish(topLevelType) {
	  return topLevelType === 'topMouseUp' || topLevelType === 'topTouchEnd' || topLevelType === 'topTouchCancel';
	}

	function isMoveish(topLevelType) {
	  return topLevelType === 'topMouseMove' || topLevelType === 'topTouchMove';
	}
	function isStartish(topLevelType) {
	  return topLevelType === 'topMouseDown' || topLevelType === 'topTouchStart';
	}

	var validateEventDispatches;
	if (false) {
	  validateEventDispatches = function (event) {
	    var dispatchListeners = event._dispatchListeners;
	    var dispatchInstances = event._dispatchInstances;

	    var listenersIsArr = Array.isArray(dispatchListeners);
	    var listenersLen = listenersIsArr ? dispatchListeners.length : dispatchListeners ? 1 : 0;

	    var instancesIsArr = Array.isArray(dispatchInstances);
	    var instancesLen = instancesIsArr ? dispatchInstances.length : dispatchInstances ? 1 : 0;

	    process.env.NODE_ENV !== 'production' ? warning(instancesIsArr === listenersIsArr && instancesLen === listenersLen, 'EventPluginUtils: Invalid `event`.') : void 0;
	  };
	}

	/**
	 * Dispatch the event to the listener.
	 * @param {SyntheticEvent} event SyntheticEvent to handle
	 * @param {boolean} simulated If the event is simulated (changes exn behavior)
	 * @param {function} listener Application-level callback
	 * @param {*} inst Internal component instance
	 */
	function executeDispatch(event, simulated, listener, inst) {
	  var type = event.type || 'unknown-event';
	  event.currentTarget = EventPluginUtils.getNodeFromInstance(inst);
	  if (simulated) {
	    ReactErrorUtils.invokeGuardedCallbackWithCatch(type, listener, event);
	  } else {
	    ReactErrorUtils.invokeGuardedCallback(type, listener, event);
	  }
	  event.currentTarget = null;
	}

	/**
	 * Standard/simple iteration through an event's collected dispatches.
	 */
	function executeDispatchesInOrder(event, simulated) {
	  var dispatchListeners = event._dispatchListeners;
	  var dispatchInstances = event._dispatchInstances;
	  if (false) {
	    validateEventDispatches(event);
	  }
	  if (Array.isArray(dispatchListeners)) {
	    for (var i = 0; i < dispatchListeners.length; i++) {
	      if (event.isPropagationStopped()) {
	        break;
	      }
	      // Listeners and Instances are two parallel arrays that are always in sync.
	      executeDispatch(event, simulated, dispatchListeners[i], dispatchInstances[i]);
	    }
	  } else if (dispatchListeners) {
	    executeDispatch(event, simulated, dispatchListeners, dispatchInstances);
	  }
	  event._dispatchListeners = null;
	  event._dispatchInstances = null;
	}

	/**
	 * Standard/simple iteration through an event's collected dispatches, but stops
	 * at the first dispatch execution returning true, and returns that id.
	 *
	 * @return {?string} id of the first dispatch execution who's listener returns
	 * true, or null if no listener returned true.
	 */
	function executeDispatchesInOrderStopAtTrueImpl(event) {
	  var dispatchListeners = event._dispatchListeners;
	  var dispatchInstances = event._dispatchInstances;
	  if (false) {
	    validateEventDispatches(event);
	  }
	  if (Array.isArray(dispatchListeners)) {
	    for (var i = 0; i < dispatchListeners.length; i++) {
	      if (event.isPropagationStopped()) {
	        break;
	      }
	      // Listeners and Instances are two parallel arrays that are always in sync.
	      if (dispatchListeners[i](event, dispatchInstances[i])) {
	        return dispatchInstances[i];
	      }
	    }
	  } else if (dispatchListeners) {
	    if (dispatchListeners(event, dispatchInstances)) {
	      return dispatchInstances;
	    }
	  }
	  return null;
	}

	/**
	 * @see executeDispatchesInOrderStopAtTrueImpl
	 */
	function executeDispatchesInOrderStopAtTrue(event) {
	  var ret = executeDispatchesInOrderStopAtTrueImpl(event);
	  event._dispatchInstances = null;
	  event._dispatchListeners = null;
	  return ret;
	}

	/**
	 * Execution of a "direct" dispatch - there must be at most one dispatch
	 * accumulated on the event or it is considered an error. It doesn't really make
	 * sense for an event with multiple dispatches (bubbled) to keep track of the
	 * return values at each dispatch execution, but it does tend to make sense when
	 * dealing with "direct" dispatches.
	 *
	 * @return {*} The return value of executing the single dispatch.
	 */
	function executeDirectDispatch(event) {
	  if (false) {
	    validateEventDispatches(event);
	  }
	  var dispatchListener = event._dispatchListeners;
	  var dispatchInstance = event._dispatchInstances;
	  !!Array.isArray(dispatchListener) ?  false ? invariant(false, 'executeDirectDispatch(...): Invalid `event`.') : _prodInvariant('103') : void 0;
	  event.currentTarget = dispatchListener ? EventPluginUtils.getNodeFromInstance(dispatchInstance) : null;
	  var res = dispatchListener ? dispatchListener(event) : null;
	  event.currentTarget = null;
	  event._dispatchListeners = null;
	  event._dispatchInstances = null;
	  return res;
	}

	/**
	 * @param {SyntheticEvent} event
	 * @return {boolean} True iff number of dispatches accumulated is greater than 0.
	 */
	function hasDispatches(event) {
	  return !!event._dispatchListeners;
	}

	/**
	 * General utilities that are useful in creating custom Event Plugins.
	 */
	var EventPluginUtils = {
	  isEndish: isEndish,
	  isMoveish: isMoveish,
	  isStartish: isStartish,

	  executeDirectDispatch: executeDirectDispatch,
	  executeDispatchesInOrder: executeDispatchesInOrder,
	  executeDispatchesInOrderStopAtTrue: executeDispatchesInOrderStopAtTrue,
	  hasDispatches: hasDispatches,

	  getInstanceFromNode: function (node) {
	    return ComponentTree.getInstanceFromNode(node);
	  },
	  getNodeFromInstance: function (node) {
	    return ComponentTree.getNodeFromInstance(node);
	  },
	  isAncestor: function (a, b) {
	    return TreeTraversal.isAncestor(a, b);
	  },
	  getLowestCommonAncestor: function (a, b) {
	    return TreeTraversal.getLowestCommonAncestor(a, b);
	  },
	  getParentInstance: function (inst) {
	    return TreeTraversal.getParentInstance(inst);
	  },
	  traverseTwoPhase: function (target, fn, arg) {
	    return TreeTraversal.traverseTwoPhase(target, fn, arg);
	  },
	  traverseEnterLeave: function (from, to, fn, argFrom, argTo) {
	    return TreeTraversal.traverseEnterLeave(from, to, fn, argFrom, argTo);
	  },

	  injection: injection
	};

	module.exports = EventPluginUtils;

/***/ },
/* 96 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	/**
	 * Escape and wrap key so it is safe to use as a reactid
	 *
	 * @param {string} key to be escaped.
	 * @return {string} the escaped key.
	 */

	function escape(key) {
	  var escapeRegex = /[=:]/g;
	  var escaperLookup = {
	    '=': '=0',
	    ':': '=2'
	  };
	  var escapedString = ('' + key).replace(escapeRegex, function (match) {
	    return escaperLookup[match];
	  });

	  return '$' + escapedString;
	}

	/**
	 * Unescape and unwrap key for human-readable display
	 *
	 * @param {string} key to unescape.
	 * @return {string} the unescaped key.
	 */
	function unescape(key) {
	  var unescapeRegex = /(=0|=2)/g;
	  var unescaperLookup = {
	    '=0': '=',
	    '=2': ':'
	  };
	  var keySubstring = key[0] === '.' && key[1] === '$' ? key.substring(2) : key.substring(1);

	  return ('' + keySubstring).replace(unescapeRegex, function (match) {
	    return unescaperLookup[match];
	  });
	}

	var KeyEscapeUtils = {
	  escape: escape,
	  unescape: unescape
	};

	module.exports = KeyEscapeUtils;

/***/ },
/* 97 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(5);

	var ReactPropTypesSecret = __webpack_require__(385);
	var propTypesFactory = __webpack_require__(150);

	var React = __webpack_require__(39);
	var PropTypes = propTypesFactory(React.isValidElement);

	var invariant = __webpack_require__(3);
	var warning = __webpack_require__(4);

	var hasReadOnlyValue = {
	  'button': true,
	  'checkbox': true,
	  'image': true,
	  'hidden': true,
	  'radio': true,
	  'reset': true,
	  'submit': true
	};

	function _assertSingleLink(inputProps) {
	  !(inputProps.checkedLink == null || inputProps.valueLink == null) ?  false ? invariant(false, 'Cannot provide a checkedLink and a valueLink. If you want to use checkedLink, you probably don\'t want to use valueLink and vice versa.') : _prodInvariant('87') : void 0;
	}
	function _assertValueLink(inputProps) {
	  _assertSingleLink(inputProps);
	  !(inputProps.value == null && inputProps.onChange == null) ?  false ? invariant(false, 'Cannot provide a valueLink and a value or onChange event. If you want to use value or onChange, you probably don\'t want to use valueLink.') : _prodInvariant('88') : void 0;
	}

	function _assertCheckedLink(inputProps) {
	  _assertSingleLink(inputProps);
	  !(inputProps.checked == null && inputProps.onChange == null) ?  false ? invariant(false, 'Cannot provide a checkedLink and a checked property or onChange event. If you want to use checked or onChange, you probably don\'t want to use checkedLink') : _prodInvariant('89') : void 0;
	}

	var propTypes = {
	  value: function (props, propName, componentName) {
	    if (!props[propName] || hasReadOnlyValue[props.type] || props.onChange || props.readOnly || props.disabled) {
	      return null;
	    }
	    return new Error('You provided a `value` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultValue`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
	  },
	  checked: function (props, propName, componentName) {
	    if (!props[propName] || props.onChange || props.readOnly || props.disabled) {
	      return null;
	    }
	    return new Error('You provided a `checked` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultChecked`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
	  },
	  onChange: PropTypes.func
	};

	var loggedTypeFailures = {};
	function getDeclarationErrorAddendum(owner) {
	  if (owner) {
	    var name = owner.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}

	/**
	 * Provide a linked `value` attribute for controlled forms. You should not use
	 * this outside of the ReactDOM controlled form components.
	 */
	var LinkedValueUtils = {
	  checkPropTypes: function (tagName, props, owner) {
	    for (var propName in propTypes) {
	      if (propTypes.hasOwnProperty(propName)) {
	        var error = propTypes[propName](props, propName, tagName, 'prop', null, ReactPropTypesSecret);
	      }
	      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
	        // Only monitor this failure once because there tends to be a lot of the
	        // same error.
	        loggedTypeFailures[error.message] = true;

	        var addendum = getDeclarationErrorAddendum(owner);
	         false ? warning(false, 'Failed form propType: %s%s', error.message, addendum) : void 0;
	      }
	    }
	  },

	  /**
	   * @param {object} inputProps Props for form component
	   * @return {*} current value of the input either from value prop or link.
	   */
	  getValue: function (inputProps) {
	    if (inputProps.valueLink) {
	      _assertValueLink(inputProps);
	      return inputProps.valueLink.value;
	    }
	    return inputProps.value;
	  },

	  /**
	   * @param {object} inputProps Props for form component
	   * @return {*} current checked status of the input either from checked prop
	   *             or link.
	   */
	  getChecked: function (inputProps) {
	    if (inputProps.checkedLink) {
	      _assertCheckedLink(inputProps);
	      return inputProps.checkedLink.value;
	    }
	    return inputProps.checked;
	  },

	  /**
	   * @param {object} inputProps Props for form component
	   * @param {SyntheticEvent} event change event to handle
	   */
	  executeOnChange: function (inputProps, event) {
	    if (inputProps.valueLink) {
	      _assertValueLink(inputProps);
	      return inputProps.valueLink.requestChange(event.target.value);
	    } else if (inputProps.checkedLink) {
	      _assertCheckedLink(inputProps);
	      return inputProps.checkedLink.requestChange(event.target.checked);
	    } else if (inputProps.onChange) {
	      return inputProps.onChange.call(undefined, event);
	    }
	  }
	};

	module.exports = LinkedValueUtils;

/***/ },
/* 98 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(5);

	var invariant = __webpack_require__(3);

	var injected = false;

	var ReactComponentEnvironment = {

	  /**
	   * Optionally injectable hook for swapping out mount images in the middle of
	   * the tree.
	   */
	  replaceNodeWithMarkup: null,

	  /**
	   * Optionally injectable hook for processing a queue of child updates. Will
	   * later move into MultiChildComponents.
	   */
	  processChildrenUpdates: null,

	  injection: {
	    injectEnvironment: function (environment) {
	      !!injected ?  false ? invariant(false, 'ReactCompositeComponent: injectEnvironment() can only be called once.') : _prodInvariant('104') : void 0;
	      ReactComponentEnvironment.replaceNodeWithMarkup = environment.replaceNodeWithMarkup;
	      ReactComponentEnvironment.processChildrenUpdates = environment.processChildrenUpdates;
	      injected = true;
	    }
	  }

	};

	module.exports = ReactComponentEnvironment;

/***/ },
/* 99 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var caughtError = null;

	/**
	 * Call a function while guarding against errors that happens within it.
	 *
	 * @param {String} name of the guard to use for logging or debugging
	 * @param {Function} func The function to invoke
	 * @param {*} a First argument
	 * @param {*} b Second argument
	 */
	function invokeGuardedCallback(name, func, a) {
	  try {
	    func(a);
	  } catch (x) {
	    if (caughtError === null) {
	      caughtError = x;
	    }
	  }
	}

	var ReactErrorUtils = {
	  invokeGuardedCallback: invokeGuardedCallback,

	  /**
	   * Invoked by ReactTestUtils.Simulate so that any errors thrown by the event
	   * handler are sure to be rethrown by rethrowCaughtError.
	   */
	  invokeGuardedCallbackWithCatch: invokeGuardedCallback,

	  /**
	   * During execution of guarded functions we will capture the first error which
	   * we will rethrow to be handled by the top level error handler.
	   */
	  rethrowCaughtError: function () {
	    if (caughtError) {
	      var error = caughtError;
	      caughtError = null;
	      throw error;
	    }
	  }
	};

	if (false) {
	  /**
	   * To help development we can get better devtools integration by simulating a
	   * real browser event.
	   */
	  if (typeof window !== 'undefined' && typeof window.dispatchEvent === 'function' && typeof document !== 'undefined' && typeof document.createEvent === 'function') {
	    var fakeNode = document.createElement('react');
	    ReactErrorUtils.invokeGuardedCallback = function (name, func, a) {
	      var boundFunc = func.bind(null, a);
	      var evtType = 'react-' + name;
	      fakeNode.addEventListener(evtType, boundFunc, false);
	      var evt = document.createEvent('Event');
	      evt.initEvent(evtType, false, false);
	      fakeNode.dispatchEvent(evt);
	      fakeNode.removeEventListener(evtType, boundFunc, false);
	    };
	  }
	}

	module.exports = ReactErrorUtils;

/***/ },
/* 100 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2015-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(5);

	var ReactCurrentOwner = __webpack_require__(27);
	var ReactInstanceMap = __webpack_require__(51);
	var ReactInstrumentation = __webpack_require__(20);
	var ReactUpdates = __webpack_require__(22);

	var invariant = __webpack_require__(3);
	var warning = __webpack_require__(4);

	function enqueueUpdate(internalInstance) {
	  ReactUpdates.enqueueUpdate(internalInstance);
	}

	function formatUnexpectedArgument(arg) {
	  var type = typeof arg;
	  if (type !== 'object') {
	    return type;
	  }
	  var displayName = arg.constructor && arg.constructor.name || type;
	  var keys = Object.keys(arg);
	  if (keys.length > 0 && keys.length < 20) {
	    return displayName + ' (keys: ' + keys.join(', ') + ')';
	  }
	  return displayName;
	}

	function getInternalInstanceReadyForUpdate(publicInstance, callerName) {
	  var internalInstance = ReactInstanceMap.get(publicInstance);
	  if (!internalInstance) {
	    if (false) {
	      var ctor = publicInstance.constructor;
	      // Only warn when we have a callerName. Otherwise we should be silent.
	      // We're probably calling from enqueueCallback. We don't want to warn
	      // there because we already warned for the corresponding lifecycle method.
	      process.env.NODE_ENV !== 'production' ? warning(!callerName, '%s(...): Can only update a mounted or mounting component. ' + 'This usually means you called %s() on an unmounted component. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, ctor && (ctor.displayName || ctor.name) || 'ReactClass') : void 0;
	    }
	    return null;
	  }

	  if (false) {
	    process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, '%s(...): Cannot update during an existing state transition (such as ' + 'within `render` or another component\'s constructor). Render methods ' + 'should be a pure function of props and state; constructor ' + 'side-effects are an anti-pattern, but can be moved to ' + '`componentWillMount`.', callerName) : void 0;
	  }

	  return internalInstance;
	}

	/**
	 * ReactUpdateQueue allows for state updates to be scheduled into a later
	 * reconciliation step.
	 */
	var ReactUpdateQueue = {

	  /**
	   * Checks whether or not this composite component is mounted.
	   * @param {ReactClass} publicInstance The instance we want to test.
	   * @return {boolean} True if mounted, false otherwise.
	   * @protected
	   * @final
	   */
	  isMounted: function (publicInstance) {
	    if (false) {
	      var owner = ReactCurrentOwner.current;
	      if (owner !== null) {
	        process.env.NODE_ENV !== 'production' ? warning(owner._warnedAboutRefsInRender, '%s is accessing isMounted inside its render() function. ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', owner.getName() || 'A component') : void 0;
	        owner._warnedAboutRefsInRender = true;
	      }
	    }
	    var internalInstance = ReactInstanceMap.get(publicInstance);
	    if (internalInstance) {
	      // During componentWillMount and render this will still be null but after
	      // that will always render to something. At least for now. So we can use
	      // this hack.
	      return !!internalInstance._renderedComponent;
	    } else {
	      return false;
	    }
	  },

	  /**
	   * Enqueue a callback that will be executed after all the pending updates
	   * have processed.
	   *
	   * @param {ReactClass} publicInstance The instance to use as `this` context.
	   * @param {?function} callback Called after state is updated.
	   * @param {string} callerName Name of the calling function in the public API.
	   * @internal
	   */
	  enqueueCallback: function (publicInstance, callback, callerName) {
	    ReactUpdateQueue.validateCallback(callback, callerName);
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance);

	    // Previously we would throw an error if we didn't have an internal
	    // instance. Since we want to make it a no-op instead, we mirror the same
	    // behavior we have in other enqueue* methods.
	    // We also need to ignore callbacks in componentWillMount. See
	    // enqueueUpdates.
	    if (!internalInstance) {
	      return null;
	    }

	    if (internalInstance._pendingCallbacks) {
	      internalInstance._pendingCallbacks.push(callback);
	    } else {
	      internalInstance._pendingCallbacks = [callback];
	    }
	    // TODO: The callback here is ignored when setState is called from
	    // componentWillMount. Either fix it or disallow doing so completely in
	    // favor of getInitialState. Alternatively, we can disallow
	    // componentWillMount during server-side rendering.
	    enqueueUpdate(internalInstance);
	  },

	  enqueueCallbackInternal: function (internalInstance, callback) {
	    if (internalInstance._pendingCallbacks) {
	      internalInstance._pendingCallbacks.push(callback);
	    } else {
	      internalInstance._pendingCallbacks = [callback];
	    }
	    enqueueUpdate(internalInstance);
	  },

	  /**
	   * Forces an update. This should only be invoked when it is known with
	   * certainty that we are **not** in a DOM transaction.
	   *
	   * You may want to call this when you know that some deeper aspect of the
	   * component's state has changed but `setState` was not called.
	   *
	   * This will not invoke `shouldComponentUpdate`, but it will invoke
	   * `componentWillUpdate` and `componentDidUpdate`.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @internal
	   */
	  enqueueForceUpdate: function (publicInstance) {
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'forceUpdate');

	    if (!internalInstance) {
	      return;
	    }

	    internalInstance._pendingForceUpdate = true;

	    enqueueUpdate(internalInstance);
	  },

	  /**
	   * Replaces all of the state. Always use this or `setState` to mutate state.
	   * You should treat `this.state` as immutable.
	   *
	   * There is no guarantee that `this.state` will be immediately updated, so
	   * accessing `this.state` after calling this method may return the old value.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} completeState Next state.
	   * @internal
	   */
	  enqueueReplaceState: function (publicInstance, completeState, callback) {
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'replaceState');

	    if (!internalInstance) {
	      return;
	    }

	    internalInstance._pendingStateQueue = [completeState];
	    internalInstance._pendingReplaceState = true;

	    // Future-proof 15.5
	    if (callback !== undefined && callback !== null) {
	      ReactUpdateQueue.validateCallback(callback, 'replaceState');
	      if (internalInstance._pendingCallbacks) {
	        internalInstance._pendingCallbacks.push(callback);
	      } else {
	        internalInstance._pendingCallbacks = [callback];
	      }
	    }

	    enqueueUpdate(internalInstance);
	  },

	  /**
	   * Sets a subset of the state. This only exists because _pendingState is
	   * internal. This provides a merging strategy that is not available to deep
	   * properties which is confusing. TODO: Expose pendingState or don't use it
	   * during the merge.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} partialState Next partial state to be merged with state.
	   * @internal
	   */
	  enqueueSetState: function (publicInstance, partialState) {
	    if (false) {
	      ReactInstrumentation.debugTool.onSetState();
	      process.env.NODE_ENV !== 'production' ? warning(partialState != null, 'setState(...): You passed an undefined or null state object; ' + 'instead, use forceUpdate().') : void 0;
	    }

	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'setState');

	    if (!internalInstance) {
	      return;
	    }

	    var queue = internalInstance._pendingStateQueue || (internalInstance._pendingStateQueue = []);
	    queue.push(partialState);

	    enqueueUpdate(internalInstance);
	  },

	  enqueueElementInternal: function (internalInstance, nextElement, nextContext) {
	    internalInstance._pendingElement = nextElement;
	    // TODO: introduce _pendingContext instead of setting it directly.
	    internalInstance._context = nextContext;
	    enqueueUpdate(internalInstance);
	  },

	  validateCallback: function (callback, callerName) {
	    !(!callback || typeof callback === 'function') ?  false ? invariant(false, '%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.', callerName, formatUnexpectedArgument(callback)) : _prodInvariant('122', callerName, formatUnexpectedArgument(callback)) : void 0;
	  }

	};

	module.exports = ReactUpdateQueue;

/***/ },
/* 101 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	/* globals MSApp */

	'use strict';

	/**
	 * Create a function which has 'unsafe' privileges (required by windows8 apps)
	 */

	var createMicrosoftUnsafeLocalFunction = function (func) {
	  if (typeof MSApp !== 'undefined' && MSApp.execUnsafeLocalFunction) {
	    return function (arg0, arg1, arg2, arg3) {
	      MSApp.execUnsafeLocalFunction(function () {
	        return func(arg0, arg1, arg2, arg3);
	      });
	    };
	  } else {
	    return func;
	  }
	};

	module.exports = createMicrosoftUnsafeLocalFunction;

/***/ },
/* 102 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	/**
	 * `charCode` represents the actual "character code" and is safe to use with
	 * `String.fromCharCode`. As such, only keys that correspond to printable
	 * characters produce a valid `charCode`, the only exception to this is Enter.
	 * The Tab-key is considered non-printable and does not have a `charCode`,
	 * presumably because it does not produce a tab-character in browsers.
	 *
	 * @param {object} nativeEvent Native browser event.
	 * @return {number} Normalized `charCode` property.
	 */

	function getEventCharCode(nativeEvent) {
	  var charCode;
	  var keyCode = nativeEvent.keyCode;

	  if ('charCode' in nativeEvent) {
	    charCode = nativeEvent.charCode;

	    // FF does not set `charCode` for the Enter-key, check against `keyCode`.
	    if (charCode === 0 && keyCode === 13) {
	      charCode = 13;
	    }
	  } else {
	    // IE8 does not implement `charCode`, but `keyCode` has the correct value.
	    charCode = keyCode;
	  }

	  // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.
	  // Must not discard the (non-)printable Enter-key.
	  if (charCode >= 32 || charCode === 13) {
	    return charCode;
	  }

	  return 0;
	}

	module.exports = getEventCharCode;

/***/ },
/* 103 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	/**
	 * Translation from modifier key to the associated property in the event.
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers
	 */

	var modifierKeyToProp = {
	  'Alt': 'altKey',
	  'Control': 'ctrlKey',
	  'Meta': 'metaKey',
	  'Shift': 'shiftKey'
	};

	// IE8 does not implement getModifierState so we simply map it to the only
	// modifier keys exposed by the event itself, does not support Lock-keys.
	// Currently, all major browsers except Chrome seems to support Lock-keys.
	function modifierStateGetter(keyArg) {
	  var syntheticEvent = this;
	  var nativeEvent = syntheticEvent.nativeEvent;
	  if (nativeEvent.getModifierState) {
	    return nativeEvent.getModifierState(keyArg);
	  }
	  var keyProp = modifierKeyToProp[keyArg];
	  return keyProp ? !!nativeEvent[keyProp] : false;
	}

	function getEventModifierState(nativeEvent) {
	  return modifierStateGetter;
	}

	module.exports = getEventModifierState;

/***/ },
/* 104 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	/**
	 * Gets the target node from a native browser event by accounting for
	 * inconsistencies in browser DOM APIs.
	 *
	 * @param {object} nativeEvent Native browser event.
	 * @return {DOMEventTarget} Target node.
	 */

	function getEventTarget(nativeEvent) {
	  var target = nativeEvent.target || nativeEvent.srcElement || window;

	  // Normalize SVG <use> element events #4963
	  if (target.correspondingUseElement) {
	    target = target.correspondingUseElement;
	  }

	  // Safari may fire events on text nodes (Node.TEXT_NODE is 3).
	  // @see http://www.quirksmode.org/js/events_properties.html
	  return target.nodeType === 3 ? target.parentNode : target;
	}

	module.exports = getEventTarget;

/***/ },
/* 105 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(15);

	var useHasFeature;
	if (ExecutionEnvironment.canUseDOM) {
	  useHasFeature = document.implementation && document.implementation.hasFeature &&
	  // always returns true in newer browsers as per the standard.
	  // @see http://dom.spec.whatwg.org/#dom-domimplementation-hasfeature
	  document.implementation.hasFeature('', '') !== true;
	}

	/**
	 * Checks if an event is supported in the current execution environment.
	 *
	 * NOTE: This will not work correctly for non-generic events such as `change`,
	 * `reset`, `load`, `error`, and `select`.
	 *
	 * Borrows from Modernizr.
	 *
	 * @param {string} eventNameSuffix Event name, e.g. "click".
	 * @param {?boolean} capture Check if the capture phase is supported.
	 * @return {boolean} True if the event is supported.
	 * @internal
	 * @license Modernizr 3.0.0pre (Custom Build) | MIT
	 */
	function isEventSupported(eventNameSuffix, capture) {
	  if (!ExecutionEnvironment.canUseDOM || capture && !('addEventListener' in document)) {
	    return false;
	  }

	  var eventName = 'on' + eventNameSuffix;
	  var isSupported = eventName in document;

	  if (!isSupported) {
	    var element = document.createElement('div');
	    element.setAttribute(eventName, 'return;');
	    isSupported = typeof element[eventName] === 'function';
	  }

	  if (!isSupported && useHasFeature && eventNameSuffix === 'wheel') {
	    // This is the only way to test support for the `wheel` event in IE9+.
	    isSupported = document.implementation.hasFeature('Events.wheel', '3.0');
	  }

	  return isSupported;
	}

	module.exports = isEventSupported;

/***/ },
/* 106 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	/**
	 * Given a `prevElement` and `nextElement`, determines if the existing
	 * instance should be updated as opposed to being destroyed or replaced by a new
	 * instance. Both arguments are elements. This ensures that this logic can
	 * operate on stateless trees without any backing instance.
	 *
	 * @param {?object} prevElement
	 * @param {?object} nextElement
	 * @return {boolean} True if the existing instance should be updated.
	 * @protected
	 */

	function shouldUpdateReactComponent(prevElement, nextElement) {
	  var prevEmpty = prevElement === null || prevElement === false;
	  var nextEmpty = nextElement === null || nextElement === false;
	  if (prevEmpty || nextEmpty) {
	    return prevEmpty === nextEmpty;
	  }

	  var prevType = typeof prevElement;
	  var nextType = typeof nextElement;
	  if (prevType === 'string' || prevType === 'number') {
	    return nextType === 'string' || nextType === 'number';
	  } else {
	    return nextType === 'object' && prevElement.type === nextElement.type && prevElement.key === nextElement.key;
	  }
	}

	module.exports = shouldUpdateReactComponent;

/***/ },
/* 107 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2015-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _assign = __webpack_require__(7);

	var emptyFunction = __webpack_require__(18);
	var warning = __webpack_require__(4);

	var validateDOMNesting = emptyFunction;

	if (false) {
	  // This validation code was written based on the HTML5 parsing spec:
	  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
	  //
	  // Note: this does not catch all invalid nesting, nor does it try to (as it's
	  // not clear what practical benefit doing so provides); instead, we warn only
	  // for cases where the parser will give a parse tree differing from what React
	  // intended. For example, <b><div></div></b> is invalid but we don't warn
	  // because it still parses correctly; we do warn for other cases like nested
	  // <p> tags where the beginning of the second element implicitly closes the
	  // first, causing a confusing mess.

	  // https://html.spec.whatwg.org/multipage/syntax.html#special
	  var specialTags = ['address', 'applet', 'area', 'article', 'aside', 'base', 'basefont', 'bgsound', 'blockquote', 'body', 'br', 'button', 'caption', 'center', 'col', 'colgroup', 'dd', 'details', 'dir', 'div', 'dl', 'dt', 'embed', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'frame', 'frameset', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'iframe', 'img', 'input', 'isindex', 'li', 'link', 'listing', 'main', 'marquee', 'menu', 'menuitem', 'meta', 'nav', 'noembed', 'noframes', 'noscript', 'object', 'ol', 'p', 'param', 'plaintext', 'pre', 'script', 'section', 'select', 'source', 'style', 'summary', 'table', 'tbody', 'td', 'template', 'textarea', 'tfoot', 'th', 'thead', 'title', 'tr', 'track', 'ul', 'wbr', 'xmp'];

	  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
	  var inScopeTags = ['applet', 'caption', 'html', 'table', 'td', 'th', 'marquee', 'object', 'template',

	  // https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point
	  // TODO: Distinguish by namespace here -- for <title>, including it here
	  // errs on the side of fewer warnings
	  'foreignObject', 'desc', 'title'];

	  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-button-scope
	  var buttonScopeTags = inScopeTags.concat(['button']);

	  // https://html.spec.whatwg.org/multipage/syntax.html#generate-implied-end-tags
	  var impliedEndTags = ['dd', 'dt', 'li', 'option', 'optgroup', 'p', 'rp', 'rt'];

	  var emptyAncestorInfo = {
	    current: null,

	    formTag: null,
	    aTagInScope: null,
	    buttonTagInScope: null,
	    nobrTagInScope: null,
	    pTagInButtonScope: null,

	    listItemTagAutoclosing: null,
	    dlItemTagAutoclosing: null
	  };

	  var updatedAncestorInfo = function (oldInfo, tag, instance) {
	    var ancestorInfo = _assign({}, oldInfo || emptyAncestorInfo);
	    var info = { tag: tag, instance: instance };

	    if (inScopeTags.indexOf(tag) !== -1) {
	      ancestorInfo.aTagInScope = null;
	      ancestorInfo.buttonTagInScope = null;
	      ancestorInfo.nobrTagInScope = null;
	    }
	    if (buttonScopeTags.indexOf(tag) !== -1) {
	      ancestorInfo.pTagInButtonScope = null;
	    }

	    // See rules for 'li', 'dd', 'dt' start tags in
	    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
	    if (specialTags.indexOf(tag) !== -1 && tag !== 'address' && tag !== 'div' && tag !== 'p') {
	      ancestorInfo.listItemTagAutoclosing = null;
	      ancestorInfo.dlItemTagAutoclosing = null;
	    }

	    ancestorInfo.current = info;

	    if (tag === 'form') {
	      ancestorInfo.formTag = info;
	    }
	    if (tag === 'a') {
	      ancestorInfo.aTagInScope = info;
	    }
	    if (tag === 'button') {
	      ancestorInfo.buttonTagInScope = info;
	    }
	    if (tag === 'nobr') {
	      ancestorInfo.nobrTagInScope = info;
	    }
	    if (tag === 'p') {
	      ancestorInfo.pTagInButtonScope = info;
	    }
	    if (tag === 'li') {
	      ancestorInfo.listItemTagAutoclosing = info;
	    }
	    if (tag === 'dd' || tag === 'dt') {
	      ancestorInfo.dlItemTagAutoclosing = info;
	    }

	    return ancestorInfo;
	  };

	  /**
	   * Returns whether
	   */
	  var isTagValidWithParent = function (tag, parentTag) {
	    // First, let's check if we're in an unusual parsing mode...
	    switch (parentTag) {
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inselect
	      case 'select':
	        return tag === 'option' || tag === 'optgroup' || tag === '#text';
	      case 'optgroup':
	        return tag === 'option' || tag === '#text';
	      // Strictly speaking, seeing an <option> doesn't mean we're in a <select>
	      // but
	      case 'option':
	        return tag === '#text';

	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intd
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incaption
	      // No special behavior since these rules fall back to "in body" mode for
	      // all except special table nodes which cause bad parsing behavior anyway.

	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intr
	      case 'tr':
	        return tag === 'th' || tag === 'td' || tag === 'style' || tag === 'script' || tag === 'template';

	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intbody
	      case 'tbody':
	      case 'thead':
	      case 'tfoot':
	        return tag === 'tr' || tag === 'style' || tag === 'script' || tag === 'template';

	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incolgroup
	      case 'colgroup':
	        return tag === 'col' || tag === 'template';

	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intable
	      case 'table':
	        return tag === 'caption' || tag === 'colgroup' || tag === 'tbody' || tag === 'tfoot' || tag === 'thead' || tag === 'style' || tag === 'script' || tag === 'template';

	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inhead
	      case 'head':
	        return tag === 'base' || tag === 'basefont' || tag === 'bgsound' || tag === 'link' || tag === 'meta' || tag === 'title' || tag === 'noscript' || tag === 'noframes' || tag === 'style' || tag === 'script' || tag === 'template';

	      // https://html.spec.whatwg.org/multipage/semantics.html#the-html-element
	      case 'html':
	        return tag === 'head' || tag === 'body';
	      case '#document':
	        return tag === 'html';
	    }

	    // Probably in the "in body" parsing mode, so we outlaw only tag combos
	    // where the parsing rules cause implicit opens or closes to be added.
	    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
	    switch (tag) {
	      case 'h1':
	      case 'h2':
	      case 'h3':
	      case 'h4':
	      case 'h5':
	      case 'h6':
	        return parentTag !== 'h1' && parentTag !== 'h2' && parentTag !== 'h3' && parentTag !== 'h4' && parentTag !== 'h5' && parentTag !== 'h6';

	      case 'rp':
	      case 'rt':
	        return impliedEndTags.indexOf(parentTag) === -1;

	      case 'body':
	      case 'caption':
	      case 'col':
	      case 'colgroup':
	      case 'frame':
	      case 'head':
	      case 'html':
	      case 'tbody':
	      case 'td':
	      case 'tfoot':
	      case 'th':
	      case 'thead':
	      case 'tr':
	        // These tags are only valid with a few parents that have special child
	        // parsing rules -- if we're down here, then none of those matched and
	        // so we allow it only if we don't know what the parent is, as all other
	        // cases are invalid.
	        return parentTag == null;
	    }

	    return true;
	  };

	  /**
	   * Returns whether
	   */
	  var findInvalidAncestorForTag = function (tag, ancestorInfo) {
	    switch (tag) {
	      case 'address':
	      case 'article':
	      case 'aside':
	      case 'blockquote':
	      case 'center':
	      case 'details':
	      case 'dialog':
	      case 'dir':
	      case 'div':
	      case 'dl':
	      case 'fieldset':
	      case 'figcaption':
	      case 'figure':
	      case 'footer':
	      case 'header':
	      case 'hgroup':
	      case 'main':
	      case 'menu':
	      case 'nav':
	      case 'ol':
	      case 'p':
	      case 'section':
	      case 'summary':
	      case 'ul':
	      case 'pre':
	      case 'listing':
	      case 'table':
	      case 'hr':
	      case 'xmp':
	      case 'h1':
	      case 'h2':
	      case 'h3':
	      case 'h4':
	      case 'h5':
	      case 'h6':
	        return ancestorInfo.pTagInButtonScope;

	      case 'form':
	        return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;

	      case 'li':
	        return ancestorInfo.listItemTagAutoclosing;

	      case 'dd':
	      case 'dt':
	        return ancestorInfo.dlItemTagAutoclosing;

	      case 'button':
	        return ancestorInfo.buttonTagInScope;

	      case 'a':
	        // Spec says something about storing a list of markers, but it sounds
	        // equivalent to this check.
	        return ancestorInfo.aTagInScope;

	      case 'nobr':
	        return ancestorInfo.nobrTagInScope;
	    }

	    return null;
	  };

	  /**
	   * Given a ReactCompositeComponent instance, return a list of its recursive
	   * owners, starting at the root and ending with the instance itself.
	   */
	  var findOwnerStack = function (instance) {
	    if (!instance) {
	      return [];
	    }

	    var stack = [];
	    do {
	      stack.push(instance);
	    } while (instance = instance._currentElement._owner);
	    stack.reverse();
	    return stack;
	  };

	  var didWarn = {};

	  validateDOMNesting = function (childTag, childText, childInstance, ancestorInfo) {
	    ancestorInfo = ancestorInfo || emptyAncestorInfo;
	    var parentInfo = ancestorInfo.current;
	    var parentTag = parentInfo && parentInfo.tag;

	    if (childText != null) {
	      process.env.NODE_ENV !== 'production' ? warning(childTag == null, 'validateDOMNesting: when childText is passed, childTag should be null') : void 0;
	      childTag = '#text';
	    }

	    var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
	    var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
	    var problematic = invalidParent || invalidAncestor;

	    if (problematic) {
	      var ancestorTag = problematic.tag;
	      var ancestorInstance = problematic.instance;

	      var childOwner = childInstance && childInstance._currentElement._owner;
	      var ancestorOwner = ancestorInstance && ancestorInstance._currentElement._owner;

	      var childOwners = findOwnerStack(childOwner);
	      var ancestorOwners = findOwnerStack(ancestorOwner);

	      var minStackLen = Math.min(childOwners.length, ancestorOwners.length);
	      var i;

	      var deepestCommon = -1;
	      for (i = 0; i < minStackLen; i++) {
	        if (childOwners[i] === ancestorOwners[i]) {
	          deepestCommon = i;
	        } else {
	          break;
	        }
	      }

	      var UNKNOWN = '(unknown)';
	      var childOwnerNames = childOwners.slice(deepestCommon + 1).map(function (inst) {
	        return inst.getName() || UNKNOWN;
	      });
	      var ancestorOwnerNames = ancestorOwners.slice(deepestCommon + 1).map(function (inst) {
	        return inst.getName() || UNKNOWN;
	      });
	      var ownerInfo = [].concat(
	      // If the parent and child instances have a common owner ancestor, start
	      // with that -- otherwise we just start with the parent's owners.
	      deepestCommon !== -1 ? childOwners[deepestCommon].getName() || UNKNOWN : [], ancestorOwnerNames, ancestorTag,
	      // If we're warning about an invalid (non-parent) ancestry, add '...'
	      invalidAncestor ? ['...'] : [], childOwnerNames, childTag).join(' > ');

	      var warnKey = !!invalidParent + '|' + childTag + '|' + ancestorTag + '|' + ownerInfo;
	      if (didWarn[warnKey]) {
	        return;
	      }
	      didWarn[warnKey] = true;

	      var tagDisplayName = childTag;
	      var whitespaceInfo = '';
	      if (childTag === '#text') {
	        if (/\S/.test(childText)) {
	          tagDisplayName = 'Text nodes';
	        } else {
	          tagDisplayName = 'Whitespace text nodes';
	          whitespaceInfo = ' Make sure you don\'t have any extra whitespace between tags on ' + 'each line of your source code.';
	        }
	      } else {
	        tagDisplayName = '<' + childTag + '>';
	      }

	      if (invalidParent) {
	        var info = '';
	        if (ancestorTag === 'table' && childTag === 'tr') {
	          info += ' Add a <tbody> to your code to match the DOM tree generated by ' + 'the browser.';
	        }
	        process.env.NODE_ENV !== 'production' ? warning(false, 'validateDOMNesting(...): %s cannot appear as a child of <%s>.%s ' + 'See %s.%s', tagDisplayName, ancestorTag, whitespaceInfo, ownerInfo, info) : void 0;
	      } else {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'validateDOMNesting(...): %s cannot appear as a descendant of ' + '<%s>. See %s.', tagDisplayName, ancestorTag, ownerInfo) : void 0;
	      }
	    }
	  };

	  validateDOMNesting.updatedAncestorInfo = updatedAncestorInfo;

	  // For testing
	  validateDOMNesting.isTagValidInContext = function (tag, ancestorInfo) {
	    ancestorInfo = ancestorInfo || emptyAncestorInfo;
	    var parentInfo = ancestorInfo.current;
	    var parentTag = parentInfo && parentInfo.tag;
	    return isTagValidWithParent(tag, parentTag) && !findInvalidAncestorForTag(tag, ancestorInfo);
	  };
	}

	module.exports = validateDOMNesting;

/***/ },
/* 108 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(41);

	var ReactNoopUpdateQueue = __webpack_require__(109);

	var canDefineProperty = __webpack_require__(184);
	var emptyObject = __webpack_require__(46);
	var invariant = __webpack_require__(3);
	var warning = __webpack_require__(4);

	/**
	 * Base class helpers for the updating state of a component.
	 */
	function ReactComponent(props, context, updater) {
	  this.props = props;
	  this.context = context;
	  this.refs = emptyObject;
	  // We initialize the default updater but the real one gets injected by the
	  // renderer.
	  this.updater = updater || ReactNoopUpdateQueue;
	}

	ReactComponent.prototype.isReactComponent = {};

	/**
	 * Sets a subset of the state. Always use this to mutate
	 * state. You should treat `this.state` as immutable.
	 *
	 * There is no guarantee that `this.state` will be immediately updated, so
	 * accessing `this.state` after calling this method may return the old value.
	 *
	 * There is no guarantee that calls to `setState` will run synchronously,
	 * as they may eventually be batched together.  You can provide an optional
	 * callback that will be executed when the call to setState is actually
	 * completed.
	 *
	 * When a function is provided to setState, it will be called at some point in
	 * the future (not synchronously). It will be called with the up to date
	 * component arguments (state, props, context). These values can be different
	 * from this.* because your function may be called after receiveProps but before
	 * shouldComponentUpdate, and this new state, props, and context will not yet be
	 * assigned to this.
	 *
	 * @param {object|function} partialState Next partial state or function to
	 *        produce next partial state to be merged with current state.
	 * @param {?function} callback Called after state is updated.
	 * @final
	 * @protected
	 */
	ReactComponent.prototype.setState = function (partialState, callback) {
	  !(typeof partialState === 'object' || typeof partialState === 'function' || partialState == null) ?  false ? invariant(false, 'setState(...): takes an object of state variables to update or a function which returns an object of state variables.') : _prodInvariant('85') : void 0;
	  this.updater.enqueueSetState(this, partialState);
	  if (callback) {
	    this.updater.enqueueCallback(this, callback, 'setState');
	  }
	};

	/**
	 * Forces an update. This should only be invoked when it is known with
	 * certainty that we are **not** in a DOM transaction.
	 *
	 * You may want to call this when you know that some deeper aspect of the
	 * component's state has changed but `setState` was not called.
	 *
	 * This will not invoke `shouldComponentUpdate`, but it will invoke
	 * `componentWillUpdate` and `componentDidUpdate`.
	 *
	 * @param {?function} callback Called after update is complete.
	 * @final
	 * @protected
	 */
	ReactComponent.prototype.forceUpdate = function (callback) {
	  this.updater.enqueueForceUpdate(this);
	  if (callback) {
	    this.updater.enqueueCallback(this, callback, 'forceUpdate');
	  }
	};

	/**
	 * Deprecated APIs. These APIs used to exist on classic React classes but since
	 * we would like to deprecate them, we're not going to move them over to this
	 * modern base class. Instead, we define a getter that warns if it's accessed.
	 */
	if (false) {
	  var deprecatedAPIs = {
	    isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],
	    replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).']
	  };
	  var defineDeprecationWarning = function (methodName, info) {
	    if (canDefineProperty) {
	      Object.defineProperty(ReactComponent.prototype, methodName, {
	        get: function () {
	          process.env.NODE_ENV !== 'production' ? warning(false, '%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]) : void 0;
	          return undefined;
	        }
	      });
	    }
	  };
	  for (var fnName in deprecatedAPIs) {
	    if (deprecatedAPIs.hasOwnProperty(fnName)) {
	      defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
	    }
	  }
	}

	module.exports = ReactComponent;

/***/ },
/* 109 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2015-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var warning = __webpack_require__(4);

	function warnNoop(publicInstance, callerName) {
	  if (false) {
	    var constructor = publicInstance.constructor;
	    process.env.NODE_ENV !== 'production' ? warning(false, '%s(...): Can only update a mounted or mounting component. ' + 'This usually means you called %s() on an unmounted component. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, constructor && (constructor.displayName || constructor.name) || 'ReactClass') : void 0;
	  }
	}

	/**
	 * This is the abstract API for an update queue.
	 */
	var ReactNoopUpdateQueue = {

	  /**
	   * Checks whether or not this composite component is mounted.
	   * @param {ReactClass} publicInstance The instance we want to test.
	   * @return {boolean} True if mounted, false otherwise.
	   * @protected
	   * @final
	   */
	  isMounted: function (publicInstance) {
	    return false;
	  },

	  /**
	   * Enqueue a callback that will be executed after all the pending updates
	   * have processed.
	   *
	   * @param {ReactClass} publicInstance The instance to use as `this` context.
	   * @param {?function} callback Called after state is updated.
	   * @internal
	   */
	  enqueueCallback: function (publicInstance, callback) {},

	  /**
	   * Forces an update. This should only be invoked when it is known with
	   * certainty that we are **not** in a DOM transaction.
	   *
	   * You may want to call this when you know that some deeper aspect of the
	   * component's state has changed but `setState` was not called.
	   *
	   * This will not invoke `shouldComponentUpdate`, but it will invoke
	   * `componentWillUpdate` and `componentDidUpdate`.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @internal
	   */
	  enqueueForceUpdate: function (publicInstance) {
	    warnNoop(publicInstance, 'forceUpdate');
	  },

	  /**
	   * Replaces all of the state. Always use this or `setState` to mutate state.
	   * You should treat `this.state` as immutable.
	   *
	   * There is no guarantee that `this.state` will be immediately updated, so
	   * accessing `this.state` after calling this method may return the old value.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} completeState Next state.
	   * @internal
	   */
	  enqueueReplaceState: function (publicInstance, completeState) {
	    warnNoop(publicInstance, 'replaceState');
	  },

	  /**
	   * Sets a subset of the state. This only exists because _pendingState is
	   * internal. This provides a merging strategy that is not available to deep
	   * properties which is confusing. TODO: Expose pendingState or don't use it
	   * during the merge.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} partialState Next partial state to be merged with state.
	   * @internal
	   */
	  enqueueSetState: function (publicInstance, partialState) {
	    warnNoop(publicInstance, 'setState');
	  }
	};

	module.exports = ReactNoopUpdateQueue;

/***/ },
/* 110 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 */

	'use strict';

	/**
	 * Similar to invariant but only logs a warning if the condition is not met.
	 * This can be used to log issues in development environments in critical
	 * paths. Removing the logging code for production environments will keep the
	 * same logic and follow the same code paths.
	 */

	var warning = function() {};

	if (false) {
	  warning = function(condition, format, args) {
	    var len = arguments.length;
	    args = new Array(len > 2 ? len - 2 : 0);
	    for (var key = 2; key < len; key++) {
	      args[key - 2] = arguments[key];
	    }
	    if (format === undefined) {
	      throw new Error(
	        '`warning(condition, format, ...args)` requires a warning ' +
	        'message argument'
	      );
	    }

	    if (format.length < 10 || (/^[s\W]*$/).test(format)) {
	      throw new Error(
	        'The warning format should be able to uniquely identify this ' +
	        'warning. Please, use a more descriptive format than: ' + format
	      );
	    }

	    if (!condition) {
	      var argIndex = 0;
	      var message = 'Warning: ' +
	        format.replace(/%s/g, function() {
	          return args[argIndex++];
	        });
	      if (typeof console !== 'undefined') {
	        console.error(message);
	      }
	      try {
	        // This error was thrown as a convenience so that you can use this stack
	        // to find the callsite that caused this warning to fire.
	        throw new Error(message);
	      } catch(x) {}
	    }
	  };
	}

	module.exports = warning;


/***/ },
/* 111 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.factory = undefined;

	var _css = __webpack_require__(192);

	var _css2 = _interopRequireDefault(_css);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	/**
	 * Invokes a factory feature
	 *
	 * @param	{String}	prop			Key for feature in config object
	 * @param	{Function}	fn				Feature function
	 * @param	{Object}	defaultConfig	Component default configuration
	 * @param	{Object}	config			Custom configuration
	 *
	 * @returns	{*}							Result of the feature
	 * @private
	 */
	var feature = function feature(prop, fn, defaultConfig, config) {
	  var defaultValue = defaultConfig ? defaultConfig[prop] : null;
	  var value = config ? config[prop] : null;
	  return defaultValue || value ? fn(defaultValue, value) : null;
	};

	/**
	 * Creates a factory function which reconciles a default configuration object (`defaultConfig`) and
	 * a customized configuration object and provides the result to an executing function (`fn`). The
	 * configuration objects are processed by features which determine how to reconcile the values from
	 * each.
	 *
	 * Currently, `factory` only supports the `css` feature which expects its key to contain a map
	 * of local class names to exported class names. When both maps contain matching keys, the class
	 * names are joined together with a space.
	 *
	 * ```
	 * import factory from '@enact/core/factory';
	 * import kind from '@enact/core/kind';
	 *
	 * import componentCss from './Button.less';
	 *
	 * const ButtonFactory = factory({css: componentCss}, ({css}) => {
	 * 	return kind({
	 * 		name: 'Button',
	 *
	 *		// Since 'button' will be resolved against the combined `css` map, it can be overridden too
	 * 		styles: {
	 * 			css,
	 * 			className: 'button'
	 * 		},
	 *
	 *		// Component authors can also prevent overrides by using their css map directly as is done
	 *		// with the `inner` class below
	 * 		render: ({children, ...rest}) => (
	 * 			<button {...rest}>
	 * 				<div className={componentCss.inner}>
	 * 					{children}
	 * 				</div>
	 * 			</button>
	 * 		)
	 * 	});
	 * });
	 *
	 * // If `buttonCss` includes a `button` class, it will be appended to the `button` class of the
	 * // `Button` component.
	 * import buttonCss from './CustomButton.less';
	 * CustomizedButton = ButtonFactory({css: buttonCss});
	 *
	 * <CustomizedButton />
	 * ````
	 *
	 * @param	{Object}	defaultConfig	Default configuration object
	 * @param	{Function}	fn				Executing function which receives the merged configuration
	 *
	 * @returns	{Function}					Factory function accepting the customized configuration
	 *
	 * @method factory
	 * @memberof core/factory
	 * @public
	 */
	/**
	 * Exports the {@link core/factory.factory} function for creating customizeable components.
	 *
	 * @module core/factory
	 */

	var factory = function factory(defaultConfig, fn) {
	  return function (config) {
	    var componentConfig = defaultConfig;
	    var authorConfig = config;
	    var factoryFn = fn;

	    // support omitting defaultConfig
	    if (typeof defaultConfig === 'function') {
	      factoryFn = defaultConfig;
	      componentConfig = null;
	    }

	    return factoryFn({
	      css: feature('css', _css2.default, componentConfig, authorConfig)
	    });
	  };
	};

	exports.default = factory;
	exports.factory = factory;

/***/ },
/* 112 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.toIString = exports.$L = undefined;

	var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
	  return typeof obj === "undefined" ? "undefined" : _typeof2(obj);
	} : function (obj) {
	  return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof2(obj);
	}; /**
	    * Exports the {@link i18n/$L.$L} function and {@link i18n/$L.toIString} function to map to
	    * translated strings.
	    *
	    * ```
	    * import $L, {toIString} from '@enact/i18n/$L';
	    * $L('Close');        // => "Close" in the current locale
	    * toIString('Close'); // => an ilib IString representing "Close" in the current locale
	    * ```
	    *
	    * @module i18n/$L
	    */

	__webpack_require__(81);

	var _resBundle = __webpack_require__(121);

	var _IString = __webpack_require__(56);

	var _IString2 = _interopRequireDefault(_IString);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	/**
	 * Maps a string or key/value object to a translated string for the current locale
	 *
	 * @memberof i18n/$L
	 * @param  {String|Object} str Source string
	 *
	 * @returns {ilib.IString} The translated string
	 */
	function toIString(str) {
	  var rb = (0, _resBundle.getResBundle)();
	  var isObject = (typeof str === 'undefined' ? 'undefined' : _typeof(str)) === 'object';
	  if (rb) {
	    return isObject ? rb.getString(str.value, str.key) : rb.getString(str);
	  }

	  return new _IString2.default(isObject ? str.value : str);
	}

	/**
	 * Maps a string or key/value object to a translated string for the current locale
	 *
	 * @memberof i18n/$L
	 * @param  {String|Object} str Source string
	 *
	 * @returns {String} The translated string.
	 */
	function $L(str) {
	  return String(toIString(str));
	}

	exports.default = $L;
	exports.$L = $L;
	exports.toIString = toIString;

/***/ },
/* 113 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	/*
	 * EthiopicDate.js - Represent a date in the Ethiopic calendar
	 * 
	 * Copyright Â© 2015, JEDLSoft
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 *
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */

	/* !depends 
	ilib.js
	IDate.js 
	EthiopicCal.js 
	MathUtils.js
	Locale.js
	LocaleInfo.js 
	TimeZone.js
	EthiopicRataDie.js
	*/

	var ilib = __webpack_require__(2);
	var MathUtils = __webpack_require__(6);

	var EthiopicRataDie = __webpack_require__(114);
	var Locale = __webpack_require__(12);
	var LocaleInfo = __webpack_require__(14);
	var IDate = __webpack_require__(21);
	var TimeZone = __webpack_require__(24);
	var Calendar = __webpack_require__(9);
	var EthiopicCal = __webpack_require__(54);

	/**
	 * @class
	 * Construct a new date object for the Ethiopic Calendar. The constructor can be called
	 * with a parameter object that contains any of the following properties:
	 * 
	 * <ul>
	 * <li><i>unixtime<i> - sets the time of this instance according to the given 
	 * unix time. Unix time is the number of milliseconds since midnight on Jan 1, 1970 (Gregorian).
	 * <li><i>julianday</i> - the Julian Day to set into this date
	 * <li><i>year</i> - any integer
	 * <li><i>month</i> - 1 to 13, where 1 means Maskaram, 2 means Teqemt, etc., and 13 means Paguemen
	 * <li><i>day</i> - 1 to 30
	 * <li><i>hour</i> - 0 to 23. A formatter is used to display 12 hour clocks, but this representation 
	 * is always done with an unambiguous 24 hour representation
	 * <li><i>minute</i> - 0 to 59
	 * <li><i>second</i> - 0 to 59
	 * <li><i>millisecond<i> - 0 to 999
	 * <li><i>locale</i> - the TimeZone instance or time zone name as a string 
	 * of this ethiopic date. The date/time is kept in the local time. The time zone
	 * is used later if this date is formatted according to a different time zone and
	 * the difference has to be calculated, or when the date format has a time zone
	 * component in it.
	 * <li><i>timezone</i> - the time zone of this instance. If the time zone is not 
	 * given, it can be inferred from this locale. For locales that span multiple
	 * time zones, the one with the largest population is chosen as the one that 
	 * represents the locale. 
	 * 
	 * <li><i>date</i> - use the given intrinsic Javascript date to initialize this one.
	 * </ul>
	 *  
	 * If called with another Ethiopic date argument, the date components of the given
	 * date are copied into the current one.<p>
	 * 
	 * If the constructor is called with no arguments at all or if none of the 
	 * properties listed above 
	 * from <i>unixtime</i> through <i>millisecond</i> are present, then the date 
	 * components are 
	 * filled in with the current date at the time of instantiation. Note that if
	 * you do not give the time zone when defaulting to the current time and the 
	 * time zone for all of ilib was not set with <i>ilib.setTimeZone()</i>, then the
	 * time zone will default to UTC ("Universal Time, Coordinated" or "Greenwich 
	 * Mean Time").<p>
	 * 
	 * 
	 * @constructor
	 * @extends IDate
	 * @param {Object=} params parameters that govern the settings and behaviour of this Ethiopic date
	 */
	var EthiopicDate = function EthiopicDate(params) {
	  this.cal = new EthiopicCal();

	  if (params) {
	    if (typeof params.noinstance === 'boolean' && params.noinstance) {
	      // for doing inheritance, so don't need to fill in the data. The inheriting class only wants the methods.
	      return;
	    }
	    if (params.locale) {
	      this.locale = typeof params.locale === 'string' ? new Locale(params.locale) : params.locale;
	      var li = new LocaleInfo(this.locale);
	      this.timezone = li.getTimeZone();
	    }
	    if (params.timezone) {
	      this.timezone = params.timezone;
	    }

	    if (params.year || params.month || params.day || params.hour || params.minute || params.second || params.millisecond) {
	      /**
	       * Year in the Ethiopic calendar.
	       * @type number
	       */
	      this.year = parseInt(params.year, 10) || 0;
	      /**
	       * The month number, ranging from 1 (Maskaram) to 13 (Paguemen).
	       * @type number
	       */
	      this.month = parseInt(params.month, 10) || 1;
	      /**
	       * The day of the month. This ranges from 1 to 30.
	       * @type number
	       */
	      this.day = parseInt(params.day, 10) || 1;
	      /**
	       * The hour of the day. This can be a number from 0 to 23, as times are
	       * stored unambiguously in the 24-hour clock.
	       * @type number
	       */
	      this.hour = parseInt(params.hour, 10) || 0;
	      /**
	       * The minute of the hours. Ranges from 0 to 59.
	       * @type number
	       */
	      this.minute = parseInt(params.minute, 10) || 0;
	      /**
	       * The second of the minute. Ranges from 0 to 59.
	       * @type number
	       */
	      this.second = parseInt(params.second, 10) || 0;
	      /**
	       * The millisecond of the second. Ranges from 0 to 999.
	       * @type number
	       */
	      this.millisecond = parseInt(params.millisecond, 10) || 0;

	      /**
	       * The day of the year. Ranges from 1 to 366.
	       * @type number
	       */
	      this.dayOfYear = parseInt(params.dayOfYear, 10);

	      if (typeof params.dst === 'boolean') {
	        this.dst = params.dst;
	      }

	      this.rd = this.newRd(this);

	      // add the time zone offset to the rd to convert to UTC
	      if (!this.tz) {
	        this.tz = new TimeZone({ id: this.timezone });
	      }
	      // getOffsetMillis requires that this.year, this.rd, and this.dst 
	      // are set in order to figure out which time zone rules apply and 
	      // what the offset is at that point in the year
	      this.offset = this.tz._getOffsetMillisWallTime(this) / 86400000;
	      if (this.offset !== 0) {
	        this.rd = this.newRd({
	          rd: this.rd.getRataDie() - this.offset
	        });
	      }
	    }
	  }

	  if (!this.rd) {
	    this.rd = this.newRd(params);
	    this._calcDateComponents();
	  }
	};

	EthiopicDate.prototype = new IDate({ noinstance: true });
	EthiopicDate.prototype.parent = IDate;
	EthiopicDate.prototype.constructor = EthiopicDate;

	/**
	 * Return a new RD for this date type using the given params.
	 * @protected
	 * @param {Object=} params the parameters used to create this rata die instance
	 * @returns {RataDie} the new RD instance for the given params
	 */
	EthiopicDate.prototype.newRd = function (params) {
	  return new EthiopicRataDie(params);
	};

	/**
	 * Return the year for the given RD
	 * @protected
	 * @param {number} rd RD to calculate from 
	 * @returns {number} the year for the RD
	 */
	EthiopicDate.prototype._calcYear = function (rd) {
	  var year = Math.floor((4 * (Math.floor(rd) - 1) + 1463) / 1461);

	  return year;
	};

	/**
	 * Calculate date components for the given RD date.
	 * @protected
	 */
	EthiopicDate.prototype._calcDateComponents = function () {
	  var remainder,
	      cumulative,
	      rd = this.rd.getRataDie();

	  this.year = this._calcYear(rd);

	  if (typeof this.offset === "undefined") {
	    this.year = this._calcYear(rd);

	    // now offset the RD by the time zone, then recalculate in case we were 
	    // near the year boundary
	    if (!this.tz) {
	      this.tz = new TimeZone({ id: this.timezone });
	    }
	    this.offset = this.tz.getOffsetMillis(this) / 86400000;
	  }

	  if (this.offset !== 0) {
	    rd += this.offset;
	    this.year = this._calcYear(rd);
	  }

	  var jan1 = this.newRd({
	    year: this.year,
	    month: 1,
	    day: 1,
	    hour: 0,
	    minute: 0,
	    second: 0,
	    millisecond: 0
	  });
	  remainder = rd + 1 - jan1.getRataDie();

	  this.month = Math.floor((remainder - 1) / 30) + 1;
	  remainder = remainder - (this.month - 1) * 30;

	  this.day = Math.floor(remainder);
	  remainder -= this.day;
	  // now convert to milliseconds for the rest of the calculation
	  remainder = Math.round(remainder * 86400000);

	  this.hour = Math.floor(remainder / 3600000);
	  remainder -= this.hour * 3600000;

	  this.minute = Math.floor(remainder / 60000);
	  remainder -= this.minute * 60000;

	  this.second = Math.floor(remainder / 1000);
	  remainder -= this.second * 1000;

	  this.millisecond = remainder;
	};

	/**
	 * Return the day of the week of this date. The day of the week is encoded
	 * as number from 0 to 6, with 0=Sunday, 1=Monday, etc., until 6=Saturday.
	 * 
	 * @return {number} the day of the week
	 */
	EthiopicDate.prototype.getDayOfWeek = function () {
	  var rd = Math.floor(this.rd.getRataDie() + (this.offset || 0));
	  return MathUtils.mod(rd - 4, 7);
	};

	/**
	 * Return the name of the calendar that governs this date.
	 * 
	 * @return {string} a string giving the name of the calendar
	 */
	EthiopicDate.prototype.getCalendar = function () {
	  return "ethiopic";
	};

	//register with the factory method
	IDate._constructors["ethiopic"] = EthiopicDate;

	module.exports = EthiopicDate;

/***/ },
/* 114 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	/*
	 * EthiopicRataDie.js - Represent an RD date in the Ethiopic calendar
	 * 
	 * Copyright Â© 2015, JEDLSoft
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 *
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */

	/* !depends 
	ilib.js
	EthiopicCal.js
	RataDie.js
	*/

	var ilib = __webpack_require__(2);
	var EthiopicCal = __webpack_require__(54);
	var RataDie = __webpack_require__(17);

	/**
	 * @class
	 * Construct a new Ethiopic RD date number object. The constructor parameters can 
	 * contain any of the following properties:
	 * 
	 * <ul>
	 * <li><i>unixtime<i> - sets the time of this instance according to the given 
	 * unix time. Unix time is the number of milliseconds since midnight on Jan 1, 1970.
	 * 
	 * <li><i>julianday</i> - sets the time of this instance according to the given
	 * Julian Day instance or the Julian Day given as a float
	 * 
	 * <li><i>year</i> - any integer, including 0
	 * 
	 * <li><i>month</i> - 1 to 12, where 1 means Maskaram, 2 means Teqemt, etc., and 13 means Paguemen
	 * 
	 * <li><i>day</i> - 1 to 30
	 * 
	 * <li><i>hour</i> - 0 to 23. A formatter is used to display 12 hour clocks, but this representation 
	 * is always done with an unambiguous 24 hour representation
	 * 
	 * <li><i>minute</i> - 0 to 59
	 * 
	 * <li><i>second</i> - 0 to 59
	 * 
	 * <li><i>millisecond</i> - 0 to 999
	 * 
	 * <li><i>date</i> - use the given intrinsic Javascript date to initialize this one.
	 * </ul>
	 *
	 * If the constructor is called with another Ethiopic date instance instead of
	 * a parameter block, the other instance acts as a parameter block and its
	 * settings are copied into the current instance.<p>
	 * 
	 * If the constructor is called with no arguments at all or if none of the 
	 * properties listed above are present, then the RD is calculate based on 
	 * the current date at the time of instantiation. <p>
	 * 
	 * If any of the properties from <i>year</i> through <i>millisecond</i> are not
	 * specified in the params, it is assumed that they have the smallest possible
	 * value in the range for the property (zero or one).<p>
	 * 
	 * 
	 * @private
	 * @constructor
	 * @extends RataDie
	 * @param {Object=} params parameters that govern the settings and behaviour of this Ethiopic RD date
	 */
	var EthiopicRataDie = function EthiopicRataDie(params) {
	  this.cal = params && params.cal || new EthiopicCal();
	  this.rd = undefined;
	  RataDie.call(this, params);
	};

	EthiopicRataDie.prototype = new RataDie();
	EthiopicRataDie.prototype.parent = RataDie;
	EthiopicRataDie.prototype.constructor = EthiopicRataDie;

	/**
	 * The difference between the zero Julian day and the first Ethiopic date
	 * of Friday, August 29, 8 CE Julian at 6:00am UTC.<p> 
	 * 
	 * See <a href="http://us.wow.com/wiki/Time_in_Ethiopia?s_chn=90&s_pt=aolsem&v_t=aolsem"
	 * Time in Ethiopia</a> for information about how time is handled in Ethiopia.
	 * 
	 * @protected
	 * @type number
	 */
	EthiopicRataDie.prototype.epoch = 1724219.75;

	/**
	 * Calculate the Rata Die (fixed day) number of the given date from the
	 * date components.
	 * 
	 * @protected
	 * @param {Object} date the date components to calculate the RD from
	 */
	EthiopicRataDie.prototype._setDateComponents = function (date) {
	  var year = date.year;
	  var years = 365 * (year - 1) + Math.floor(year / 4);
	  var dayInYear = (date.month - 1) * 30 + date.day;
	  var rdtime = (date.hour * 3600000 + date.minute * 60000 + date.second * 1000 + date.millisecond) / 86400000;

	  /*
	  console.log("calcRataDie: converting " +  JSON.stringify(parts));
	  console.log("getRataDie: year is " +  years);
	  console.log("getRataDie: day in year is " +  dayInYear);
	  console.log("getRataDie: rdtime is " +  rdtime);
	  console.log("getRataDie: rd is " +  (years + dayInYear + rdtime));
	  */

	  this.rd = years + dayInYear + rdtime;
	};

	module.exports = EthiopicRataDie;

/***/ },
/* 115 */
/***/ function(module, exports) {

	'use strict';

	/*
	 * JulianDay.js - A Julian Day object.
	 * 
	 * Copyright Â© 2012-2015, JEDLSoft
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 *
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */

	/**
	 * @class
	 * A Julian Day class. A Julian Day is a date based on the Julian Day count
	 * of time invented by Joseph Scaliger in 1583 for use with astronomical calculations. 
	 * Do not confuse it with a date in the Julian calendar, which it has very
	 * little in common with. The naming is unfortunately close, and comes from history.<p>
	 * 
	 * 
	 * @constructor
	 * @param {number} num the Julian Day expressed as a floating point number 
	 */

	var JulianDay = function JulianDay(num) {
	  this.jd = num;
	  this.days = Math.floor(this.jd);
	  this.frac = num - this.days;
	};

	JulianDay.prototype = {
	  /**
	   * Return the integral portion of this Julian Day instance. This corresponds to
	   * the number of days since the beginning of the epoch.
	   * 
	   * @return {number} the integral portion of this Julian Day
	   */
	  getDays: function getDays() {
	    return this.days;
	  },

	  /**
	   * Set the date of this Julian Day instance.
	   * 
	   * @param {number} days the julian date expressed as a floating point number
	   */
	  setDays: function setDays(days) {
	    this.days = Math.floor(days);
	    this.jd = this.days + this.frac;
	  },

	  /**
	   * Return the fractional portion of this Julian Day instance. This portion 
	   * corresponds to the time of day for the instance.
	   */
	  getDayFraction: function getDayFraction() {
	    return this.frac;
	  },

	  /**
	   * Set the fractional part of the Julian Day. The fractional part represents
	   * the portion of a fully day. Julian dates start at noon, and proceed until
	   * noon of the next day. That would mean midnight is represented as a fractional
	   * part of 0.5.
	   * 
	   * @param {number} fraction The fractional part of the Julian date
	   */
	  setDayFraction: function setDayFraction(fraction) {
	    var t = Math.floor(fraction);
	    this.frac = fraction - t;
	    this.jd = this.days + this.frac;
	  },

	  /** 
	   * Return the Julian Day expressed as a floating point number.
	   * @return {number} the Julian Day as a number
	   */
	  getDate: function getDate() {
	    return this.jd;
	  },

	  /**
	   * Set the date of this Julian Day instance.
	   * 
	   * @param {number} num the numeric Julian Day to set into this instance
	   */
	  setDate: function setDate(num) {
	    this.jd = num;
	  },

	  /**
	   * Add an offset to the current date instance. The offset should be expressed in
	   * terms of Julian days. That is, each integral unit represents one day of time, and
	   * fractional part represents a fraction of a regular 24-hour day.
	   * 
	   * @param {number} offset an amount to add (or subtract) to the current result instance.
	   */
	  addDate: function addDate(offset) {
	    if (typeof offset === 'number') {
	      this.jd += offset;
	      this.days = Math.floor(this.jd);
	      this.frac = this.jd - this.days;
	    }
	  }
	};

	module.exports = JulianDay;

/***/ },
/* 116 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	/*
	 * persratadie.js - Represent a rata die date in the Persian calendar
	 * 
	 * Copyright Â© 2014-2015, JEDLSoft
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 *
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */

	/* !depends 
	ilib.js
	MathUtils.js
	RataDie.js
	Astro.js
	GregorianDate.js
	*/

	var ilib = __webpack_require__(2);
	var MathUtils = __webpack_require__(6);

	var Astro = __webpack_require__(53);
	var RataDie = __webpack_require__(17);
	var GregorianDate = __webpack_require__(30);

	/**
	 * @class
	 * Construct a new Persian RD date number object. The constructor parameters can 
	 * contain any of the following properties:
	 * 
	 * <ul>
	 * <li><i>unixtime<i> - sets the time of this instance according to the given 
	 * unix time. Unix time is the number of milliseconds since midnight on Jan 1, 1970, Gregorian
	 * 
	 * <li><i>julianday</i> - sets the time of this instance according to the given
	 * Julian Day instance or the Julian Day given as a float
	 * 
	 * <li><i>year</i> - any integer, including 0
	 * 
	 * <li><i>month</i> - 1 to 12, where 1 means Farvardin, 2 means Ordibehesht, etc.
	 * 
	 * <li><i>day</i> - 1 to 31
	 * 
	 * <li><i>hour</i> - 0 to 23. A formatter is used to display 12 hour clocks, but this representation 
	 * is always done with an unambiguous 24 hour representation
	 * 
	 * <li><i>minute</i> - 0 to 59
	 * 
	 * <li><i>second</i> - 0 to 59
	 * 
	 * <li><i>millisecond</i> - 0 to 999
	 * 
	 * <li><i>date</i> - use the given intrinsic Javascript date to initialize this one.
	 * </ul>
	 *
	 * If the constructor is called with another Persian date instance instead of
	 * a parameter block, the other instance acts as a parameter block and its
	 * settings are copied into the current instance.<p>
	 * 
	 * If the constructor is called with no arguments at all or if none of the 
	 * properties listed above are present, then the RD is calculate based on 
	 * the current date at the time of instantiation. <p>
	 * 
	 * If any of the properties from <i>year</i> through <i>millisecond</i> are not
	 * specified in the params, it is assumed that they have the smallest possible
	 * value in the range for the property (zero or one).<p>
	 * 
	 * 
	 * @private
	 * @constructor
	 * @extends RataDie
	 * @param {Object=} params parameters that govern the settings and behaviour of this Persian RD date
	 */
	var PersRataDie = function PersRataDie(params) {
	  this.rd = undefined;
	  Astro.initAstro(params && typeof params.sync === 'boolean' ? params.sync : true, params && params.loadParams, ilib.bind(this, function (x) {
	    RataDie.call(this, params);
	    if (params && typeof params.callback === 'function') {
	      params.callback(this);
	    }
	  }));
	};

	PersRataDie.prototype = new RataDie();
	PersRataDie.prototype.parent = RataDie;
	PersRataDie.prototype.constructor = PersRataDie;

	/**
	 * The difference between a zero Julian day and the first Persian date
	 * @private
	 * @const
	 * @type number
	 */
	PersRataDie.prototype.epoch = 1948319.5;

	/**
	 * @protected 
	 */
	PersRataDie.prototype._tehranEquinox = function (year) {
	  var equJED, equJD, equAPP, equTehran, dtTehran, eot;

	  //  March equinox in dynamical time
	  equJED = Astro._equinox(year, 0);

	  //  Correct for delta T to obtain Universal time
	  equJD = equJED - Astro._deltat(year) / (24 * 60 * 60);

	  //  Apply the equation of time to yield the apparent time at Greenwich
	  eot = Astro._equationOfTime(equJED) * 360;
	  eot = (eot - 20 * Math.floor(eot / 20)) / 360;
	  equAPP = equJD + eot;

	  /*  
	   * Finally, we must correct for the constant difference between
	   * the Greenwich meridian and the time zone standard for Iran 
	   * Standard time, 52 degrees 30 minutes to the East.
	   */

	  dtTehran = 52.5 / 360;
	  equTehran = equAPP + dtTehran;

	  return equTehran;
	};

	/**
	 * Calculate the year based on the given Julian day.
	 * @protected
	 * @param {number} jd the Julian day to get the year for
	 * @return {{year:number,equinox:number}} the year and the last equinox
	 */
	PersRataDie.prototype._getYear = function (jd) {
	  var gd = new GregorianDate({ julianday: jd });
	  var guess = gd.getYears() - 2,
	      nexteq,
	      ret = {};

	  //ret.equinox = Math.floor(this._tehranEquinox(guess));
	  ret.equinox = this._tehranEquinox(guess);
	  while (ret.equinox > jd) {
	    guess--;
	    // ret.equinox = Math.floor(this._tehranEquinox(guess));
	    ret.equinox = this._tehranEquinox(guess);
	  }
	  nexteq = ret.equinox - 1;
	  // if the equinox falls after noon, then the day after that is the start of the 
	  // next year, so truncate the JD to get the noon of the day before the day with 
	  //the equinox on it, then add 0.5 to get the midnight of that day 
	  while (!(Math.floor(ret.equinox) + 0.5 <= jd && jd < Math.floor(nexteq) + 0.5)) {
	    ret.equinox = nexteq;
	    guess++;
	    // nexteq = Math.floor(this._tehranEquinox(guess));
	    nexteq = this._tehranEquinox(guess);
	  }

	  // Mean solar tropical year is 365.24219878 days
	  ret.year = Math.round((ret.equinox - this.epoch - 1) / 365.24219878) + 1;

	  return ret;
	};

	/**
	 * Calculate the Rata Die (fixed day) number of the given date from the
	 * date components.
	 *
	 * @protected
	 * @param {Object} date the date components to calculate the RD from
	 */
	PersRataDie.prototype._setDateComponents = function (date) {
	  var adr, guess, jd;

	  // Mean solar tropical year is 365.24219878 days 
	  guess = this.epoch + 1 + 365.24219878 * (date.year - 2);
	  adr = { year: date.year - 1, equinox: 0 };

	  while (adr.year < date.year) {
	    adr = this._getYear(guess);
	    guess = adr.equinox + (365.24219878 + 2);
	  }

	  jd = Math.floor(adr.equinox) + (date.month <= 7 ? (date.month - 1) * 31 : (date.month - 1) * 30 + 6) + (date.day - 1 + 0.5); // add 0.5 so that we convert JDs, which start at noon to RDs which start at midnight

	  jd += (date.hour * 3600000 + date.minute * 60000 + date.second * 1000 + date.millisecond) / 86400000;

	  this.rd = jd - this.epoch;
	};

	/**
	 * Return the rd number of the particular day of the week on or before the 
	 * given rd. eg. The Sunday on or before the given rd.
	 * @private
	 * @param {number} rd the rata die date of the reference date
	 * @param {number} dayOfWeek the day of the week that is being sought relative 
	 * to the current date
	 * @return {number} the rd of the day of the week
	 */
	PersRataDie.prototype._onOrBefore = function (rd, dayOfWeek) {
	  return rd - MathUtils.mod(Math.floor(rd) - dayOfWeek - 3, 7);
	};

	module.exports = PersRataDie;

/***/ },
/* 117 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	/*
	 * persianastro.js - Represent a Persian astronomical (Hijjri) calendar object.
	 * 
	 * Copyright Â© 2014-2015, JEDLSoft
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 *
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */

	/* !depends 
	Calendar.js 
	PersRataDie.js 
	ilib.js
	MathUtils.js
	*/

	var ilib = __webpack_require__(2);
	var MathUtils = __webpack_require__(6);

	var Calendar = __webpack_require__(9);

	var PersRataDie = __webpack_require__(116);

	/**
	 * @class
	 * Construct a new Persian astronomical (Hijjri) calendar object. This class encodes 
	 * information about a Persian calendar. This class differs from the 
	 * Persian calendar in that the leap years are calculated based on the
	 * astronomical observations of the sun in Teheran, instead of calculating
	 * the leap years based on a regular cyclical rhythm algorithm.<p>
	 * 
	 * 
	 * @constructor
	 * @extends Calendar
	 */
	var PersianCal = function PersianCal() {
	  this.type = "persian";
	};

	/**
	 * @private
	 * @const
	 * @type Array.<number> 
	 * the lengths of each month 
	 */
	PersianCal.monthLengths = [31, // Farvardin
	31, // Ordibehesht
	31, // Khordad
	31, // Tir
	31, // Mordad
	31, // Shahrivar
	30, // Mehr
	30, // Aban
	30, // Azar
	30, // Dey
	30, // Bahman
	29 // Esfand
	];

	/**
	 * Return the number of months in the given year. The number of months in a year varies
	 * for some luni-solar calendars because in some years, an extra month is needed to extend the 
	 * days in a year to an entire solar year. The month is represented as a 1-based number
	 * where 1=first month, 2=second month, etc.
	 * 
	 * @param {number} year a year for which the number of months is sought
	 * @return {number} The number of months in the given year
	 */
	PersianCal.prototype.getNumMonths = function (year) {
	  return 12;
	};

	/**
	 * Return the number of days in a particular month in a particular year. This function
	 * can return a different number for a month depending on the year because of things
	 * like leap years.
	 * 
	 * @param {number} month the month for which the length is sought
	 * @param {number} year the year within which that month can be found
	 * @return {number} the number of days within the given month in the given year
	 */
	PersianCal.prototype.getMonLength = function (month, year) {
	  if (month !== 12 || !this.isLeapYear(year)) {
	    return PersianCal.monthLengths[month - 1];
	  } else {
	    // Month 12, Esfand, has 30 days instead of 29 in leap years
	    return 30;
	  }
	};

	/**
	 * Return true if the given year is a leap year in the Persian astronomical calendar.
	 * @param {number} year the year for which the leap year information is being sought
	 * @return {boolean} true if the given year is a leap year
	 */
	PersianCal.prototype.isLeapYear = function (year) {
	  var rdNextYear = new PersRataDie({
	    cal: this,
	    year: year + 1,
	    month: 1,
	    day: 1,
	    hour: 0,
	    minute: 0,
	    second: 0,
	    millisecond: 0
	  });
	  var rdThisYear = new PersRataDie({
	    cal: this,
	    year: year,
	    month: 1,
	    day: 1,
	    hour: 0,
	    minute: 0,
	    second: 0,
	    millisecond: 0
	  });
	  return rdNextYear.getRataDie() - rdThisYear.getRataDie() > 365;
	};

	/**
	 * Return the type of this calendar.
	 * 
	 * @return {string} the name of the type of this calendar 
	 */
	PersianCal.prototype.getType = function () {
	  return this.type;
	};

	/* register this calendar for the factory method */
	Calendar._constructors["persian"] = PersianCal;

	module.exports = PersianCal;

/***/ },
/* 118 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	/*
	 * thaisolar.js - Represent a Thai solar calendar object.
	 *
	 * Copyright Â© 2013-2015, JEDLSoft
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 *
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */

	/* !depends ilib.js Calendar.js GregorianCal.js MathUtils.js */

	var ilib = __webpack_require__(2);
	var MathUtils = __webpack_require__(6);
	var Calendar = __webpack_require__(9);
	var GregorianCal = __webpack_require__(55);

	/**
	 * @class
	 * Construct a new Thai solar calendar object. This class encodes information about
	 * a Thai solar calendar.<p>
	 *
	 *
	 * @constructor
	 * @extends Calendar
	 */
	var ThaiSolarCal = function ThaiSolarCal() {
	  this.type = "thaisolar";
	};

	ThaiSolarCal.prototype = new GregorianCal({ noinstance: true });
	ThaiSolarCal.prototype.parent = GregorianCal;
	ThaiSolarCal.prototype.constructor = ThaiSolarCal;

	/**
	 * Return true if the given year is a leap year in the Thai solar calendar.
	 * The year parameter may be given as a number, or as a ThaiSolarDate object.
	 * @param {number|ThaiSolarDate} year the year for which the leap year information is being sought
	 * @return {boolean} true if the given year is a leap year
	 */
	ThaiSolarCal.prototype.isLeapYear = function (year) {
	  var y = typeof year === 'number' ? year : year.getYears();
	  y -= 543;
	  var centuries = MathUtils.mod(y, 400);
	  return MathUtils.mod(y, 4) === 0 && centuries !== 100 && centuries !== 200 && centuries !== 300;
	};

	/* register this calendar for the factory method */
	Calendar._constructors["thaisolar"] = ThaiSolarCal;

	module.exports = ThaiSolarCal;

/***/ },
/* 119 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.toUpperCase = exports.toLowerCase = exports.initCaseMappers = undefined;

	var _CaseMapper = __webpack_require__(205);

	var _CaseMapper2 = _interopRequireDefault(_CaseMapper);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	var toLowerCaseMapper = void 0,
	    toUpperCaseMapper = void 0;

	/**
	 * Set CaseMapper object references to ilib's current locale (its most recently set, by default)
	 *
	 * @returns {undefined}
	 */
	function initCaseMappers() {
	  toLowerCaseMapper = new _CaseMapper2.default({ direction: 'tolower' });
	  toUpperCaseMapper = new _CaseMapper2.default({ direction: 'toupper' });
	}

	/**
	 * Locale-safely convert a string to lower case.
	 *
	 * @param {String} inString String to convert to lower case
	 * @returns {String} Lower-cased string
	 */
	var toLowerCase = function toLowerCase(inString) {
	  if (inString != null) {
	    return toLowerCaseMapper.map(inString.toString());
	  }
	  return inString;
	};

	/**
	 * Locale-safely convert a string to upper case.
	 *
	 * @param {String} inString String to convert to upper case
	 * @returns {String} Upper-cased string
	 */
	var toUpperCase = function toUpperCase(inString) {
	  if (inString != null) {
	    return toUpperCaseMapper.map(inString.toString());
	  }
	  return inString;
	};

	exports.initCaseMappers = initCaseMappers;
	exports.toLowerCase = toLowerCase;
	exports.toUpperCase = toUpperCase;

/***/ },
/* 120 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = undefined;

	__webpack_require__(81);

	var _ilib = __webpack_require__(2);

	var _ilib2 = _interopRequireDefault(_ilib);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	exports.default = _ilib2.default;

/***/ },
/* 121 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.clearResBundle = exports.setResBundleLocale = exports.getResBundle = undefined;

	var _ResBundle = __webpack_require__(221);

	var _ResBundle2 = _interopRequireDefault(_ResBundle);

	var _Locale = __webpack_require__(12);

	var _Locale2 = _interopRequireDefault(_Locale);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	// The ilib.ResBundle for the active locale used by $L
	var resBundle = void 0;

	/**
	 * Returns the current ilib.ResBundle
	 *
	 * @returns {ilib.ResBundle} Current ResBundle
	 */
	function getResBundle() {
	  return resBundle;
	}

	/**
	 * Creates a new ilib.ResBundle for string translation
	 *
	 * @param  {ilib.Locale} locale Locale for ResBundle
	 *
	 * @returns {ilib.ResBundle} New ilib.ResBundle
	 */
	function createResBundle(locale) {
	  resBundle = new _ResBundle2.default({
	    locale: locale,
	    type: 'html',
	    name: 'strings',
	    sync: true,
	    lengthen: true // if pseudo-localizing, this tells it to lengthen strings
	  });

	  return resBundle;
	}

	/**
	 * Set the locale for the strings that $L loads. This may reload the
	 * string resources if necessary.
	 * @param {string} spec the locale specifier
	 * @returns {undefined}
	 */
	function setResBundleLocale(spec) {
	  var locale = new _Locale2.default(spec);
	  var rb = getResBundle();
	  if (!rb || spec !== rb.getLocale().getSpec()) {
	    createResBundle(locale);
	  }
	}

	/**
	 * Deletes the current bundle object of strings and clears the cache.
	 * @returns {undefined}
	 */
	function clearResBundle() {
	  delete _ResBundle2.default.strings;
	  delete _ResBundle2.default.sysres;
	  resBundle = null;
	}

	exports.getResBundle = getResBundle;
	exports.setResBundleLocale = setResBundleLocale;
	exports.clearResBundle = clearResBundle;

/***/ },
/* 122 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.ButtonFactory = exports.ButtonBaseFactory = exports.ButtonBase = exports.Button = undefined;

	var _extends = Object.assign || function (target) {
	  for (var i = 1; i < arguments.length; i++) {
	    var source = arguments[i];for (var key in source) {
	      if (Object.prototype.hasOwnProperty.call(source, key)) {
	        target[key] = source[key];
	      }
	    }
	  }return target;
	}; /**
	    * Exports the {@link moonstone/Button.Button} and {@link moonstone/Button.ButtonBase}
	    * components.  The default export is {@link moonstone/Button.Button}.
	    *
	    * @module moonstone/Button
	    */

	var _factory = __webpack_require__(111);

	var _factory2 = _interopRequireDefault(_factory);

	var _handle = __webpack_require__(16);

	var _kind = __webpack_require__(8);

	var _kind2 = _interopRequireDefault(_kind);

	var _Uppercase = __webpack_require__(73);

	var _Uppercase2 = _interopRequireDefault(_Uppercase);

	var _Spottable = __webpack_require__(34);

	var _Spottable2 = _interopRequireDefault(_Spottable);

	var _Pressable = __webpack_require__(253);

	var _Pressable2 = _interopRequireDefault(_Pressable);

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _Icon = __webpack_require__(123);

	var _Icon2 = _interopRequireDefault(_Icon);

	var _Marquee = __webpack_require__(128);

	var _TooltipDecorator = __webpack_require__(245);

	var _Button = __webpack_require__(262);

	var _Button2 = _interopRequireDefault(_Button);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	function _objectWithoutProperties(obj, keys) {
	  var target = {};for (var i in obj) {
	    if (keys.indexOf(i) >= 0) continue;if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;target[i] = obj[i];
	  }return target;
	}

	/**
	 * {@link moonstone/Button.ButtonBaseFactory} is Factory wrapper around {@link moonstone/Button.ButtonBase}
	 * that allows overriding certain classes at design time. The following are properties of the `css`
	 * member of the argument to the factory.
	 *
	 * Usage:
	 * ```
	 * import css from './CustomButton.less';
	 * import {ButtonFactory} from '@enact/moonstone/Button';
	 * const Button = ButtonFactory({
	 *     css: {
	 *         bg: css.bg,
	 *         selected: css.selected
	 *     }
	 * });
	 * ```
	 *
	 * @class ButtonBaseFactory
	 * @memberof moonstone/Button
	 * @factory
	 * @public
	 */
	var ButtonBaseFactory = (0, _factory2.default)({ css: _Button2.default }, function (_ref) {
	  var css = _ref.css;
	  return (

	    /**
	     * {@link moonstone/Button.ButtonBase} is a stateless Button with Moonstone styling
	     * applied. In most circumstances, you will want to use the Pressable and Spottable version:
	     * {@link moonstone/Button.Button}
	     *
	     * @class ButtonBase
	     * @memberof moonstone/Button
	     * @ui
	     * @public
	     */
	    (0, _kind2.default)({
	      name: 'Button',

	      propTypes: /** @lends moonstone/Button.ButtonBase.prototype */{
	        children: _react.PropTypes.node.isRequired,

	        /**
	         * The background-color opacity of this button; valid values are `'opaque'`, `'translucent'`,
	         * and `'transparent'`.
	         *
	         * @type {String}
	         * @default 'opaque'
	         * @public
	         */
	        backgroundOpacity: _react.PropTypes.oneOf(['opaque', 'translucent', 'transparent']),

	        /**
	         * This property accepts one of the following color names, which correspond with the
	         * colored buttons on a standard remote control: `'red'`, `'green'`, `'yellow'`, `'blue'`
	         *
	         * @type {String}
	         * @public
	         */
	        color: _react.PropTypes.oneOf([null, 'red', 'green', 'yellow', 'blue']),

	        /**
	         * When `true`, the [button]{@glossary button} is shown as disabled and does not
	         * generate `onClick` [events]{@glossary event}.
	         *
	         * @type {Boolean}
	         * @default false
	         * @public
	         */
	        disabled: _react.PropTypes.bool,

	        /**
	         * Include an [icon]{@link moonstone/Icon.Icon} in your [button]{@link moonstone/Button.Button}.
	         * The icon will be displayed before the natural reading order of the text, regardless
	         * of locale. Any string that is valid for the `Icon` component is valid here. `icon` is
	         * outside the marqueeable content so it will not scroll along with the text content of
	         * your button. This also supports a custom icon, in the form of a DOM node or a
	         * Component, with the caveat that if you supply a custom icon, you are responsible for
	         * sizing and locale positioning of the custom component.
	         *
	         * @type {Node}
	         * @public
	         */
	        icon: _react.PropTypes.node,

	        /**
	         * A boolean parameter affecting the minimum width of the button. When `true`,
	         * the minimum width will be set to 180px (or 130px if [small]{@link moonstone/Button.Button#small}
	         * is `true`). If `false`, the minimum width will be set to the current value of
	         * `@moon-button-height` (thus forcing the button to be no smaller than a circle with
	         * diameter `@moon-button-height`).
	         *
	         * @type {Boolean}
	         * @default true
	         * @public
	         */
	        minWidth: _react.PropTypes.bool,

	        /**
	         * When `true`, a pressed visual effect is applied to the button
	         *
	         * @type {Boolean}
	         * @default false
	         * @public
	         */
	        pressed: _react.PropTypes.bool,

	        /**
	         * When `true`, a selected visual effect is applied to the button
	         *
	         * @type {Boolean}
	         * @public
	         */
	        selected: _react.PropTypes.bool,

	        /**
	         * A boolean parameter affecting the size of the button. If `true`, the
	         * button's diameter will be set to 60px. However, the button's tap target
	         * will still have a diameter of 78px, with an invisible DOM element
	         * wrapping the small button to provide the larger tap zone.
	         *
	         * @type {Boolean}
	         * @default false
	         * @public
	         */
	        small: _react.PropTypes.bool
	      },

	      defaultProps: {
	        backgroundOpacity: 'opaque',
	        disabled: false,
	        minWidth: true,
	        pressed: false,
	        small: false
	      },

	      styles: {
	        css: /** @lends moonstone/Button.ButtonBaseFactory.prototype */_extends({}, _Button2.default, {
	          /**
	           * Classes to apply to the background of the button, used on a child of button
	           * @type {String}
	           * @public
	           */
	          bg: css.bg,

	          /**
	           * Classes to apply to the selected state of the button, applied to the base element
	           * @type {String}
	           * @public
	           */
	          selected: css.selected
	        }),
	        className: 'button'
	      },

	      computed: {
	        className: function className(_ref2) {
	          var backgroundOpacity = _ref2.backgroundOpacity,
	              color = _ref2.color,
	              minWidth = _ref2.minWidth,
	              pressed = _ref2.pressed,
	              selected = _ref2.selected,
	              small = _ref2.small,
	              styler = _ref2.styler;
	          return styler.append({ pressed: pressed, small: small, minWidth: minWidth, selected: selected }, backgroundOpacity, color);
	        },
	        icon: function icon(_ref3) {
	          var _icon = _ref3.icon,
	              small = _ref3.small;
	          return typeof _icon === 'string' ? _react2.default.createElement(_Icon2.default, { className: css.icon, small: small }, _icon) : _icon;
	        }
	      },

	      handlers: {
	        onClick: (0, _handle.handle)((0, _handle.forProp)('disabled', false), (0, _handle.forward)('onClick'))
	      },

	      render: function render(_ref4) {
	        var children = _ref4.children,
	            disabled = _ref4.disabled,
	            icon = _ref4.icon,
	            rest = _objectWithoutProperties(_ref4, ['children', 'disabled', 'icon']);

	        // Do not add the ARIA attribute if the selected prop is omitted to avoid the potentially
	        // confusing readout for the common case of a standalone Button or IconButton.
	        if ('selected' in rest) {
	          rest['aria-pressed'] = rest.selected;
	        }

	        delete rest.backgroundOpacity;
	        delete rest.color;
	        delete rest.minWidth;
	        delete rest.pressed;
	        delete rest.selected;
	        delete rest.small;

	        return _react2.default.createElement('div', _extends({ role: 'button' }, rest, { 'aria-disabled': disabled, disabled: disabled }), _react2.default.createElement('div', { className: css.bg }), _react2.default.createElement('div', { className: css.client }, icon, children));
	      }
	    })
	  );
	});

	/**
	 * {@link moonstone/Button.ButtonFactory} is Factory wrapper around {@link moonstone/Button.Button}
	 * that allows overriding certain classes at design time. See {@link moonstone/Button.ButtonBaseFactory}.
	 *
	 * @class ButtonFactory
	 * @memberof moonstone/Button
	 * @factory
	 * @public
	 */
	var ButtonFactory = (0, _factory2.default)(function (css) {
	  var Base = ButtonBaseFactory(css);
	  /**
	   * {@link moonstone/Button.Button} is a Button with Moonstone styling, Spottable and
	   * Pressable applied.  If the Button's child component is text, it will be uppercased unless
	   * `preserveCase` is set.
	   *
	   * Usage:
	   * ```
	   * <Button>Press me!</Button>
	   * ```
	   *
	   * @class Button
	   * @memberof moonstone/Button
	   * @mixes i18n/Uppercase.Uppercase
	   * @mixes moonstone/TooltipDecorator.TooltipDecorator
	   * @mixes moonstone/Marquee.MarqueeDecorator
	   * @mixes ui/Pressable.Pressable
	   * @mixes spotlight/Spottable.Spottable
	   * @ui
	   * @public
	   */
	  return (0, _Uppercase2.default)((0, _TooltipDecorator.TooltipDecorator)((0, _Marquee.MarqueeDecorator)({ className: _Button2.default.marquee }, (0, _Pressable2.default)((0, _Spottable2.default)(Base)))));
	});

	var ButtonBase = ButtonBaseFactory();
	var Button = ButtonFactory();

	exports.default = Button;
	exports.Button = Button;
	exports.ButtonBase = ButtonBase;
	exports.ButtonBaseFactory = ButtonBaseFactory;
	exports.ButtonFactory = ButtonFactory;

/***/ },
/* 123 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.icons = exports.IconBase = exports.Icon = undefined;

	var _extends = Object.assign || function (target) {
	  for (var i = 1; i < arguments.length; i++) {
	    var source = arguments[i];for (var key in source) {
	      if (Object.prototype.hasOwnProperty.call(source, key)) {
	        target[key] = source[key];
	      }
	    }
	  }return target;
	};

	var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
	  return typeof obj === "undefined" ? "undefined" : _typeof2(obj);
	} : function (obj) {
	  return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof2(obj);
	}; /**
	    * Exports the {@link moonstone/Icon.Icon} component and the list of icon constants as
	    * [iconList]{@link moonstone/Icon.iconList}.
	    *
	    * @module moonstone/Icon
	    */

	var _kind = __webpack_require__(8);

	var _kind2 = _interopRequireDefault(_kind);

	var _resolution = __webpack_require__(45);

	var _resolution2 = _interopRequireDefault(_resolution);

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _IconList = __webpack_require__(228);

	var _IconList2 = _interopRequireDefault(_IconList);

	var _Icon = __webpack_require__(263);

	var _Icon2 = _interopRequireDefault(_Icon);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	function _objectWithoutProperties(obj, keys) {
	  var target = {};for (var i in obj) {
	    if (keys.indexOf(i) >= 0) continue;if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;target[i] = obj[i];
	  }return target;
	}

	/**
	 * Merges consumer styles with the image `src` resolved through the resolution independence module.
	 *
	 * @param	{Object}		style	Style object
	 * @param	{String|Object}	src		URI to image or object of URIs
	 *
	 * @returns	{Object}				Original style object with backgroundImage updated
	 * @private
	 */
	var mergeStyle = function mergeStyle(style, src) {
	  var updated = Object.assign({}, style);
	  var source = _resolution2.default.selectSrc(src);
	  if (src && src !== 'none' && src !== 'inherit' && src !== 'initial') {
	    source = 'url(' + source + ')';
	  }

	  updated.backgroundImage = source;
	  return updated;
	};

	/**
	 * Tests if a character is a single printable character
	 *
	 * @param	{String}	c	Character to test
	 *
	 * @returns	{Boolean}		`true` if c is a single character
	 * @private
	 */
	var isSingleCharacter = function isSingleCharacter(c) {
	  return c.length === 1 ||
	  // check for 4-byte Unicode character
	  c.length === 2 && c.charCodeAt() !== c.codePointAt();
	};

	/**
	 * {@link moonstone/Icon.Icon} is a component that displays an icon image.  You may
	 * specify an image, by setting the `src` property, or a font-based icon, by setting the child to a
	 * string from the [IconList]{@link moonstone/Icon.IconList}.  If both `src` and
	 * children are specified, both will be rendered.
	 *
	 * Usage:
	 * ```
	 * <Icon small>
	 *     plus
	 * </Icon>
	 * ```
	 *
	 * @class Icon
	 * @memberof moonstone/Icon
	 * @ui
	 * @public
	 */
	var IconBase = (0, _kind2.default)({
	  name: 'Icon',

	  propTypes: /** @lends moonstone/Icon.Icon.prototype */{
	    /**
	     * The icon specified as either:
	     *
	     * * A string that represents an icon from the [IconList]{@link moonstone/Icon.IconList},
	     * * An HTML entity string, Unicode reference or hex value (in the form '0x...'),
	     * * A URL specifying path to an icon image, or
	     * * An object representing a resolution independent resource (See {@link ui/resolution}).
	     *
	     * @type {String|Object}
	     * @public
	     */
	    children: _react.PropTypes.oneOfType([_react.PropTypes.string, _react.PropTypes.object]),

	    /**
	     * If `true`, apply a pressed styling
	     *
	     * @type {Boolean}
	     * @public
	     */
	    pressed: _react.PropTypes.bool,

	    /**
	     * If `true`, apply the 'small' class.
	     *
	     * @type {Boolean}
	     * @default false
	     * @public
	     */
	    small: _react.PropTypes.bool
	  },

	  defaultProps: {
	    small: false
	  },

	  styles: {
	    css: _Icon2.default,
	    className: 'icon'
	  },

	  computed: {
	    className: function className(_ref) {
	      var icon = _ref.children,
	          pressed = _ref.pressed,
	          small = _ref.small,
	          styler = _ref.styler;
	      return styler.append(!_IconList2.default[icon] && _Icon2.default.dingbat, // If the icon isn't in our known set, apply our custom font class
	      { pressed: pressed, small: small });
	    },
	    iconProps: function iconProps(_ref2) {
	      var iconProp = _ref2.children,
	          style = _ref2.style;

	      var icon = _IconList2.default[iconProp];

	      if (!icon) {
	        if (typeof iconProp == 'string') {
	          if (iconProp.indexOf('&#x') === 0) {
	            // Converts a hex reference in HTML entity form: &#x99999;
	            icon = parseInt(iconProp.slice(3, -1), 16);
	          } else if (iconProp.indexOf('&#') === 0) {
	            // Convert an HTML entity: &#99999;
	            icon = parseInt(iconProp.slice(2, -1));
	          } else if (iconProp.indexOf("\\u") === 0) {
	            // Convert a unicode reference: \u99999;
	            icon = parseInt(iconProp.slice(2), 16);
	          } else if (iconProp.indexOf('0x') === 0) {
	            // Converts a hex reference in string form
	            icon = String.fromCodePoint(iconProp);
	          } else if (isSingleCharacter(iconProp)) {
	            // A single character is assumed to be an explicit icon string
	            icon = iconProp;
	          } else {
	            // for a path or URI, add it to style
	            style = mergeStyle(style, iconProp);
	          }
	        } else if ((typeof iconProp === 'undefined' ? 'undefined' : _typeof(iconProp)) === 'object') {
	          style = mergeStyle(style, iconProp);
	        }
	      }

	      if (typeof icon == 'number') {
	        // Converts a hex reference in number form
	        icon = String.fromCodePoint(icon);
	      }

	      return {
	        children: icon,
	        style: style
	      };
	    }
	  },

	  render: function render(_ref3) {
	    var iconProps = _ref3.iconProps,
	        rest = _objectWithoutProperties(_ref3, ['iconProps']);

	    delete rest.small;

	    return _react2.default.createElement('div', _extends({}, rest, iconProps));
	  }
	});

	// Let's find a way to import this list directly, and bonus feature, render our icons in the docs next to their names.
	/**
	 * {@link moonstone/Icon.iconList} is an object whose keys can be used as the child of an
	 * {@link moonstone/Icon.Icon} component.
	 *
	 * List of Icons:
	 * ```
	 * plus
	 * minus
	 * arrowhookleft
	 * arrowhookright
	 * ellipsis
	 * check
	 * circle
	 * stop
	 * play
	 * pause
	 * forward
	 * backward
	 * skipforward
	 * skipbackward
	 * pauseforward
	 * pausebackward
	 * pausejumpforward
	 * pausejumpbackward
	 * jumpforward
	 * jumpbackward
	 * denselist
	 * bulletlist
	 * list
	 * drawer
	 * arrowlargedown
	 * arrowlargeup
	 * arrowlargeleft
	 * arrowlargeright
	 * arrowsmallup
	 * arrowsmalldown
	 * arrowsmallleft
	 * arrowsmallright
	 * closex
	 * search
	 * rollforward
	 * rollbackward
	 * exitfullscreen
	 * fullscreen
	 * arrowextend
	 * arrowshrink
	 * flag
	 * funnel
	 * trash
	 * star
	 * hollowstar
	 * halfstar
	 * gear
	 * plug
	 * lock
	 * ```
	 *
	 * @name iconList
	 * @memberof moonstone/Icon
	 * @constant
	 * @type Object
	 * @public
	 */

	exports.default = IconBase;
	exports.Icon = IconBase;
	exports.IconBase = IconBase;
	exports.icons = _IconList2.default;

/***/ },
/* 124 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.IconButtonBaseFactory = exports.IconButtonFactory = exports.IconButtonBase = exports.IconButton = undefined;

	var _extends = Object.assign || function (target) {
	  for (var i = 1; i < arguments.length; i++) {
	    var source = arguments[i];for (var key in source) {
	      if (Object.prototype.hasOwnProperty.call(source, key)) {
	        target[key] = source[key];
	      }
	    }
	  }return target;
	};

	var _factory = __webpack_require__(111);

	var _factory2 = _interopRequireDefault(_factory);

	var _kind = __webpack_require__(8);

	var _kind2 = _interopRequireDefault(_kind);

	var _onlyUpdateForKeys = __webpack_require__(430);

	var _onlyUpdateForKeys2 = _interopRequireDefault(_onlyUpdateForKeys);

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _Button = __webpack_require__(122);

	var _Icon = __webpack_require__(123);

	var _Icon2 = _interopRequireDefault(_Icon);

	var _IconButton = __webpack_require__(264);

	var _IconButton2 = _interopRequireDefault(_IconButton);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	function _objectWithoutProperties(obj, keys) {
	  var target = {};for (var i in obj) {
	    if (keys.indexOf(i) >= 0) continue;if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;target[i] = obj[i];
	  }return target;
	} /**
	   * Exports the {@link moonstone/IconButton.IconButton} component.
	   *
	   * @module moonstone/IconButton
	   */

	var OptimizedIcon = (0, _onlyUpdateForKeys2.default)(['small', 'children'])(_Icon2.default);

	/**
	 * {@link moonstone/IconButton.IconButtonFactory} is Factory wrapper around
	 * {@link moonstone/IconButton.IconButton} that allows overriding certain classes of the base
	 * `Button` component at design time. See {@link moonstone/Button.ButtonBaseFactory}.
	 *
	 * @class IconButtonFactory
	 * @memberof moonstone/IconButton
	 * @factory
	 * @public
	 */
	var IconButtonBaseFactory = (0, _factory2.default)({ css: _IconButton2.default }, function (_ref) {
	  var css = _ref.css;

	  var Button = (0, _Button.ButtonFactory)({ css: css });
	  /**
	   * {@link moonstone/IconButton.IconButton} is a {@link moonstone/Icon.Icon} that acts like a button.
	   * You may specify an image or a font-based icon by setting the children to either the path to the
	   * image or a string from the [IconList]{@link moonstone/Icon.IconList}.
	   *
	   * Usage:
	   * ```
	   * <IconButton onClick={handleClick} small>
	   *     plus
	   * </IconButton>
	   * ```
	   *
	   * @class IconButton
	   * @memberof moonstone/IconButton
	   * @ui
	   * @public
	   */
	  return (0, _kind2.default)({
	    name: 'IconButton',

	    propTypes: /** @lends moonstone/IconButton.IconButton.prototype */{
	      /**
	       * The background-color opacity of this icon button; valid values are `'opaque'`,
	       * `'translucent'`, and `'transparent'`.
	       *
	       * @type {String}
	       * @default 'opaque'
	       * @public
	       */
	      backgroundOpacity: _react.PropTypes.oneOf(['opaque', 'translucent', 'transparent']),

	      /**
	       * The icon displayed within the button.
	       *
	       * @see {@link moonstone/Icon.Icon#children}
	       * @type {String|Object}
	       * @public
	       */
	      children: _react.PropTypes.string,

	      /**
	       * This property accepts one of the following color names, which correspond with the
	       * colored buttons on a standard remote control: `'red'`, `'green'`, `'yellow'`, `'blue'`
	       *
	       * @type {String}
	       * @public
	       */
	      color: _react.PropTypes.oneOf([null, 'red', 'green', 'yellow', 'blue']),

	      /**
	       * When `true`, the [button]{@glossary button} is shown as disabled and does not
	       * generate `onClick` [events]{@glossary event}.
	       *
	       * @type {Boolean}
	       * @default false
	       * @public
	       */
	      disabled: _react.PropTypes.bool,

	      /**
	       * When `true`, a pressed visual effect is applied to the icon button
	       *
	       * @type {Boolean}
	       * @public
	       */
	      pressed: _react.PropTypes.bool,

	      /**
	       * When `true`, a selected visual effect is applied to the icon button
	       *
	       * @type {Boolean}
	       * @public
	       */
	      selected: _react.PropTypes.bool,

	      /**
	       * A boolean parameter affecting the size of the button. If `true`, the
	       * button's diameter will be set to 60px. However, the button's tap target
	       * will still have a diameter of 78px, with an invisible DOM element
	       * wrapping the small button to provide the larger tap zone.
	       *
	       * @type {Boolean}
	       * @default false
	       * @public
	       */
	      small: _react.PropTypes.bool
	    },

	    defaultProps: {
	      small: false
	    },

	    styles: {
	      css: _IconButton2.default,
	      className: 'iconButton'
	    },

	    computed: {
	      className: function className(_ref2) {
	        var color = _ref2.color,
	            small = _ref2.small,
	            styler = _ref2.styler;
	        return styler.append({ small: small }, color);
	      }
	    },

	    render: function render(_ref3) {
	      var children = _ref3.children,
	          small = _ref3.small,
	          rest = _objectWithoutProperties(_ref3, ['children', 'small']);

	      return _react2.default.createElement(Button, _extends({}, rest, { small: small, minWidth: false, marqueeDisabled: true }), _react2.default.createElement(OptimizedIcon, { small: small, className: css.icon }, children));
	    }
	  });
	});

	var IconButtonBase = IconButtonBaseFactory();

	exports.default = IconButtonBase;
	exports.IconButton = IconButtonBase;
	exports.IconButtonBase = IconButtonBase;
	exports.IconButtonFactory = IconButtonBaseFactory;
	exports.IconButtonBaseFactory = IconButtonBaseFactory;

/***/ },
/* 125 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	exports.MarqueeBase = exports.Marquee = undefined;

	var _kind = __webpack_require__(8);

	var _kind2 = _interopRequireDefault(_kind);

	var _util = __webpack_require__(57);

	var _I18nDecorator = __webpack_require__(72);

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _Marquee = __webpack_require__(265);

	var _Marquee2 = _interopRequireDefault(_Marquee);

	function _interopRequireDefault(obj) {
		return obj && obj.__esModule ? obj : { default: obj };
	}

	var animated = _Marquee2.default.text + ' ' + _Marquee2.default.animate;

	/**
	 * {@link moonstone/Marquee.Marquee} is a stateless text container element which
	 * implements a text cut-off followed by an ellipsis character.
	 *
	 * @class Marquee
	 * @memberof moonstone/Marquee
	 * @ui
	 * @public
	 */
	/*
	 * Exports the {@link moonstone/Marquee.Marquee} and {@link moonstone/Marquee.MarqueeBase}
	 * components. The default export is {@link moonstone/Marquee.Marquee}.
	 *
	 * note: not jsdoc on purpose, exports in index.js
	 */

	var MarqueeBase = (0, _kind2.default)({
		name: 'Marquee',

		propTypes: /** @lends moonstone/Marquee.Marquee.prototype */{

			/**
	   * `true` when the component should be animating
	   *
	   * @type {Boolean}
	   * @public
	   */
			animating: _react2.default.PropTypes.bool,

			/**
	   * When `true`, the contents will be centered regardless of the text directionality.
	   *
	   * @type {Boolean}
	   * @public
	   */
			centered: _react2.default.PropTypes.bool,

			/**
	   * `children` is the text or a set of components that should be scrolled by the
	   * {@link moonstone/Marquee.Marquee} component.
	   * This prop may be empty in some cases, which is OK.
	   *
	   * @type {Node|Node[]}
	   * @public
	   */
			children: _react2.default.PropTypes.node,

			/**
	   * CSS class name for the root node
	   *
	   * @type {String}
	   * @public
	   */
			className: _react2.default.PropTypes.string,

			/**
	   * Function to capture a reference to the client node
	   *
	   * @type {Function}
	   * @public
	   */
			clientRef: _react2.default.PropTypes.func,

			/**
	   * Distance to animate the marquee which is generally the width of the text minus the
	   * width of the container.
	   *
	   * @type {Number}
	   * @public
	   */
			distance: _react2.default.PropTypes.number,

			/**
	   * Forces the `direction` of the marquee. Valid values are `rtl` and `ltr`. This includes non-text elements as well.
	   *
	   * @type {String}
	   * @public
	   */
			forceDirection: _react2.default.PropTypes.oneOf(['rtl', 'ltr']),

			/**
	   * Callback function for when the marquee completes its animation
	   *
	   * @type {Function}
	   * @public
	   */
			onMarqueeComplete: _react2.default.PropTypes.func,

			/**
	   * Text overflow setting. Either `'clip'` or `'ellipsis'`
	   *
	   * @type {String}
	   * @public
	   */
			overflow: _react2.default.PropTypes.oneOf(['clip', 'ellipsis']),

			/**
	   * Speed of marquee animation in pixels/second.
	   *
	   * @type {Number}
	   * @public
	   */
			speed: _react2.default.PropTypes.number
		},

		styles: {
			css: _Marquee2.default,
			className: 'marquee'
		},

		computed: {
			clientClassName: function clientClassName(_ref) {
				var animating = _ref.animating;
				return animating ? animated : _Marquee2.default.text;
			},
			clientStyle: function clientStyle(_ref2, _ref3) {
				var animating = _ref2.animating,
				    centered = _ref2.centered,
				    children = _ref2.children,
				    distance = _ref2.distance,
				    forceDirection = _ref2.forceDirection,
				    overflow = _ref2.overflow,
				    speed = _ref2.speed;
				var contextRtl = _ref3.rtl;

				var rtl = forceDirection ? forceDirection === 'rtl' : (0, _util.isRtlText)(children);

				var overrideRtl = forceDirection ? true : contextRtl !== rtl;

				// We only attempt to set the textAlign of this control if the locale's directionality
				// differs from the directionality of our current marqueeable control (as determined by
				// the control's content) and it will marquee.
				var textAlign = null;
				if (centered) {
					textAlign = 'center';
				} else if (overrideRtl && distance > 0) {
					if (rtl) {
						textAlign = 'right';
					} else {
						textAlign = 'left';
					}
				}

				// If the components content directionality doesn't match the context, we need to set it
				// inline
				var direction = 'inherit';
				if (overrideRtl) {
					direction = rtl ? 'rtl' : 'ltr';
				}

				var style = {
					direction: direction,
					textAlign: textAlign,
					textOverflow: overflow
				};

				if (animating) {
					var adjustedDistance = rtl ? distance : distance * -1;
					var duration = distance / speed;

					style.transform = 'translate3d(' + adjustedDistance + 'px, 0, 0)';
					style.transition = 'transform ' + duration + 's linear';
					style.WebkitTransition = 'transform ' + duration + 's linear';
					style.willChange = 'transform';
				}

				return style;
			}
		},

		render: function render(_ref4) {
			var children = _ref4.children,
			    className = _ref4.className,
			    clientClassName = _ref4.clientClassName,
			    clientRef = _ref4.clientRef,
			    clientStyle = _ref4.clientStyle,
			    onMarqueeComplete = _ref4.onMarqueeComplete;

			return _react2.default.createElement('div', { className: className }, _react2.default.createElement('div', {
				className: clientClassName,
				ref: clientRef,
				style: clientStyle,
				onTransitionEnd: onMarqueeComplete
			}, children));
		}
	});

	MarqueeBase.contextTypes = _I18nDecorator.contextTypes;

	exports.default = MarqueeBase;
	exports.Marquee = MarqueeBase;
	exports.MarqueeBase = MarqueeBase;

/***/ },
/* 126 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	exports.MarqueeController = exports.contextTypes = undefined;

	var _extends = Object.assign || function (target) {
		for (var i = 1; i < arguments.length; i++) {
			var source = arguments[i];for (var key in source) {
				if (Object.prototype.hasOwnProperty.call(source, key)) {
					target[key] = source[key];
				}
			}
		}return target;
	};

	var _createClass = function () {
		function defineProperties(target, props) {
			for (var i = 0; i < props.length; i++) {
				var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
			}
		}return function (Constructor, protoProps, staticProps) {
			if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
		};
	}();

	var _handle = __webpack_require__(16);

	var _hoc = __webpack_require__(10);

	var _hoc2 = _interopRequireDefault(_hoc);

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	function _interopRequireDefault(obj) {
		return obj && obj.__esModule ? obj : { default: obj };
	}

	function _classCallCheck(instance, Constructor) {
		if (!(instance instanceof Constructor)) {
			throw new TypeError("Cannot call a class as a function");
		}
	}

	function _possibleConstructorReturn(self, call) {
		if (!self) {
			throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
		}return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
		if (typeof superClass !== "function" && superClass !== null) {
			throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
		}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	var STATE = {
		inactive: 0, // Marquee is not necessary (render or focus not happened)
		active: 1, // Marquee in progress, awaiting complete
		ready: 2 // Marquee completed or not needed, but state is active
	};

	/**
	 * Context propTypes for MarqueeController
	 *
	 * @memberof moonstone/Marquee.Marquee
	 * @private
	 */
	var contextTypes = {
		/**
	  * Called by Marquee instances when marqueeing is canceled (e.g. when blurring a Marquee
	  * set to `marqueeOn='focus'`)
	  *
	  * @type {Function}
	  * @memberof moonstone/Marquee.Marquee.contextTypes
	  */
		cancel: _react2.default.PropTypes.func,

		/**
	  * Called by Marquee instances when marqueeing has completed
	  *
	  * @type {Function}
	  * @memberof moonstone/Marquee.Marquee.contextTypes
	  */
		complete: _react2.default.PropTypes.func,

		/**
	  * Called to register a Marquee instance to be synchronized
	  *
	  * @type {Function}
	  * @memberof moonstone/Marquee.Marquee.contextTypes
	  */
		register: _react2.default.PropTypes.func,

		/**
	  * Called by Marquee instances when marqueeing is started (e.g. when focusing a Marquee
	  * set to `marqueeOn='focus'`). If the Marquee instance should not or does not need to marquee,
	  * the function can return `true` to mark itself complete.
	  *
	  * @type {Function}
	  * @memberof moonstone/Marquee.Marquee.contextTypes
	  */
		start: _react2.default.PropTypes.func,

		/**
	  * Called to unregister a synchronized Marquee instance
	  *
	  * @type {Function}
	  * @memberof moonstone/Marquee.Marquee.contextTypes
	  */
		unregister: _react2.default.PropTypes.func
	};

	/**
	 * Default configuration parameters for {@link moonstone/Marquee.MarqueeController}
	 *
	 * @type {Object}
	 * @memberof moonstone/Marquee.MarqueeController
	 * @hocconfig
	 */
	var defaultConfig = {
		/**
	  * When `true`, any `onFocus` events that bubble to the controller will start the contained
	  * Marquee instances. This is useful when a component contains Marquee instances that need to be
	  * started with sibling components are focused.
	  *
	  * @type {Boolean}
	  * @default false
	  * @memberof moonstone/Marquee.MarqueeController.defaultConfig
	  */
		marqueeOnFocus: false
	};

	/**
	 * {@link moonstone/Marquee.MarqueeController} is a Higher-order Component which will synchronize
	 * contained Marquee's.
	 *
	 * @class MarqueeController
	 * @memberof moonstone/Marquee
	 * @hoc
	 * @public
	 */
	var MarqueeController = (0, _hoc2.default)(defaultConfig, function (config, Wrapped) {
		var _class, _temp;

		var marqueeOnFocus = config.marqueeOnFocus;

		var forwardBlur = (0, _handle.forward)('onBlur');
		var forwardFocus = (0, _handle.forward)('onFocus');

		return _temp = _class = function (_React$Component) {
			_inherits(_class, _React$Component);

			function _class(props) {
				_classCallCheck(this, _class);

				var _this = _possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).call(this, props));

				_this.handleRegister = function (component, handlers) {
					var needsStart = !_this.allInactive();

					_this.controlled.push(_extends({}, handlers, {
						state: STATE.inactive,
						component: component
					}));

					if (needsStart) {
						_this.dispatch('start');
					}
				};

				_this.handleUnregister = function (component) {
					var wasRunning = false;
					for (var i = 0; i < _this.controlled.length; i++) {
						if (_this.controlled[i].component === component) {
							wasRunning = _this.controlled[i].state === STATE.active;
							_this.controlled.splice(i, 1);
							break;
						}
					}
					if (wasRunning && !_this.anyRunning()) {
						_this.dispatch('start');
					}
				};

				_this.handleStart = function (component) {
					if (!_this.anyRunning()) {
						_this.markAll(STATE.ready);
						_this.dispatch('start', component);
					}
				};

				_this.handleCancel = function (component) {
					_this.markAll(STATE.inactive);
					_this.dispatch('stop', component);
				};

				_this.handleComplete = function (component) {
					var complete = _this.markReady(component);
					if (complete) {
						_this.markAll(STATE.ready);
						_this.dispatch('start');
					}
				};

				_this.handleFocus = function (ev) {
					_this.dispatch('start');
					forwardFocus(ev, _this.props);
				};

				_this.handleBlur = function (ev) {
					_this.dispatch('stop');
					_this.markAll(STATE.inactive);
					forwardBlur(ev, _this.props);
				};

				_this.controlled = [];
				return _this;
			}

			_createClass(_class, [{
				key: 'getChildContext',
				value: function getChildContext() {
					return {
						cancel: this.handleCancel,
						complete: this.handleComplete,
						register: this.handleRegister,
						start: this.handleStart,
						unregister: this.handleUnregister
					};
				}

				/*
	    * Registers `component` with a set of handlers for `start` and `stop`.
	    *
	    * @param	{Object}	component	A component, typically a React component instance, on
	    *									which handlers will be dispatched.
	    * @param	{Object}	handlers	An object containing `start` and `stop` functions
	    *
	    * @returns {undefined}
	    */

				/*
	    * Unregisters `component` for synchronization
	    *
	    * @param	{Object}	component	A previously registered component
	    *
	    * @returns	{undefined}
	    */

				/*
	    * Handler for the `start` context function
	    *
	    * @param	{Object}	component	A previously registered component
	    *
	    * @returns	{undefined}
	    */

				/*
	    * Handler for the `cancel` context function
	    *
	    * @param	{Object}	component	A previously registered component
	    *
	    * @returns	{undefined}
	    */

				/*
	    * Handler for the `complete` context function
	    *
	    * @param	{Object}	component	A previously registered component
	    *
	    * @returns	{undefined}
	    */

				/*
	    * Handler for the focus event
	    */

				/*
	    * Handler for the blur event
	    */

			}, {
				key: 'dispatch',

				/*
	    * Invokes the `action` handler for each synchronized component except the invoking
	    * `component`.
	    *
	    * @param	{String}	action		`'start'` or `'stop'`
	    * @param	{Object}	component	A previously registered component
	    *
	    * @returns	{undefined}
	    */
				value: function dispatch(action, component) {
					this.controlled.forEach(function (controlled) {
						var controlledComponent = controlled.component,
						    handler = controlled[action];

						if (component !== controlledComponent && typeof handler === 'function') {
							var complete = handler.call(controlledComponent);

							// Returning `true` from a start request means that the marqueeing is
							// unnecessary and is therefore not awaiting a finish
							if (action === 'start' && complete) {
								controlled.state = STATE.ready;
							} else if (action === 'start') {
								controlled.state = STATE.active;
							}
						} else if (action === 'start' && component === controlledComponent) {
							controlled.state = STATE.active;
						}
					});
				}

				/*
	    * Marks all components with the passed-in state
	    *
	    * @param	{Enum}	state	The state to set
	    *
	    * @returns	{undefined}
	    */

			}, {
				key: 'markAll',
				value: function markAll(state) {
					this.controlled.forEach(function (c) {
						c.state = state;
					});
				}

				/*
	    * Marks `component` as ready for next marquee action
	    *
	    * @param	{Object}	component	A previously registered component
	    *
	    * @returns	{Boolean}				`true` if no components are STATE.active
	    */

			}, {
				key: 'markReady',
				value: function markReady(component) {
					var complete = true;
					this.controlled.forEach(function (c) {
						if (c.component === component) {
							c.state = STATE.ready;
						}

						complete = complete && c.state !== STATE.active;
					});

					return complete;
				}

				/*
	    * Checks that all components are inactive
	    *
	    * @returns {Boolean} `true` if any components should be running
	    */

			}, {
				key: 'allInactive',
				value: function allInactive() {
					var activeOrReady = this.controlled.reduce(function (res, component) {
						return res || !(component.state === STATE.inactive);
					}, false);
					return !activeOrReady;
				}

				/*
	    * Checks for any components currently marqueeing
	    *
	    * @returns {Boolean} `true` if any component is marqueeing
	    */

			}, {
				key: 'anyRunning',
				value: function anyRunning() {
					return this.controlled.reduce(function (res, component) {
						return res || component.state === STATE.active;
					}, false);
				}
			}, {
				key: 'render',
				value: function render() {
					var props = this.props;

					if (marqueeOnFocus) {
						props = _extends({}, this.props, {
							onBlur: this.handleBlur,
							onFocus: this.handleFocus
						});
					}

					return _react2.default.createElement(Wrapped, props);
				}
			}]);

			return _class;
		}(_react2.default.Component), _class.displayName = 'MarqueeController', _class.childContextTypes = contextTypes, _temp;
	});

	exports.default = MarqueeController;
	exports.contextTypes = contextTypes;
	exports.MarqueeController = MarqueeController;

/***/ },
/* 127 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	exports.MarqueeDecorator = undefined;

	var _extends = Object.assign || function (target) {
		for (var i = 1; i < arguments.length; i++) {
			var source = arguments[i];for (var key in source) {
				if (Object.prototype.hasOwnProperty.call(source, key)) {
					target[key] = source[key];
				}
			}
		}return target;
	};

	var _createClass = function () {
		function defineProperties(target, props) {
			for (var i = 0; i < props.length; i++) {
				var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
			}
		}return function (Constructor, protoProps, staticProps) {
			if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
		};
	}();

	var _hoc = __webpack_require__(10);

	var _hoc2 = _interopRequireDefault(_hoc);

	var _handle = __webpack_require__(16);

	var _util = __webpack_require__(28);

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _Marquee = __webpack_require__(125);

	var _Marquee2 = _interopRequireDefault(_Marquee);

	var _MarqueeController = __webpack_require__(126);

	function _interopRequireDefault(obj) {
		return obj && obj.__esModule ? obj : { default: obj };
	}

	function _objectWithoutProperties(obj, keys) {
		var target = {};for (var i in obj) {
			if (keys.indexOf(i) >= 0) continue;if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;target[i] = obj[i];
		}return target;
	}

	function _classCallCheck(instance, Constructor) {
		if (!(instance instanceof Constructor)) {
			throw new TypeError("Cannot call a class as a function");
		}
	}

	function _possibleConstructorReturn(self, call) {
		if (!self) {
			throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
		}return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
		if (typeof superClass !== "function" && superClass !== null) {
			throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
		}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	/**
	 * Default configuration parameters for {@link moonstone/Marquee.MarqueeDecorator}
	 *
	 * @type {Object}
	 * @memberof moonstone/Marquee.MarqueeDecorator
	 * @hocconfig
	 */
	var defaultConfig = {
		/**
	  * Property containing the callback to stop the animation when `marqueeOn` is `'focus'`
	  *
	  * @type {String}
	  * @default 'onBlur'
	  * @memberof moonstone/Marquee.MarqueeDecorator.defaultConfig
	  */
		blur: 'onBlur',

		/**
	  * Optional CSS class to apply to the marqueed element
	  *
	  * @type {String}
	  * @default null
	  * @memberof moonstone/Marquee.MarqueeDecorator.defaultConfig
	  */
		className: null,

		/**
	  * Property containing the callback to start the animation when `marqueeOn` is `'hover'`
	  *
	  * @type {String}
	  * @default 'onMouseEnter'
	  * @memberof moonstone/Marquee.MarqueeDecorator.defaultConfig
	  */
		enter: 'onMouseEnter',

		/**
	  * Property containing the callback to start the animation when `marqueeOn` is `'focus'`
	  *
	  * @type {String}
	  * @default 'onFocus'
	  * @memberof moonstone/Marquee.MarqueeDecorator.defaultConfig
	  */
		focus: 'onFocus',

		/**
	 * Invalidate the distance if any property (like 'inline') changes.
	 * Expects an array of props which on change trigger invalidateMetrics.
	 *
	 * @type {Array}
	 * @default null
	 * @memberof moonstone/Marquee.MarqueeDecorator.defaultConfig
	 */
		invalidateProps: null,

		/**
	  * Property containing the callback to stop the animation when `marqueeOn` is `'hover'`
	  *
	  * @type {String}
	  * @default 'onMouseLeave'
	  * @memberof moonstone/Marquee.MarqueeDecorator.defaultConfig
	  */
		leave: 'onMouseLeave'
	};

	/**
	 * Checks whether any of the invalidateProps has changed or not
	 *
	 * @param {Array} propList An array of invalidateProps
	 * @param {Object} prev Previous props
	 * @param {Object} next Next props
	 * @returns {Boolean} `true` if any of the props changed
	 * @private
	 */
	var didPropChange = function didPropChange(propList, prev, next) {
		var hasPropsChanged = propList.map(function (i) {
			return prev[i] !== next[i];
		});
		return hasPropsChanged.indexOf(true) !== -1;
	};

	/**
	 * {@link moonstone/Marquee.MarqueeDecorator} is a Higher-order Component which makes
	 * the Wrapped component's children marquee.
	 *
	 * @class MarqueeDecorator
	 * @memberof moonstone/Marquee
	 * @hoc
	 * @public
	 */
	var MarqueeDecorator = (0, _hoc2.default)(defaultConfig, function (config, Wrapped) {
		var _class, _temp;

		var blur = config.blur,
		    marqueeClassName = config.className,
		    enter = config.enter,
		    focus = config.focus,
		    invalidateProps = config.invalidateProps,
		    leave = config.leave;

		// Generate functions to forward events to containers

		var forwardBlur = (0, _handle.forward)(blur);
		var forwardFocus = (0, _handle.forward)(focus);
		var forwardEnter = (0, _handle.forward)(enter);
		var forwardLeave = (0, _handle.forward)(leave);

		return _temp = _class = function (_React$Component) {
			_inherits(_class, _React$Component);

			function _class(props) {
				_classCallCheck(this, _class);

				var _this = _possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).call(this, props));

				_this.start = function () {
					var delay = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _this.props.marqueeDelay;

					if (_this.props.marqueeDisabled || _this.contentFits) {
						// if marquee isn't necessary (contentFits), do not set `animating` but return
						// `true` to mark it complete if its synchronized so it doesn't block other
						// instances.
						return true;
					} else if (!_this.state.animating) {
						_this.setTimeout(function () {
							_this.calculateMetrics();
							if (!_this.contentFits) {
								_this.setState({
									animating: true
								});
							} else if (_this.sync) {
								_this.context.complete(_this);
							}
						}, delay);
					}
				};

				_this.stop = function () {
					_this.clearTimeout();
					_this.setState({
						animating: false
					});
				};

				_this.startAnimation = function (delay) {
					if (_this.state.animating) return;

					if (_this.sync) {
						_this.setTimeout(function () {
							_this.context.start();
						}, delay);
					} else {
						_this.start(delay);
					}
				};

				_this.restartAnimation = function () {
					_this.setState({
						animating: false
					});
					// synchronized Marquees defer to the controller to restart them
					if (_this.sync) {
						_this.context.complete(_this);
					} else {
						_this.startAnimation();
					}
				};

				_this.resetAnimation = function () {
					var marqueeResetDelay = Math.max(40, _this.props.marqueeResetDelay);
					_this.setTimeout(_this.restartAnimation, marqueeResetDelay);
				};

				_this.cancelAnimation = function () {
					if (_this.sync) {
						_this.forceRestartMarquee = true;
						if (_this.state.animating) {
							_this.context.cancel(_this);
						}
					}

					_this.stop();
				};

				_this.handleMarqueeComplete = function (ev) {
					_this.resetAnimation();
					ev.stopPropagation();
				};

				_this.handleFocus = function (ev) {
					_this.isFocused = true;
					_this.startAnimation();
					forwardFocus(ev, _this.props);
				};

				_this.handleBlur = function (ev) {
					_this.isFocused = false;
					_this.cancelAnimation();
					forwardBlur(ev, _this.props);
				};

				_this.handleEnter = function (ev) {
					_this.isHovered = true;
					_this.startAnimation();
					forwardEnter(ev, _this.props);
				};

				_this.handleLeave = function (ev) {
					_this.isHovered = false;
					_this.cancelAnimation();
					forwardLeave(ev, _this.props);
				};

				_this.cacheNode = function (node) {
					_this.node = node;
				};

				_this.state = {
					overflow: 'ellipsis'
				};
				_this.sync = false;
				_this.forceRestartMarquee = false;

				_this.invalidateMetrics();
				return _this;
			}

			_createClass(_class, [{
				key: 'componentDidMount',
				value: function componentDidMount() {
					if (this.context.register) {
						this.sync = true;
						this.context.register(this, {
							start: this.start,
							stop: this.stop
						});
					}

					if (this.props.marqueeOn === 'render') {
						this.startAnimation(this.props.marqueeOnRenderDelay);
					}
				}
			}, {
				key: 'componentWillReceiveProps',
				value: function componentWillReceiveProps(next) {
					var _props = this.props,
					    marqueeOn = _props.marqueeOn,
					    marqueeDisabled = _props.marqueeDisabled,
					    marqueeSpeed = _props.marqueeSpeed;

					if (!(0, _util.childrenEquals)(this.props.children, next.children) || invalidateProps && didPropChange(invalidateProps, this.props, next)) {
						this.invalidateMetrics();
						this.cancelAnimation();
					} else if (next.marqueeOn !== marqueeOn || next.marqueeDisabled !== marqueeDisabled || next.marqueeSpeed !== marqueeSpeed) {
						this.cancelAnimation();
					}
				}
			}, {
				key: 'componentDidUpdate',
				value: function componentDidUpdate() {
					if (this.shouldStartMarquee()) {
						this.startAnimation(this.props.marqueeOn === 'render' ? this.props.marqueeOnRenderDelay : this.props.marqueeDelay);
					}
					this.forceRestartMarquee = false;
				}
			}, {
				key: 'componentWillUnmount',
				value: function componentWillUnmount() {
					this.clearTimeout();
					if (this.sync) {
						this.sync = false;
						this.context.unregister(this);
					}
				}

				/**
	    * Clears the timer
	    *
	    * @returns {undefined}
	    */

			}, {
				key: 'clearTimeout',
				value: function clearTimeout() {
					if (window && this.timer) {
						window.clearTimeout(this.timer);
						this.timer = null;
					}
				}

				/**
	    * Starts a new timer
	    *
	    * @param {Function} fn   Callback
	    * @param {Number}   time Delay in milliseconds
	    * @returns {undefined}
	    */

			}, {
				key: 'setTimeout',
				value: function setTimeout(fn) {
					var time = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

					this.clearTimeout();
					if (window) {
						this.timer = window.setTimeout(fn, time);
					}
				}

				/**
	    * Checks to see if the children changed during a condition that should cause us to re-check
	    * the animation state
	    *
	    * @returns {Boolean} - `true` if a possible marquee condition exists
	    */

			}, {
				key: 'shouldStartMarquee',
				value: function shouldStartMarquee() {
					return (
						// restart un-synced marquees or marqueeOn="render" synced marquees that were
						// cancelled due to a prop change
						(!this.sync || this.forceRestartMarquee) && (this.props.marqueeOn === 'render' || this.isFocused && this.props.marqueeOn === 'focus' || this.isHovered && this.props.marqueeOn === 'hover')
					);
				}

				/**
	    * Invalidates marquee metrics requiring them to be recalculated
	    *
	    * @returns {undefined}
	    */

			}, {
				key: 'invalidateMetrics',
				value: function invalidateMetrics() {
					// Null distance is the special value to allow recalculation
					this.distance = null;
					// Assume the marquee does not fit until calculations show otherwise
					this.contentFits = false;
				}

				/**
	   * Determines if the component should marquee and the distance to animate
	   *
	   * @returns {undefined}
	   */

			}, {
				key: 'calculateMetrics',
				value: function calculateMetrics() {
					var node = this.node;

					// TODO: absolute showing check (or assume that it won't be rendered if it isn't showing?)
					if (node && this.distance == null && !this.props.marqueeDisabled) {
						this.distance = this.calculateDistance(node);
						this.contentFits = !this.shouldAnimate(this.distance);
						this.setState({
							overflow: this.calculateTextOverflow(this.distance)
						});
					}
				}

				/**
	    * Calculates the distance the marquee must travel to reveal all of the content
	    *
	    * @param	{DOMNode}	node	DOM Node to measure
	    * @returns	{Number}			Distance to travel in pixels
	    */

			}, {
				key: 'calculateDistance',
				value: function calculateDistance(node) {
					var rect = node.getBoundingClientRect();
					var distance = Math.floor(Math.abs(node.scrollWidth - rect.width));

					return distance;
				}

				/**
	    * Calculates the text overflow to use to correctly render the ellipsis. If the distance is
	    * exactly 0, then the ellipsis is most likely hiding the content, and marquee does not need
	    * to animate.
	    *
	    * @param	{Number}	distance	Amount of overflow in pixels
	    * @returns	{String}				text-overflow value
	    */

			}, {
				key: 'calculateTextOverflow',
				value: function calculateTextOverflow(distance) {
					return distance === 0 ? 'clip' : 'ellipsis';
				}

				/**
	    * Calculates if the marquee should animate
	    *
	    * @param	{Number}	distance	Amount of overflow in pixels
	    * @returns	{Boolean}				`true` if it should animated
	    */

			}, {
				key: 'shouldAnimate',
				value: function shouldAnimate(distance) {
					return distance > 0;
				}

				/**
	    * Starts the animation without synchronizing
	    *
	    * @param	{Number}	[delay]	Milleseconds to wait before animating
	    * @returns	{undefined}
	    */

				/**
	    * Stops the animation
	    *
	    * @returns	{undefined}
	    */

				/**
	    * Starts marquee animation with synchronization
	    *
	    * @param {Number} [delay] Milleseconds to wait before animating
	    * @returns {undefined}
	    */

				/**
	    * Resets the marquee and restarts it after `marqueeDelay` millisecons.
	    *
	    * @returns {undefined}
	    */

				/**
	    * Resets and restarts the marquee after `marqueeResetDelay` milliseconds
	    *
	    * @returns {undefined}
	    */

				/**
	    * Cancels the marquee
	    *
	    * @returns {undefined}
	    */

			}, {
				key: 'renderMarquee',
				value: function renderMarquee() {
					var _props2 = this.props,
					    children = _props2.children,
					    disabled = _props2.disabled,
					    forceDirection = _props2.forceDirection,
					    marqueeCentered = _props2.marqueeCentered,
					    marqueeOn = _props2.marqueeOn,
					    marqueeSpeed = _props2.marqueeSpeed,
					    rest = _objectWithoutProperties(_props2, ['children', 'disabled', 'forceDirection', 'marqueeCentered', 'marqueeOn', 'marqueeSpeed']);

					var marqueeOnFocus = marqueeOn === 'focus';
					var marqueeOnHover = marqueeOn === 'hover';

					if (marqueeOnFocus && !disabled) {
						rest[focus] = this.handleFocus;
						rest[blur] = this.handleBlur;
					}

					// TODO: cancel others on hover
					if (marqueeOnHover || disabled && marqueeOnFocus) {
						rest[enter] = this.handleEnter;
						rest[leave] = this.handleLeave;
					}

					delete rest.marqueeDelay;
					delete rest.marqueeDisabled;
					delete rest.marqueeOnRenderDelay;
					delete rest.marqueeResetDelay;
					delete rest.marqueeSpeed;

					return _react2.default.createElement(Wrapped, _extends({}, rest, { disabled: disabled }), _react2.default.createElement(_Marquee2.default, {
						animating: this.state.animating,
						centered: marqueeCentered,
						className: marqueeClassName,
						clientRef: this.cacheNode,
						distance: this.distance,
						forceDirection: forceDirection,
						onMarqueeComplete: this.handleMarqueeComplete,
						overflow: this.state.overflow,
						speed: marqueeSpeed
					}, children));
				}
			}, {
				key: 'renderWrapped',
				value: function renderWrapped() {
					var props = Object.assign({}, this.props);

					delete props.marqueeCentered;
					delete props.marqueeDelay;
					delete props.marqueeDisabled;
					delete props.marqueeOn;
					delete props.marqueeOnRenderDelay;
					delete props.marqueeResetDelay;
					delete props.marqueeSpeed;

					return _react2.default.createElement(Wrapped, props);
				}
			}, {
				key: 'render',
				value: function render() {
					if (this.props.marqueeDisabled) {
						return this.renderWrapped();
					} else {
						return this.renderMarquee();
					}
				}
			}]);

			return _class;
		}(_react2.default.Component), _class.displayName = 'MarqueeDecorator', _class.contextTypes = _MarqueeController.contextTypes, _class.propTypes = /** @lends moonstone/Marquee.MarqueeDecorator.prototype */{
			/**
	   * Children to be marqueed
	   *
	   * @type {Node}
	   * @public
	   */
			children: _react2.default.PropTypes.node,

			/**
	   * Disables all marquee behavior except when `marqueeOn` is `'hover'` or `'focus'`. Will
	   * be forwarded onto the wrapped component as well.
	   *
	   * @type {Boolean}
	   * @public
	   */
			disabled: _react2.default.PropTypes.bool,

			/**
	   * Forces the `direction` of the marquee. Valid values are `'rtl'` and `'ltr'`. This includes non-text elements as well.
	   *
	   * @type {String}
	   * @public
	   */
			forceDirection: _react2.default.PropTypes.oneOf(['rtl', 'ltr']),

			/**
	   * When `true`, the contents will be centered regardless of the text directionality.
	   *
	   * @type {Boolean}
	   * @public
	   */
			marqueeCentered: _react2.default.PropTypes.bool,

			/**
	   * Number of milliseconds to wait before starting marquee when `marqueeOn` is `'hover'` or
	   * `'focus'` or before restarting any marquee.
	   *
	   * @type {Number}
	   * @default 1000
	   * @public
	   */
			marqueeDelay: _react2.default.PropTypes.number,

			/**
	   * Disables all marquee behavior and removes supporting markup.
	   *
	   * @type {Boolean}
	   */
			marqueeDisabled: _react2.default.PropTypes.bool,

			/**
	   * Determines what triggers the marquee to start its animation. Valid values are
	   * `'focus'`, `'hover'` and `'render'`. The default is `'focus'`.
	   *
	   * @type {String}
	   * @default 'focus'
	   * @public
	   */
			marqueeOn: _react2.default.PropTypes.oneOf(['focus', 'hover', 'render']),

			/**
	   * Number of milliseconds to wait before starting marquee the first time. Has no effect
	   * if `marqueeOn` is not `'render'`
	   *
	   * @type {Number}
	   * @default 1000
	   * @public
	   */
			marqueeOnRenderDelay: _react2.default.PropTypes.number,

			/**
	   * Number of milliseconds to wait before resetting the marquee position after it
	   * finishes. A minimum of 40 milliseconds is enforced.
	   *
	   * @type {Number}
	   * @default 1000
	   * @public
	   */
			marqueeResetDelay: _react2.default.PropTypes.number,

			/**
	   * Rate of marquee measured in pixels/second.
	   *
	   * @type {Number}
	   * @default 60
	   * @public
	   */
			marqueeSpeed: _react2.default.PropTypes.number
		}, _class.defaultProps = {
			marqueeDelay: 1000,
			marqueeOn: 'focus',
			marqueeOnRenderDelay: 1000,
			marqueeResetDelay: 1000,
			marqueeSpeed: 60
		}, _temp;
	});

	exports.default = MarqueeDecorator;
	exports.MarqueeDecorator = MarqueeDecorator;

/***/ },
/* 128 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.MarqueeText = exports.MarqueeDecorator = exports.MarqueeController = exports.MarqueeBase = exports.Marquee = exports.controlContextTypes = undefined;

	var _Marquee = __webpack_require__(125);

	var _Marquee2 = _interopRequireDefault(_Marquee);

	var _MarqueeController = __webpack_require__(126);

	var _MarqueeDecorator = __webpack_require__(127);

	var _MarqueeDecorator2 = _interopRequireDefault(_MarqueeDecorator);

	var _MarqueeText = __webpack_require__(229);

	var _MarqueeText2 = _interopRequireDefault(_MarqueeText);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	/**
	 * Exports the {@link moonstone/Marquee.Marquee},
	 * {@link moonstone/Marquee.MarqueeBase},
	 * {@link moonstone/Marquee.MarqueeController},
	 * {@link moonstone/Marquee.MarqueeDecorator}, and
	 * {@link moonstone/Marquee.MarqueeText} components.
	 *
	 * The default export is {@link moonstone/Marquee.Marquee}.
	 *
	 * @module moonstone/Marquee
	 */

	exports.default = _Marquee2.default;
	exports.controlContextTypes = _MarqueeController.contextTypes;
	exports.Marquee = _Marquee2.default;
	exports.MarqueeBase = _Marquee2.default;
	exports.MarqueeController = _MarqueeController.MarqueeController;
	exports.MarqueeDecorator = _MarqueeDecorator2.default;
	exports.MarqueeText = _MarqueeText2.default;

/***/ },
/* 129 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.ActivityArranger = exports.AlwaysViewingArranger = undefined;

	var _arrange = __webpack_require__(84);

	var _quadInOut = __webpack_require__(291);

	var _quadInOut2 = _interopRequireDefault(_quadInOut);

	var _resolution = __webpack_require__(45);

	var _Breadcrumb = __webpack_require__(44);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	/**
	 * Panel arrangers have a unique design requirement that varies their transition depending on the
	 * direction (reverse) of the transition. This takes the two arrangement functions and returns
	 * another function that picks which to call based on the value of `reverseTransition`.
	 *
	 * @param {Function} f forward function
	 * @param {Function} b backward function
	 * @returns {Function} Arrangement function
	 * @private
	 */
	var forwardBackward = function forwardBackward(f, b) {
	  return function (config) {
	    var f2 = config.reverseTransition ? b : f;
	    f2(config);
	  };
	};

	/**
	 * Utility method to apply the same easing and reset the transform before applying `fn`
	 *
	 * @param   {Function} fn Arrangement function
	 * @returns {Function}    Composed arrangement function
	 * @private
	 */
	var base = function base(fn) {
	  return (0, _arrange.reverse)((0, _arrange.ease)(_quadInOut2.default, (0, _arrange.compose)(_arrange.clearTransform, fn)));
	};

	// Creating these here since they're composed below in forwardBackward
	var slideInRight = base((0, _arrange.slideIn)('right'));
	var slideOutLeft = base((0, _arrange.slideOut)('left'));

	// These are the arrangers for AlwaysViewing but also composed in Activity
	var panelEnter = forwardBackward(slideInRight, (0, _arrange.endBy)(0.75, slideInRight));
	var panelLeave = forwardBackward(slideOutLeft, (0, _arrange.endBy)(0.75, slideOutLeft));

	// Always-Viewing Arranger

	/**
	 * Arranger that slides panels in from the right and out to the left
	 *
	 * @type {Arranger}
	 * @private
	 */
	var AlwaysViewingArranger = exports.AlwaysViewingArranger = {
	  enter: panelEnter,
	  leave: panelLeave
	};

	// Actvity Arranger

	/**
	 * Appends a transform that accounts for a single breadcrumb
	 *
	 * @param  {Node} options.node      DOM Node
	 * @param  {Number} options.percent Percentage complete between 0 and 1
	 *
	 * @returns {undefined}
	 * @private
	 */
	var offsetForBreadcrumbs = function offsetForBreadcrumbs(_ref) {
	  var node = _ref.node;

	  var isFirst = node && node.dataset && node.dataset.index === '0';

	  if (!isFirst) {
	    var x = (0, _resolution.unit)((0, _resolution.scale)(_Breadcrumb.breadcrumbWidth), 'rem');
	    (0, _arrange.appendTransform)('translateX(' + x + ')', { node: node });
	  }
	};

	// Adds the data-clip attribute to allow clipping when transitioning between non-zero panels
	// CSS is enforced by Panels.less
	var clipForBreadcrumbs = function clipForBreadcrumbs(_ref2) {
	  var from = _ref2.from,
	      node = _ref2.node,
	      percent = _ref2.percent,
	      to = _ref2.to;

	  var viewport = node.parentNode;
	  if (to === 0 || from === 0 || percent === 0 || percent === 1) {
	    // remove clip when moving to or from the first panel and when a transition is completing
	    delete viewport.dataset.clip;
	  } else {
	    viewport.dataset.clip = 'true';
	  }
	};

	/**
	 * Arranger that slides panels in from the right and out to the left allowing space for the single
	 * breadcrumb when `to` index is greater than zero.
	 *
	 * @type {Arranger}
	 * @private
	 */
	var ActivityArranger = exports.ActivityArranger = {
	  enter: (0, _arrange.compose)(panelEnter, (0, _arrange.reverse)(offsetForBreadcrumbs), clipForBreadcrumbs),
	  leave: (0, _arrange.compose)(panelLeave, offsetForBreadcrumbs),
	  // Need a stay arrangement in case the initial index for ActivityPanels is > 0 so the panel is
	  // correctly offset for the breadcrumbs.
	  stay: offsetForBreadcrumbs
	};

/***/ },
/* 130 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	exports.BreadcrumbDecorator = undefined;

	var _extends = Object.assign || function (target) {
		for (var i = 1; i < arguments.length; i++) {
			var source = arguments[i];for (var key in source) {
				if (Object.prototype.hasOwnProperty.call(source, key)) {
					target[key] = source[key];
				}
			}
		}return target;
	};

	var _util = __webpack_require__(28);

	var _hoc = __webpack_require__(10);

	var _hoc2 = _interopRequireDefault(_hoc);

	var _invariant = __webpack_require__(61);

	var _invariant2 = _interopRequireDefault(_invariant);

	var _kind = __webpack_require__(8);

	var _kind2 = _interopRequireDefault(_kind);

	var _ViewManager = __webpack_require__(83);

	var _ViewManager2 = _interopRequireDefault(_ViewManager);

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _Breadcrumb = __webpack_require__(44);

	var _Breadcrumb2 = _interopRequireDefault(_Breadcrumb);

	var _BreadcrumbArranger = __webpack_require__(237);

	var _BreadcrumbArranger2 = _interopRequireDefault(_BreadcrumbArranger);

	var _CancelDecorator = __webpack_require__(131);

	var _CancelDecorator2 = _interopRequireDefault(_CancelDecorator);

	var _IndexedBreadcrumbs = __webpack_require__(240);

	var _IndexedBreadcrumbs2 = _interopRequireDefault(_IndexedBreadcrumbs);

	var _Panels = __webpack_require__(59);

	var _Panels2 = _interopRequireDefault(_Panels);

	function _interopRequireDefault(obj) {
		return obj && obj.__esModule ? obj : { default: obj };
	}

	function _objectWithoutProperties(obj, keys) {
		var target = {};for (var i in obj) {
			if (keys.indexOf(i) >= 0) continue;if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;target[i] = obj[i];
		}return target;
	}

	// TODO: Figure out how to document private sub-module members

	/**
	 * Default config for {@link moonstone/Panels.BreadcrumbDecorator}
	 * @hocconfig
	 * @memberof moonstone/Panels.BreadcrumbDecorator
	 */
	var defaultConfig = {
		/**
	  * Classes to be added to the root node
	  *
	  * @type {string}
	  * @default null
	  * @memberof moonstone/Panels.BreadcrumbDecorator.defaultConfig
	  */
		className: null,

		/**
	  * Maximum number of breadcrumbs to display. If a function, it will be called on render to
	  * calculate the number of breadcrumbs
	  *
	  * @type {number|function}
	  * @default 0
	  * @memberof moonstone/Panels.BreadcrumbDecorator.defaultConfig
	  */
		max: 0,

		/**
	  * Arranger for Panels
	  *
	  * @type {object}
	  * @default null
	  * @memberof moonstone/Panels.BreadcrumbDecorator.defaultConfig
	  */
		panelArranger: null
	};

	/**
	 * Higher-order Component that adds breadcrumbs to a Panels component
	 *
	 * @class BreadcrumbDecorator
	 * @type {Function}
	 * @hoc
	 * @private
	 * @memberof moonstone/Panels
	 */
	var BreadcrumbDecorator = (0, _hoc2.default)(defaultConfig, function (config, Wrapped) {
		var max = config.max,
		    panelArranger = config.panelArranger,
		    cfgClassName = config.className;

		var calcMax = (0, _util.coerceFunction)(max);

		var Decorator = (0, _kind2.default)({
			name: 'BreadcrumbDecorator',

			propTypes: /** @lends moonstone/Panels.BreadcrumbDecorator.prototype */{
				/**
	    * Array of breadcrumbs or a function that generates an array of breadcrumbs
	    *
	    * @type {Function|node[]}
	    * @default IndexedBreadcrumbs
	    */
				breadcrumbs: _react2.default.PropTypes.oneOfType([_react2.default.PropTypes.func, // generator
				_react2.default.PropTypes.arrayOf(_react2.default.PropTypes.node) // static array of breadcrumbs
				]),

				/**
	    * Panels to be rendered
	    *
	    * @type {Node}
	    */
				children: _react2.default.PropTypes.node,

				/**
	    * Index of the active panel
	    *
	    * @type {Number}
	    * @default 0
	    */
				index: _react2.default.PropTypes.number,

				/**
	    * Disable breadcrumb transitions
	    *
	    * @type {Boolean}
	    * @default false
	    */
				noAnimation: _react2.default.PropTypes.bool,

				/**
	    * Handler called when a breadcrumb is clicked. The payload includes the `index` of the
	    * selected breadcrumb
	    *
	    * @type {Function}
	    */
				onSelectBreadcrumb: _react2.default.PropTypes.func
			},

			defaultProps: {
				breadcrumbs: _IndexedBreadcrumbs2.default,
				index: 0,
				noAnimation: false
			},

			styles: {
				css: _Panels2.default,
				className: cfgClassName
			},

			computed: {
				// Invokes the breadcrumb generator, if provided
				breadcrumbs: function breadcrumbs(_ref) {
					var _breadcrumbs = _ref.breadcrumbs,
					    index = _ref.index,
					    onSelectBreadcrumb = _ref.onSelectBreadcrumb;

					var x = calcMax(index);
					if (Array.isArray(_breadcrumbs)) {
						// limit the number of breadcrumbs based on the index and config.max
						var start = Math.max(index - x, 0);
						var children = _react2.default.Children.toArray(_breadcrumbs).slice(start, start + x);

						// map over the children to either clone it with the appropriate props or to
						// create a Breadcrumb if passed an array of renderable primitives
						return _react2.default.Children.map(children, function (child, i) {
							var props = {
								index: i,
								onSelect: onSelectBreadcrumb
							};

							if (_react2.default.isValidElement(child)) {
								return _react2.default.cloneElement(child, props);
							} else {
								return _react2.default.createElement(_Breadcrumb2.default, props, child);
							}
						});
					} else {
						return _breadcrumbs(index, x, onSelectBreadcrumb);
					}
				}
			},

			render: function render(_ref2) {
				var noAnimation = _ref2.noAnimation,
				    breadcrumbs = _ref2.breadcrumbs,
				    children = _ref2.children,
				    className = _ref2.className,
				    index = _ref2.index,
				    rest = _objectWithoutProperties(_ref2, ['noAnimation', 'breadcrumbs', 'children', 'className', 'index']);

				delete rest.onSelectBreadcrumb;

				var count = _react2.default.Children.count(children);
				!(index === 0 && count === 0 || index < count) ?  false ? (0, _invariant2.default)(false, 'Panels index, ' + index + ', is invalid for number of children, ' + count) : (0, _invariant2.default)(false) : void 0;

				return _react2.default.createElement('div', { className: className, 'data-index': index }, _react2.default.createElement(_ViewManager2.default, {
					arranger: _BreadcrumbArranger2.default,
					className: _Panels2.default.breadcrumbs,
					duration: 300,
					end: calcMax(),
					index: index - 1,
					noAnimation: noAnimation,
					start: 0
				}, breadcrumbs), _react2.default.createElement(Wrapped, _extends({}, rest, {
					arranger: panelArranger,
					index: index,
					noAnimation: noAnimation
				}), children));
			}
		});

		return (0, _CancelDecorator2.default)({ cancel: 'onSelectBreadcrumb' }, Decorator);
	});

	exports.default = BreadcrumbDecorator;
	exports.BreadcrumbDecorator = BreadcrumbDecorator;

/***/ },
/* 131 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	exports.CancelDecorator = undefined;

	var _hoc = __webpack_require__(10);

	var _hoc2 = _interopRequireDefault(_hoc);

	var _Cancelable = __webpack_require__(138);

	var _Cancelable2 = _interopRequireDefault(_Cancelable);

	function _interopRequireDefault(obj) {
		return obj && obj.__esModule ? obj : { default: obj };
	}

	var defaultConfig = {
		cancel: null
	};

	var CancelDecorator = (0, _hoc2.default)(defaultConfig, function (config, Wrapped) {
		var cancel = config.cancel;

		function handleCancel(props) {
			var index = props.index,
			    handler = props[cancel];

			if (index > 0 && handler) {
				handler({
					index: index - 1
				});

				return true;
			}
		}

		return (0, _Cancelable2.default)({ modal: true, onCancel: handleCancel }, Wrapped);
	});

	exports.default = CancelDecorator;
	exports.CancelDecorator = CancelDecorator;

/***/ },
/* 132 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	exports.PanelsBase = exports.Panels = undefined;

	var _kind = __webpack_require__(8);

	var _kind2 = _interopRequireDefault(_kind);

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _ViewManager = __webpack_require__(83);

	var _ApplicationCloseButton = __webpack_require__(236);

	var _ApplicationCloseButton2 = _interopRequireDefault(_ApplicationCloseButton);

	var _CancelDecorator = __webpack_require__(131);

	var _CancelDecorator2 = _interopRequireDefault(_CancelDecorator);

	var _Viewport = __webpack_require__(134);

	var _Viewport2 = _interopRequireDefault(_Viewport);

	var _Panels = __webpack_require__(59);

	var _Panels2 = _interopRequireDefault(_Panels);

	function _interopRequireDefault(obj) {
		return obj && obj.__esModule ? obj : { default: obj };
	}

	function _objectWithoutProperties(obj, keys) {
		var target = {};for (var i in obj) {
			if (keys.indexOf(i) >= 0) continue;if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;target[i] = obj[i];
		}return target;
	}

	/**
	 * Basic Panels component without breadcrumbs or default arranger
	 *
	 * @class Panels
	 * @memberof moonstone/Panels
	 */
	var PanelsBase = (0, _kind2.default)({
		name: 'Panels',

		propTypes: /** @lends moonstone/Panels.Panels.prototype */{
			/**
	   * Set of functions that control how the panels are transitioned into and out of the
	   * viewport
	   *
	   * @type {Arranger}
	   */
			arranger: _ViewManager.shape,

			/**
	   * Panels to be rendered
	   *
	   * @type {Panel}
	   */
			children: _react2.default.PropTypes.node,

			/**
	   * Index of the active panel
	   *
	   * @type {Number}
	   * @default 0
	   */
			index: _react2.default.PropTypes.number,

			/**
	   * When `false`, panel transitions are disabled
	   *
	   * @type {Boolean}
	   * @default false
	   */
			noAnimation: _react2.default.PropTypes.bool,

			/**
	   * When `true`, application close button does not show on the top right corner
	   *
	   * @type {Boolean}
	   * @default false
	   */
			noCloseButton: _react2.default.PropTypes.bool,

			/**
	   * A function to run when app close button is clicked
	   * @type {Function}
	   */
			onApplicationClose: _react2.default.PropTypes.func,

			/**
	   * Callback to handle cancel/back key events
	   *
	   * @type {Function}
	   */
			onBack: _react2.default.PropTypes.func
		},

		defaultProps: {
			index: 0,
			noAnimation: false,
			noCloseButton: false
		},

		styles: {
			css: _Panels2.default,
			className: 'panels enact-fit'
		},

		computed: {
			className: function className(_ref) {
				var noCloseButton = _ref.noCloseButton,
				    styler = _ref.styler;
				return styler.append({
					hasCloseButton: !noCloseButton
				});
			},
			applicationCloseButton: function applicationCloseButton(_ref2) {
				var noCloseButton = _ref2.noCloseButton,
				    onApplicationClose = _ref2.onApplicationClose;

				if (!noCloseButton) {
					return _react2.default.createElement(_ApplicationCloseButton2.default, { onApplicationClose: onApplicationClose });
				}
			}
		},

		render: function render(_ref3) {
			var noAnimation = _ref3.noAnimation,
			    arranger = _ref3.arranger,
			    children = _ref3.children,
			    index = _ref3.index,
			    applicationCloseButton = _ref3.applicationCloseButton,
			    rest = _objectWithoutProperties(_ref3, ['noAnimation', 'arranger', 'children', 'index', 'applicationCloseButton']);

			delete rest.noCloseButton;
			delete rest.onApplicationClose;
			delete rest.onBack;

			return _react2.default.createElement('div', rest, applicationCloseButton, _react2.default.createElement(_Viewport2.default, { noAnimation: noAnimation, arranger: arranger, index: index }, children));
		}
	});

	var Panels = (0, _CancelDecorator2.default)({ cancel: 'onBack' }, PanelsBase);

	exports.default = Panels;
	exports.Panels = Panels;
	exports.PanelsBase = PanelsBase;

/***/ },
/* 133 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	exports.toSegments = exports.propTypes = exports.Route = exports.Router = undefined;

	var _extends = Object.assign || function (target) {
		for (var i = 1; i < arguments.length; i++) {
			var source = arguments[i];for (var key in source) {
				if (Object.prototype.hasOwnProperty.call(source, key)) {
					target[key] = source[key];
				}
			}
		}return target;
	};

	var _createClass = function () {
		function defineProperties(target, props) {
			for (var i = 0; i < props.length; i++) {
				var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
			}
		}return function (Constructor, protoProps, staticProps) {
			if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
		};
	}();

	var _class, _temp;

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _warning = __webpack_require__(110);

	var _warning2 = _interopRequireDefault(_warning);

	function _interopRequireDefault(obj) {
		return obj && obj.__esModule ? obj : { default: obj };
	}

	function _objectWithoutProperties(obj, keys) {
		var target = {};for (var i in obj) {
			if (keys.indexOf(i) >= 0) continue;if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;target[i] = obj[i];
		}return target;
	}

	function _classCallCheck(instance, Constructor) {
		if (!(instance instanceof Constructor)) {
			throw new TypeError("Cannot call a class as a function");
		}
	}

	function _possibleConstructorReturn(self, call) {
		if (!self) {
			throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
		}return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
		if (typeof superClass !== "function" && superClass !== null) {
			throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
		}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	var toSegments = function toSegments(path) {
		return Array.isArray(path) ? path : path.split('/').slice(1);
	};

	var getPaths = function getPaths(routes, base) {
		var result = [];
		Object.keys(routes).filter(function (s) {
			return s[0] !== '$';
		}).forEach(function (p) {
			var path = base + '/' + p;
			result.push(path);
			result = result.concat(getPaths(routes[p], path));
		});

		return result;
	};

	var stringifyRoutes = function stringifyRoutes(routes) {
		var pad = '\n\t';
		var paths = getPaths(routes, '');
		return pad + paths.join(pad);
	};

	var propTypes = {
		path: _react2.default.PropTypes.oneOfType([_react2.default.PropTypes.arrayOf(_react2.default.PropTypes.string), // array of path segments
		_react2.default.PropTypes.string // URI-style path
		])
	};

	/**
	 * A Router component for use with {@link moonstone/Panels.Panels}
	 *
	 * @class Router
	 * @memberof moonstone/Panels
	 * @public
	 */
	var Router = (_temp = _class = function (_React$Component) {
		_inherits(Router, _React$Component);

		function Router(props) {
			_classCallCheck(this, Router);

			var _this = _possibleConstructorReturn(this, (Router.__proto__ || Object.getPrototypeOf(Router)).call(this, props));

			_this.initRoutes(props);
			return _this;
		}

		_createClass(Router, [{
			key: 'componentWillReceiveProps',
			value: function componentWillReceiveProps(nextProps) {
				this.initRoutes(nextProps);
			}

			/**
	   * Selects either `props.routes` or generates routes from `props.children`
	   *
	   * @param {Object} props Component props
	   *
	   * @returns {undefined}
	   */

		}, {
			key: 'initRoutes',
			value: function initRoutes(props) {
				this.routes = props.routes || this.createRoutes(props.children, {});
			}

			/**
	   * Generates a set of routes from `children` and appends them to `routes`
	   *
	   * @param  {React.element[]} children Array of children
	   * @param  {Object}          routes   Route configuration object
	   *
	   * @returns {Object}                   Route configuration object
	   */

		}, {
			key: 'createRoutes',
			value: function createRoutes(children, routes) {
				var _this2 = this;

				_react2.default.Children.forEach(children, function (child) {
					var _child$props = child.props,
					    path = _child$props.path,
					    grandchildren = _child$props.children,
					    component = _child$props.component,
					    rest = _objectWithoutProperties(_child$props, ['path', 'children', 'component']);

					if (path && component) {
						routes[path] = {
							$component: component,
							$props: rest
						};

						if (grandchildren) {
							_this2.createRoutes(grandchildren, routes[path]);
						}
					}
				});

				return routes;
			}

			/**
	   * Creates an array of React.elements for the current path
	   *
	   * @returns {React.element[]} Children to render
	   */

		}, {
			key: 'createChildren',
			value: function createChildren() {
				var segments = toSegments(this.props.path);

				var valid = true;
				var route = this.routes;
				var children = segments.map(function (segment, index) {
					var subPath = segments.slice(0, index + 1).join('/');
					route = route && route[segment];
					if (route && route.$component) {
						return _react2.default.createElement(route.$component, _extends({}, route.$props, {
							key: 'view$/' + subPath,
							containerId: 'panel-' + subPath.replace(/\//g, '-')
						}));
					}

					valid = false;
					return null;
				});

				 false ? (0, _warning2.default)(valid, this.props.path + ' does not match the configured routes: ' + stringifyRoutes(this.routes)) : void 0;

				return valid ? children : [];
			}
		}, {
			key: 'render',
			value: function render() {
				var _props = this.props,
				    Component = _props.component,
				    rest = _objectWithoutProperties(_props, ['component']);

				var children = this.createChildren();

				delete rest.path;
				delete rest.routes;

				return _react2.default.createElement(Component, rest, children);
			}
		}]);

		return Router;
	}(_react2.default.Component), _class.displayName = 'Router', _class.propTypes = /** @lends moonstone/Panels.Router.prototype */{
		/**
	  * List of views to render. Will be rendered as a flat array of views suitable for use in
	  * Panels and not a hierarchy of views as the path implies.
	  *
	  * May either be a URI-style path (`'/app/home/settings'`) or an array
	  * of strings (`['app', 'home', 'settings']`)
	  *
	  * @type {String|String[]}
	  * @public
	  */
		path: propTypes.path.isRequired,

		/**
	  * The component wrapping the rendered path
	  *
	  * @type {String|Function}
	  * @default 'div'
	  * @public
	  */
		component: _react2.default.PropTypes.oneOfType([_react2.default.PropTypes.string, _react2.default.PropTypes.func]),

		/**
	  * Routes defined as an object rather than via JSX. If specified, `routes` will take
	  * precendence over a JSX definition.
	  *
	  * @type {Object}
	  * @public
	  */
		routes: _react2.default.PropTypes.object
	}, _class.defaultProps = {
		component: 'div'
	}, _temp);

	/**
	 * Used with {@link moonstone/Panels.Routable} to define the `path` segment and the
	 * `component` to render. `Route` elements can be nested to build multiple level paths.
	 *
	 * In the below example, `Panels` would render `SettingsPanel` with breadcrumbs to
	 * navigate `AppPanel` and `HomePanel`.
	 *
	 * ```
	 *	<Panels path="/app/home/settings" onSelectBreadcrumb={this.handleNavigate}>
	 *		<Route path="app" component={AppPanel}>
	 *			<Route path="home" component={HomePanel}>
	 *				<Route path="settings" component={SettingsPanel} />
	 *			</Route>
	 *		</Route>
	 *		<Route path="admin" component={AdminPanel} />
	 *		<Route path="help" component={HelpPanel} />
	 *	</Panels>
	 * ```
	 *
	 * @class Route
	 * @memberof moonstone/Panels
	 * @public
	 */
	var Route = function Route() {
		return null;
	};

	Route.propTypes = {
		/**
	  * The component to render when the `path` for this Route matches the path of the
	  * {@link moonstone/Panels.Routable} container.
	  *
	  * @type {String|Function}
	  * @public
	  * @memberof moonstone/Panels.Route.prototype
	  */
		component: _react2.default.PropTypes.oneOfType([_react2.default.PropTypes.string, _react2.default.PropTypes.func]).isRequired,

		/**
	  * The name of the path segment
	  *
	  * @type {String}
	  * @public
	  * @memberof moonstone/Panels.Route.prototype
	  */
		path: _react2.default.PropTypes.string.isRequired
	};

	exports.default = Router;
	exports.Router = Router;
	exports.Route = Route;
	exports.propTypes = propTypes;
	exports.toSegments = toSegments;

/***/ },
/* 134 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	exports.ViewportBase = exports.Viewport = undefined;

	var _extends = Object.assign || function (target) {
		for (var i = 1; i < arguments.length; i++) {
			var source = arguments[i];for (var key in source) {
				if (Object.prototype.hasOwnProperty.call(source, key)) {
					target[key] = source[key];
				}
			}
		}return target;
	};

	var _handle = __webpack_require__(16);

	var _kind = __webpack_require__(8);

	var _kind2 = _interopRequireDefault(_kind);

	var _ViewManager = __webpack_require__(83);

	var _ViewManager2 = _interopRequireDefault(_ViewManager);

	var _invariant = __webpack_require__(61);

	var _invariant2 = _interopRequireDefault(_invariant);

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _spotlight = __webpack_require__(31);

	var _spotlight2 = _interopRequireDefault(_spotlight);

	var _IdProvider = __webpack_require__(239);

	var _IdProvider2 = _interopRequireDefault(_IdProvider);

	var _Panels = __webpack_require__(59);

	var _Panels2 = _interopRequireDefault(_Panels);

	function _interopRequireDefault(obj) {
		return obj && obj.__esModule ? obj : { default: obj };
	}

	function _objectWithoutProperties(obj, keys) {
		var target = {};for (var i in obj) {
			if (keys.indexOf(i) >= 0) continue;if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;target[i] = obj[i];
		}return target;
	}

	/**
	 * The container for a set of Panels
	 *
	 * @class Viewport
	 * @private
	 */
	var ViewportBase = (0, _kind2.default)({
		name: 'Viewport',

		propTypes: /** @lends Viewport.prototype */{

			/**
	   * A function that generates a globally-unique identifier for a panel index
	   *
	   * @type {Function}
	   * @required
	   */
			generateId: _react2.default.PropTypes.func.isRequired,

			/**
	   * Set of functions that control how the panels are transitioned into and out of the
	   * viewport
	   *
	   * @type {Arranger}
	   */
			arranger: _ViewManager.shape,

			/**
	   * Panels to be rendered
	   *
	   * @type {Panel}
	   */
			children: _react2.default.PropTypes.node,

			/**
	   * Index of the active panel
	   *
	   * @type {Number}
	   * @default 0
	   */
			index: _react2.default.PropTypes.number,

			/**
	   * Disable panel transitions
	   *
	   * @type {Boolean}
	   * @default false
	   */
			noAnimation: _react2.default.PropTypes.bool
		},

		defaultProps: {
			index: 0,
			noAnimation: false
		},

		styles: {
			css: _Panels2.default,
			className: 'viewport'
		},

		handlers: {
			onTransition: (0, _handle.handle)((0, _handle.forward)('onTransition'), _spotlight2.default.resume),
			onWillTransition: (0, _handle.handle)((0, _handle.forward)('onWillTransition'), _spotlight2.default.pause)
		},

		computed: {
			children: function children(_ref) {
				var _children = _ref.children,
				    generateId = _ref.generateId;
				return _react2.default.Children.map(_children, function (child, index) {
					return _react2.default.cloneElement(child, {
						containerId: child.props.containerId || generateId(index),
						'data-index': index
					});
				});
			},
			enteringProp: function enteringProp(_ref2) {
				var noAnimation = _ref2.noAnimation;
				return noAnimation ? null : 'hideChildren';
			}
		},

		render: function render(_ref3) {
			var arranger = _ref3.arranger,
			    children = _ref3.children,
			    enteringProp = _ref3.enteringProp,
			    index = _ref3.index,
			    noAnimation = _ref3.noAnimation,
			    rest = _objectWithoutProperties(_ref3, ['arranger', 'children', 'enteringProp', 'index', 'noAnimation']);

			delete rest.generateId;

			var count = _react2.default.Children.count(children);
			!(index === 0 && count === 0 || index < count) ?  false ? (0, _invariant2.default)(false, 'Panels index, ' + index + ', is invalid for number of children, ' + count) : (0, _invariant2.default)(false) : void 0;

			return _react2.default.createElement(_ViewManager2.default, _extends({}, rest, {
				arranger: arranger,
				component: 'main',
				duration: 250,
				enteringDelay: 100,
				enteringProp: enteringProp,
				index: index,
				noAnimation: noAnimation
			}), children);
		}
	});

	var Viewport = (0, _IdProvider2.default)({ onUnmount: _spotlight2.default.remove, prefix: 'panel-container-' }, ViewportBase);

	exports.default = Viewport;
	exports.Viewport = Viewport;
	exports.ViewportBase = ViewportBase;

/***/ },
/* 135 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.Route = exports.Routable = exports.PanelsBase = exports.Panels = exports.Panel = exports.Header = exports.Breadcrumb = exports.AlwaysViewingPanels = exports.ActivityPanels = undefined;

	var _ActivityPanels = __webpack_require__(234);

	var _ActivityPanels2 = _interopRequireDefault(_ActivityPanels);

	var _AlwaysViewingPanels = __webpack_require__(235);

	var _AlwaysViewingPanels2 = _interopRequireDefault(_AlwaysViewingPanels);

	var _Breadcrumb = __webpack_require__(44);

	var _Breadcrumb2 = _interopRequireDefault(_Breadcrumb);

	var _Header = __webpack_require__(238);

	var _Header2 = _interopRequireDefault(_Header);

	var _Panel = __webpack_require__(241);

	var _Panel2 = _interopRequireDefault(_Panel);

	var _Panels = __webpack_require__(132);

	var _Panels2 = _interopRequireDefault(_Panels);

	var _Routable = __webpack_require__(242);

	var _Routable2 = _interopRequireDefault(_Routable);

	var _Router = __webpack_require__(133);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	/**
	 * Exports the {@link moonstone/Panels.Panels}, {@link moonstone/Panels.Panel},
	 * {@link moonstone/Panels.ActivityPanels}, {@link moonstone/Panels.AlwaysViewingPanels},
	 * {@link moonstone/Panels.Breadcrumb}, {@link moonstone/Panels.Header} components. It
	 * also exports the {@link moonstone/Panels.Routable} HOC and {@link moonstone/Panels.Route}
	 * function. The default export is {@link moonstone/Panels.Panels}.
	 *
	 * @module moonstone/Panels
	 */

	exports.default = _Panels2.default;
	exports.ActivityPanels = _ActivityPanels2.default;
	exports.AlwaysViewingPanels = _AlwaysViewingPanels2.default;
	exports.Breadcrumb = _Breadcrumb2.default;
	exports.Header = _Header2.default;
	exports.Panel = _Panel2.default;
	exports.Panels = _Panels2.default;
	exports.PanelsBase = _Panels2.default;
	exports.Routable = _Routable2.default;
	exports.Route = _Router.Route;

/***/ },
/* 136 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	exports.spotlightDefaultClass = exports.SpotlightContainerDecorator = undefined;

	var _createClass = function () {
		function defineProperties(target, props) {
			for (var i = 0; i < props.length; i++) {
				var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
			}
		}return function (Constructor, protoProps, staticProps) {
			if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
		};
	}();

	var _handle = __webpack_require__(16);

	var _hoc = __webpack_require__(10);

	var _hoc2 = _interopRequireDefault(_hoc);

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _spotlight = __webpack_require__(31);

	var _spotlight2 = _interopRequireDefault(_spotlight);

	var _Spottable = __webpack_require__(34);

	function _interopRequireDefault(obj) {
		return obj && obj.__esModule ? obj : { default: obj };
	}

	function _classCallCheck(instance, Constructor) {
		if (!(instance instanceof Constructor)) {
			throw new TypeError("Cannot call a class as a function");
		}
	}

	function _possibleConstructorReturn(self, call) {
		if (!self) {
			throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
		}return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
		if (typeof superClass !== "function" && superClass !== null) {
			throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
		}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	function _objectWithoutProperties(obj, keys) {
		var target = {};for (var i in obj) {
			if (keys.indexOf(i) >= 0) continue;if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;target[i] = obj[i];
		}return target;
	} /**
	   * Exports the {@link spotlight/SpotlightContainerDecorator.SpotlightContainerDecorator}
	   * Higher-order Component and {@link spotlight/SpotlightContainerDecorator.spotlightDefaultClass}
	   * `className`. The default export is
	   * {@link spotlight/SpotlightContainerDecorator.SpotlightContainerDecorator}.
	   *
	   * @module spotlight/SpotlightContainerDecorator
	   */

	/**
	 * The class name to apply to the default component to focus in a container.
	 *
	 * @memberof spotlight/SpotlightContainerDecorator
	 * @public
	 */
	var spotlightDefaultClass = 'spottable-default';
	var enterEvent = 'onMouseEnter';
	var leaveEvent = 'onMouseLeave';

	/**
	 * Default config for {@link spotlight/SpotlightContainerDecorator.SpotlightContainerDecorator}
	 *
	 * @memberof spotlight/SpotlightContainerDecorator.SpotlightContainerDecorator
	 * @hocconfig
	 */
	var defaultConfig = {
		/**
	  * The selector for the default spottable element within the container.
	  *
	  * @type {String}
	  * @default '.spottable-default'
	  * @memberof spotlight/SpotlightContainerDecorator.SpotlightContainerDecorator.defaultConfig
	  * @public
	  */
		defaultElement: '.' + spotlightDefaultClass,

		/**
	  * Directs which component receives focus when gaining focus from another container.
	  *
	  * @type {String}
	  * @default 'last-focused'
	  * @memberof spotlight/SpotlightContainerDecorator.SpotlightContainerDecorator.defaultConfig
	  * @public
	  */
		enterTo: 'last-focused',

		/**
	  * Whether the container will preserve the id when it unmounts.
	  *
	  * @type {Boolean}
	  * @default false
	  * @memberof spotlight/SpotlightContainerDecorator.SpotlightContainerDecorator.defaultConfig
	  * @public
	  */
		preserveId: false
	};

	/**
	 * Constructs a Higher-order Component that allows Spotlight focus to be passed to
	 * its own configurable hierarchy of spottable child controls.
	 *
	 * @example
	 *	const DefaultContainer = SpotlightContainerDecorator(Component);
	 *	const FocusDefaultContainer = SpotlightContainerDecorator({enterTo: 'default-element'}, Component);
	 *
	 * To specify a default element to spot in a container, utilize the `spotlightDefaultClass`.
	 *
	 * @example
	 *	import Spotlight from '@enact/spotlight';
	 *	import SpotlightContainerDecorator from '@enact/spotlight/SpotlightContainerDecorator';
	 *	const ContainerComponent = SpotlightContainerDecorator(Component);
	 *	const View = kind({
	 *		render: () => {
	 *			<ContainerComponent>
	 *				<SpottableComponent>foo</SpottableComponent>
	 *				<SpottableComponent className={spotlightDefaultClass}>spot me first</SpottableComponent>
	 *			</ContainerComponent>
	 *		}
	 *	});
	 *
	 * @param  {Object} defaultConfig Set of default configuration parameters
	 * @param  {Function} Higher-order component
	 *
	 * @returns {Function} SpotlightContainerDecorator
	 * @class SpotlightContainerDecorator
	 * @memberof spotlight/SpotlightContainerDecorator
	 * @hoc
	 */
	var SpotlightContainerDecorator = (0, _hoc2.default)(defaultConfig, function (config, Wrapped) {
		var _class, _temp;

		var forwardMouseEnter = (0, _handle.forward)(enterEvent);
		var forwardMouseLeave = (0, _handle.forward)(leaveEvent);

		var preserveId = config.preserveId,
		    containerConfig = _objectWithoutProperties(config, ['preserveId']);

		return _temp = _class = function (_React$Component) {
			_inherits(_class, _React$Component);

			function _class(props) {
				_classCallCheck(this, _class);

				var _this = _possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).call(this, props));

				_this.navigableFilter = function (elem) {
					var containerId = void 0;
					while (elem && elem !== document && elem.nodeType === 1) {
						containerId = elem.getAttribute('data-container-id');
						if (containerId && containerId !== _this.state.id && elem.getAttribute('data-container-disabled') === 'true') {

							return false;
						}
						elem = elem.parentNode;
					}
				};

				_this.handleMouseEnter = function (ev) {
					_spotlight2.default.setActiveContainer(_this.state.id);
					forwardMouseEnter(ev, _this.props);
				};

				_this.handleMouseLeave = function (ev) {
					var parentContainer = ev.currentTarget.parentNode.closest('[data-container-id]');
					var activeContainer = parentContainer ? parentContainer.dataset.containerId : null;
					_spotlight2.default.setActiveContainer(activeContainer);
					forwardMouseLeave(ev, _this.props);
				};

				_this.state = {
					id: _spotlight2.default.add(_this.props.containerId)
				};
				return _this;
			}

			_createClass(_class, [{
				key: 'componentWillReceiveProps',
				value: function componentWillReceiveProps(nextProps) {
					if (this.props.containerId !== nextProps.containerId) {
						_spotlight2.default.remove(this.props.containerId);
						_spotlight2.default.add(nextProps.containerId);
						this.setState({
							id: nextProps.containerId
						});
					}
				}
			}, {
				key: 'componentDidUpdate',
				value: function componentDidUpdate(prevProps) {
					if (this.props.spotlightRestrict !== prevProps.spotlightRestrict) {
						_spotlight2.default.set(this.state.id, { restrict: this.props.spotlightRestrict });
					}
				}
			}, {
				key: 'componentWillMount',
				value: function componentWillMount() {
					var selector = '[data-container-id="' + this.state.id + '"]:not([data-container-disabled="true"]) .' + _Spottable.spottableClass,
					    cfg = Object.assign({}, containerConfig, { selector: selector, navigableFilter: this.navigableFilter, restrict: this.props.spotlightRestrict });

					_spotlight2.default.set(this.state.id, cfg);
				}
			}, {
				key: 'componentWillUnmount',
				value: function componentWillUnmount() {
					if (preserveId) {
						_spotlight2.default.unmount(this.state.id);
					} else {
						_spotlight2.default.remove(this.state.id);
					}
				}
			}, {
				key: 'render',
				value: function render() {
					var _props = this.props,
					    spotlightDisabled = _props.spotlightDisabled,
					    spotlightMuted = _props.spotlightMuted,
					    rest = _objectWithoutProperties(_props, ['spotlightDisabled', 'spotlightMuted']);

					delete rest.containerId;
					delete rest.spotlightRestrict;

					rest['data-container-id'] = this.state.id;
					rest[enterEvent] = this.handleMouseEnter;
					rest[leaveEvent] = this.handleMouseLeave;

					if (spotlightDisabled) {
						rest['data-container-disabled'] = spotlightDisabled;
					}

					if (spotlightMuted) {
						rest['data-container-muted'] = spotlightMuted;
					}

					return _react2.default.createElement(Wrapped, rest);
				}
			}]);

			return _class;
		}(_react2.default.Component), _class.displayName = 'SpotlightContainerDecorator', _class.propTypes = /** @lends spotlight/SpotlightContainerDecorator.SpotlightContainerDecorator.prototype */{
			/**
	   * Specifies the container id. If the value is `null`, an id will be generated.
	   *
	   * @type {String}
	   * @public
	   */
			containerId: _react.PropTypes.string,

			/**
	   * When `true`, controls in the container cannot be navigated.
	   *
	   * @type {Boolean}
	   * @default false
	   * @public
	   */
			spotlightDisabled: _react.PropTypes.bool,

			/**
	   * Whether or not the container is in muted mode.
	   *
	   * @type {Boolean}
	   * @default false
	   * @public
	   */
			spotlightMuted: _react.PropTypes.bool,

			/**
	   * Restricts or prioritizes navigation when focus attempts to leave the container. It
	   * can be either 'none', 'self-first', or 'self-only'. Specifying 'self-first' indicates that
	   * elements within the container will have a higher likelihood to be chosen as the next
	   * navigable element. Specifying 'self-only' indicates that elements in other containers
	   * cannot be navigated to by using 5-way navigation - however, elements in other containers
	   * can still receive focus by calling `Spotlight.focus(elem)` explicitly. Specying 'none'
	   * indicates there should be no restrictions when 5-way navigating the container.
	   *
	   * @type {String}
	   * @default 'none'
	   * @public
	   */
			spotlightRestrict: _react.PropTypes.oneOf(['none', 'self-first', 'self-only'])
		}, _class.defaultProps = {
			spotlightDisabled: false,
			spotlightMuted: false,
			spotlightRestrict: 'none'
		}, _temp;
	});

	exports.default = SpotlightContainerDecorator;
	exports.SpotlightContainerDecorator = SpotlightContainerDecorator;
	exports.spotlightDefaultClass = spotlightDefaultClass;

/***/ },
/* 137 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	exports.SpotlightRootDecorator = exports.spotlightRootContainerName = undefined;

	var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
		return typeof obj === "undefined" ? "undefined" : _typeof2(obj);
	} : function (obj) {
		return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof2(obj);
	};

	var _createClass = function () {
		function defineProperties(target, props) {
			for (var i = 0; i < props.length; i++) {
				var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
			}
		}return function (Constructor, protoProps, staticProps) {
			if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
		};
	}();

	var _hoc = __webpack_require__(10);

	var _hoc2 = _interopRequireDefault(_hoc);

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _spotlight = __webpack_require__(31);

	var _spotlight2 = _interopRequireDefault(_spotlight);

	var _Spottable = __webpack_require__(34);

	function _interopRequireDefault(obj) {
		return obj && obj.__esModule ? obj : { default: obj };
	}

	function _classCallCheck(instance, Constructor) {
		if (!(instance instanceof Constructor)) {
			throw new TypeError("Cannot call a class as a function");
		}
	}

	function _possibleConstructorReturn(self, call) {
		if (!self) {
			throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
		}return call && ((typeof call === "undefined" ? "undefined" : _typeof2(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
		if (typeof superClass !== "function" && superClass !== null) {
			throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof2(superClass)));
		}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	} /**
	   * Exports the {@link spotlight/SpotlightRootDecorator.SpotlightRootDecorator}
	   * Higher-order Component.
	   *
	   * @module spotlight/SpotlightRootDecorator
	   */

	var spotlightRootContainerName = 'spotlightRootDecorator';

	/**
	 * Constructs a Higher-order Component that initializes and enables Spotlight
	 * 5-way navigation within an application.
	 *
	 * @example
	 *	const App = SpotlightRootDecorator(ApplicationView);
	 *
	 * @param  {Object} defaultConfig Set of default configuration parameters
	 * @param  {Function} Higher-order component
	 *
	 * @returns {Function} SpotlightRootDecorator
	 * @memberof spotlight/SpotlightRootDecorator
	 * @hoc
	 */
	var SpotlightRootDecorator = (0, _hoc2.default)(function (config, Wrapped) {
		var _class, _temp2;

		return _temp2 = _class = function (_React$Component) {
			_inherits(_class, _React$Component);

			function _class() {
				var _ref;

				var _temp, _this, _ret;

				_classCallCheck(this, _class);

				for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
					args[_key] = arguments[_key];
				}

				return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = _class.__proto__ || Object.getPrototypeOf(_class)).call.apply(_ref, [this].concat(args))), _this), _this.navigableFilter = function (elem) {
					while (elem && elem !== document && elem.nodeType === 1) {
						if (elem.getAttribute('data-container-disabled') === 'true') return false;
						elem = elem.parentNode;
					}
				}, _temp), _possibleConstructorReturn(_this, _ret);
			}

			_createClass(_class, [{
				key: 'componentWillMount',
				value: function componentWillMount() {
					if ((typeof window === 'undefined' ? 'undefined' : _typeof(window)) === 'object') {
						_spotlight2.default.initialize();
						_spotlight2.default.add(spotlightRootContainerName, {
							selector: '.' + _Spottable.spottableClass,
							navigableFilter: this.navigableFilter,
							restrict: 'none'
						});
					}
				}
			}, {
				key: 'componentDidMount',
				value: function componentDidMount() {
					_spotlight2.default.focus();
				}
			}, {
				key: 'componentWillUnmount',
				value: function componentWillUnmount() {
					_spotlight2.default.terminate();
				}
			}, {
				key: 'render',
				value: function render() {
					return _react2.default.createElement(Wrapped, this.props);
				}
			}]);

			return _class;
		}(_react2.default.Component), _class.displayName = 'SpotlightRootDecorator', _temp2;
	});

	exports.default = SpotlightRootDecorator;
	exports.spotlightRootContainerName = spotlightRootContainerName;
	exports.SpotlightRootDecorator = SpotlightRootDecorator;

/***/ },
/* 138 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	exports.removeCancelHandler = exports.Cancelable = exports.addCancelHandler = undefined;

	var _extends = Object.assign || function (target) {
		for (var i = 1; i < arguments.length; i++) {
			var source = arguments[i];for (var key in source) {
				if (Object.prototype.hasOwnProperty.call(source, key)) {
					target[key] = source[key];
				}
			}
		}return target;
	};

	var _createClass = function () {
		function defineProperties(target, props) {
			for (var i = 0; i < props.length; i++) {
				var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
			}
		}return function (Constructor, protoProps, staticProps) {
			if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
		};
	}();

	var _handle = __webpack_require__(16);

	var _hoc = __webpack_require__(10);

	var _hoc2 = _interopRequireDefault(_hoc);

	var _keymap = __webpack_require__(42);

	var _invariant = __webpack_require__(61);

	var _invariant2 = _interopRequireDefault(_invariant);

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _modalHandler = __webpack_require__(249);

	var _cancelHandler = __webpack_require__(248);

	function _interopRequireDefault(obj) {
		return obj && obj.__esModule ? obj : { default: obj };
	}

	function _classCallCheck(instance, Constructor) {
		if (!(instance instanceof Constructor)) {
			throw new TypeError("Cannot call a class as a function");
		}
	}

	function _possibleConstructorReturn(self, call) {
		if (!self) {
			throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
		}return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
		if (typeof superClass !== "function" && superClass !== null) {
			throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
		}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	} /**
	   * Exports the {@link ui/Cancelable.Cancelable} Higher-order Component (HOC).
	   *
	   * @module ui/Cancelable
	   */

	/**
	 * Default config for {@link ui/Cancelable.Cancelable}
	 *
	 * @memberof ui/Cancelable.Cancelable
	 * @hocconfig
	 */
	var defaultConfig = {
		/**
	  * If it is a string, the cancel handler will attempt to invoke a function passed as a prop of
	  * that name. If it is a function, that function will be called with the current props as the
	  * only argument.
	  *
	  * If the function handles the cancel action, it should returning `true` to prevent container or
	  * `modal` Cancelable instances from also handling the action.
	  *
	  * @type {String|Function}
	  * @required
	  * @memberof ui/Cancelable.Cancelable.defaultConfig
	  */
		onCancel: null,

		/**
	  * When `true`, the Cancelable instance will handle cancel events globally the successfully
	  * bubble up to the document regardless of which component is focused.
	  *
	  * `modal` cancel handlers are processed in reverse of the order they are created such that the
	  * innermost instance (in terms of the component hierarchy) have the first opportunity to handle
	  * the event before its container components.
	  *
	  * @type {String}
	  * @default false
	  * @memberof ui/Cancelable.Cancelable.defaultConfig
	  */
		modal: false,

		/**
	  * When set, the Wrapped component will be contained within an instance of `component`. This may
	  * be necessary if the props passed to Wrapped are not placed on the root element.
	  *
	  * @type {String|Function}
	  * @default null
	  * @memberof ui/Cancelable.Cancelable.defaultConfig
	  */
		component: null
	};

	// Add keymap for escape key
	(0, _keymap.add)('cancel', 27);

	/**
	 * {@link ui/Cancelable.Cancelable} is a Higher-order Component that allows mapping
	 * a cancel key event to existing event handler either directly or via a custom function which can
	 * adapt the event payload.
	 *
	 * The `onCancel` config option is required.
	 *
	 * @class Cancelable
	 * @memberof ui/Cancelable
	 * @hoc
	 * @public
	 */
	var Cancelable = (0, _hoc2.default)(defaultConfig, function (config, Wrapped) {
		var _class, _temp2;

		var onCancel = config.onCancel,
		    modal = config.modal,
		    Component = config.component;

		!onCancel ?  false ? (0, _invariant2.default)(false, 'onCancel must be specified with Cancelable') : (0, _invariant2.default)(false) : void 0;

		var onCancelIsString = typeof onCancel === 'string';
		var onCancelIsFunction = typeof onCancel === 'function';
		var dispatchCancelToConfig = function dispatchCancelToConfig(ev, props) {
			if (onCancelIsString && typeof props[onCancel] === 'function') {
				props[onCancel]();
				return true;
			} else if (onCancelIsFunction) {
				return onCancel(props);
			}
		};

		return _temp2 = _class = function (_React$Component) {
			_inherits(_class, _React$Component);

			function _class() {
				var _ref;

				var _temp, _this, _ret;

				_classCallCheck(this, _class);

				for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
					args[_key] = arguments[_key];
				}

				return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = _class.__proto__ || Object.getPrototypeOf(_class)).call.apply(_ref, [this].concat(args))), _this), _this.handle = _handle.handle.bind(_this), _this.handleCancel = _this.handle(_cancelHandler.forCancel, (0, _handle.forward)('onCancel'), dispatchCancelToConfig, _handle.stopImmediate), _this.handleKeyUp = _this.handle((0, _handle.forward)('onKeyUp'),
				// nesting handlers for DRYness. note that if any conditions return false in
				// this.handleCancel(), this handler chain will stop too
				_this.handleCancel), _temp), _possibleConstructorReturn(_this, _ret);
			}

			_createClass(_class, [{
				key: 'componentDidMount',
				value: function componentDidMount() {
					if (modal) {
						(0, _modalHandler.addModal)(this);
					}
				}
			}, {
				key: 'componentWillUnmount',
				value: function componentWillUnmount() {
					if (modal) {
						(0, _modalHandler.removeModal)(this);
					}
				}
			}, {
				key: 'renderWrapped',
				value: function renderWrapped(props) {
					return _react2.default.createElement(Component, { onKeyUp: this.handleKeyUp }, _react2.default.createElement(Wrapped, props));
				}
			}, {
				key: 'renderUnwrapped',
				value: function renderUnwrapped(props) {
					return _react2.default.createElement(Wrapped, _extends({}, props, { onKeyUp: this.handleKeyUp }));
				}
			}, {
				key: 'renderModal',
				value: function renderModal(props) {
					return _react2.default.createElement(Wrapped, props);
				}
			}, {
				key: 'render',
				value: function render() {
					var props = Object.assign({}, this.props);
					delete props.onCancel;

					return modal && this.renderModal(props) || Component && this.renderWrapped(props) || this.renderUnwrapped(props);
				}
			}]);

			return _class;
		}(_react2.default.Component), _class.displayName = 'Cancelable', _class.propTypes = /** @lends ui/Cancelable.Cancelable.prototype */{
			onCancel: _react2.default.PropTypes.func
		}, _temp2;
	});

	exports.default = Cancelable;
	exports.addCancelHandler = _cancelHandler.addCancelHandler;
	exports.Cancelable = Cancelable;
	exports.removeCancelHandler = _cancelHandler.removeCancelHandler;

/***/ },
/* 139 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	exports.Slottable = undefined;

	var _extends = Object.assign || function (target) {
		for (var i = 1; i < arguments.length; i++) {
			var source = arguments[i];for (var key in source) {
				if (Object.prototype.hasOwnProperty.call(source, key)) {
					target[key] = source[key];
				}
			}
		}return target;
	}; /**
	    * Exports the {@link ui/Slottable.Slottable} Higher-order Component (HOC).
	    *
	    * @module ui/Slottable
	    */

	var _hoc = __webpack_require__(10);

	var _hoc2 = _interopRequireDefault(_hoc);

	var _kind = __webpack_require__(8);

	var _kind2 = _interopRequireDefault(_kind);

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _warning = __webpack_require__(110);

	var _warning2 = _interopRequireDefault(_warning);

	function _interopRequireDefault(obj) {
		return obj && obj.__esModule ? obj : { default: obj };
	}

	// ** WARNING ** This is an intentional but likely dangerous hack necessary to clone a child while
	// omitting the `slot` property. It relies on the black box structure of a React element which could
	// change breaking this code. Without it, the slot property will cascade to a DOM node causing a
	// React warning.
	var cloneElement = function cloneElement(child, props, omit) {
		if (omit && omit in child.props) {
			var newProps = Object.assign({}, child.props, props);
			delete newProps[omit];
			return _react2.default.createElement(child.type, newProps);
		}

		return child;
	};

	var distributeChild = function distributeChild(child, index, slots, props) {
		var c = void 0,
		    slot = void 0;
		var hasSlot = function hasSlot(name) {
			return slots.indexOf(name) !== -1;
		};

		if (!_react2.default.isValidElement(child)) {
			return false;
		} else if (child.props.slot) {
			var hasUserSlot = hasSlot(slot = child.props.slot);
			 false ? (0, _warning2.default)(hasUserSlot, 'The slot "%s" specified on %s does not exist', child.props.slot, typeof child.type === 'string' ? child.type : child.type.name || child.type.displayName || 'component') : void 0;
			c = hasUserSlot && cloneElement(child, { key: index }, 'slot');
		} else if (hasSlot(slot = child.type.defaultSlot)) {
			c = child;
		} else if (hasSlot(slot = child.type)) {
			c = child.props.children;
		}

		if (c) {
			var prop = props[slot];
			if (prop) {
				if (Array.isArray(prop)) {
					prop.push(c);
				} else {
					prop = [prop, c];
				}
			} else {
				prop = c;
			}
			props[slot] = prop;

			return true;
		}

		return false;
	};

	var distribute = function distribute(slots, props) {
		if (slots) {
			var children = [];
			var adjusted = _extends({}, props);
			_react2.default.Children.forEach(props.children, function (child, index) {
				if (!distributeChild(child, index, slots, adjusted)) {
					children.push(child);
				}
			});

			adjusted.children = children.length > 0 ? children : null;
			return adjusted;
		}

		return props;
	};

	var defaultConfig = {
		slots: null
	};

	/**
	 * {@link ui/Slottable.Slottable} is a Higher-order Component that allows wrapped components to
	 * separate children into pre-designated 'slots'.  To use Slottable, you must configure it by passing in
	 * a config object with the `slots` member set to an array of slot names.  Any children whose
	 * `slot` or `defaultSlot` property matches a named slot or whose type matches a named slot will be placed
	 * into a property of the same name on the wrapped component.
	 *
	 * @class Slottable
	 * @memberof ui/Slottable
	 * @hoc
	 * @public
	 */
	var Slottable = (0, _hoc2.default)(defaultConfig, function (config, Wrapped) {
		var slots = config.slots;
		return (0, _kind2.default)({
			name: 'Slottable',
			render: function render(props) {
				var adjusted = distribute(slots, props);
				return _react2.default.createElement(Wrapped, adjusted);
			}
		});
	});

	exports.default = Slottable;
	exports.Slottable = Slottable;

/***/ },
/* 140 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.shape = exports.SlideBottomArranger = exports.SlideTopArranger = exports.SlideLeftArranger = exports.SlideRightArranger = exports.SlideArranger = undefined;

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _arrange = __webpack_require__(84);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	/**
	 * A basic arranger that must be configured with `enter` and `leave` direction
	 * @memberof ui/ViewManager
	 * @param {Object} config Configuration object including `amount`, `enter` and `leave` properties
	 * @returns {Object} An arranger
	 * @public
	 */
	/*
	 * Exports a number of pre-defined arrangers for use with {@link ui/ViewManager}.
	 * note: not jsdoc on purpose
	 */

	var SlideArranger = exports.SlideArranger = function SlideArranger(_ref) {
	  var _ref$amount = _ref.amount,
	      amount = _ref$amount === undefined ? 100 : _ref$amount,
	      enter = _ref.enter,
	      leave = _ref.leave;
	  return {
	    enter: (0, _arrange.reverse)((0, _arrange.compose)(_arrange.clearTransform, (0, _arrange.slideInPartial)(amount, enter), _arrange.accelerate)),
	    leave: (0, _arrange.reverse)((0, _arrange.compose)(_arrange.clearTransform, (0, _arrange.slideOutPartial)(amount, leave), _arrange.accelerate))
	  };
	};

	/**
	 * An arranger that enters from the left and leaves to the right.
	 * @memberof ui/ViewManager
	 * @public
	 */
	var SlideRightArranger = exports.SlideRightArranger = SlideArranger({ enter: 'left', leave: 'right' });

	/**
	 * An arranger that enters from the right and leaves to the left.
	 * @memberof ui/ViewManager
	 * @public
	 */
	var SlideLeftArranger = exports.SlideLeftArranger = SlideArranger({ enter: 'right', leave: 'left' });

	/**
	 * An arranger that enters from the bottom and leaves to the top.
	 * @memberof ui/ViewManager
	 * @public
	 */
	var SlideTopArranger = exports.SlideTopArranger = SlideArranger({ enter: 'bottom', leave: 'top' });

	/**
	 * An arranger that enters from the top and leaves to the bottom.
	 * @memberof ui/ViewManager
	 * @public
	 */
	var SlideBottomArranger = exports.SlideBottomArranger = SlideArranger({ enter: 'top', leave: 'bottom' });

	/**
	 * propType validation for Arranger transitions
	 * @memberof ui/ViewManager
	 * @private
	 */
	var shape = exports.shape = _react2.default.PropTypes.shape({
	  enter: _react2.default.PropTypes.func,
	  leave: _react2.default.PropTypes.func
	});

/***/ },
/* 141 */
/***/ function(module, exports) {

	'use strict';

	var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
	  return typeof obj === "undefined" ? "undefined" : _typeof2(obj);
	} : function (obj) {
	  return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof2(obj);
	};

	var baseScreen = void 0,
	    orientation = void 0,
	    riRatio = void 0,
	    screenType = void 0,
	    screenTypes = [{
	  name: 'standard',
	  pxPerRem: 16,
	  width: (typeof window === 'undefined' ? 'undefined' : _typeof(window)) === 'object' ? window.innerWidth : 1920,
	  height: (typeof window === 'undefined' ? 'undefined' : _typeof(window)) === 'object' ? window.innerHeight : 1080,
	  aspectRatioName: 'standard',
	  base: true
	}],

	// Assign one sane type in case defineScreenTypes is never run.
	screenTypeObject = void 0,
	    config = void 0;

	/**
	 * Object that stores all of the pixel conversion factors to each keyed unit.
	 *
	 * @memberof ui/resolution
	 * @public
	 */
	var unitToPixelFactors = {
	  'rem': 12,
	  'in': 96
	};

	var configDefaults = {
	  orientationHandling: 'normal'
	};

	/**
	 * Fetch the screenType object
	 *
	 * @memberof ui/resolution
	 * @param  {String} type The key string for the screen type object. If falsy, the current
	 *	screenType is used
	 *
	 * @returns {Object}     screenTypeObject
	 * @private
	 */
	function getScreenTypeObject(type) {
	  type = type || screenType;
	  if (screenTypeObject && screenTypeObject.name === type) {
	    return screenTypeObject;
	  }
	  return screenTypes.filter(function (elem) {
	    return type === elem.name;
	  })[0];
	}

	/**
	 * Sets up screen resolution scaling capabilities by defining an array of all the screens
	 * being used. These should be listed in order from smallest to largest, according to
	 * width.
	 *
	 * The `name`, `pxPerRem`, `width`, and `aspectRatioName` properties are required for
	 * each screen type in the array. Setting `base: true` on a screen type marks it as the
	 * default resolution, upon which everything else will be based.
	 *
	 * Executing this method also initializes the rest of the resolution-independence code.
	 *
	 * ```
	 * var resolution = require('enyo/resolution');
	 *
	 * resolution.defineScreenTypes([
	 * 	{name: 'vga',     pxPerRem: 8,  width: 640,  height: 480,  aspectRatioName: 'standard'},
	 * 	{name: 'xga',     pxPerRem: 16, width: 1024, height: 768,  aspectRatioName: 'standard'},
	 * 	{name: 'hd',      pxPerRem: 16, width: 1280, height: 720,  aspectRatioName: 'hdtv'},
	 * 	{name: 'fhd',     pxPerRem: 24, width: 1920, height: 1080, aspectRatioName: 'hdtv', base: true},
	 * 	{name: 'uw-uxga', pxPerRem: 24, width: 2560, height: 1080, aspectRatioName: 'cinema'},
	 * 	{name: 'uhd',     pxPerRem: 48, width: 3840, height: 2160, aspectRatioName: 'hdtv'}
	 * ]);
	 * ```
	 *
	 * @memberof ui/resolution
	 * @param {Array} types - An array of objects containing screen configuration data, as in the
	 * preceding example.
	 * @returns {undefined}
	 * @public
	 */
	function defineScreenTypes(types) {
	  screenTypes = types;
	  for (var i = 0; i < screenTypes.length; i++) {
	    if (screenTypes[i]['base']) baseScreen = screenTypes[i];
	  }
	  init();
	}

	/**
	 * Fetches the name of the screen type that best matches the current screen size. The best
	 * match is defined as the screen type that is the closest to the screen resolution without
	 * going over. ("The Price is Right" style.)
	 *
	 * @memberof ui/resolution
	 * @param {Object} [rez] - Optional measurement scheme. Must include `height` and `width` properties.
	 * @returns {String} Screen type (e.g., `'fhd'`, `'uhd'`, etc.)
	 * @public
	 */
	function getScreenType(rez) {
	  rez = rez || {
	    height: (typeof window === 'undefined' ? 'undefined' : _typeof(window)) === 'object' ? window.innerHeight : 1080,
	    width: (typeof window === 'undefined' ? 'undefined' : _typeof(window)) === 'object' ? window.innerWidth : 1920
	  };

	  var types = screenTypes;
	  var bestMatch = types[types.length - 1].name;

	  orientation = 'landscape';

	  if (rez.height > rez.width) {
	    orientation = 'portrait';
	    var swap = rez.width;
	    rez.width = rez.height;
	    rez.height = swap;
	  }

	  // loop thorugh resolutions
	  for (var i = types.length - 1; i >= 0; i--) {
	    // find the one that matches our current size or is smaller. default to the first.
	    if (rez.width <= types[i].width) {
	      bestMatch = types[i].name;
	    }
	  }
	  // return the name of the resolution if we find one.
	  return bestMatch;
	}

	/**
	 * Calculate the base rem font size. This is how the magic happens. This accepts an
	 * optional screenType name. If one isn't provided, the currently detected screen type is used.
	 * This uses the config option "orientationHandling", which when set to "scale" and the screen is
	 * in portrait orientation, will dynamically calculate what the base font size should be, if the
	 * width were proportionally scaled down to fit in the portrait space.
	 *
	 * To use, put the following in your application code:
	 * ```
	 * 	var RI = require('moonstone/resolution');
	 *
	 * 	RI.config.orientationHandling = 'scale';
	 * 	RI.init();
	 * ```
	 *
	 * This has no effect if the screen is in landscape, or if orientationHandling is unset.
	 *
	 * @memberof ui/resolution
	 * @param {String} type - Screen type to base size the calculation on. If no
	 *     screen type is provided, the current screen type will be used.
	 * @returns {String} The calculated pixel size (with unit suffix. Ex: "24px").
	 * @public
	 */
	function calculateFontSize(type) {
	  var scrObj = getScreenTypeObject(type);
	  var size = void 0;

	  if (orientation === 'portrait' && config.orientationHandling === 'scale') {
	    size = scrObj.height / scrObj.width * scrObj.pxPerRem;
	  } else {
	    size = scrObj.pxPerRem;
	  }
	  return size + 'px';
	}

	/**
	 * @memberof ui/resolution
	 * @param {String} size A valid CSS measurement to be applied as the base document font size.
	 * @private
	 * @returns {null} n/a
	 */
	function updateBaseFontSize(size) {
	  if ((typeof window === 'undefined' ? 'undefined' : _typeof(window)) === 'object') {
	    document.documentElement.style.fontSize = size;
	  }
	}

	/**
	 * Returns the CSS classes for the given `type`
	 *
	 * @memberof ui/resolution
	 * @param {String} type Screen type
	 * @returns {String} classes CSS class names
	 * @public
	 */
	function getResolutionClasses() {
	  var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : screenType;

	  var classes = [];
	  if (orientation) {
	    classes.push('enact-orientation-' + orientation);
	  }
	  if (type) {
	    classes.push('enact-res-' + type.toLowerCase());
	    var scrObj = getScreenTypeObject(type);
	    if (scrObj.aspectRatioName) {
	      classes.push('enact-aspect-ratio-' + scrObj.aspectRatioName.toLowerCase());
	    }
	  }
	  return classes.join(' ');
	}

	/**
	 * Returns the ratio of pixels per rem for the given `type` to the pixels per rem for the base type
	 *
	 * @memberof ui/resolution
	 * @param  {String} [type] Screen type
	 *
	 * @returns {Number}      ratio
	 */
	function getRiRatio() {
	  var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : screenType;

	  if (type && baseScreen) {
	    var ratio = getUnitToPixelFactors(type) / getUnitToPixelFactors(baseScreen.name);
	    if (type === screenType) {
	      // cache this if it's for our current screen type.
	      riRatio = ratio;
	    }
	    return ratio;
	  }
	  return 1;
	}

	/**
	 * Returns the pixels per rem for the given `type`
	 *
	 * @memberof ui/resolution
	 * @param  {String} [type] Screen type
	 *
	 * @returns {Number}      pixels per rem
	 */
	function getUnitToPixelFactors() {
	  var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : screenType;

	  if (type) {
	    return getScreenTypeObject(type).pxPerRem;
	  }
	  return 1;
	}

	/**
	 * Calculates the aspect ratio of the specified screen type. If no screen type is provided,
	 * the current screen type is used.
	 *
	 * @memberof ui/resolution
	 * @param {String} type - Screen type whose aspect ratio will be calculated. If no screen
	 * type is provided, the current screen type is used.
	 * @returns {Number} The calculated screen ratio (e.g., `1.333`, `1.777`, `2.333`, etc.)
	 * @public
	 */
	function getAspectRatio(type) {
	  var scrObj = getScreenTypeObject(type);
	  if (scrObj.width && scrObj.height) {
	    return scrObj.width / scrObj.height;
	  }
	  return 1;
	}

	/**
	 * Returns the name of the aspect ratio for a specified screen type, or for the default
	 * screen type if none is provided.
	 *
	 * @memberof ui/resolution
	 * @param {String} type - Screen type whose aspect ratio name will be returned. If no
	 * screen type is provided, the current screen type will be used.
	 * @returns {String} The name of the screen type's aspect ratio
	 * @public
	 */
	function getAspectRatioName(type) {
	  var scrObj = getScreenTypeObject(type);
	  return scrObj.aspectRatioName || 'standard';
	}

	/**
	 * Takes a provided pixel value and performs a scaling operation based on the current
	 * screen type.
	 *
	 * @memberof ui/resolution
	 * @param {Number} px - The quantity of standard-resolution pixels to scale to the
	 * current screen resolution.
	 * @returns {Number} The scaled value based on the current screen scaling factor
	 * @public
	 */
	function scale(px) {
	  return (riRatio || getRiRatio()) * px;
	}

	/**
	 * Convert to various unit formats. Useful for converting pixels to a resolution-independent
	 * measurement method, like "rem". Other units are available if defined in the
	 * {@link ui/resolution.unitToPixelFactors} object.
	 *
	 * ```javascript
	 * var
	 * 	dom = require('enyo/dom');
	 *
	 * // Do calculations and get back the desired CSS unit.
	 * var frameWidth = 250,
	 *     frameWithMarginInches = dom.unit( 10 + frameWidth + 10, 'in' ),
	 *     frameWithMarginRems = dom.unit( 10 + frameWidth + 10, 'rem' );
	 * // '2.8125in' == frameWithMarginInches
	 * // '22.5rem' == frameWithMarginRems
	 * ```
	 *
	 * @memberof ui/resolution
	 * @param {(String|Number)} pixels - The pixels or math to convert to the unit.
	 *	("px" suffix in String format is permitted. ex: `'20px'`)
	 * @param {(String)} toUnit - The name of the unit to convert to.
	 * @returns {(String|undefined)} Resulting conversion in CSS safe format, in case of malformed input, `undefined`
	 * @public
	 */
	function unit(pixels, toUnit) {
	  if (!toUnit || !unitToPixelFactors[toUnit]) return;
	  if (typeof pixels === 'string' && pixels.substr(-2) === 'px') pixels = parseInt(pixels.substr(0, pixels.length - 2));
	  if (typeof pixels !== 'number') return;

	  return pixels / unitToPixelFactors[toUnit] + '' + toUnit;
	}

	/**
	 * Shorthand for when you know you need to scale some pixel value and have it converted to "rem" for
	 * proper scaling. This runs {@link ui/resolution.scale} and {@link ui/resolution.unit} together.
	 *
	 * @function
	 * @memberof ui/resolution
	 * @param {Number} pixels - The quantity of standard-resolution pixels to scale to rems
	 * @returns {(Number|undefined)} Resulting conversion, in case of malformed input, `undefined`
	 * @public
	 */
	var scaleToRem = function scaleToRem(pixels) {
	  return unit(scale(pixels), 'rem');
	};

	/**
	 * The default configurable options for {@link ui/resolution.selectSrc}.
	 *
	 * @typedef {Object} selectSrcOptions
	 * @memberof ui/resolution
	 * @property {String} hd - HD / 720p Resolution image asset source URI/URL
	 * @property {String} fhd - FHD / 1080p Resolution image asset source URI/URL
	 * @property {String} uhd - UHD / 4K Resolution image asset source URI/URL
	 */

	/**
	 * Selects the ideal image asset from a set of assets, based on various screen
	 * resolutions: HD (720p), FHD (1080p), UHD (4k). When a `src` argument is
	 * provided, `selectSrc()` will choose the best image with respect to the current
	 * screen resolution. `src` may be either the traditional string, which will pass
	 * straight through, or a hash/object of screen types and their asset sources
	 * (keys:screen and values:src). The image sources will be used when the screen
	 * resolution is less than or equal to the provided screen types.
	 *
	 * ```
	 * // Take advantage of the multi-res mode
	 * var
	 * 	kind = require('enyo/kind'),
	 * 	Image = require('enyo/Image');
	 *
	 * {kind: Image, src: {
	 * 	'hd': 'http://lorempixel.com/64/64/city/1/',
	 * 	'fhd': 'http://lorempixel.com/128/128/city/1/',
	 * 	'uhd': 'http://lorempixel.com/256/256/city/1/'
	 * }, alt: 'Multi-res'},
	 *
	 * // Standard string `src`
	 * {kind: Image, src: http://lorempixel.com/128/128/city/1/', alt: 'Large'},
	 * ```
	 *
	 * @memberof ui/resolution
	 * @param {(String|ui/resolution.selectSrcSrcOptions)} src - A string containing
	 * a single image source or a key/value hash/object containing keys representing screen
	 * types (`'hd'`, `'fhd'`, `'uhd'`, etc.) and values containing the asset source for
	 * that target screen resolution.
	 * @returns {String} The chosen source, given the string or hash provided
	 * @public
	 */
	function selectSrc(src) {
	  if (typeof src != 'string' && src) {
	    var newSrc = src.fhd || src.uhd || src.hd;
	    var types = screenTypes;

	    // loop through resolutions
	    for (var i = types.length - 1; i >= 0; i--) {
	      var t = types[i].name;
	      if (screenType === t && src[t]) newSrc = src[t];
	    }
	    src = newSrc;
	  }
	  return src;
	}

	/**
	 * This will need to be re-run any time the screen size changes, so all the values can be
	 * re-cached.
	 *
	 * @memberof ui/resolution
	 * @returns {undefined} [description]
	 * @public
	 */
	function init() {
	  screenType = getScreenType();
	  screenTypeObject = getScreenTypeObject();
	  unitToPixelFactors.rem = getUnitToPixelFactors();
	  riRatio = getRiRatio();
	  updateBaseFontSize(calculateFontSize());
	}

	/**
	 * The current configuration
	 *
	 * @memberof ui/resolution
	 */
	exports.config = config = Object.assign({}, configDefaults);

	exports.calculateFontSize = calculateFontSize;
	exports.config = config;
	exports.defineScreenTypes = defineScreenTypes;
	exports.getAspectRatio = getAspectRatio;
	exports.getAspectRatioName = getAspectRatioName;
	exports.getResolutionClasses = getResolutionClasses;
	exports.getScreenTypeObject = getScreenTypeObject;
	exports.getScreenType = getScreenType;
	exports.init = init;
	exports.scale = scale;
	exports.scaleToRem = scaleToRem;
	exports.selectSrc = selectSrc;
	exports.unit = unit;
	exports.unitToPixelFactors = unitToPixelFactors;

/***/ },
/* 142 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	// css base code, injected by the css-loader
	module.exports = function(useSourceMap) {
		var list = [];

		// return the list of modules as css string
		list.toString = function toString() {
			return this.map(function (item) {
				var content = cssWithMappingToString(item, useSourceMap);
				if(item[2]) {
					return "@media " + item[2] + "{" + content + "}";
				} else {
					return content;
				}
			}).join("");
		};

		// import a list of modules into the list
		list.i = function(modules, mediaQuery) {
			if(typeof modules === "string")
				modules = [[null, modules, ""]];
			var alreadyImportedModules = {};
			for(var i = 0; i < this.length; i++) {
				var id = this[i][0];
				if(typeof id === "number")
					alreadyImportedModules[id] = true;
			}
			for(i = 0; i < modules.length; i++) {
				var item = modules[i];
				// skip already imported module
				// this implementation is not 100% perfect for weird media query combinations
				//  when a module is imported multiple times with different media queries.
				//  I hope this will never occur (Hey this way we have smaller bundles)
				if(typeof item[0] !== "number" || !alreadyImportedModules[item[0]]) {
					if(mediaQuery && !item[2]) {
						item[2] = mediaQuery;
					} else if(mediaQuery) {
						item[2] = "(" + item[2] + ") and (" + mediaQuery + ")";
					}
					list.push(item);
				}
			}
		};
		return list;
	};

	function cssWithMappingToString(item, useSourceMap) {
		var content = item[1] || '';
		var cssMapping = item[3];
		if (!cssMapping) {
			return content;
		}

		if (useSourceMap) {
			var sourceMapping = toComment(cssMapping);
			var sourceURLs = cssMapping.sources.map(function (source) {
				return '/*# sourceURL=' + cssMapping.sourceRoot + source + ' */'
			});

			return [content].concat(sourceURLs).concat([sourceMapping]).join('\n');
		}

		return [content].join('\n');
	}

	// Adapted from convert-source-map (MIT)
	function toComment(sourceMap) {
	  var base64 = new Buffer(JSON.stringify(sourceMap)).toString('base64');
	  var data = 'sourceMappingURL=data:application/json;charset=utf-8;base64,' + base64;

	  return '/*# ' + data + ' */';
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(259).Buffer))

/***/ },
/* 143 */
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin
	module.exports = {"tooltip":"_1DKC7RzALG4viK1RwaaRNZ","tooltipArrow":"C8axqnARJ5R2rMxIQJfmt","tooltipLabel":"_2R01vOaEWWlB3NYFaO5KRs","multi":"_1ONqCOPdoZYKSZ5DaEDQ5G","below":"_36VhQ4ooIiXH5odv4aYn7q","rightArrow":"_2WNTzMhmud22X1-MHwOA_w","leftArrow":"_3ceYa1lMYVz1nnWexB6GbL","centerArrow":"_3vRG4djONQnZ_9v4qCyU4-","above":"_2XGF-iVjRCKfuxklnmGhV3","left":"_3VNMjtguBG3eyNKprWPSvh","topArrow":"_3xJLSWJ4gxJUalanagTSd9","bottomArrow":"_1wqBWp1NJib-jJryV9PbAx","middleArrow":"_21vKCTIIt0OEOclCivS_Ve","right":"_3X9d8ZZpvNeMa1DimcV1vQ"};

/***/ },
/* 144 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var asap = __webpack_require__(288);

	function noop() {}

	// States:
	//
	// 0 - pending
	// 1 - fulfilled with _value
	// 2 - rejected with _value
	// 3 - adopted the state of another promise, _value
	//
	// once the state is no longer pending (0) it is immutable

	// All `_` prefixed properties will be reduced to `_{random number}`
	// at build time to obfuscate them and discourage their use.
	// We don't use symbols or Object.defineProperty to fully hide them
	// because the performance isn't good enough.


	// to avoid using try/catch inside critical functions, we
	// extract them to here.
	var LAST_ERROR = null;
	var IS_ERROR = {};
	function getThen(obj) {
	  try {
	    return obj.then;
	  } catch (ex) {
	    LAST_ERROR = ex;
	    return IS_ERROR;
	  }
	}

	function tryCallOne(fn, a) {
	  try {
	    return fn(a);
	  } catch (ex) {
	    LAST_ERROR = ex;
	    return IS_ERROR;
	  }
	}
	function tryCallTwo(fn, a, b) {
	  try {
	    fn(a, b);
	  } catch (ex) {
	    LAST_ERROR = ex;
	    return IS_ERROR;
	  }
	}

	module.exports = Promise;

	function Promise(fn) {
	  if (typeof this !== 'object') {
	    throw new TypeError('Promises must be constructed via new');
	  }
	  if (typeof fn !== 'function') {
	    throw new TypeError('not a function');
	  }
	  this._45 = 0;
	  this._81 = 0;
	  this._65 = null;
	  this._54 = null;
	  if (fn === noop) return;
	  doResolve(fn, this);
	}
	Promise._10 = null;
	Promise._97 = null;
	Promise._61 = noop;

	Promise.prototype.then = function(onFulfilled, onRejected) {
	  if (this.constructor !== Promise) {
	    return safeThen(this, onFulfilled, onRejected);
	  }
	  var res = new Promise(noop);
	  handle(this, new Handler(onFulfilled, onRejected, res));
	  return res;
	};

	function safeThen(self, onFulfilled, onRejected) {
	  return new self.constructor(function (resolve, reject) {
	    var res = new Promise(noop);
	    res.then(resolve, reject);
	    handle(self, new Handler(onFulfilled, onRejected, res));
	  });
	};
	function handle(self, deferred) {
	  while (self._81 === 3) {
	    self = self._65;
	  }
	  if (Promise._10) {
	    Promise._10(self);
	  }
	  if (self._81 === 0) {
	    if (self._45 === 0) {
	      self._45 = 1;
	      self._54 = deferred;
	      return;
	    }
	    if (self._45 === 1) {
	      self._45 = 2;
	      self._54 = [self._54, deferred];
	      return;
	    }
	    self._54.push(deferred);
	    return;
	  }
	  handleResolved(self, deferred);
	}

	function handleResolved(self, deferred) {
	  asap(function() {
	    var cb = self._81 === 1 ? deferred.onFulfilled : deferred.onRejected;
	    if (cb === null) {
	      if (self._81 === 1) {
	        resolve(deferred.promise, self._65);
	      } else {
	        reject(deferred.promise, self._65);
	      }
	      return;
	    }
	    var ret = tryCallOne(cb, self._65);
	    if (ret === IS_ERROR) {
	      reject(deferred.promise, LAST_ERROR);
	    } else {
	      resolve(deferred.promise, ret);
	    }
	  });
	}
	function resolve(self, newValue) {
	  // Promise Resolution Procedure: https://github.com/promises-aplus/promises-spec#the-promise-resolution-procedure
	  if (newValue === self) {
	    return reject(
	      self,
	      new TypeError('A promise cannot be resolved with itself.')
	    );
	  }
	  if (
	    newValue &&
	    (typeof newValue === 'object' || typeof newValue === 'function')
	  ) {
	    var then = getThen(newValue);
	    if (then === IS_ERROR) {
	      return reject(self, LAST_ERROR);
	    }
	    if (
	      then === self.then &&
	      newValue instanceof Promise
	    ) {
	      self._81 = 3;
	      self._65 = newValue;
	      finale(self);
	      return;
	    } else if (typeof then === 'function') {
	      doResolve(then.bind(newValue), self);
	      return;
	    }
	  }
	  self._81 = 1;
	  self._65 = newValue;
	  finale(self);
	}

	function reject(self, newValue) {
	  self._81 = 2;
	  self._65 = newValue;
	  if (Promise._97) {
	    Promise._97(self, newValue);
	  }
	  finale(self);
	}
	function finale(self) {
	  if (self._45 === 1) {
	    handle(self, self._54);
	    self._54 = null;
	  }
	  if (self._45 === 2) {
	    for (var i = 0; i < self._54.length; i++) {
	      handle(self, self._54[i]);
	    }
	    self._54 = null;
	  }
	}

	function Handler(onFulfilled, onRejected, promise){
	  this.onFulfilled = typeof onFulfilled === 'function' ? onFulfilled : null;
	  this.onRejected = typeof onRejected === 'function' ? onRejected : null;
	  this.promise = promise;
	}

	/**
	 * Take a potentially misbehaving resolver function and make sure
	 * onFulfilled and onRejected are only called once.
	 *
	 * Makes no guarantees about asynchrony.
	 */
	function doResolve(fn, promise) {
	  var done = false;
	  var res = tryCallTwo(fn, function (value) {
	    if (done) return;
	    done = true;
	    resolve(promise, value);
	  }, function (reason) {
	    if (done) return;
	    done = true;
	    reject(promise, reason);
	  })
	  if (!done && res === IS_ERROR) {
	    done = true;
	    reject(promise, LAST_ERROR);
	  }
	}


/***/ },
/* 145 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var stylesInDom = {},
		memoize = function(fn) {
			var memo;
			return function () {
				if (typeof memo === "undefined") memo = fn.apply(this, arguments);
				return memo;
			};
		},
		isOldIE = memoize(function() {
			// Test for IE <= 9 as proposed by Browserhacks
			// @see http://browserhacks.com/#hack-e71d8692f65334173fee715c222cb805
			// Tests for existence of standard globals is to allow style-loader 
			// to operate correctly into non-standard environments
			// @see https://github.com/webpack-contrib/style-loader/issues/177
			return window && document && document.all && !window.atob;
		}),
		getElement = (function(fn) {
			var memo = {};
			return function(selector) {
				if (typeof memo[selector] === "undefined") {
					memo[selector] = fn.call(this, selector);
				}
				return memo[selector]
			};
		})(function (styleTarget) {
			return document.querySelector(styleTarget)
		}),
		singletonElement = null,
		singletonCounter = 0,
		styleElementsInsertedAtTop = [],
		fixUrls = __webpack_require__(285);

	module.exports = function(list, options) {
		if(false) {
			if(typeof document !== "object") throw new Error("The style-loader cannot be used in a non-browser environment");
		}

		options = options || {};
		options.attrs = typeof options.attrs === "object" ? options.attrs : {};

		// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>
		// tags it will allow on a page
		if (typeof options.singleton === "undefined") options.singleton = isOldIE();

		// By default, add <style> tags to the <head> element
		if (typeof options.insertInto === "undefined") options.insertInto = "head";

		// By default, add <style> tags to the bottom of the target
		if (typeof options.insertAt === "undefined") options.insertAt = "bottom";

		var styles = listToStyles(list);
		addStylesToDom(styles, options);

		return function update(newList) {
			var mayRemove = [];
			for(var i = 0; i < styles.length; i++) {
				var item = styles[i];
				var domStyle = stylesInDom[item.id];
				domStyle.refs--;
				mayRemove.push(domStyle);
			}
			if(newList) {
				var newStyles = listToStyles(newList);
				addStylesToDom(newStyles, options);
			}
			for(var i = 0; i < mayRemove.length; i++) {
				var domStyle = mayRemove[i];
				if(domStyle.refs === 0) {
					for(var j = 0; j < domStyle.parts.length; j++)
						domStyle.parts[j]();
					delete stylesInDom[domStyle.id];
				}
			}
		};
	};

	function addStylesToDom(styles, options) {
		for(var i = 0; i < styles.length; i++) {
			var item = styles[i];
			var domStyle = stylesInDom[item.id];
			if(domStyle) {
				domStyle.refs++;
				for(var j = 0; j < domStyle.parts.length; j++) {
					domStyle.parts[j](item.parts[j]);
				}
				for(; j < item.parts.length; j++) {
					domStyle.parts.push(addStyle(item.parts[j], options));
				}
			} else {
				var parts = [];
				for(var j = 0; j < item.parts.length; j++) {
					parts.push(addStyle(item.parts[j], options));
				}
				stylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};
			}
		}
	}

	function listToStyles(list) {
		var styles = [];
		var newStyles = {};
		for(var i = 0; i < list.length; i++) {
			var item = list[i];
			var id = item[0];
			var css = item[1];
			var media = item[2];
			var sourceMap = item[3];
			var part = {css: css, media: media, sourceMap: sourceMap};
			if(!newStyles[id])
				styles.push(newStyles[id] = {id: id, parts: [part]});
			else
				newStyles[id].parts.push(part);
		}
		return styles;
	}

	function insertStyleElement(options, styleElement) {
		var styleTarget = getElement(options.insertInto)
		if (!styleTarget) {
			throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");
		}
		var lastStyleElementInsertedAtTop = styleElementsInsertedAtTop[styleElementsInsertedAtTop.length - 1];
		if (options.insertAt === "top") {
			if(!lastStyleElementInsertedAtTop) {
				styleTarget.insertBefore(styleElement, styleTarget.firstChild);
			} else if(lastStyleElementInsertedAtTop.nextSibling) {
				styleTarget.insertBefore(styleElement, lastStyleElementInsertedAtTop.nextSibling);
			} else {
				styleTarget.appendChild(styleElement);
			}
			styleElementsInsertedAtTop.push(styleElement);
		} else if (options.insertAt === "bottom") {
			styleTarget.appendChild(styleElement);
		} else {
			throw new Error("Invalid value for parameter 'insertAt'. Must be 'top' or 'bottom'.");
		}
	}

	function removeStyleElement(styleElement) {
		styleElement.parentNode.removeChild(styleElement);
		var idx = styleElementsInsertedAtTop.indexOf(styleElement);
		if(idx >= 0) {
			styleElementsInsertedAtTop.splice(idx, 1);
		}
	}

	function createStyleElement(options) {
		var styleElement = document.createElement("style");
		options.attrs.type = "text/css";

		attachTagAttrs(styleElement, options.attrs);
		insertStyleElement(options, styleElement);
		return styleElement;
	}

	function createLinkElement(options) {
		var linkElement = document.createElement("link");
		options.attrs.type = "text/css";
		options.attrs.rel = "stylesheet";

		attachTagAttrs(linkElement, options.attrs);
		insertStyleElement(options, linkElement);
		return linkElement;
	}

	function attachTagAttrs(element, attrs) {
		Object.keys(attrs).forEach(function (key) {
			element.setAttribute(key, attrs[key]);
		});
	}

	function addStyle(obj, options) {
		var styleElement, update, remove;

		if (options.singleton) {
			var styleIndex = singletonCounter++;
			styleElement = singletonElement || (singletonElement = createStyleElement(options));
			update = applyToSingletonTag.bind(null, styleElement, styleIndex, false);
			remove = applyToSingletonTag.bind(null, styleElement, styleIndex, true);
		} else if(obj.sourceMap &&
			typeof URL === "function" &&
			typeof URL.createObjectURL === "function" &&
			typeof URL.revokeObjectURL === "function" &&
			typeof Blob === "function" &&
			typeof btoa === "function") {
			styleElement = createLinkElement(options);
			update = updateLink.bind(null, styleElement, options);
			remove = function() {
				removeStyleElement(styleElement);
				if(styleElement.href)
					URL.revokeObjectURL(styleElement.href);
			};
		} else {
			styleElement = createStyleElement(options);
			update = applyToTag.bind(null, styleElement);
			remove = function() {
				removeStyleElement(styleElement);
			};
		}

		update(obj);

		return function updateStyle(newObj) {
			if(newObj) {
				if(newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap)
					return;
				update(obj = newObj);
			} else {
				remove();
			}
		};
	}

	var replaceText = (function () {
		var textStore = [];

		return function (index, replacement) {
			textStore[index] = replacement;
			return textStore.filter(Boolean).join('\n');
		};
	})();

	function applyToSingletonTag(styleElement, index, remove, obj) {
		var css = remove ? "" : obj.css;

		if (styleElement.styleSheet) {
			styleElement.styleSheet.cssText = replaceText(index, css);
		} else {
			var cssNode = document.createTextNode(css);
			var childNodes = styleElement.childNodes;
			if (childNodes[index]) styleElement.removeChild(childNodes[index]);
			if (childNodes.length) {
				styleElement.insertBefore(cssNode, childNodes[index]);
			} else {
				styleElement.appendChild(cssNode);
			}
		}
	}

	function applyToTag(styleElement, obj) {
		var css = obj.css;
		var media = obj.media;

		if(media) {
			styleElement.setAttribute("media", media)
		}

		if(styleElement.styleSheet) {
			styleElement.styleSheet.cssText = css;
		} else {
			while(styleElement.firstChild) {
				styleElement.removeChild(styleElement.firstChild);
			}
			styleElement.appendChild(document.createTextNode(css));
		}
	}

	function updateLink(linkElement, options, obj) {
		var css = obj.css;
		var sourceMap = obj.sourceMap;

		/* If convertToAbsoluteUrls isn't defined, but sourcemaps are enabled
		and there is no publicPath defined then lets turn convertToAbsoluteUrls
		on by default.  Otherwise default to the convertToAbsoluteUrls option
		directly
		*/
		var autoFixUrls = options.convertToAbsoluteUrls === undefined && sourceMap;

		if (options.convertToAbsoluteUrls || autoFixUrls){
			css = fixUrls(css);
		}

		if(sourceMap) {
			// http://stackoverflow.com/a/26603875
			css += "\n/*# sourceMappingURL=data:application/json;base64," + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + " */";
		}

		var blob = new Blob([css], { type: "text/css" });

		var oldSrc = linkElement.href;

		linkElement.href = URL.createObjectURL(blob);

		if(oldSrc)
			URL.revokeObjectURL(oldSrc);
	}


/***/ },
/* 146 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @typechecks
	 */

	var emptyFunction = __webpack_require__(18);

	/**
	 * Upstream version of event listener. Does not take into account specific
	 * nature of platform.
	 */
	var EventListener = {
	  /**
	   * Listen to DOM events during the bubble phase.
	   *
	   * @param {DOMEventTarget} target DOM element to register listener on.
	   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
	   * @param {function} callback Callback function.
	   * @return {object} Object with a `remove` method.
	   */
	  listen: function listen(target, eventType, callback) {
	    if (target.addEventListener) {
	      target.addEventListener(eventType, callback, false);
	      return {
	        remove: function remove() {
	          target.removeEventListener(eventType, callback, false);
	        }
	      };
	    } else if (target.attachEvent) {
	      target.attachEvent('on' + eventType, callback);
	      return {
	        remove: function remove() {
	          target.detachEvent('on' + eventType, callback);
	        }
	      };
	    }
	  },

	  /**
	   * Listen to DOM events during the capture phase.
	   *
	   * @param {DOMEventTarget} target DOM element to register listener on.
	   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
	   * @param {function} callback Callback function.
	   * @return {object} Object with a `remove` method.
	   */
	  capture: function capture(target, eventType, callback) {
	    if (target.addEventListener) {
	      target.addEventListener(eventType, callback, true);
	      return {
	        remove: function remove() {
	          target.removeEventListener(eventType, callback, true);
	        }
	      };
	    } else {
	      if (false) {
	        console.error('Attempted to listen to events during the capture phase on a ' + 'browser that does not support the capture phase. Your application ' + 'will not receive some events.');
	      }
	      return {
	        remove: emptyFunction
	      };
	    }
	  },

	  registerDefault: function registerDefault() {}
	};

	module.exports = EventListener;

/***/ },
/* 147 */
/***/ function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	/**
	 * @param {DOMElement} node input/textarea to focus
	 */

	function focusNode(node) {
	  // IE8 can throw "Can't move focus to the control because it is invisible,
	  // not enabled, or of a type that does not accept the focus." for all kinds of
	  // reasons that are too expensive and fragile to test.
	  try {
	    node.focus();
	  } catch (e) {}
	}

	module.exports = focusNode;

/***/ },
/* 148 */
/***/ function(module, exports) {

	'use strict';

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */

	/* eslint-disable fb-www/typeof-undefined */

	/**
	 * Same as document.activeElement but wraps in a try-catch block. In IE it is
	 * not safe to call document.activeElement if there is nothing focused.
	 *
	 * The activeElement will be null only if the document or document body is not
	 * yet defined.
	 *
	 * @param {?DOMDocument} doc Defaults to current document.
	 * @return {?DOMElement}
	 */
	function getActiveElement(doc) /*?DOMElement*/{
	  doc = doc || (typeof document !== 'undefined' ? document : undefined);
	  if (typeof doc === 'undefined') {
	    return null;
	  }
	  try {
	    return doc.activeElement || doc.body;
	  } catch (e) {
	    return doc.body;
	  }
	}

	module.exports = getActiveElement;

/***/ },
/* 149 */
/***/ function(module, exports) {

	module.exports = isFunction

	var toString = Object.prototype.toString

	function isFunction (fn) {
	  var string = toString.call(fn)
	  return string === '[object Function]' ||
	    (typeof fn === 'function' && string !== '[object RegExp]') ||
	    (typeof window !== 'undefined' &&
	     // IE8 and below
	     (fn === window.setTimeout ||
	      fn === window.alert ||
	      fn === window.confirm ||
	      fn === window.prompt))
	};


/***/ },
/* 150 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 */

	'use strict';

	// React 15.5 references this module, and assumes PropTypes are still callable in production.
	// Therefore we re-export development-only version with all the PropTypes checks here.
	// However if one is migrating to the `prop-types` npm library, they will go through the
	// `index.js` entry point, and it will branch depending on the environment.
	var factory = __webpack_require__(308);
	module.exports = function(isValidElement) {
	  // It is still allowed in 15.5.
	  var throwOnDirectAccess = false;
	  return factory(isValidElement, throwOnDirectAccess);
	};


/***/ },
/* 151 */
/***/ function(module, exports, __webpack_require__) {

	var _curry1 = __webpack_require__(19);
	var _identity = __webpack_require__(323);


	/**
	 * A function that does nothing but return the parameter supplied to it. Good
	 * as a default or placeholder function.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.1.0
	 * @category Function
	 * @sig a -> a
	 * @param {*} x The value to return.
	 * @return {*} The input value, `x`.
	 * @example
	 *
	 *      R.identity(1); //=> 1
	 *
	 *      var obj = {};
	 *      R.identity(obj) === obj; //=> true
	 */
	module.exports = _curry1(_identity);


/***/ },
/* 152 */
/***/ function(module, exports, __webpack_require__) {

	var _isArray = __webpack_require__(88);
	var _slice = __webpack_require__(35);


	/**
	 * Similar to hasMethod, this checks whether a function has a [methodname]
	 * function. If it isn't an array it will execute that function otherwise it
	 * will default to the ramda implementation.
	 *
	 * @private
	 * @param {Function} fn ramda implemtation
	 * @param {String} methodname property to check for a custom implementation
	 * @return {Object} Whatever the return value of the method is.
	 */
	module.exports = function _checkForMethod(methodname, fn) {
	  return function() {
	    var length = arguments.length;
	    if (length === 0) {
	      return fn();
	    }
	    var obj = arguments[length - 1];
	    return (_isArray(obj) || typeof obj[methodname] !== 'function') ?
	      fn.apply(this, arguments) :
	      obj[methodname].apply(obj, _slice(arguments, 0, length - 1));
	  };
	};


/***/ },
/* 153 */
/***/ function(module, exports) {

	/**
	 * Private `concat` function to merge two array-like objects.
	 *
	 * @private
	 * @param {Array|Arguments} [set1=[]] An array-like object.
	 * @param {Array|Arguments} [set2=[]] An array-like object.
	 * @return {Array} A new, merged array.
	 * @example
	 *
	 *      _concat([4, 5, 6], [1, 2, 3]); //=> [4, 5, 6, 1, 2, 3]
	 */
	module.exports = function _concat(set1, set2) {
	  set1 = set1 || [];
	  set2 = set2 || [];
	  var idx;
	  var len1 = set1.length;
	  var len2 = set2.length;
	  var result = [];

	  idx = 0;
	  while (idx < len1) {
	    result[result.length] = set1[idx];
	    idx += 1;
	  }
	  idx = 0;
	  while (idx < len2) {
	    result[result.length] = set2[idx];
	    idx += 1;
	  }
	  return result;
	};


/***/ },
/* 154 */
/***/ function(module, exports, __webpack_require__) {

	var _isArray = __webpack_require__(88);
	var _isTransformer = __webpack_require__(325);
	var _slice = __webpack_require__(35);


	/**
	 * Returns a function that dispatches with different strategies based on the
	 * object in list position (last argument). If it is an array, executes [fn].
	 * Otherwise, if it has a function with [methodname], it will execute that
	 * function (functor case). Otherwise, if it is a transformer, uses transducer
	 * [xf] to return a new transformer (transducer case). Otherwise, it will
	 * default to executing [fn].
	 *
	 * @private
	 * @param {String} methodname property to check for a custom implementation
	 * @param {Function} xf transducer to initialize if object is transformer
	 * @param {Function} fn default ramda implementation
	 * @return {Function} A function that dispatches on object in list position
	 */
	module.exports = function _dispatchable(methodname, xf, fn) {
	  return function() {
	    var length = arguments.length;
	    if (length === 0) {
	      return fn();
	    }
	    var obj = arguments[length - 1];
	    if (!_isArray(obj)) {
	      var args = _slice(arguments, 0, length - 1);
	      if (typeof obj[methodname] === 'function') {
	        return obj[methodname].apply(obj, args);
	      }
	      if (_isTransformer(obj)) {
	        var transducer = xf.apply(null, args);
	        return transducer(obj);
	      }
	    }
	    return fn.apply(this, arguments);
	  };
	};


/***/ },
/* 155 */
/***/ function(module, exports, __webpack_require__) {

	var _xwrap = __webpack_require__(332);
	var bind = __webpack_require__(312);
	var isArrayLike = __webpack_require__(158);


	module.exports = (function() {
	  function _arrayReduce(xf, acc, list) {
	    var idx = 0;
	    var len = list.length;
	    while (idx < len) {
	      acc = xf['@@transducer/step'](acc, list[idx]);
	      if (acc && acc['@@transducer/reduced']) {
	        acc = acc['@@transducer/value'];
	        break;
	      }
	      idx += 1;
	    }
	    return xf['@@transducer/result'](acc);
	  }

	  function _iterableReduce(xf, acc, iter) {
	    var step = iter.next();
	    while (!step.done) {
	      acc = xf['@@transducer/step'](acc, step.value);
	      if (acc && acc['@@transducer/reduced']) {
	        acc = acc['@@transducer/value'];
	        break;
	      }
	      step = iter.next();
	    }
	    return xf['@@transducer/result'](acc);
	  }

	  function _methodReduce(xf, acc, obj) {
	    return xf['@@transducer/result'](obj.reduce(bind(xf['@@transducer/step'], xf), acc));
	  }

	  var symIterator = (typeof Symbol !== 'undefined') ? Symbol.iterator : '@@iterator';
	  return function _reduce(fn, acc, list) {
	    if (typeof fn === 'function') {
	      fn = _xwrap(fn);
	    }
	    if (isArrayLike(list)) {
	      return _arrayReduce(fn, acc, list);
	    }
	    if (typeof list.reduce === 'function') {
	      return _methodReduce(fn, acc, list);
	    }
	    if (list[symIterator] != null) {
	      return _iterableReduce(fn, acc, list[symIterator]());
	    }
	    if (typeof list.next === 'function') {
	      return _iterableReduce(fn, acc, list);
	    }
	    throw new TypeError('reduce: list must be array or iterable');
	  };
	}());


/***/ },
/* 156 */
/***/ function(module, exports) {

	module.exports = {
	  init: function() {
	    return this.xf['@@transducer/init']();
	  },
	  result: function(result) {
	    return this.xf['@@transducer/result'](result);
	  }
	};


/***/ },
/* 157 */
/***/ function(module, exports, __webpack_require__) {

	var _curry2 = __webpack_require__(13);


	/**
	 * See if an object (`val`) is an instance of the supplied constructor. This
	 * function will check up the inheritance chain, if any.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.3.0
	 * @category Type
	 * @sig (* -> {*}) -> a -> Boolean
	 * @param {Object} ctor A constructor
	 * @param {*} val The value to test
	 * @return {Boolean}
	 * @example
	 *
	 *      R.is(Object, {}); //=> true
	 *      R.is(Number, 1); //=> true
	 *      R.is(Object, 1); //=> false
	 *      R.is(String, 's'); //=> true
	 *      R.is(String, new String('')); //=> true
	 *      R.is(Object, new String('')); //=> true
	 *      R.is(Object, 's'); //=> false
	 *      R.is(Number, {}); //=> false
	 */
	module.exports = _curry2(function is(Ctor, val) {
	  return val != null && val.constructor === Ctor || val instanceof Ctor;
	});


/***/ },
/* 158 */
/***/ function(module, exports, __webpack_require__) {

	var _curry1 = __webpack_require__(19);
	var _isArray = __webpack_require__(88);
	var _isString = __webpack_require__(89);


	/**
	 * Tests whether or not an object is similar to an array.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.5.0
	 * @category Type
	 * @category List
	 * @sig * -> Boolean
	 * @param {*} x The object to test.
	 * @return {Boolean} `true` if `x` has a numeric length property and extreme indices defined; `false` otherwise.
	 * @example
	 *
	 *      R.isArrayLike([]); //=> true
	 *      R.isArrayLike(true); //=> false
	 *      R.isArrayLike({}); //=> false
	 *      R.isArrayLike({length: 10}); //=> false
	 *      R.isArrayLike({0: 'zero', 9: 'nine', length: 10}); //=> true
	 */
	module.exports = _curry1(function isArrayLike(x) {
	  if (_isArray(x)) { return true; }
	  if (!x) { return false; }
	  if (typeof x !== 'object') { return false; }
	  if (_isString(x)) { return false; }
	  if (x.nodeType === 1) { return !!x.length; }
	  if (x.length === 0) { return true; }
	  if (x.length > 0) {
	    return x.hasOwnProperty(0) && x.hasOwnProperty(x.length - 1);
	  }
	  return false;
	});


/***/ },
/* 159 */
/***/ function(module, exports, __webpack_require__) {

	var _curry1 = __webpack_require__(19);
	var _has = __webpack_require__(64);
	var _isArguments = __webpack_require__(324);


	/**
	 * Returns a list containing the names of all the enumerable own properties of
	 * the supplied object.
	 * Note that the order of the output array is not guaranteed to be consistent
	 * across different JS platforms.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.1.0
	 * @category Object
	 * @sig {k: v} -> [k]
	 * @param {Object} obj The object to extract properties from
	 * @return {Array} An array of the object's own properties.
	 * @example
	 *
	 *      R.keys({a: 1, b: 2, c: 3}); //=> ['a', 'b', 'c']
	 */
	module.exports = (function() {
	  // cover IE < 9 keys issues
	  var hasEnumBug = !({toString: null}).propertyIsEnumerable('toString');
	  var nonEnumerableProps = ['constructor', 'valueOf', 'isPrototypeOf', 'toString',
	                            'propertyIsEnumerable', 'hasOwnProperty', 'toLocaleString'];
	  // Safari bug
	  var hasArgsEnumBug = (function() {
	    'use strict';
	    return arguments.propertyIsEnumerable('length');
	  }());

	  var contains = function contains(list, item) {
	    var idx = 0;
	    while (idx < list.length) {
	      if (list[idx] === item) {
	        return true;
	      }
	      idx += 1;
	    }
	    return false;
	  };

	  return typeof Object.keys === 'function' && !hasArgsEnumBug ?
	    _curry1(function keys(obj) {
	      return Object(obj) !== obj ? [] : Object.keys(obj);
	    }) :
	    _curry1(function keys(obj) {
	      if (Object(obj) !== obj) {
	        return [];
	      }
	      var prop, nIdx;
	      var ks = [];
	      var checkArgsLength = hasArgsEnumBug && _isArguments(obj);
	      for (prop in obj) {
	        if (_has(prop, obj) && (!checkArgsLength || prop !== 'length')) {
	          ks[ks.length] = prop;
	        }
	      }
	      if (hasEnumBug) {
	        nIdx = nonEnumerableProps.length - 1;
	        while (nIdx >= 0) {
	          prop = nonEnumerableProps[nIdx];
	          if (_has(prop, obj) && !contains(ks, prop)) {
	            ks[ks.length] = prop;
	          }
	          nIdx -= 1;
	        }
	      }
	      return ks;
	    });
	}());


/***/ },
/* 160 */
/***/ function(module, exports, __webpack_require__) {

	var _curry3 = __webpack_require__(29);
	var _reduce = __webpack_require__(155);


	/**
	 * Returns a single item by iterating through the list, successively calling
	 * the iterator function and passing it an accumulator value and the current
	 * value from the array, and then passing the result to the next call.
	 *
	 * The iterator function receives two values: *(acc, value)*. It may use
	 * `R.reduced` to shortcut the iteration.
	 *
	 * Note: `R.reduce` does not skip deleted or unassigned indices (sparse
	 * arrays), unlike the native `Array.prototype.reduce` method. For more details
	 * on this behavior, see:
	 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce#Description
	 *
	 * Dispatches to the `reduce` method of the third argument, if present.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.1.0
	 * @category List
	 * @sig ((a, b) -> a) -> a -> [b] -> a
	 * @param {Function} fn The iterator function. Receives two values, the accumulator and the
	 *        current element from the array.
	 * @param {*} acc The accumulator value.
	 * @param {Array} list The list to iterate over.
	 * @return {*} The final, accumulated value.
	 * @see R.reduced, R.addIndex
	 * @example
	 *
	 *      var numbers = [1, 2, 3];
	 *      var plus = (a, b) => a + b;
	 *
	 *      R.reduce(plus, 10, numbers); //=> 16
	 */
	module.exports = _curry3(_reduce);


/***/ },
/* 161 */
/***/ function(module, exports, __webpack_require__) {

	var _curry2 = __webpack_require__(13);
	var _slice = __webpack_require__(35);
	var curryN = __webpack_require__(48);


	/**
	 * Accepts a function `fn` and a list of transformer functions and returns a
	 * new curried function. When the new function is invoked, it calls the
	 * function `fn` with parameters consisting of the result of calling each
	 * supplied handler on successive arguments to the new function.
	 *
	 * If more arguments are passed to the returned function than transformer
	 * functions, those arguments are passed directly to `fn` as additional
	 * parameters. If you expect additional arguments that don't need to be
	 * transformed, although you can ignore them, it's best to pass an identity
	 * function so that the new function reports the correct arity.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.1.0
	 * @category Function
	 * @sig (x1 -> x2 -> ... -> z) -> [(a -> x1), (b -> x2), ...] -> (a -> b -> ... -> z)
	 * @param {Function} fn The function to wrap.
	 * @param {Array} transformers A list of transformer functions
	 * @return {Function} The wrapped function.
	 * @example
	 *
	 *      R.useWith(Math.pow, [R.identity, R.identity])(3, 4); //=> 81
	 *      R.useWith(Math.pow, [R.identity, R.identity])(3)(4); //=> 81
	 *      R.useWith(Math.pow, [R.dec, R.inc])(3, 4); //=> 32
	 *      R.useWith(Math.pow, [R.dec, R.inc])(3)(4); //=> 32
	 */
	module.exports = _curry2(function useWith(fn, transformers) {
	  return curryN(transformers.length, function() {
	    var args = [];
	    var idx = 0;
	    while (idx < transformers.length) {
	      args.push(transformers[idx].call(this, arguments[idx]));
	      idx += 1;
	    }
	    return fn.apply(this, args.concat(_slice(arguments, transformers.length)));
	  });
	});


/***/ },
/* 162 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	/**
	 * CSS properties which accept numbers but are not in units of "px".
	 */

	var isUnitlessNumber = {
	  animationIterationCount: true,
	  borderImageOutset: true,
	  borderImageSlice: true,
	  borderImageWidth: true,
	  boxFlex: true,
	  boxFlexGroup: true,
	  boxOrdinalGroup: true,
	  columnCount: true,
	  flex: true,
	  flexGrow: true,
	  flexPositive: true,
	  flexShrink: true,
	  flexNegative: true,
	  flexOrder: true,
	  gridRow: true,
	  gridColumn: true,
	  fontWeight: true,
	  lineClamp: true,
	  lineHeight: true,
	  opacity: true,
	  order: true,
	  orphans: true,
	  tabSize: true,
	  widows: true,
	  zIndex: true,
	  zoom: true,

	  // SVG-related properties
	  fillOpacity: true,
	  floodOpacity: true,
	  stopOpacity: true,
	  strokeDasharray: true,
	  strokeDashoffset: true,
	  strokeMiterlimit: true,
	  strokeOpacity: true,
	  strokeWidth: true
	};

	/**
	 * @param {string} prefix vendor-specific prefix, eg: Webkit
	 * @param {string} key style name, eg: transitionDuration
	 * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
	 * WebkitTransitionDuration
	 */
	function prefixKey(prefix, key) {
	  return prefix + key.charAt(0).toUpperCase() + key.substring(1);
	}

	/**
	 * Support style names that may come passed in prefixed by adding permutations
	 * of vendor prefixes.
	 */
	var prefixes = ['Webkit', 'ms', 'Moz', 'O'];

	// Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an
	// infinite loop, because it iterates over the newly added props too.
	Object.keys(isUnitlessNumber).forEach(function (prop) {
	  prefixes.forEach(function (prefix) {
	    isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
	  });
	});

	/**
	 * Most style properties can be unset by doing .style[prop] = '' but IE8
	 * doesn't like doing that with shorthand properties so for the properties that
	 * IE8 breaks on, which are listed here, we instead unset each of the
	 * individual properties. See http://bugs.jquery.com/ticket/12385.
	 * The 4-value 'clock' properties like margin, padding, border-width seem to
	 * behave without any problems. Curiously, list-style works too without any
	 * special prodding.
	 */
	var shorthandPropertyExpansions = {
	  background: {
	    backgroundAttachment: true,
	    backgroundColor: true,
	    backgroundImage: true,
	    backgroundPositionX: true,
	    backgroundPositionY: true,
	    backgroundRepeat: true
	  },
	  backgroundPosition: {
	    backgroundPositionX: true,
	    backgroundPositionY: true
	  },
	  border: {
	    borderWidth: true,
	    borderStyle: true,
	    borderColor: true
	  },
	  borderBottom: {
	    borderBottomWidth: true,
	    borderBottomStyle: true,
	    borderBottomColor: true
	  },
	  borderLeft: {
	    borderLeftWidth: true,
	    borderLeftStyle: true,
	    borderLeftColor: true
	  },
	  borderRight: {
	    borderRightWidth: true,
	    borderRightStyle: true,
	    borderRightColor: true
	  },
	  borderTop: {
	    borderTopWidth: true,
	    borderTopStyle: true,
	    borderTopColor: true
	  },
	  font: {
	    fontStyle: true,
	    fontVariant: true,
	    fontWeight: true,
	    fontSize: true,
	    lineHeight: true,
	    fontFamily: true
	  },
	  outline: {
	    outlineWidth: true,
	    outlineStyle: true,
	    outlineColor: true
	  }
	};

	var CSSProperty = {
	  isUnitlessNumber: isUnitlessNumber,
	  shorthandPropertyExpansions: shorthandPropertyExpansions
	};

	module.exports = CSSProperty;

/***/ },
/* 163 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(5);

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var PooledClass = __webpack_require__(32);

	var invariant = __webpack_require__(3);

	/**
	 * A specialized pseudo-event module to help keep track of components waiting to
	 * be notified when their DOM representations are available for use.
	 *
	 * This implements `PooledClass`, so you should never need to instantiate this.
	 * Instead, use `CallbackQueue.getPooled()`.
	 *
	 * @class ReactMountReady
	 * @implements PooledClass
	 * @internal
	 */

	var CallbackQueue = function () {
	  function CallbackQueue(arg) {
	    _classCallCheck(this, CallbackQueue);

	    this._callbacks = null;
	    this._contexts = null;
	    this._arg = arg;
	  }

	  /**
	   * Enqueues a callback to be invoked when `notifyAll` is invoked.
	   *
	   * @param {function} callback Invoked when `notifyAll` is invoked.
	   * @param {?object} context Context to call `callback` with.
	   * @internal
	   */


	  CallbackQueue.prototype.enqueue = function enqueue(callback, context) {
	    this._callbacks = this._callbacks || [];
	    this._callbacks.push(callback);
	    this._contexts = this._contexts || [];
	    this._contexts.push(context);
	  };

	  /**
	   * Invokes all enqueued callbacks and clears the queue. This is invoked after
	   * the DOM representation of a component has been created or updated.
	   *
	   * @internal
	   */


	  CallbackQueue.prototype.notifyAll = function notifyAll() {
	    var callbacks = this._callbacks;
	    var contexts = this._contexts;
	    var arg = this._arg;
	    if (callbacks && contexts) {
	      !(callbacks.length === contexts.length) ?  false ? invariant(false, 'Mismatched list of contexts in callback queue') : _prodInvariant('24') : void 0;
	      this._callbacks = null;
	      this._contexts = null;
	      for (var i = 0; i < callbacks.length; i++) {
	        callbacks[i].call(contexts[i], arg);
	      }
	      callbacks.length = 0;
	      contexts.length = 0;
	    }
	  };

	  CallbackQueue.prototype.checkpoint = function checkpoint() {
	    return this._callbacks ? this._callbacks.length : 0;
	  };

	  CallbackQueue.prototype.rollback = function rollback(len) {
	    if (this._callbacks && this._contexts) {
	      this._callbacks.length = len;
	      this._contexts.length = len;
	    }
	  };

	  /**
	   * Resets the internal queue.
	   *
	   * @internal
	   */


	  CallbackQueue.prototype.reset = function reset() {
	    this._callbacks = null;
	    this._contexts = null;
	  };

	  /**
	   * `PooledClass` looks for this.
	   */


	  CallbackQueue.prototype.destructor = function destructor() {
	    this.reset();
	  };

	  return CallbackQueue;
	}();

	module.exports = PooledClass.addPoolingTo(CallbackQueue);

/***/ },
/* 164 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var DOMProperty = __webpack_require__(37);
	var ReactDOMComponentTree = __webpack_require__(11);
	var ReactInstrumentation = __webpack_require__(20);

	var quoteAttributeValueForBrowser = __webpack_require__(412);
	var warning = __webpack_require__(4);

	var VALID_ATTRIBUTE_NAME_REGEX = new RegExp('^[' + DOMProperty.ATTRIBUTE_NAME_START_CHAR + '][' + DOMProperty.ATTRIBUTE_NAME_CHAR + ']*$');
	var illegalAttributeNameCache = {};
	var validatedAttributeNameCache = {};

	function isAttributeNameSafe(attributeName) {
	  if (validatedAttributeNameCache.hasOwnProperty(attributeName)) {
	    return true;
	  }
	  if (illegalAttributeNameCache.hasOwnProperty(attributeName)) {
	    return false;
	  }
	  if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
	    validatedAttributeNameCache[attributeName] = true;
	    return true;
	  }
	  illegalAttributeNameCache[attributeName] = true;
	   false ? warning(false, 'Invalid attribute name: `%s`', attributeName) : void 0;
	  return false;
	}

	function shouldIgnoreValue(propertyInfo, value) {
	  return value == null || propertyInfo.hasBooleanValue && !value || propertyInfo.hasNumericValue && isNaN(value) || propertyInfo.hasPositiveNumericValue && value < 1 || propertyInfo.hasOverloadedBooleanValue && value === false;
	}

	/**
	 * Operations for dealing with DOM properties.
	 */
	var DOMPropertyOperations = {

	  /**
	   * Creates markup for the ID property.
	   *
	   * @param {string} id Unescaped ID.
	   * @return {string} Markup string.
	   */
	  createMarkupForID: function (id) {
	    return DOMProperty.ID_ATTRIBUTE_NAME + '=' + quoteAttributeValueForBrowser(id);
	  },

	  setAttributeForID: function (node, id) {
	    node.setAttribute(DOMProperty.ID_ATTRIBUTE_NAME, id);
	  },

	  createMarkupForRoot: function () {
	    return DOMProperty.ROOT_ATTRIBUTE_NAME + '=""';
	  },

	  setAttributeForRoot: function (node) {
	    node.setAttribute(DOMProperty.ROOT_ATTRIBUTE_NAME, '');
	  },

	  /**
	   * Creates markup for a property.
	   *
	   * @param {string} name
	   * @param {*} value
	   * @return {?string} Markup string, or null if the property was invalid.
	   */
	  createMarkupForProperty: function (name, value) {
	    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
	    if (propertyInfo) {
	      if (shouldIgnoreValue(propertyInfo, value)) {
	        return '';
	      }
	      var attributeName = propertyInfo.attributeName;
	      if (propertyInfo.hasBooleanValue || propertyInfo.hasOverloadedBooleanValue && value === true) {
	        return attributeName + '=""';
	      }
	      return attributeName + '=' + quoteAttributeValueForBrowser(value);
	    } else if (DOMProperty.isCustomAttribute(name)) {
	      if (value == null) {
	        return '';
	      }
	      return name + '=' + quoteAttributeValueForBrowser(value);
	    }
	    return null;
	  },

	  /**
	   * Creates markup for a custom property.
	   *
	   * @param {string} name
	   * @param {*} value
	   * @return {string} Markup string, or empty string if the property was invalid.
	   */
	  createMarkupForCustomAttribute: function (name, value) {
	    if (!isAttributeNameSafe(name) || value == null) {
	      return '';
	    }
	    return name + '=' + quoteAttributeValueForBrowser(value);
	  },

	  /**
	   * Sets the value for a property on a node.
	   *
	   * @param {DOMElement} node
	   * @param {string} name
	   * @param {*} value
	   */
	  setValueForProperty: function (node, name, value) {
	    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
	    if (propertyInfo) {
	      var mutationMethod = propertyInfo.mutationMethod;
	      if (mutationMethod) {
	        mutationMethod(node, value);
	      } else if (shouldIgnoreValue(propertyInfo, value)) {
	        this.deleteValueForProperty(node, name);
	        return;
	      } else if (propertyInfo.mustUseProperty) {
	        // Contrary to `setAttribute`, object properties are properly
	        // `toString`ed by IE8/9.
	        node[propertyInfo.propertyName] = value;
	      } else {
	        var attributeName = propertyInfo.attributeName;
	        var namespace = propertyInfo.attributeNamespace;
	        // `setAttribute` with objects becomes only `[object]` in IE8/9,
	        // ('' + value) makes it output the correct toString()-value.
	        if (namespace) {
	          node.setAttributeNS(namespace, attributeName, '' + value);
	        } else if (propertyInfo.hasBooleanValue || propertyInfo.hasOverloadedBooleanValue && value === true) {
	          node.setAttribute(attributeName, '');
	        } else {
	          node.setAttribute(attributeName, '' + value);
	        }
	      }
	    } else if (DOMProperty.isCustomAttribute(name)) {
	      DOMPropertyOperations.setValueForAttribute(node, name, value);
	      return;
	    }

	    if (false) {
	      var payload = {};
	      payload[name] = value;
	      ReactInstrumentation.debugTool.onHostOperation({
	        instanceID: ReactDOMComponentTree.getInstanceFromNode(node)._debugID,
	        type: 'update attribute',
	        payload: payload
	      });
	    }
	  },

	  setValueForAttribute: function (node, name, value) {
	    if (!isAttributeNameSafe(name)) {
	      return;
	    }
	    if (value == null) {
	      node.removeAttribute(name);
	    } else {
	      node.setAttribute(name, '' + value);
	    }

	    if (false) {
	      var payload = {};
	      payload[name] = value;
	      ReactInstrumentation.debugTool.onHostOperation({
	        instanceID: ReactDOMComponentTree.getInstanceFromNode(node)._debugID,
	        type: 'update attribute',
	        payload: payload
	      });
	    }
	  },

	  /**
	   * Deletes an attributes from a node.
	   *
	   * @param {DOMElement} node
	   * @param {string} name
	   */
	  deleteValueForAttribute: function (node, name) {
	    node.removeAttribute(name);
	    if (false) {
	      ReactInstrumentation.debugTool.onHostOperation({
	        instanceID: ReactDOMComponentTree.getInstanceFromNode(node)._debugID,
	        type: 'remove attribute',
	        payload: name
	      });
	    }
	  },

	  /**
	   * Deletes the value for a property on a node.
	   *
	   * @param {DOMElement} node
	   * @param {string} name
	   */
	  deleteValueForProperty: function (node, name) {
	    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
	    if (propertyInfo) {
	      var mutationMethod = propertyInfo.mutationMethod;
	      if (mutationMethod) {
	        mutationMethod(node, undefined);
	      } else if (propertyInfo.mustUseProperty) {
	        var propName = propertyInfo.propertyName;
	        if (propertyInfo.hasBooleanValue) {
	          node[propName] = false;
	        } else {
	          node[propName] = '';
	        }
	      } else {
	        node.removeAttribute(propertyInfo.attributeName);
	      }
	    } else if (DOMProperty.isCustomAttribute(name)) {
	      node.removeAttribute(name);
	    }

	    if (false) {
	      ReactInstrumentation.debugTool.onHostOperation({
	        instanceID: ReactDOMComponentTree.getInstanceFromNode(node)._debugID,
	        type: 'remove attribute',
	        payload: name
	      });
	    }
	  }

	};

	module.exports = DOMPropertyOperations;

/***/ },
/* 165 */
/***/ function(module, exports) {

	/**
	 * Copyright 2015-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var ReactDOMComponentFlags = {
	  hasCachedChildNodes: 1 << 0
	};

	module.exports = ReactDOMComponentFlags;

/***/ },
/* 166 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _assign = __webpack_require__(7);

	var LinkedValueUtils = __webpack_require__(97);
	var ReactDOMComponentTree = __webpack_require__(11);
	var ReactUpdates = __webpack_require__(22);

	var warning = __webpack_require__(4);

	var didWarnValueLink = false;
	var didWarnValueDefaultValue = false;

	function updateOptionsIfPendingUpdateAndMounted() {
	  if (this._rootNodeID && this._wrapperState.pendingUpdate) {
	    this._wrapperState.pendingUpdate = false;

	    var props = this._currentElement.props;
	    var value = LinkedValueUtils.getValue(props);

	    if (value != null) {
	      updateOptions(this, Boolean(props.multiple), value);
	    }
	  }
	}

	function getDeclarationErrorAddendum(owner) {
	  if (owner) {
	    var name = owner.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}

	var valuePropNames = ['value', 'defaultValue'];

	/**
	 * Validation function for `value` and `defaultValue`.
	 * @private
	 */
	function checkSelectPropTypes(inst, props) {
	  var owner = inst._currentElement._owner;
	  LinkedValueUtils.checkPropTypes('select', props, owner);

	  if (props.valueLink !== undefined && !didWarnValueLink) {
	     false ? warning(false, '`valueLink` prop on `select` is deprecated; set `value` and `onChange` instead.') : void 0;
	    didWarnValueLink = true;
	  }

	  for (var i = 0; i < valuePropNames.length; i++) {
	    var propName = valuePropNames[i];
	    if (props[propName] == null) {
	      continue;
	    }
	    var isArray = Array.isArray(props[propName]);
	    if (props.multiple && !isArray) {
	       false ? warning(false, 'The `%s` prop supplied to <select> must be an array if ' + '`multiple` is true.%s', propName, getDeclarationErrorAddendum(owner)) : void 0;
	    } else if (!props.multiple && isArray) {
	       false ? warning(false, 'The `%s` prop supplied to <select> must be a scalar ' + 'value if `multiple` is false.%s', propName, getDeclarationErrorAddendum(owner)) : void 0;
	    }
	  }
	}

	/**
	 * @param {ReactDOMComponent} inst
	 * @param {boolean} multiple
	 * @param {*} propValue A stringable (with `multiple`, a list of stringables).
	 * @private
	 */
	function updateOptions(inst, multiple, propValue) {
	  var selectedValue, i;
	  var options = ReactDOMComponentTree.getNodeFromInstance(inst).options;

	  if (multiple) {
	    selectedValue = {};
	    for (i = 0; i < propValue.length; i++) {
	      selectedValue['' + propValue[i]] = true;
	    }
	    for (i = 0; i < options.length; i++) {
	      var selected = selectedValue.hasOwnProperty(options[i].value);
	      if (options[i].selected !== selected) {
	        options[i].selected = selected;
	      }
	    }
	  } else {
	    // Do not set `select.value` as exact behavior isn't consistent across all
	    // browsers for all cases.
	    selectedValue = '' + propValue;
	    for (i = 0; i < options.length; i++) {
	      if (options[i].value === selectedValue) {
	        options[i].selected = true;
	        return;
	      }
	    }
	    if (options.length) {
	      options[0].selected = true;
	    }
	  }
	}

	/**
	 * Implements a <select> host component that allows optionally setting the
	 * props `value` and `defaultValue`. If `multiple` is false, the prop must be a
	 * stringable. If `multiple` is true, the prop must be an array of stringables.
	 *
	 * If `value` is not supplied (or null/undefined), user actions that change the
	 * selected option will trigger updates to the rendered options.
	 *
	 * If it is supplied (and not null/undefined), the rendered options will not
	 * update in response to user actions. Instead, the `value` prop must change in
	 * order for the rendered options to update.
	 *
	 * If `defaultValue` is provided, any options with the supplied values will be
	 * selected.
	 */
	var ReactDOMSelect = {
	  getHostProps: function (inst, props) {
	    return _assign({}, props, {
	      onChange: inst._wrapperState.onChange,
	      value: undefined
	    });
	  },

	  mountWrapper: function (inst, props) {
	    if (false) {
	      checkSelectPropTypes(inst, props);
	    }

	    var value = LinkedValueUtils.getValue(props);
	    inst._wrapperState = {
	      pendingUpdate: false,
	      initialValue: value != null ? value : props.defaultValue,
	      listeners: null,
	      onChange: _handleChange.bind(inst),
	      wasMultiple: Boolean(props.multiple)
	    };

	    if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue) {
	       false ? warning(false, 'Select elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled select ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components') : void 0;
	      didWarnValueDefaultValue = true;
	    }
	  },

	  getSelectValueContext: function (inst) {
	    // ReactDOMOption looks at this initial value so the initial generated
	    // markup has correct `selected` attributes
	    return inst._wrapperState.initialValue;
	  },

	  postUpdateWrapper: function (inst) {
	    var props = inst._currentElement.props;

	    // After the initial mount, we control selected-ness manually so don't pass
	    // this value down
	    inst._wrapperState.initialValue = undefined;

	    var wasMultiple = inst._wrapperState.wasMultiple;
	    inst._wrapperState.wasMultiple = Boolean(props.multiple);

	    var value = LinkedValueUtils.getValue(props);
	    if (value != null) {
	      inst._wrapperState.pendingUpdate = false;
	      updateOptions(inst, Boolean(props.multiple), value);
	    } else if (wasMultiple !== Boolean(props.multiple)) {
	      // For simplicity, reapply `defaultValue` if `multiple` is toggled.
	      if (props.defaultValue != null) {
	        updateOptions(inst, Boolean(props.multiple), props.defaultValue);
	      } else {
	        // Revert the select back to its default unselected state.
	        updateOptions(inst, Boolean(props.multiple), props.multiple ? [] : '');
	      }
	    }
	  }
	};

	function _handleChange(event) {
	  var props = this._currentElement.props;
	  var returnValue = LinkedValueUtils.executeOnChange(props, event);

	  if (this._rootNodeID) {
	    this._wrapperState.pendingUpdate = true;
	  }
	  ReactUpdates.asap(updateOptionsIfPendingUpdateAndMounted, this);
	  return returnValue;
	}

	module.exports = ReactDOMSelect;

/***/ },
/* 167 */
/***/ function(module, exports) {

	/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var emptyComponentFactory;

	var ReactEmptyComponentInjection = {
	  injectEmptyComponentFactory: function (factory) {
	    emptyComponentFactory = factory;
	  }
	};

	var ReactEmptyComponent = {
	  create: function (instantiate) {
	    return emptyComponentFactory(instantiate);
	  }
	};

	ReactEmptyComponent.injection = ReactEmptyComponentInjection;

	module.exports = ReactEmptyComponent;

/***/ },
/* 168 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var ReactFeatureFlags = {
	  // When true, call console.time() before and .timeEnd() after each top-level
	  // render (both initial renders and updates). Useful when looking at prod-mode
	  // timeline profiles in Chrome, for example.
	  logTopLevelRenders: false
	};

	module.exports = ReactFeatureFlags;

/***/ },
/* 169 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(5);

	var invariant = __webpack_require__(3);

	var genericComponentClass = null;
	var textComponentClass = null;

	var ReactHostComponentInjection = {
	  // This accepts a class that receives the tag string. This is a catch all
	  // that can render any kind of tag.
	  injectGenericComponentClass: function (componentClass) {
	    genericComponentClass = componentClass;
	  },
	  // This accepts a text component class that takes the text string to be
	  // rendered as props.
	  injectTextComponentClass: function (componentClass) {
	    textComponentClass = componentClass;
	  }
	};

	/**
	 * Get a host internal component class for a specific tag.
	 *
	 * @param {ReactElement} element The element to create.
	 * @return {function} The internal class constructor function.
	 */
	function createInternalComponent(element) {
	  !genericComponentClass ?  false ? invariant(false, 'There is no registered component for the tag %s', element.type) : _prodInvariant('111', element.type) : void 0;
	  return new genericComponentClass(element);
	}

	/**
	 * @param {ReactText} text
	 * @return {ReactComponent}
	 */
	function createInstanceForText(text) {
	  return new textComponentClass(text);
	}

	/**
	 * @param {ReactComponent} component
	 * @return {boolean}
	 */
	function isTextComponent(component) {
	  return component instanceof textComponentClass;
	}

	var ReactHostComponent = {
	  createInternalComponent: createInternalComponent,
	  createInstanceForText: createInstanceForText,
	  isTextComponent: isTextComponent,
	  injection: ReactHostComponentInjection
	};

	module.exports = ReactHostComponent;

/***/ },
/* 170 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var ReactDOMSelection = __webpack_require__(372);

	var containsNode = __webpack_require__(294);
	var focusNode = __webpack_require__(147);
	var getActiveElement = __webpack_require__(148);

	function isInDocument(node) {
	  return containsNode(document.documentElement, node);
	}

	/**
	 * @ReactInputSelection: React input selection module. Based on Selection.js,
	 * but modified to be suitable for react and has a couple of bug fixes (doesn't
	 * assume buttons have range selections allowed).
	 * Input selection module for React.
	 */
	var ReactInputSelection = {

	  hasSelectionCapabilities: function (elem) {
	    var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
	    return nodeName && (nodeName === 'input' && elem.type === 'text' || nodeName === 'textarea' || elem.contentEditable === 'true');
	  },

	  getSelectionInformation: function () {
	    var focusedElem = getActiveElement();
	    return {
	      focusedElem: focusedElem,
	      selectionRange: ReactInputSelection.hasSelectionCapabilities(focusedElem) ? ReactInputSelection.getSelection(focusedElem) : null
	    };
	  },

	  /**
	   * @restoreSelection: If any selection information was potentially lost,
	   * restore it. This is useful when performing operations that could remove dom
	   * nodes and place them back in, resulting in focus being lost.
	   */
	  restoreSelection: function (priorSelectionInformation) {
	    var curFocusedElem = getActiveElement();
	    var priorFocusedElem = priorSelectionInformation.focusedElem;
	    var priorSelectionRange = priorSelectionInformation.selectionRange;
	    if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
	      if (ReactInputSelection.hasSelectionCapabilities(priorFocusedElem)) {
	        ReactInputSelection.setSelection(priorFocusedElem, priorSelectionRange);
	      }
	      focusNode(priorFocusedElem);
	    }
	  },

	  /**
	   * @getSelection: Gets the selection bounds of a focused textarea, input or
	   * contentEditable node.
	   * -@input: Look up selection bounds of this input
	   * -@return {start: selectionStart, end: selectionEnd}
	   */
	  getSelection: function (input) {
	    var selection;

	    if ('selectionStart' in input) {
	      // Modern browser with input or textarea.
	      selection = {
	        start: input.selectionStart,
	        end: input.selectionEnd
	      };
	    } else if (document.selection && input.nodeName && input.nodeName.toLowerCase() === 'input') {
	      // IE8 input.
	      var range = document.selection.createRange();
	      // There can only be one selection per document in IE, so it must
	      // be in our element.
	      if (range.parentElement() === input) {
	        selection = {
	          start: -range.moveStart('character', -input.value.length),
	          end: -range.moveEnd('character', -input.value.length)
	        };
	      }
	    } else {
	      // Content editable or old IE textarea.
	      selection = ReactDOMSelection.getOffsets(input);
	    }

	    return selection || { start: 0, end: 0 };
	  },

	  /**
	   * @setSelection: Sets the selection bounds of a textarea or input and focuses
	   * the input.
	   * -@input     Set selection bounds of this input or textarea
	   * -@offsets   Object of same form that is returned from get*
	   */
	  setSelection: function (input, offsets) {
	    var start = offsets.start;
	    var end = offsets.end;
	    if (end === undefined) {
	      end = start;
	    }

	    if ('selectionStart' in input) {
	      input.selectionStart = start;
	      input.selectionEnd = Math.min(end, input.value.length);
	    } else if (document.selection && input.nodeName && input.nodeName.toLowerCase() === 'input') {
	      var range = input.createTextRange();
	      range.collapse(true);
	      range.moveStart('character', start);
	      range.moveEnd('character', end - start);
	      range.select();
	    } else {
	      ReactDOMSelection.setOffsets(input, offsets);
	    }
	  }
	};

	module.exports = ReactInputSelection;

/***/ },
/* 171 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(5);

	var DOMLazyTree = __webpack_require__(36);
	var DOMProperty = __webpack_require__(37);
	var React = __webpack_require__(39);
	var ReactBrowserEventEmitter = __webpack_require__(66);
	var ReactCurrentOwner = __webpack_require__(27);
	var ReactDOMComponentTree = __webpack_require__(11);
	var ReactDOMContainerInfo = __webpack_require__(366);
	var ReactDOMFeatureFlags = __webpack_require__(368);
	var ReactFeatureFlags = __webpack_require__(168);
	var ReactInstanceMap = __webpack_require__(51);
	var ReactInstrumentation = __webpack_require__(20);
	var ReactMarkupChecksum = __webpack_require__(382);
	var ReactReconciler = __webpack_require__(38);
	var ReactUpdateQueue = __webpack_require__(100);
	var ReactUpdates = __webpack_require__(22);

	var emptyObject = __webpack_require__(46);
	var instantiateReactComponent = __webpack_require__(178);
	var invariant = __webpack_require__(3);
	var setInnerHTML = __webpack_require__(70);
	var shouldUpdateReactComponent = __webpack_require__(106);
	var warning = __webpack_require__(4);

	var ATTR_NAME = DOMProperty.ID_ATTRIBUTE_NAME;
	var ROOT_ATTR_NAME = DOMProperty.ROOT_ATTRIBUTE_NAME;

	var ELEMENT_NODE_TYPE = 1;
	var DOC_NODE_TYPE = 9;
	var DOCUMENT_FRAGMENT_NODE_TYPE = 11;

	var instancesByReactRootID = {};

	/**
	 * Finds the index of the first character
	 * that's not common between the two given strings.
	 *
	 * @return {number} the index of the character where the strings diverge
	 */
	function firstDifferenceIndex(string1, string2) {
	  var minLen = Math.min(string1.length, string2.length);
	  for (var i = 0; i < minLen; i++) {
	    if (string1.charAt(i) !== string2.charAt(i)) {
	      return i;
	    }
	  }
	  return string1.length === string2.length ? -1 : minLen;
	}

	/**
	 * @param {DOMElement|DOMDocument} container DOM element that may contain
	 * a React component
	 * @return {?*} DOM element that may have the reactRoot ID, or null.
	 */
	function getReactRootElementInContainer(container) {
	  if (!container) {
	    return null;
	  }

	  if (container.nodeType === DOC_NODE_TYPE) {
	    return container.documentElement;
	  } else {
	    return container.firstChild;
	  }
	}

	function internalGetID(node) {
	  // If node is something like a window, document, or text node, none of
	  // which support attributes or a .getAttribute method, gracefully return
	  // the empty string, as if the attribute were missing.
	  return node.getAttribute && node.getAttribute(ATTR_NAME) || '';
	}

	/**
	 * Mounts this component and inserts it into the DOM.
	 *
	 * @param {ReactComponent} componentInstance The instance to mount.
	 * @param {DOMElement} container DOM element to mount into.
	 * @param {ReactReconcileTransaction} transaction
	 * @param {boolean} shouldReuseMarkup If true, do not insert markup
	 */
	function mountComponentIntoNode(wrapperInstance, container, transaction, shouldReuseMarkup, context) {
	  var markerName;
	  if (ReactFeatureFlags.logTopLevelRenders) {
	    var wrappedElement = wrapperInstance._currentElement.props.child;
	    var type = wrappedElement.type;
	    markerName = 'React mount: ' + (typeof type === 'string' ? type : type.displayName || type.name);
	    console.time(markerName);
	  }

	  var markup = ReactReconciler.mountComponent(wrapperInstance, transaction, null, ReactDOMContainerInfo(wrapperInstance, container), context, 0 /* parentDebugID */
	  );

	  if (markerName) {
	    console.timeEnd(markerName);
	  }

	  wrapperInstance._renderedComponent._topLevelWrapper = wrapperInstance;
	  ReactMount._mountImageIntoNode(markup, container, wrapperInstance, shouldReuseMarkup, transaction);
	}

	/**
	 * Batched mount.
	 *
	 * @param {ReactComponent} componentInstance The instance to mount.
	 * @param {DOMElement} container DOM element to mount into.
	 * @param {boolean} shouldReuseMarkup If true, do not insert markup
	 */
	function batchedMountComponentIntoNode(componentInstance, container, shouldReuseMarkup, context) {
	  var transaction = ReactUpdates.ReactReconcileTransaction.getPooled(
	  /* useCreateElement */
	  !shouldReuseMarkup && ReactDOMFeatureFlags.useCreateElement);
	  transaction.perform(mountComponentIntoNode, null, componentInstance, container, transaction, shouldReuseMarkup, context);
	  ReactUpdates.ReactReconcileTransaction.release(transaction);
	}

	/**
	 * Unmounts a component and removes it from the DOM.
	 *
	 * @param {ReactComponent} instance React component instance.
	 * @param {DOMElement} container DOM element to unmount from.
	 * @final
	 * @internal
	 * @see {ReactMount.unmountComponentAtNode}
	 */
	function unmountComponentFromNode(instance, container, safely) {
	  if (false) {
	    ReactInstrumentation.debugTool.onBeginFlush();
	  }
	  ReactReconciler.unmountComponent(instance, safely);
	  if (false) {
	    ReactInstrumentation.debugTool.onEndFlush();
	  }

	  if (container.nodeType === DOC_NODE_TYPE) {
	    container = container.documentElement;
	  }

	  // http://jsperf.com/emptying-a-node
	  while (container.lastChild) {
	    container.removeChild(container.lastChild);
	  }
	}

	/**
	 * True if the supplied DOM node has a direct React-rendered child that is
	 * not a React root element. Useful for warning in `render`,
	 * `unmountComponentAtNode`, etc.
	 *
	 * @param {?DOMElement} node The candidate DOM node.
	 * @return {boolean} True if the DOM element contains a direct child that was
	 * rendered by React but is not a root element.
	 * @internal
	 */
	function hasNonRootReactChild(container) {
	  var rootEl = getReactRootElementInContainer(container);
	  if (rootEl) {
	    var inst = ReactDOMComponentTree.getInstanceFromNode(rootEl);
	    return !!(inst && inst._hostParent);
	  }
	}

	/**
	 * True if the supplied DOM node is a React DOM element and
	 * it has been rendered by another copy of React.
	 *
	 * @param {?DOMElement} node The candidate DOM node.
	 * @return {boolean} True if the DOM has been rendered by another copy of React
	 * @internal
	 */
	function nodeIsRenderedByOtherInstance(container) {
	  var rootEl = getReactRootElementInContainer(container);
	  return !!(rootEl && isReactNode(rootEl) && !ReactDOMComponentTree.getInstanceFromNode(rootEl));
	}

	/**
	 * True if the supplied DOM node is a valid node element.
	 *
	 * @param {?DOMElement} node The candidate DOM node.
	 * @return {boolean} True if the DOM is a valid DOM node.
	 * @internal
	 */
	function isValidContainer(node) {
	  return !!(node && (node.nodeType === ELEMENT_NODE_TYPE || node.nodeType === DOC_NODE_TYPE || node.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE));
	}

	/**
	 * True if the supplied DOM node is a valid React node element.
	 *
	 * @param {?DOMElement} node The candidate DOM node.
	 * @return {boolean} True if the DOM is a valid React DOM node.
	 * @internal
	 */
	function isReactNode(node) {
	  return isValidContainer(node) && (node.hasAttribute(ROOT_ATTR_NAME) || node.hasAttribute(ATTR_NAME));
	}

	function getHostRootInstanceInContainer(container) {
	  var rootEl = getReactRootElementInContainer(container);
	  var prevHostInstance = rootEl && ReactDOMComponentTree.getInstanceFromNode(rootEl);
	  return prevHostInstance && !prevHostInstance._hostParent ? prevHostInstance : null;
	}

	function getTopLevelWrapperInContainer(container) {
	  var root = getHostRootInstanceInContainer(container);
	  return root ? root._hostContainerInfo._topLevelWrapper : null;
	}

	/**
	 * Temporary (?) hack so that we can store all top-level pending updates on
	 * composites instead of having to worry about different types of components
	 * here.
	 */
	var topLevelRootCounter = 1;
	var TopLevelWrapper = function () {
	  this.rootID = topLevelRootCounter++;
	};
	TopLevelWrapper.prototype.isReactComponent = {};
	if (false) {
	  TopLevelWrapper.displayName = 'TopLevelWrapper';
	}
	TopLevelWrapper.prototype.render = function () {
	  return this.props.child;
	};
	TopLevelWrapper.isReactTopLevelWrapper = true;

	/**
	 * Mounting is the process of initializing a React component by creating its
	 * representative DOM elements and inserting them into a supplied `container`.
	 * Any prior content inside `container` is destroyed in the process.
	 *
	 *   ReactMount.render(
	 *     component,
	 *     document.getElementById('container')
	 *   );
	 *
	 *   <div id="container">                   <-- Supplied `container`.
	 *     <div data-reactid=".3">              <-- Rendered reactRoot of React
	 *       // ...                                 component.
	 *     </div>
	 *   </div>
	 *
	 * Inside of `container`, the first element rendered is the "reactRoot".
	 */
	var ReactMount = {

	  TopLevelWrapper: TopLevelWrapper,

	  /**
	   * Used by devtools. The keys are not important.
	   */
	  _instancesByReactRootID: instancesByReactRootID,

	  /**
	   * This is a hook provided to support rendering React components while
	   * ensuring that the apparent scroll position of its `container` does not
	   * change.
	   *
	   * @param {DOMElement} container The `container` being rendered into.
	   * @param {function} renderCallback This must be called once to do the render.
	   */
	  scrollMonitor: function (container, renderCallback) {
	    renderCallback();
	  },

	  /**
	   * Take a component that's already mounted into the DOM and replace its props
	   * @param {ReactComponent} prevComponent component instance already in the DOM
	   * @param {ReactElement} nextElement component instance to render
	   * @param {DOMElement} container container to render into
	   * @param {?function} callback function triggered on completion
	   */
	  _updateRootComponent: function (prevComponent, nextElement, nextContext, container, callback) {
	    ReactMount.scrollMonitor(container, function () {
	      ReactUpdateQueue.enqueueElementInternal(prevComponent, nextElement, nextContext);
	      if (callback) {
	        ReactUpdateQueue.enqueueCallbackInternal(prevComponent, callback);
	      }
	    });

	    return prevComponent;
	  },

	  /**
	   * Render a new component into the DOM. Hooked by hooks!
	   *
	   * @param {ReactElement} nextElement element to render
	   * @param {DOMElement} container container to render into
	   * @param {boolean} shouldReuseMarkup if we should skip the markup insertion
	   * @return {ReactComponent} nextComponent
	   */
	  _renderNewRootComponent: function (nextElement, container, shouldReuseMarkup, context) {
	    // Various parts of our code (such as ReactCompositeComponent's
	    // _renderValidatedComponent) assume that calls to render aren't nested;
	    // verify that that's the case.
	     false ? warning(ReactCurrentOwner.current == null, '_renderNewRootComponent(): Render methods should be a pure function ' + 'of props and state; triggering nested component updates from ' + 'render is not allowed. If necessary, trigger nested updates in ' + 'componentDidUpdate. Check the render method of %s.', ReactCurrentOwner.current && ReactCurrentOwner.current.getName() || 'ReactCompositeComponent') : void 0;

	    !isValidContainer(container) ?  false ? invariant(false, '_registerComponent(...): Target container is not a DOM element.') : _prodInvariant('37') : void 0;

	    ReactBrowserEventEmitter.ensureScrollValueMonitoring();
	    var componentInstance = instantiateReactComponent(nextElement, false);

	    // The initial render is synchronous but any updates that happen during
	    // rendering, in componentWillMount or componentDidMount, will be batched
	    // according to the current batching strategy.

	    ReactUpdates.batchedUpdates(batchedMountComponentIntoNode, componentInstance, container, shouldReuseMarkup, context);

	    var wrapperID = componentInstance._instance.rootID;
	    instancesByReactRootID[wrapperID] = componentInstance;

	    return componentInstance;
	  },

	  /**
	   * Renders a React component into the DOM in the supplied `container`.
	   *
	   * If the React component was previously rendered into `container`, this will
	   * perform an update on it and only mutate the DOM as necessary to reflect the
	   * latest React component.
	   *
	   * @param {ReactComponent} parentComponent The conceptual parent of this render tree.
	   * @param {ReactElement} nextElement Component element to render.
	   * @param {DOMElement} container DOM element to render into.
	   * @param {?function} callback function triggered on completion
	   * @return {ReactComponent} Component instance rendered in `container`.
	   */
	  renderSubtreeIntoContainer: function (parentComponent, nextElement, container, callback) {
	    !(parentComponent != null && ReactInstanceMap.has(parentComponent)) ?  false ? invariant(false, 'parentComponent must be a valid React Component') : _prodInvariant('38') : void 0;
	    return ReactMount._renderSubtreeIntoContainer(parentComponent, nextElement, container, callback);
	  },

	  _renderSubtreeIntoContainer: function (parentComponent, nextElement, container, callback) {
	    ReactUpdateQueue.validateCallback(callback, 'ReactDOM.render');
	    !React.isValidElement(nextElement) ?  false ? invariant(false, 'ReactDOM.render(): Invalid component element.%s', typeof nextElement === 'string' ? ' Instead of passing a string like \'div\', pass ' + 'React.createElement(\'div\') or <div />.' : typeof nextElement === 'function' ? ' Instead of passing a class like Foo, pass ' + 'React.createElement(Foo) or <Foo />.' :
	    // Check if it quacks like an element
	    nextElement != null && nextElement.props !== undefined ? ' This may be caused by unintentionally loading two independent ' + 'copies of React.' : '') : _prodInvariant('39', typeof nextElement === 'string' ? ' Instead of passing a string like \'div\', pass ' + 'React.createElement(\'div\') or <div />.' : typeof nextElement === 'function' ? ' Instead of passing a class like Foo, pass ' + 'React.createElement(Foo) or <Foo />.' : nextElement != null && nextElement.props !== undefined ? ' This may be caused by unintentionally loading two independent ' + 'copies of React.' : '') : void 0;

	     false ? warning(!container || !container.tagName || container.tagName.toUpperCase() !== 'BODY', 'render(): Rendering components directly into document.body is ' + 'discouraged, since its children are often manipulated by third-party ' + 'scripts and browser extensions. This may lead to subtle ' + 'reconciliation issues. Try rendering into a container element created ' + 'for your app.') : void 0;

	    var nextWrappedElement = React.createElement(TopLevelWrapper, { child: nextElement });

	    var nextContext;
	    if (parentComponent) {
	      var parentInst = ReactInstanceMap.get(parentComponent);
	      nextContext = parentInst._processChildContext(parentInst._context);
	    } else {
	      nextContext = emptyObject;
	    }

	    var prevComponent = getTopLevelWrapperInContainer(container);

	    if (prevComponent) {
	      var prevWrappedElement = prevComponent._currentElement;
	      var prevElement = prevWrappedElement.props.child;
	      if (shouldUpdateReactComponent(prevElement, nextElement)) {
	        var publicInst = prevComponent._renderedComponent.getPublicInstance();
	        var updatedCallback = callback && function () {
	          callback.call(publicInst);
	        };
	        ReactMount._updateRootComponent(prevComponent, nextWrappedElement, nextContext, container, updatedCallback);
	        return publicInst;
	      } else {
	        ReactMount.unmountComponentAtNode(container);
	      }
	    }

	    var reactRootElement = getReactRootElementInContainer(container);
	    var containerHasReactMarkup = reactRootElement && !!internalGetID(reactRootElement);
	    var containerHasNonRootReactChild = hasNonRootReactChild(container);

	    if (false) {
	      process.env.NODE_ENV !== 'production' ? warning(!containerHasNonRootReactChild, 'render(...): Replacing React-rendered children with a new root ' + 'component. If you intended to update the children of this node, ' + 'you should instead have the existing children update their state ' + 'and render the new components instead of calling ReactDOM.render.') : void 0;

	      if (!containerHasReactMarkup || reactRootElement.nextSibling) {
	        var rootElementSibling = reactRootElement;
	        while (rootElementSibling) {
	          if (internalGetID(rootElementSibling)) {
	            process.env.NODE_ENV !== 'production' ? warning(false, 'render(): Target node has markup rendered by React, but there ' + 'are unrelated nodes as well. This is most commonly caused by ' + 'white-space inserted around server-rendered markup.') : void 0;
	            break;
	          }
	          rootElementSibling = rootElementSibling.nextSibling;
	        }
	      }
	    }

	    var shouldReuseMarkup = containerHasReactMarkup && !prevComponent && !containerHasNonRootReactChild;
	    var component = ReactMount._renderNewRootComponent(nextWrappedElement, container, shouldReuseMarkup, nextContext)._renderedComponent.getPublicInstance();
	    if (callback) {
	      callback.call(component);
	    }
	    return component;
	  },

	  /**
	   * Renders a React component into the DOM in the supplied `container`.
	   * See https://facebook.github.io/react/docs/top-level-api.html#reactdom.render
	   *
	   * If the React component was previously rendered into `container`, this will
	   * perform an update on it and only mutate the DOM as necessary to reflect the
	   * latest React component.
	   *
	   * @param {ReactElement} nextElement Component element to render.
	   * @param {DOMElement} container DOM element to render into.
	   * @param {?function} callback function triggered on completion
	   * @return {ReactComponent} Component instance rendered in `container`.
	   */
	  render: function (nextElement, container, callback) {
	    return ReactMount._renderSubtreeIntoContainer(null, nextElement, container, callback);
	  },

	  /**
	   * Unmounts and destroys the React component rendered in the `container`.
	   * See https://facebook.github.io/react/docs/top-level-api.html#reactdom.unmountcomponentatnode
	   *
	   * @param {DOMElement} container DOM element containing a React component.
	   * @return {boolean} True if a component was found in and unmounted from
	   *                   `container`
	   */
	  unmountComponentAtNode: function (container) {
	    // Various parts of our code (such as ReactCompositeComponent's
	    // _renderValidatedComponent) assume that calls to render aren't nested;
	    // verify that that's the case. (Strictly speaking, unmounting won't cause a
	    // render but we still don't expect to be in a render call here.)
	     false ? warning(ReactCurrentOwner.current == null, 'unmountComponentAtNode(): Render methods should be a pure function ' + 'of props and state; triggering nested component updates from render ' + 'is not allowed. If necessary, trigger nested updates in ' + 'componentDidUpdate. Check the render method of %s.', ReactCurrentOwner.current && ReactCurrentOwner.current.getName() || 'ReactCompositeComponent') : void 0;

	    !isValidContainer(container) ?  false ? invariant(false, 'unmountComponentAtNode(...): Target container is not a DOM element.') : _prodInvariant('40') : void 0;

	    if (false) {
	      process.env.NODE_ENV !== 'production' ? warning(!nodeIsRenderedByOtherInstance(container), 'unmountComponentAtNode(): The node you\'re attempting to unmount ' + 'was rendered by another copy of React.') : void 0;
	    }

	    var prevComponent = getTopLevelWrapperInContainer(container);
	    if (!prevComponent) {
	      // Check if the node being unmounted was rendered by React, but isn't a
	      // root node.
	      var containerHasNonRootReactChild = hasNonRootReactChild(container);

	      // Check if the container itself is a React root node.
	      var isContainerReactRoot = container.nodeType === 1 && container.hasAttribute(ROOT_ATTR_NAME);

	      if (false) {
	        process.env.NODE_ENV !== 'production' ? warning(!containerHasNonRootReactChild, 'unmountComponentAtNode(): The node you\'re attempting to unmount ' + 'was rendered by React and is not a top-level container. %s', isContainerReactRoot ? 'You may have accidentally passed in a React root node instead ' + 'of its container.' : 'Instead, have the parent component update its state and ' + 'rerender in order to remove this component.') : void 0;
	      }

	      return false;
	    }
	    delete instancesByReactRootID[prevComponent._instance.rootID];
	    ReactUpdates.batchedUpdates(unmountComponentFromNode, prevComponent, container, false);
	    return true;
	  },

	  _mountImageIntoNode: function (markup, container, instance, shouldReuseMarkup, transaction) {
	    !isValidContainer(container) ?  false ? invariant(false, 'mountComponentIntoNode(...): Target container is not valid.') : _prodInvariant('41') : void 0;

	    if (shouldReuseMarkup) {
	      var rootElement = getReactRootElementInContainer(container);
	      if (ReactMarkupChecksum.canReuseMarkup(markup, rootElement)) {
	        ReactDOMComponentTree.precacheNode(instance, rootElement);
	        return;
	      } else {
	        var checksum = rootElement.getAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);
	        rootElement.removeAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);

	        var rootMarkup = rootElement.outerHTML;
	        rootElement.setAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME, checksum);

	        var normalizedMarkup = markup;
	        if (false) {
	          // because rootMarkup is retrieved from the DOM, various normalizations
	          // will have occurred which will not be present in `markup`. Here,
	          // insert markup into a <div> or <iframe> depending on the container
	          // type to perform the same normalizations before comparing.
	          var normalizer;
	          if (container.nodeType === ELEMENT_NODE_TYPE) {
	            normalizer = document.createElement('div');
	            normalizer.innerHTML = markup;
	            normalizedMarkup = normalizer.innerHTML;
	          } else {
	            normalizer = document.createElement('iframe');
	            document.body.appendChild(normalizer);
	            normalizer.contentDocument.write(markup);
	            normalizedMarkup = normalizer.contentDocument.documentElement.outerHTML;
	            document.body.removeChild(normalizer);
	          }
	        }

	        var diffIndex = firstDifferenceIndex(normalizedMarkup, rootMarkup);
	        var difference = ' (client) ' + normalizedMarkup.substring(diffIndex - 20, diffIndex + 20) + '\n (server) ' + rootMarkup.substring(diffIndex - 20, diffIndex + 20);

	        !(container.nodeType !== DOC_NODE_TYPE) ?  false ? invariant(false, 'You\'re trying to render a component to the document using server rendering but the checksum was invalid. This usually means you rendered a different component type or props on the client from the one on the server, or your render() methods are impure. React cannot handle this case due to cross-browser quirks by rendering at the document root. You should look for environment dependent code in your components and ensure the props are the same client and server side:\n%s', difference) : _prodInvariant('42', difference) : void 0;

	        if (false) {
	          process.env.NODE_ENV !== 'production' ? warning(false, 'React attempted to reuse markup in a container but the ' + 'checksum was invalid. This generally means that you are ' + 'using server rendering and the markup generated on the ' + 'server was not what the client was expecting. React injected ' + 'new markup to compensate which works but you have lost many ' + 'of the benefits of server rendering. Instead, figure out ' + 'why the markup being generated is different on the client ' + 'or server:\n%s', difference) : void 0;
	        }
	      }
	    }

	    !(container.nodeType !== DOC_NODE_TYPE) ?  false ? invariant(false, 'You\'re trying to render a component to the document but you didn\'t use server rendering. We can\'t do this without using server rendering due to cross-browser quirks. See ReactDOMServer.renderToString() for server rendering.') : _prodInvariant('43') : void 0;

	    if (transaction.useCreateElement) {
	      while (container.lastChild) {
	        container.removeChild(container.lastChild);
	      }
	      DOMLazyTree.insertTreeBefore(container, markup, null);
	    } else {
	      setInnerHTML(container, markup);
	      ReactDOMComponentTree.precacheNode(instance, container.firstChild);
	    }

	    if (false) {
	      var hostNode = ReactDOMComponentTree.getInstanceFromNode(container.firstChild);
	      if (hostNode._debugID !== 0) {
	        ReactInstrumentation.debugTool.onHostOperation({
	          instanceID: hostNode._debugID,
	          type: 'mount',
	          payload: markup.toString()
	        });
	      }
	    }
	  }
	};

	module.exports = ReactMount;

/***/ },
/* 172 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(5);

	var React = __webpack_require__(39);

	var invariant = __webpack_require__(3);

	var ReactNodeTypes = {
	  HOST: 0,
	  COMPOSITE: 1,
	  EMPTY: 2,

	  getType: function (node) {
	    if (node === null || node === false) {
	      return ReactNodeTypes.EMPTY;
	    } else if (React.isValidElement(node)) {
	      if (typeof node.type === 'function') {
	        return ReactNodeTypes.COMPOSITE;
	      } else {
	        return ReactNodeTypes.HOST;
	      }
	    }
	     true ?  false ? invariant(false, 'Unexpected node: %s', node) : _prodInvariant('26', node) : void 0;
	  }
	};

	module.exports = ReactNodeTypes;

/***/ },
/* 173 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var ViewportMetrics = {

	  currentScrollLeft: 0,

	  currentScrollTop: 0,

	  refreshScrollValues: function (scrollPosition) {
	    ViewportMetrics.currentScrollLeft = scrollPosition.x;
	    ViewportMetrics.currentScrollTop = scrollPosition.y;
	  }

	};

	module.exports = ViewportMetrics;

/***/ },
/* 174 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(5);

	var invariant = __webpack_require__(3);

	/**
	 * Accumulates items that must not be null or undefined into the first one. This
	 * is used to conserve memory by avoiding array allocations, and thus sacrifices
	 * API cleanness. Since `current` can be null before being passed in and not
	 * null after this function, make sure to assign it back to `current`:
	 *
	 * `a = accumulateInto(a, b);`
	 *
	 * This API should be sparingly used. Try `accumulate` for something cleaner.
	 *
	 * @return {*|array<*>} An accumulation of items.
	 */

	function accumulateInto(current, next) {
	  !(next != null) ?  false ? invariant(false, 'accumulateInto(...): Accumulated items must not be null or undefined.') : _prodInvariant('30') : void 0;

	  if (current == null) {
	    return next;
	  }

	  // Both are not empty. Warning: Never call x.concat(y) when you are not
	  // certain that x is an Array (x could be a string with concat method).
	  if (Array.isArray(current)) {
	    if (Array.isArray(next)) {
	      current.push.apply(current, next);
	      return current;
	    }
	    current.push(next);
	    return current;
	  }

	  if (Array.isArray(next)) {
	    // A bit too dangerous to mutate `next`.
	    return [current].concat(next);
	  }

	  return [current, next];
	}

	module.exports = accumulateInto;

/***/ },
/* 175 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	/**
	 * @param {array} arr an "accumulation" of items which is either an Array or
	 * a single item. Useful when paired with the `accumulate` module. This is a
	 * simple utility that allows us to reason about a collection of items, but
	 * handling the case when there is exactly one item (and we do not need to
	 * allocate an array).
	 */

	function forEachAccumulated(arr, cb, scope) {
	  if (Array.isArray(arr)) {
	    arr.forEach(cb, scope);
	  } else if (arr) {
	    cb.call(scope, arr);
	  }
	}

	module.exports = forEachAccumulated;

/***/ },
/* 176 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var ReactNodeTypes = __webpack_require__(172);

	function getHostComponentFromComposite(inst) {
	  var type;

	  while ((type = inst._renderedNodeType) === ReactNodeTypes.COMPOSITE) {
	    inst = inst._renderedComponent;
	  }

	  if (type === ReactNodeTypes.HOST) {
	    return inst._renderedComponent;
	  } else if (type === ReactNodeTypes.EMPTY) {
	    return null;
	  }
	}

	module.exports = getHostComponentFromComposite;

/***/ },
/* 177 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(15);

	var contentKey = null;

	/**
	 * Gets the key used to access text content on a DOM node.
	 *
	 * @return {?string} Key used to access text content.
	 * @internal
	 */
	function getTextContentAccessor() {
	  if (!contentKey && ExecutionEnvironment.canUseDOM) {
	    // Prefer textContent to innerText because many browsers support both but
	    // SVG <text> elements don't support innerText even when <div> does.
	    contentKey = 'textContent' in document.documentElement ? 'textContent' : 'innerText';
	  }
	  return contentKey;
	}

	module.exports = getTextContentAccessor;

/***/ },
/* 178 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(5),
	    _assign = __webpack_require__(7);

	var ReactCompositeComponent = __webpack_require__(363);
	var ReactEmptyComponent = __webpack_require__(167);
	var ReactHostComponent = __webpack_require__(169);

	var getNextDebugID = __webpack_require__(424);
	var invariant = __webpack_require__(3);
	var warning = __webpack_require__(4);

	// To avoid a cyclic dependency, we create the final class in this module
	var ReactCompositeComponentWrapper = function (element) {
	  this.construct(element);
	};

	function getDeclarationErrorAddendum(owner) {
	  if (owner) {
	    var name = owner.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}

	/**
	 * Check if the type reference is a known internal type. I.e. not a user
	 * provided composite type.
	 *
	 * @param {function} type
	 * @return {boolean} Returns true if this is a valid internal type.
	 */
	function isInternalComponentType(type) {
	  return typeof type === 'function' && typeof type.prototype !== 'undefined' && typeof type.prototype.mountComponent === 'function' && typeof type.prototype.receiveComponent === 'function';
	}

	/**
	 * Given a ReactNode, create an instance that will actually be mounted.
	 *
	 * @param {ReactNode} node
	 * @param {boolean} shouldHaveDebugID
	 * @return {object} A new instance of the element's constructor.
	 * @protected
	 */
	function instantiateReactComponent(node, shouldHaveDebugID) {
	  var instance;

	  if (node === null || node === false) {
	    instance = ReactEmptyComponent.create(instantiateReactComponent);
	  } else if (typeof node === 'object') {
	    var element = node;
	    var type = element.type;
	    if (typeof type !== 'function' && typeof type !== 'string') {
	      var info = '';
	      if (false) {
	        if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
	          info += ' You likely forgot to export your component from the file ' + 'it\'s defined in.';
	        }
	      }
	      info += getDeclarationErrorAddendum(element._owner);
	       true ?  false ? invariant(false, 'Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s', type == null ? type : typeof type, info) : _prodInvariant('130', type == null ? type : typeof type, info) : void 0;
	    }

	    // Special case string values
	    if (typeof element.type === 'string') {
	      instance = ReactHostComponent.createInternalComponent(element);
	    } else if (isInternalComponentType(element.type)) {
	      // This is temporarily available for custom components that are not string
	      // representations. I.e. ART. Once those are updated to use the string
	      // representation, we can drop this code path.
	      instance = new element.type(element);

	      // We renamed this. Allow the old name for compat. :(
	      if (!instance.getHostNode) {
	        instance.getHostNode = instance.getNativeNode;
	      }
	    } else {
	      instance = new ReactCompositeComponentWrapper(element);
	    }
	  } else if (typeof node === 'string' || typeof node === 'number') {
	    instance = ReactHostComponent.createInstanceForText(node);
	  } else {
	     true ?  false ? invariant(false, 'Encountered invalid React node of type %s', typeof node) : _prodInvariant('131', typeof node) : void 0;
	  }

	  if (false) {
	    process.env.NODE_ENV !== 'production' ? warning(typeof instance.mountComponent === 'function' && typeof instance.receiveComponent === 'function' && typeof instance.getHostNode === 'function' && typeof instance.unmountComponent === 'function', 'Only React Components can be mounted.') : void 0;
	  }

	  // These two fields are used by the DOM and ART diffing algorithms
	  // respectively. Instead of using expandos on components, we should be
	  // storing the state needed by the diffing algorithms elsewhere.
	  instance._mountIndex = 0;
	  instance._mountImage = null;

	  if (false) {
	    instance._debugID = shouldHaveDebugID ? getNextDebugID() : 0;
	  }

	  // Internal instances should fully constructed at this point, so they should
	  // not get any new fields added to them at this point.
	  if (false) {
	    if (Object.preventExtensions) {
	      Object.preventExtensions(instance);
	    }
	  }

	  return instance;
	}

	_assign(ReactCompositeComponentWrapper.prototype, ReactCompositeComponent, {
	  _instantiateReactComponent: instantiateReactComponent
	});

	module.exports = instantiateReactComponent;

/***/ },
/* 179 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	/**
	 * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary
	 */

	var supportedInputTypes = {
	  'color': true,
	  'date': true,
	  'datetime': true,
	  'datetime-local': true,
	  'email': true,
	  'month': true,
	  'number': true,
	  'password': true,
	  'range': true,
	  'search': true,
	  'tel': true,
	  'text': true,
	  'time': true,
	  'url': true,
	  'week': true
	};

	function isTextInputElement(elem) {
	  var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();

	  if (nodeName === 'input') {
	    return !!supportedInputTypes[elem.type];
	  }

	  if (nodeName === 'textarea') {
	    return true;
	  }

	  return false;
	}

	module.exports = isTextInputElement;

/***/ },
/* 180 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(15);
	var escapeTextContentForBrowser = __webpack_require__(69);
	var setInnerHTML = __webpack_require__(70);

	/**
	 * Set the textContent property of a node, ensuring that whitespace is preserved
	 * even in IE8. innerText is a poor substitute for textContent and, among many
	 * issues, inserts <br> instead of the literal newline chars. innerHTML behaves
	 * as it should.
	 *
	 * @param {DOMElement} node
	 * @param {string} text
	 * @internal
	 */
	var setTextContent = function (node, text) {
	  if (text) {
	    var firstChild = node.firstChild;

	    if (firstChild && firstChild === node.lastChild && firstChild.nodeType === 3) {
	      firstChild.nodeValue = text;
	      return;
	    }
	  }
	  node.textContent = text;
	};

	if (ExecutionEnvironment.canUseDOM) {
	  if (!('textContent' in document.documentElement)) {
	    setTextContent = function (node, text) {
	      if (node.nodeType === 3) {
	        node.nodeValue = text;
	        return;
	      }
	      setInnerHTML(node, escapeTextContentForBrowser(text));
	    };
	  }
	}

	module.exports = setTextContent;

/***/ },
/* 181 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(5);

	var ReactCurrentOwner = __webpack_require__(27);
	var REACT_ELEMENT_TYPE = __webpack_require__(378);

	var getIteratorFn = __webpack_require__(409);
	var invariant = __webpack_require__(3);
	var KeyEscapeUtils = __webpack_require__(96);
	var warning = __webpack_require__(4);

	var SEPARATOR = '.';
	var SUBSEPARATOR = ':';

	/**
	 * This is inlined from ReactElement since this file is shared between
	 * isomorphic and renderers. We could extract this to a
	 *
	 */

	/**
	 * TODO: Test that a single child and an array with one item have the same key
	 * pattern.
	 */

	var didWarnAboutMaps = false;

	/**
	 * Generate a key string that identifies a component within a set.
	 *
	 * @param {*} component A component that could contain a manual key.
	 * @param {number} index Index that is used if a manual key is not provided.
	 * @return {string}
	 */
	function getComponentKey(component, index) {
	  // Do some typechecking here since we call this blindly. We want to ensure
	  // that we don't block potential future ES APIs.
	  if (component && typeof component === 'object' && component.key != null) {
	    // Explicit key
	    return KeyEscapeUtils.escape(component.key);
	  }
	  // Implicit key determined by the index in the set
	  return index.toString(36);
	}

	/**
	 * @param {?*} children Children tree container.
	 * @param {!string} nameSoFar Name of the key path so far.
	 * @param {!function} callback Callback to invoke with each child found.
	 * @param {?*} traverseContext Used to pass information throughout the traversal
	 * process.
	 * @return {!number} The number of children in this subtree.
	 */
	function traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {
	  var type = typeof children;

	  if (type === 'undefined' || type === 'boolean') {
	    // All of the above are perceived as null.
	    children = null;
	  }

	  if (children === null || type === 'string' || type === 'number' ||
	  // The following is inlined from ReactElement. This means we can optimize
	  // some checks. React Fiber also inlines this logic for similar purposes.
	  type === 'object' && children.$$typeof === REACT_ELEMENT_TYPE) {
	    callback(traverseContext, children,
	    // If it's the only child, treat the name as if it was wrapped in an array
	    // so that it's consistent if the number of children grows.
	    nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);
	    return 1;
	  }

	  var child;
	  var nextName;
	  var subtreeCount = 0; // Count of children found in the current subtree.
	  var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;

	  if (Array.isArray(children)) {
	    for (var i = 0; i < children.length; i++) {
	      child = children[i];
	      nextName = nextNamePrefix + getComponentKey(child, i);
	      subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	    }
	  } else {
	    var iteratorFn = getIteratorFn(children);
	    if (iteratorFn) {
	      var iterator = iteratorFn.call(children);
	      var step;
	      if (iteratorFn !== children.entries) {
	        var ii = 0;
	        while (!(step = iterator.next()).done) {
	          child = step.value;
	          nextName = nextNamePrefix + getComponentKey(child, ii++);
	          subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	        }
	      } else {
	        if (false) {
	          var mapsAsChildrenAddendum = '';
	          if (ReactCurrentOwner.current) {
	            var mapsAsChildrenOwnerName = ReactCurrentOwner.current.getName();
	            if (mapsAsChildrenOwnerName) {
	              mapsAsChildrenAddendum = ' Check the render method of `' + mapsAsChildrenOwnerName + '`.';
	            }
	          }
	          process.env.NODE_ENV !== 'production' ? warning(didWarnAboutMaps, 'Using Maps as children is not yet fully supported. It is an ' + 'experimental feature that might be removed. Convert it to a ' + 'sequence / iterable of keyed ReactElements instead.%s', mapsAsChildrenAddendum) : void 0;
	          didWarnAboutMaps = true;
	        }
	        // Iterator will provide entry [k,v] tuples rather than values.
	        while (!(step = iterator.next()).done) {
	          var entry = step.value;
	          if (entry) {
	            child = entry[1];
	            nextName = nextNamePrefix + KeyEscapeUtils.escape(entry[0]) + SUBSEPARATOR + getComponentKey(child, 0);
	            subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	          }
	        }
	      }
	    } else if (type === 'object') {
	      var addendum = '';
	      if (false) {
	        addendum = ' If you meant to render a collection of children, use an array ' + 'instead or wrap the object using createFragment(object) from the ' + 'React add-ons.';
	        if (children._isReactElement) {
	          addendum = ' It looks like you\'re using an element created by a different ' + 'version of React. Make sure to use only one copy of React.';
	        }
	        if (ReactCurrentOwner.current) {
	          var name = ReactCurrentOwner.current.getName();
	          if (name) {
	            addendum += ' Check the render method of `' + name + '`.';
	          }
	        }
	      }
	      var childrenString = String(children);
	       true ?  false ? invariant(false, 'Objects are not valid as a React child (found: %s).%s', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : _prodInvariant('31', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : void 0;
	    }
	  }

	  return subtreeCount;
	}

	/**
	 * Traverses children that are typically specified as `props.children`, but
	 * might also be specified through attributes:
	 *
	 * - `traverseAllChildren(this.props.children, ...)`
	 * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
	 *
	 * The `traverseContext` is an optional argument that is passed through the
	 * entire traversal. It can be used to store accumulations or anything else that
	 * the callback might find relevant.
	 *
	 * @param {?*} children Children tree object.
	 * @param {!function} callback To invoke upon traversing each child.
	 * @param {?*} traverseContext Context for traversal.
	 * @return {!number} The number of children in this subtree.
	 */
	function traverseAllChildren(children, callback, traverseContext) {
	  if (children == null) {
	    return 0;
	  }

	  return traverseAllChildrenImpl(children, '', callback, traverseContext);
	}

	module.exports = traverseAllChildren;

/***/ },
/* 182 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2016-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(41);

	var ReactCurrentOwner = __webpack_require__(27);

	var invariant = __webpack_require__(3);
	var warning = __webpack_require__(4);

	function isNative(fn) {
	  // Based on isNative() from Lodash
	  var funcToString = Function.prototype.toString;
	  var hasOwnProperty = Object.prototype.hasOwnProperty;
	  var reIsNative = RegExp('^' + funcToString
	  // Take an example native function source for comparison
	  .call(hasOwnProperty)
	  // Strip regex characters so we can use it for regex
	  .replace(/[\\^$.*+?()[\]{}|]/g, '\\$&')
	  // Remove hasOwnProperty from the template to make it generic
	  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$');
	  try {
	    var source = funcToString.call(fn);
	    return reIsNative.test(source);
	  } catch (err) {
	    return false;
	  }
	}

	var canUseCollections =
	// Array.from
	typeof Array.from === 'function' &&
	// Map
	typeof Map === 'function' && isNative(Map) &&
	// Map.prototype.keys
	Map.prototype != null && typeof Map.prototype.keys === 'function' && isNative(Map.prototype.keys) &&
	// Set
	typeof Set === 'function' && isNative(Set) &&
	// Set.prototype.keys
	Set.prototype != null && typeof Set.prototype.keys === 'function' && isNative(Set.prototype.keys);

	var setItem;
	var getItem;
	var removeItem;
	var getItemIDs;
	var addRoot;
	var removeRoot;
	var getRootIDs;

	if (canUseCollections) {
	  var itemMap = new Map();
	  var rootIDSet = new Set();

	  setItem = function (id, item) {
	    itemMap.set(id, item);
	  };
	  getItem = function (id) {
	    return itemMap.get(id);
	  };
	  removeItem = function (id) {
	    itemMap['delete'](id);
	  };
	  getItemIDs = function () {
	    return Array.from(itemMap.keys());
	  };

	  addRoot = function (id) {
	    rootIDSet.add(id);
	  };
	  removeRoot = function (id) {
	    rootIDSet['delete'](id);
	  };
	  getRootIDs = function () {
	    return Array.from(rootIDSet.keys());
	  };
	} else {
	  var itemByKey = {};
	  var rootByKey = {};

	  // Use non-numeric keys to prevent V8 performance issues:
	  // https://github.com/facebook/react/pull/7232
	  var getKeyFromID = function (id) {
	    return '.' + id;
	  };
	  var getIDFromKey = function (key) {
	    return parseInt(key.substr(1), 10);
	  };

	  setItem = function (id, item) {
	    var key = getKeyFromID(id);
	    itemByKey[key] = item;
	  };
	  getItem = function (id) {
	    var key = getKeyFromID(id);
	    return itemByKey[key];
	  };
	  removeItem = function (id) {
	    var key = getKeyFromID(id);
	    delete itemByKey[key];
	  };
	  getItemIDs = function () {
	    return Object.keys(itemByKey).map(getIDFromKey);
	  };

	  addRoot = function (id) {
	    var key = getKeyFromID(id);
	    rootByKey[key] = true;
	  };
	  removeRoot = function (id) {
	    var key = getKeyFromID(id);
	    delete rootByKey[key];
	  };
	  getRootIDs = function () {
	    return Object.keys(rootByKey).map(getIDFromKey);
	  };
	}

	var unmountedIDs = [];

	function purgeDeep(id) {
	  var item = getItem(id);
	  if (item) {
	    var childIDs = item.childIDs;

	    removeItem(id);
	    childIDs.forEach(purgeDeep);
	  }
	}

	function describeComponentFrame(name, source, ownerName) {
	  return '\n    in ' + (name || 'Unknown') + (source ? ' (at ' + source.fileName.replace(/^.*[\\\/]/, '') + ':' + source.lineNumber + ')' : ownerName ? ' (created by ' + ownerName + ')' : '');
	}

	function getDisplayName(element) {
	  if (element == null) {
	    return '#empty';
	  } else if (typeof element === 'string' || typeof element === 'number') {
	    return '#text';
	  } else if (typeof element.type === 'string') {
	    return element.type;
	  } else {
	    return element.type.displayName || element.type.name || 'Unknown';
	  }
	}

	function describeID(id) {
	  var name = ReactComponentTreeHook.getDisplayName(id);
	  var element = ReactComponentTreeHook.getElement(id);
	  var ownerID = ReactComponentTreeHook.getOwnerID(id);
	  var ownerName;
	  if (ownerID) {
	    ownerName = ReactComponentTreeHook.getDisplayName(ownerID);
	  }
	   false ? warning(element, 'ReactComponentTreeHook: Missing React element for debugID %s when ' + 'building stack', id) : void 0;
	  return describeComponentFrame(name, element && element._source, ownerName);
	}

	var ReactComponentTreeHook = {
	  onSetChildren: function (id, nextChildIDs) {
	    var item = getItem(id);
	    !item ?  false ? invariant(false, 'Item must have been set') : _prodInvariant('144') : void 0;
	    item.childIDs = nextChildIDs;

	    for (var i = 0; i < nextChildIDs.length; i++) {
	      var nextChildID = nextChildIDs[i];
	      var nextChild = getItem(nextChildID);
	      !nextChild ?  false ? invariant(false, 'Expected hook events to fire for the child before its parent includes it in onSetChildren().') : _prodInvariant('140') : void 0;
	      !(nextChild.childIDs != null || typeof nextChild.element !== 'object' || nextChild.element == null) ?  false ? invariant(false, 'Expected onSetChildren() to fire for a container child before its parent includes it in onSetChildren().') : _prodInvariant('141') : void 0;
	      !nextChild.isMounted ?  false ? invariant(false, 'Expected onMountComponent() to fire for the child before its parent includes it in onSetChildren().') : _prodInvariant('71') : void 0;
	      if (nextChild.parentID == null) {
	        nextChild.parentID = id;
	        // TODO: This shouldn't be necessary but mounting a new root during in
	        // componentWillMount currently causes not-yet-mounted components to
	        // be purged from our tree data so their parent id is missing.
	      }
	      !(nextChild.parentID === id) ?  false ? invariant(false, 'Expected onBeforeMountComponent() parent and onSetChildren() to be consistent (%s has parents %s and %s).', nextChildID, nextChild.parentID, id) : _prodInvariant('142', nextChildID, nextChild.parentID, id) : void 0;
	    }
	  },
	  onBeforeMountComponent: function (id, element, parentID) {
	    var item = {
	      element: element,
	      parentID: parentID,
	      text: null,
	      childIDs: [],
	      isMounted: false,
	      updateCount: 0
	    };
	    setItem(id, item);
	  },
	  onBeforeUpdateComponent: function (id, element) {
	    var item = getItem(id);
	    if (!item || !item.isMounted) {
	      // We may end up here as a result of setState() in componentWillUnmount().
	      // In this case, ignore the element.
	      return;
	    }
	    item.element = element;
	  },
	  onMountComponent: function (id) {
	    var item = getItem(id);
	    !item ?  false ? invariant(false, 'Item must have been set') : _prodInvariant('144') : void 0;
	    item.isMounted = true;
	    var isRoot = item.parentID === 0;
	    if (isRoot) {
	      addRoot(id);
	    }
	  },
	  onUpdateComponent: function (id) {
	    var item = getItem(id);
	    if (!item || !item.isMounted) {
	      // We may end up here as a result of setState() in componentWillUnmount().
	      // In this case, ignore the element.
	      return;
	    }
	    item.updateCount++;
	  },
	  onUnmountComponent: function (id) {
	    var item = getItem(id);
	    if (item) {
	      // We need to check if it exists.
	      // `item` might not exist if it is inside an error boundary, and a sibling
	      // error boundary child threw while mounting. Then this instance never
	      // got a chance to mount, but it still gets an unmounting event during
	      // the error boundary cleanup.
	      item.isMounted = false;
	      var isRoot = item.parentID === 0;
	      if (isRoot) {
	        removeRoot(id);
	      }
	    }
	    unmountedIDs.push(id);
	  },
	  purgeUnmountedComponents: function () {
	    if (ReactComponentTreeHook._preventPurging) {
	      // Should only be used for testing.
	      return;
	    }

	    for (var i = 0; i < unmountedIDs.length; i++) {
	      var id = unmountedIDs[i];
	      purgeDeep(id);
	    }
	    unmountedIDs.length = 0;
	  },
	  isMounted: function (id) {
	    var item = getItem(id);
	    return item ? item.isMounted : false;
	  },
	  getCurrentStackAddendum: function (topElement) {
	    var info = '';
	    if (topElement) {
	      var name = getDisplayName(topElement);
	      var owner = topElement._owner;
	      info += describeComponentFrame(name, topElement._source, owner && owner.getName());
	    }

	    var currentOwner = ReactCurrentOwner.current;
	    var id = currentOwner && currentOwner._debugID;

	    info += ReactComponentTreeHook.getStackAddendumByID(id);
	    return info;
	  },
	  getStackAddendumByID: function (id) {
	    var info = '';
	    while (id) {
	      info += describeID(id);
	      id = ReactComponentTreeHook.getParentID(id);
	    }
	    return info;
	  },
	  getChildIDs: function (id) {
	    var item = getItem(id);
	    return item ? item.childIDs : [];
	  },
	  getDisplayName: function (id) {
	    var element = ReactComponentTreeHook.getElement(id);
	    if (!element) {
	      return null;
	    }
	    return getDisplayName(element);
	  },
	  getElement: function (id) {
	    var item = getItem(id);
	    return item ? item.element : null;
	  },
	  getOwnerID: function (id) {
	    var element = ReactComponentTreeHook.getElement(id);
	    if (!element || !element._owner) {
	      return null;
	    }
	    return element._owner._debugID;
	  },
	  getParentID: function (id) {
	    var item = getItem(id);
	    return item ? item.parentID : null;
	  },
	  getSource: function (id) {
	    var item = getItem(id);
	    var element = item ? item.element : null;
	    var source = element != null ? element._source : null;
	    return source;
	  },
	  getText: function (id) {
	    var element = ReactComponentTreeHook.getElement(id);
	    if (typeof element === 'string') {
	      return element;
	    } else if (typeof element === 'number') {
	      return '' + element;
	    } else {
	      return null;
	    }
	  },
	  getUpdateCount: function (id) {
	    var item = getItem(id);
	    return item ? item.updateCount : 0;
	  },


	  getRootIDs: getRootIDs,
	  getRegisteredIDs: getItemIDs
	};

	module.exports = ReactComponentTreeHook;

/***/ },
/* 183 */
/***/ function(module, exports) {

	/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	// The Symbol used to tag the ReactElement type. If there is no native Symbol
	// nor polyfill, then a plain number is used for performance.

	var REACT_ELEMENT_TYPE = typeof Symbol === 'function' && Symbol['for'] && Symbol['for']('react.element') || 0xeac7;

	module.exports = REACT_ELEMENT_TYPE;

/***/ },
/* 184 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var canDefineProperty = false;
	if (false) {
	  try {
	    // $FlowFixMe https://github.com/facebook/flow/issues/285
	    Object.defineProperty({}, 'x', { get: function () {} });
	    canDefineProperty = true;
	  } catch (x) {
	    // IE will fail on defineProperty
	  }
	}

	module.exports = canDefineProperty;

/***/ },
/* 185 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	var createHelper = function createHelper(func, helperName) {
	  var setDisplayName = arguments.length <= 2 || arguments[2] === undefined ? true : arguments[2];
	  var noArgs = arguments.length <= 3 || arguments[3] === undefined ? false : arguments[3];

	  if (false) {
	    var _ret = function () {
	      /* eslint-disable global-require */
	      var wrapDisplayName = require('./wrapDisplayName').default;
	      /* eslint-enable global-require */

	      if (noArgs) {
	        return {
	          v: function v(BaseComponent) {
	            var Component = func(BaseComponent);
	            Component.displayName = wrapDisplayName(BaseComponent, helperName);
	            return Component;
	          }
	        };
	      }

	      return {
	        v: function v() {
	          for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	            args[_key] = arguments[_key];
	          }

	          if (args.length > func.length) {
	            /* eslint-disable */
	            console.error(
	            /* eslint-enable */
	            'Too many arguments passed to ' + helperName + '(). It should called ' + ('like so: ' + helperName + '(...args)(BaseComponent).'));
	          }

	          return function (BaseComponent) {
	            var Component = func.apply(undefined, args)(BaseComponent);
	            Component.displayName = wrapDisplayName(BaseComponent, helperName);
	            return Component;
	          };
	        }
	      };
	    }();

	    if (typeof _ret === "object") return _ret.v;
	  }

	  return func;
	};

	exports.default = createHelper;

/***/ },
/* 186 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {'use strict';

	/* global global */
	// @remove-on-eject-begin
	/**
	 * Copyright (c) 2015-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 */
	// @remove-on-eject-end

	if (typeof global !== 'undefined') {
		if (typeof Promise === 'undefined') {
			// Rejection tracking prevents a common issue where React gets into an
			// inconsistent state due to an error, but it gets swallowed by a Promise,
			// and the user has no idea what causes React's erratic future behavior.
			__webpack_require__(282).enable();
			global.Promise = __webpack_require__(281);
		}

		// fetch() polyfill for making API calls.
		__webpack_require__(286);
	}

	if (!Math.sign) {
		Math.sign = function (x) {
			// If -0, must return -0.
			return isNaN(x) ? NaN : x < 0 ? -1 : x > 0 ? 1 : +x;
		};
	}

	// Common String ES6 functionalities for character values.
	// Used by Enact's Moonstone library.
	__webpack_require__(283);
	__webpack_require__(284);

	// Object.assign() is commonly used with Enact and React.
	// It will use the native implementation if it's present and isn't buggy.
	Object.assign = __webpack_require__(7);
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 187 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
		value: true
	});

	var _jsx = function () { var REACT_ELEMENT_TYPE = typeof Symbol === "function" && Symbol.for && Symbol.for("react.element") || 0xeac7; return function createRawReactElement(type, props, key, children) { var defaultProps = type && type.defaultProps; var childrenLength = arguments.length - 3; if (!props && childrenLength !== 0) { props = {}; } if (props && defaultProps) { for (var propName in defaultProps) { if (props[propName] === void 0) { props[propName] = defaultProps[propName]; } } } else if (!props) { props = defaultProps || {}; } if (childrenLength === 1) { props.children = children; } else if (childrenLength > 1) { var childArray = Array(childrenLength); for (var i = 0; i < childrenLength; i++) { childArray[i] = arguments[i + 3]; } props.children = childArray; } return { $$typeof: REACT_ELEMENT_TYPE, type: type, key: key === undefined ? null : '' + key, ref: null, props: props, _owner: null }; }; }();

	var _kind = __webpack_require__(8);

	var _kind2 = _interopRequireDefault(_kind);

	var _MoonstoneDecorator = __webpack_require__(231);

	var _MoonstoneDecorator2 = _interopRequireDefault(_MoonstoneDecorator);

	var _Panels = __webpack_require__(135);

	var _Panels2 = _interopRequireDefault(_Panels);

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _MainPanel = __webpack_require__(190);

	var _MainPanel2 = _interopRequireDefault(_MainPanel);

	var _App = __webpack_require__(273);

	var _App2 = _interopRequireDefault(_App);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var App = (0, _kind2.default)({
		name: 'App',

		styles: {
			css: _App2.default,
			className: 'app'
		},

		render: function render(props) {
			return _react2.default.createElement(
				'div',
				props,
				_jsx(_Panels2.default, {}, void 0, _jsx(_MainPanel2.default, {}))
			);
		}
	});

	exports.default = (0, _MoonstoneDecorator2.default)(App);

/***/ },
/* 188 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	exports.importLazy = exports.LazilyLoadFactory = undefined;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _jsx = function () { var REACT_ELEMENT_TYPE = typeof Symbol === "function" && Symbol.for && Symbol.for("react.element") || 0xeac7; return function createRawReactElement(type, props, key, children) { var defaultProps = type && type.defaultProps; var childrenLength = arguments.length - 3; if (!props && childrenLength !== 0) { props = {}; } if (props && defaultProps) { for (var propName in defaultProps) { if (props[propName] === void 0) { props[propName] = defaultProps[propName]; } } } else if (!props) { props = defaultProps || {}; } if (childrenLength === 1) { props.children = children; } else if (childrenLength > 1) { var childArray = Array(childrenLength); for (var i = 0; i < childrenLength; i++) { childArray[i] = arguments[i + 3]; } props.children = childArray; } return { $$typeof: REACT_ELEMENT_TYPE, type: type, key: key === undefined ? null : '' + key, ref: null, props: props, _owner: null }; }; }();

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	// Code pulled from here. https://webpack.js.org/guides/lazy-load-react/#the-code

	var LazilyLoad = function (_React$Component) {
		_inherits(LazilyLoad, _React$Component);

		function LazilyLoad() {
			_classCallCheck(this, LazilyLoad);

			var _this = _possibleConstructorReturn(this, (LazilyLoad.__proto__ || Object.getPrototypeOf(LazilyLoad)).apply(this, arguments));

			_this.state = {
				isLoaded: false
			};
			return _this;
		}

		_createClass(LazilyLoad, [{
			key: 'componentDidMount',
			value: function componentDidMount() {
				this._isMounted = true;
				this.load();
			}
		}, {
			key: 'componentDidUpdate',
			value: function componentDidUpdate(previous) {
				var _this2 = this;

				var shouldLoad = !!Object.keys(this.props.modules).filter(function (key) {
					return _this2.props.modules[key] !== previous.modules[key];
				}).length;
				if (shouldLoad) {
					this.load();
				}
			}
		}, {
			key: 'componentWillUnmount',
			value: function componentWillUnmount() {
				this._isMounted = false;
			}
		}, {
			key: 'load',
			value: function load() {
				var _this3 = this;

				this.setState({
					isLoaded: false
				});

				var modules = this.props.modules;

				var keys = Object.keys(modules);

				Promise.all(keys.map(function (key) {
					return modules[key]();
				})).then(function (values) {
					return keys.reduce(function (agg, key, index) {
						agg[key] = values[index];
						return agg;
					}, {});
				}).then(function (result) {
					if (!_this3._isMounted) return null;
					_this3.setState({ modules: result, isLoaded: true });
				});
			}
		}, {
			key: 'render',
			value: function render() {
				if (!this.state.isLoaded) return null;
				return _react2.default.Children.only(this.props.children(this.state.modules));
			}
		}]);

		return LazilyLoad;
	}(_react2.default.Component);

	LazilyLoad.propTypes = {
		children: _react2.default.PropTypes.func.isRequired
	};

	var LazilyLoadFactory = exports.LazilyLoadFactory = function LazilyLoadFactory(Component, modules) {
		return function (props) {
			return _jsx(LazilyLoad, {
				modules: modules
			}, void 0, function (mods) {
				return _react2.default.createElement(Component, _extends({}, mods, props));
			});
		};
	};

	var importLazy = exports.importLazy = function importLazy(promise) {
		return promise.then(function (result) {
			return result.default;
		});
	};

	exports.default = LazilyLoad;

/***/ },
/* 189 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
		value: true
	});

	var _jsx = function () { var REACT_ELEMENT_TYPE = typeof Symbol === "function" && Symbol.for && Symbol.for("react.element") || 0xeac7; return function createRawReactElement(type, props, key, children) { var defaultProps = type && type.defaultProps; var childrenLength = arguments.length - 3; if (!props && childrenLength !== 0) { props = {}; } if (props && defaultProps) { for (var propName in defaultProps) { if (props[propName] === void 0) { props[propName] = defaultProps[propName]; } } } else if (!props) { props = defaultProps || {}; } if (childrenLength === 1) { props.children = children; } else if (childrenLength > 1) { var childArray = Array(childrenLength); for (var i = 0; i < childrenLength; i++) { childArray[i] = arguments[i + 3]; } props.children = childArray; } return { $$typeof: REACT_ELEMENT_TYPE, type: type, key: key === undefined ? null : '' + key, ref: null, props: props, _owner: null }; }; }();

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(58);

	var _App = __webpack_require__(187);

	var _App2 = _interopRequireDefault(_App);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var appElement = _jsx(_App2.default, {});

	// In a browser environment, render instead of exporting
	if (typeof window !== 'undefined') {
		(0, _reactDom.render)(appElement, document.getElementById('root'));
	}

	exports.default = appElement;

/***/ },
/* 190 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
		value: true
	});

	var _jsx = function () { var REACT_ELEMENT_TYPE = typeof Symbol === "function" && Symbol.for && Symbol.for("react.element") || 0xeac7; return function createRawReactElement(type, props, key, children) { var defaultProps = type && type.defaultProps; var childrenLength = arguments.length - 3; if (!props && childrenLength !== 0) { props = {}; } if (props && defaultProps) { for (var propName in defaultProps) { if (props[propName] === void 0) { props[propName] = defaultProps[propName]; } } } else if (!props) { props = defaultProps || {}; } if (childrenLength === 1) { props.children = children; } else if (childrenLength > 1) { var childArray = Array(childrenLength); for (var i = 0; i < childrenLength; i++) { childArray[i] = arguments[i + 3]; } props.children = childArray; } return { $$typeof: REACT_ELEMENT_TYPE, type: type, key: key === undefined ? null : '' + key, ref: null, props: props, _owner: null }; }; }();

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _Panels = __webpack_require__(135);

	var _spotlight = __webpack_require__(31);

	var _spotlight2 = _interopRequireDefault(_spotlight);

	var _LazilyLoad = __webpack_require__(188);

	var _LazilyLoad2 = _interopRequireDefault(_LazilyLoad);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var ClosePopup = function (_React$Component) {
		_inherits(ClosePopup, _React$Component);

		function ClosePopup(props) {
			_classCallCheck(this, ClosePopup);

			var _this = _possibleConstructorReturn(this, (ClosePopup.__proto__ || Object.getPrototypeOf(ClosePopup)).call(this, props));

			_this.openPopup = function () {
				_this.setState({
					isPopupShow: true
				});
			};

			_this.closePopup = function () {
				_this.setState({
					isPopupShow: false
				});
			};

			_this.state = {
				isPopupShow: false
			};
			return _this;
		}

		_createClass(ClosePopup, [{
			key: 'componentWillMount',
			value: function componentWillMount() {
				_spotlight2.default.setPointerMode(false);
			}
		}, {
			key: 'render',
			value: function render() {
				var _this2 = this;

				return _jsx(_Panels.Panel, {}, void 0, _jsx(_Panels.Header, {
					title: 'Close Popup'
				}), _jsx(_LazilyLoad2.default, {
					modules: {
						Popup: function Popup() {
							return (0, _LazilyLoad.importLazy)(new Promise(function (resolve) {
								__webpack_require__.e/* nsure */(1, function (require) {
									resolve(__webpack_require__(243));
								});
							}));
						},
						Button: function Button() {
							return (0, _LazilyLoad.importLazy)(new Promise(function (resolve) {
								!/* require.ensure */(function (require) {
									resolve(__webpack_require__(122));
								}(__webpack_require__));
							}));
						}
					}
				}, void 0, function (_ref) {
					var Popup = _ref.Popup,
					    Button = _ref.Button;
					return _jsx('div', {}, void 0, _jsx(Button, {
						onClick: _this2.openPopup
					}, void 0, 'Open Popup'), _jsx(Button, {}, void 0, 'A'), _jsx(Button, {}, void 0, 'B'), _jsx(Popup, {
						open: _this2.state.isPopupShow,
						onClose: _this2.closePopup,
						showCloseButton: true
					}, void 0, _jsx('div', {}, void 0, 'This is Popup'), _jsx('br', {}), _jsx(Button, {
						onClick: _this2.closePopup
					}, void 0, 'ok'), _jsx(Button, {
						onClick: _this2.closePopup
					}, void 0, 'cancel')));
				}));
			}
		}]);

		return ClosePopup;
	}(_react2.default.Component);

	exports.default = ClosePopup;

/***/ },
/* 191 */
/***/ function(module, exports) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	// Simple Map polyfill mapping targets to a hash of names->handler[]
	var targets = [];
	var events = [];

	var getListeners = function getListeners(target, name) {
		var targetIndex = targets.indexOf(target);
		if (targetIndex === -1) {
			targetIndex = targets.push(target) - 1;
		}
		var listeners = events[targetIndex] = events[targetIndex] || {};
		return listeners[name] = listeners[name] || [];
	};

	exports.default = getListeners;
	exports.getListeners = getListeners;

/***/ },
/* 192 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	/**
	 * Merges the local CSS object and a CSS object from the props. When both exist, the class names are
	 * joined with a space.
	 *
	 * @param	{Object}	[componentCss]	Component class name map
	 * @param	{Object}	[authorCss]		Customization class name map
	 * @returns	{Object}					Combined class name map
	 * @private
	 */
	var feature = function feature(componentCss, authorCss) {
		if (authorCss && componentCss) {
			var css = Object.assign({}, componentCss);
			Object.keys(authorCss).forEach(function (className) {
				if (componentCss[className]) {
					css[className] = componentCss[className] + ' ' + authorCss[className];
				} else {
					css[className] = authorCss[className];
				}
			});

			return css;
		} else if (authorCss) {
			return Object.assign({}, authorCss);
		}

		return componentCss;
	};

	exports.default = feature;
	exports.feature = feature;

/***/ },
/* 193 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.removeAll = exports.remove = exports.is = exports.addAll = exports.add = undefined;

	var _curry = __webpack_require__(47);

	var _curry2 = _interopRequireDefault(_curry);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	/**
	 * The singleton map of names to keyCodes. If a name doesn't have any keyCodes mapped to it, it will
	 * not exist in this map. If it does, its value will be an array of its keyCodes.
	 *
	 * @type {Object}
	 * @private
	 */
	var map = {};

	/**
	 * Utility to safely convert keymap name to lower case
	 *
	 * @function
	 * @memberof core/keymap
	 * @param   {String} name  Name for keyCode
	 *
	 * @returns {String}       Name for keyCode in lower case
	 * @private
	 */
	/**
	 * Manages a map of names to key codes to simplify event handlers
	 *
	 * ```
	 * import {add, is} from '@enact/core/keymap';
	 *
	 * add('enter', 13);
	 * const isEnter = is('enter');
	 *
	 * // within event handler
	 * if (isEnter(ev.keyCode)) {
	 *   // handle enter
	 * }
	 * ```
	 *
	 * @module core/keymap
	 */

	var toLowerCase = function toLowerCase(name) {
	  return name ? name.toLowerCase() : '';
	};

	/**
	 * Iterates over `set` and invokes `fn` with the key and value of each item
	 *
	 * @function
	 * @memberof core/keymap
	 * @param   {Function}  fn   Function to invoke
	 * @param   {Object}    set  A map of names to keyCodes
	 *
	 * @returns {undefined}
	 * @private
	 */
	var forEachObj = (0, _curry2.default)(function (fn, set) {
	  Object.keys(set).forEach(function (name) {
	    return fn(name, set[name]);
	  });
	});

	/**
	 * Invokes `fn` with `name` and `keyCode` for each key code provided
	 *
	 * @function
	 * @memberof core/keymap
	 * @param   {Function}        fn       Function to invoke
	 * @param   {String}          name     Name for the key codes
	 * @param   {Number|Number[]} keyCode  A key code or array of key codes
	 *
	 * @returns {undefined}
	 * @private
	 */
	var oneOrArray = (0, _curry2.default)(function (fn, name, keyCode) {
	  if (Array.isArray(keyCode)) {
	    keyCode.forEach(fn(name));
	  } else {
	    fn(name, keyCode);
	  }
	});

	/**
	 * Adds `keyCode` to `name`
	 *
	 * @function
	 * @memberof core/keymap
	 * @param   {String}    name     Name for the key code
	 * @param   {Number}    keyCode  A key code
	 *
	 * @returns {undefined}
	 * @private
	 */
	var addOne = (0, _curry2.default)(function (name, keyCode) {
	  name = toLowerCase(name);
	  if (name in map) {
	    var index = map[name].indexOf(keyCode);
	    if (index === -1) {
	      map[name].push(keyCode);
	    }
	  } else if (name) {
	    map[name] = [keyCode];
	  }
	});

	/**
	 * Removes `keyCode` from `name`.
	 *
	 * @function
	 * @memberof core/keymap
	 * @param   {String}    name     Name for the key code
	 * @param   {Number}    keyCode  A key code
	 *
	 * @returns {undefined}
	 * @private
	 */
	var removeOne = (0, _curry2.default)(function (name, keyCode) {
	  name = toLowerCase(name);
	  if (name in map) {
	    var keys = map[name];
	    var index = keys.indexOf(keyCode);
	    if (index === -1) {
	      delete map[name];
	    } else {
	      keys.splice(index, 1);
	    }
	  }
	});

	/**
	 * Registers `keyCode` for `name`
	 *
	 * @function add
	 * @memberof core/keymap
	 * @param   {String}          name     Name for the key code
	 * @param   {Number|Number[]} keyCode  A key code or array of key codes
	 *
	 * @returns {undefined}
	 * @public
	 */
	var add = oneOrArray(addOne);

	/**
	 * Registers a set of key codes.
	 *
	 * @function addAll
	 * @memberof core/keymap
	 * @param   {Object}    set  A map of names to keyCodes
	 *
	 * @returns {undefined}
	 * @public
	 */
	var addAll = forEachObj(add);

	/**
	 * Deregisters `keyCode` from `name`.
	 *
	 * @function remove
	 * @memberof core/keymap
	 * @param   {String}          name     Name for the key code
	 * @param   {Number|Number[]} keyCode  A key code or array of key codes
	 *
	 * @returns {undefined}
	 * @public
	 */
	var remove = oneOrArray(removeOne);

	/**
	 * Deregisters a set of key codes.
	 *
	 * @function removeAll
	 * @memberof core/keymap
	 * @param   {Object}    set  A map of names to keyCodes
	 *
	 * @returns {undefined}
	 * @public
	 */
	var removeAll = forEachObj(remove);

	/**
	 * Determines if `keyCode` is mapped to `name`.
	 *
	 * @function is
	 * @memberof core/keymap
	 * @param   {String}    name     Name for the key code
	 * @param   {Number}    keyCode  A key code
	 *
	 * @returns {Boolean}            `true` if `keyCode` is mapped to `name`
	 * @public
	 */
	var is = (0, _curry2.default)(function (name, keyCode) {
	  name = toLowerCase(name);
	  return name in map && map[name].indexOf(keyCode) >= 0;
	});

	exports.add = add;
	exports.addAll = addAll;
	exports.is = is;
	exports.remove = remove;
	exports.removeAll = removeAll;

/***/ },
/* 194 */
/***/ function(module, exports) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	/**
	 * Accepts an object of computed property configurations and a property object, passes the property
	 * object through each computed property handler, and merges the resulting computed properties with
	 * the original properties.
	 *
	 * ```
	 * const cfg = {
	 *   sum: ({x,y,z}) => x+y+z,
	 *   product: ({x,y,z}) => x*y*z
	 * }
	 * const props = {
	 *   x: 2,
	 *   y: 3,
	 *   z: 4
	 * }
	 * computed(cfg)(props) // => {x: 2, y: 3, z: 4, sum: 9, product: 24}
	 * ```
	 *
	 * @method computed
	 * @param {Object} cfg Configuration object mapping transformation functions to property names
	 * @param {Object} props Render props
	 * @returns {Function} Function accepting props and returning update props with computed properties
	 * @public
	 */
	var computed = function computed(cfg, props) {
	  for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
	    args[_key - 2] = arguments[_key];
	  }

	  var keys = Object.keys(cfg);
	  var updated = {};
	  for (var i = keys.length - 1; i >= 0; i--) {
	    updated[keys[i]] = cfg[keys[i]].apply(cfg, [props].concat(args));
	  }

	  return Object.assign(props, updated);
	};

	exports.default = computed;
	exports.computed = computed;

/***/ },
/* 195 */
/***/ function(module, exports) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	/**
	 * Adds contextTypes to a render
	 *
	 * @param  {Object} cfg contextTypes object
	 *
	 * @returns {Function} Function accepting a render method on which `cfg` will be set as contextTypes
	 * @method contextTypes
	 * @public
	 */
	var contextTypes = function contextTypes(cfg, render) {
	  return render.contextTypes = cfg;
	};

	exports.default = contextTypes;
	exports.contextTypes = contextTypes;

/***/ },
/* 196 */
/***/ function(module, exports) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	/**
	 * Adds default props to a render
	 *
	 * @param  {Object} cfg Default properties object
	 *
	 * @returns {Function} Function accepting a render method on which `cfg` will be set as defaultProps
	 * @method defaultProps
	 * @public
	 */
	var defaultProps = function defaultProps(cfg, render) {
	  return render.defaultProps = cfg;
	};

	exports.default = defaultProps;
	exports.defaultProps = defaultProps;

/***/ },
/* 197 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	exports.handlers = undefined;

	var _extends = Object.assign || function (target) {
		for (var i = 1; i < arguments.length; i++) {
			var source = arguments[i];for (var key in source) {
				if (Object.prototype.hasOwnProperty.call(source, key)) {
					target[key] = source[key];
				}
			}
		}return target;
	};

	var _createClass = function () {
		function defineProperties(target, props) {
			for (var i = 0; i < props.length; i++) {
				var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
			}
		}return function (Constructor, protoProps, staticProps) {
			if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
		};
	}();

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	function _interopRequireDefault(obj) {
		return obj && obj.__esModule ? obj : { default: obj };
	}

	function _classCallCheck(instance, Constructor) {
		if (!(instance instanceof Constructor)) {
			throw new TypeError("Cannot call a class as a function");
		}
	}

	function _possibleConstructorReturn(self, call) {
		if (!self) {
			throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
		}return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
		if (typeof superClass !== "function" && superClass !== null) {
			throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
		}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	/**
	 * Accepts an object of event handlers and a Component and returns a React Component that creates
	 * bound handlers for each event and passes them to Component to reduce re-renders caused by
	 * changed event handler references.
	 *
	 * ```
	 * const cfg = {
	 *   onChange: (ev, {onChange}) => onChange({value: ev.value})
	 * }
	 * handlers(cfg, Component)
	 * ```
	 *
	 * @method  handlers
	 * @param   {Object}    cfg        Configuration object mapping event names to event handlers
	 * @param   {Function}  Component  A component
	 * @returns {Function}             A component wrapping `Component` with bound event handlers
	 * @public
	 */
	var handlers = function handlers(cfg, Component) {
		var _class, _temp;

		return _temp = _class = function (_React$Component) {
			_inherits(_class, _React$Component);

			function _class() {
				_classCallCheck(this, _class);

				var _this = _possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).call(this));

				_this.prepareHandler = function (name, handler) {
					_this.handlers[name] = function (ev) {
						handler(ev, _this.props, _this.context);
					};
				};

				_this.handlers = {};

				// cache bound function for each handler
				Object.keys(cfg).forEach(function (name) {
					return _this.prepareHandler(name, cfg[name]);
				});
				return _this;
			}

			/**
	   * Caches an event handler on the local `handlers` member
	   *
	   * @param   {String}    name     Event name
	   * @param   {Function}  handler  Event handler
	   *
	   * @returns {undefined}
	   */

			_createClass(_class, [{
				key: 'render',
				value: function render() {
					return _react2.default.createElement(Component, _extends({}, this.props, this.handlers));
				}
			}]);

			return _class;
		}(_react2.default.Component), _class.displayName = 'Handlers(' + (Component.displayName || Component.name || 'Component') + ')', _temp;
	};

	exports.default = handlers;
	exports.handlers = handlers;

/***/ },
/* 198 */
/***/ function(module, exports) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	/**
	 * Adds displayName to a render
	 *
	 * @param  {Object} displayName Name of component
	 *
	 * @returns {Function} Function accepting a render method on which `displayName` will be set as
	 *	displayName
	 * @method name
	 * @public
	 */
	var name = function name(displayName, render) {
	  render.displayName = displayName;
	};

	exports.default = name;
	exports.name = name;

/***/ },
/* 199 */
/***/ function(module, exports) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	/**
	 * Adds propTypes to a render
	 *
	 * @param  {Object} cfg propTypes object
	 *
	 * @returns {Function} Function accepting a render method on which `cfg` will be set as propTypes
	 * @method propTypes
	 * @public
	 */
	var propTypes = function propTypes(cfg, render) {
	  return render.propTypes = cfg;
	};

	exports.default = propTypes;
	exports.propTypes = propTypes;

/***/ },
/* 200 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.styles = undefined;

	var _curry = __webpack_require__(47);

	var _curry2 = _interopRequireDefault(_curry);

	var _compose = __webpack_require__(62);

	var _compose2 = _interopRequireDefault(_compose);

	var _merge = __webpack_require__(336);

	var _merge2 = _interopRequireDefault(_merge);

	var _classnames = __webpack_require__(289);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _util = __webpack_require__(201);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	// Joins two strings in a className-friendly way
	var joinClasses = (0, _curry2.default)(function (a, b) {
	  return a + ' ' + b;
	});

	// Creates a function accepting two arguments. When both are truthy, calls fn with both. If either
	// is falsey, returns the truthy one or the first if both are falsey.
	var bothOrEither = (0, _curry2.default)(function (fn, a, b) {
	  if (a && b) {
	    return fn(a, b);
	  } else {
	    return b || a;
	  }
	});

	// Returns either the value for the property or the property name itself
	var propOrSelf = (0, _curry2.default)(function (obj, prop) {
	  return obj && obj[prop] || prop;
	});

	// Takes a string (multiple classes can be space-delimited) and a css-modules object and resolves
	// the class names to their css-modules name
	var resolveClassNames = (0, _curry2.default)(function (css, className) {
	  if (css && className) {
	    return className.split(' ').map(propOrSelf(css)).join(' ');
	  }

	  return className;
	});

	// Takes a styles config object and either resolves `className` with `css` or `className` iself
	var localClassName = function localClassName(_ref) {
	  var css = _ref.css,
	      className = _ref.className;
	  return resolveClassNames(css, className) || '';
	};

	// Merges the locally-resolved className and the className from the props
	var mergeClassName = function mergeClassName(config, _ref2) {
	  var className = _ref2.className;

	  return bothOrEither(joinClasses, localClassName(config), className);
	};

	// Merges the local style object and the style object from the props
	var mergeStyle = function mergeStyle(_ref3, _ref4) {
	  var componentStyle = _ref3.style;
	  var authorStyle = _ref4.style;

	  return bothOrEither(_merge2.default, componentStyle, authorStyle);
	};

	/**
	 * Creates the `join()` method of the styler
	 *
	 * @param {Object} cfg styles configuration object
	 * @param {Object} props Render props
	 * @returns {Function} `join()`
	 * @method join
	 */
	var join = function join(cfg) {
	  if (cfg.css) {
	    return (0, _compose2.default)(resolveClassNames(cfg.css), _classnames2.default);
	  }

	  return _classnames2.default;
	};

	/**
	 * Creates the `append()` method of the styler
	 *
	 * @method append
	 * @param {Object} props Render props updated by styles with `className` and `styler.join`
	 * @returns {Function} `append()`
	 */
	var append = function append(props) {
	  var j = props.styler.join;
	  return props.className ? (0, _compose2.default)(joinClasses(props.className), j) : j;
	};

	/**
	 * Merges external and internal CSS classes and style objects. Internal CSS classes can be
	 * optionally mapped to alternate names (e.g. those generated by CSS modules) by including a
	 * `css` parameter.
	 *
	 * @example
	 *	const stylesConfig = {
	 *		css: {
	 *			button: 'unambiguous-button-class-name',
	 *			client: 'unambiguous-button-class-name-client'
	 *		},
	 *		className: 'button global-class',
	 *		style: {
	 *			color: 'red'
	 *		}
	 *	};
	 *
	 *	const props = {
	 *		className: 'my-button',
	 *		style: {
	 *			display: 'none'
	 *		}
	 *	};
	 *
	 *	styles(stylesConfig, props); // {className: 'unambiguous-button-class-name global-class', styles: {color: 'red', display: 'none'}}
	 *
	 * @method styles
	 * @param {Object} cfg Configuration object containing one of `css`, `className`, and/or `style`
	 * @param {Object} props Render props
	 * @returns {Function} Function accepting props and returning update props with computed properties
	 * @public
	 */
	var styles = function styles(cfg, props) {
	  var prop = cfg.prop || 'className';

	  var style = mergeStyle(cfg, props);
	  if (style) {
	    props.style = style;
	  }

	  var className = mergeClassName(cfg, props);
	  if (className) {
	    props[prop] = className;
	  }

	  // styler should not be automatically spread onto children
	  (0, _util.addInternalProp)(props, 'styler', {
	    join: join(cfg)
	  });

	  // append requires the computed className property so it is built off the updated props rather
	  // than the provided props
	  props.styler.append = append(props);
	  return props;
	};

	exports.default = styles;
	exports.styles = styles;

/***/ },
/* 201 */
/***/ function(module, exports) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	var addInternalProp = exports.addInternalProp = function addInternalProp(props, name, value) {
		if (name in props) {
			props[name] = value;
		} else {
			Object.defineProperty(props, name, {
				value: value,
				enumerable: false,
				writable: true
			});
		}

		return props;
	};

/***/ },
/* 202 */
/***/ function(module, exports) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
		value: true
	});

	var _createClass = function () {
		function defineProperties(target, props) {
			for (var i = 0; i < props.length; i++) {
				var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
			}
		}return function (Constructor, protoProps, staticProps) {
			if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
		};
	}();

	function _classCallCheck(instance, Constructor) {
		if (!(instance instanceof Constructor)) {
			throw new TypeError("Cannot call a class as a function");
		}
	}

	/**
	 * @class Job
	 */
	var Job = function () {

		/**
	  * @constructor
	  * @param {Function} fn       function to execute as the requested job.
	  * @param {Number}   timeout  The number of milliseconds to wait before starting the job.
	  */
		function Job(fn, timeout) {
			_classCallCheck(this, Job);

			_initialiseProps.call(this);

			this.fn = fn;
			this.timeout = timeout;
		}

		_createClass(Job, [{
			key: "run",
			value: function run(args) {
				// don't want to inadvertently apply Job's context on `fn`
				this.fn.apply(null, args);
			}

			/**
	   * Starts the job.
	   *
	   * @param   {...*}       [args]  Any args passed are forwarded to the callback
	   * @returns {undefined}
	   */

			/**
	   * Starts the job in `timeout` milliseconds
	   *
	   * @param   {Number}     timeout  The number of milliseconds to wait before starting the job.
	   *                                This supersedes the timeout set at construction or by
	   *                                `setTimeout`.
	   * @param   {...*}       [args]   Any args passed are forwarded to the callback
	   * @returns {undefined}
	   */

			/**
	   * Stops the job.
	   *
	   * @returns {undefined}
	   */

			/**
	   * Executes the job immediately, then prevents any other calls to `throttle()` from running
	   * until the `timeout` configured at construction or via `setTimeout` passes.
	   *
	   * @param   {...*}       args  Any args passed are forwarded to the callback
	   * @returns {undefined}
	   * @public
	   */

			/**
	   * Executes the job immediately, then prevents any other calls to `throttle()` from running for
	   * `timeout` milliseconds.
	   *
	   * @param   {Number}     timeout  The number of milliseconds to wait before allowing the job to
	   *                                be ran again. This supersedes the timeout set at construction
	   *                                or by `setTimeout`.
	   * @param   {...*}       [args]   Any args passed are forwarded to the callback
	   * @returns {undefined}
	   * @public
	   */

		}]);

		return Job;
	}();

	var _initialiseProps = function _initialiseProps() {
		var _this = this;

		this.id = null;
		this.fn = null;
		this.timeout = null;

		this.start = function () {
			for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
				args[_key] = arguments[_key];
			}

			_this.startAfter.apply(_this, [_this.timeout].concat(args));
		};

		this.startAfter = function (timeout) {
			for (var _len2 = arguments.length, args = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
				args[_key2 - 1] = arguments[_key2];
			}

			_this.stop();
			_this.id = setTimeout(function () {
				return _this.run(args);
			}, timeout);
		};

		this.stop = function () {
			if (_this.id) {
				clearTimeout(_this.id);
				_this.id = null;
			}
		};

		this.throttle = function () {
			for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
				args[_key3] = arguments[_key3];
			}

			_this.throttleUntil.apply(_this, [_this.timeout].concat(args));
		};

		this.throttleUntil = function (timeout) {
			for (var _len4 = arguments.length, args = Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {
				args[_key4 - 1] = arguments[_key4];
			}

			if (!_this.id) {
				_this.run(args);
				_this.id = setTimeout(_this.stop, timeout);
			}
		};
	};

	exports.default = Job;
	exports.Job = Job;

/***/ },
/* 203 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
		value: true
	});

	var _locale = __webpack_require__(80);

	var _LocaleInfo = __webpack_require__(14);

	var _LocaleInfo2 = _interopRequireDefault(_LocaleInfo);

	function _interopRequireDefault(obj) {
		return obj && obj.__esModule ? obj : { default: obj };
	}

	function getI18nClasses() {
		var li = new _LocaleInfo2.default(); // for the current locale
		var locale = li.getLocale();
		var base = 'enact-locale-';
		var classes = [];

		if ((0, _locale.isNonLatinLocale)(locale)) {
			// allow enyo to define other fonts for non-Latin languages, or for certain
			// Latin-based languages where the characters with some accents don't appear in the
			// regular fonts, creating a strange 'ransom note' look with a mix of fonts in the
			// same word. So, treat it like a non-Latin language in order to get all the characters
			// to display with the same font.
			classes.push(base + 'non-latin');
		}

		var scriptName = li.getScript();
		if (scriptName !== 'Latn' && scriptName !== 'Cyrl' && scriptName !== 'Grek') {
			// GF-45884: allow enyo to avoid setting italic fonts for those scripts that do not
			// commonly use italics
			classes.push(base + 'non-italic');
		}

		// allow enyo to apply right-to-left styles to the app and widgets if necessary
		if ((0, _locale.isRtlLocale)()) {
			classes.push(base + 'right-to-left');
		}

		// allow enyo or the apps to give CSS classes that are specific to the language, country, or script
		if (locale.getLanguage()) {
			classes.push(base + locale.getLanguage());
			if (locale.getScript()) {
				classes.push(base + locale.getLanguage() + '-' + locale.getScript());
				if (locale.getRegion()) {
					classes.push(base + locale.getLanguage() + '-' + locale.getScript() + '-' + locale.getRegion());
				}
			} else if (locale.getRegion()) {
				classes.push(base + locale.getLanguage() + '-' + locale.getRegion());
			}
		}
		if (locale.getScript()) {
			classes.push(base + locale.getScript());
		}
		if (locale.getRegion()) {
			classes.push(base + locale.getRegion());
		}

		return classes.join(' ');
	}

	exports.default = getI18nClasses;

/***/ },
/* 204 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	/*
	 * CalendarFactory.js - Constructs new instances of the right subclass of Calendar
	 * 
	 * Copyright Â© 2015, JEDLSoft
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 *
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */

	/* !depends
	ilib.js
	Locale.js
	LocaleInfo.js
	Calendar.js
	*/

	var ilib = __webpack_require__(2);
	var Locale = __webpack_require__(12);
	var LocaleInfo = __webpack_require__(14);
	var Calendar = __webpack_require__(9);

	/**
	 * Factory method to create a new instance of a calendar subclass.<p>
	 * 
	 * The options parameter can be an object that contains the following
	 * properties:
	 * 
	 * <ul>
	 * <li><i>type</i> - specify the type of the calendar desired. The
	 * list of valid values changes depending on which calendars are 
	 * defined. When assembling your iliball.js, include those calendars 
	 * you wish to use in your program or web page, and they will register 
	 * themselves with this factory method. The "official", "gregorian",
	 * and "julian" calendars are all included by default, as they are the
	 * standard calendars for much of the world.
	 * <li><i>locale</i> - some calendars vary depending on the locale.
	 * For example, the "official" calendar transitions from a Julian-style
	 * calendar to a Gregorian-style calendar on a different date for
	 * each country, as the governments of those countries decided to
	 * adopt the Gregorian calendar at different times.
	 *  
	 * <li><i>onLoad</i> - a callback function to call when the calendar object is fully 
	 * loaded. When the onLoad option is given, the calendar factory will attempt to
	 * load any missing locale data using the ilib loader callback.
	 * When the constructor is done (even if the data is already preassembled), the 
	 * onLoad function is called with the current instance as a parameter, so this
	 * callback can be used with preassembled or dynamic loading or a mix of the two.
	 * 
	 * <li><i>sync</i> - tell whether to load any missing locale data synchronously or 
	 * asynchronously. If this option is given as "false", then the "onLoad"
	 * callback must be given, as the instance returned from this constructor will
	 * not be usable for a while.
	 *  
	 * <li><i>loadParams</i> - an object containing parameters to pass to the 
	 * loader callback function when locale data is missing. The parameters are not
	 * interpretted or modified in any way. They are simply passed along. The object 
	 * may contain any property/value pairs as long as the calling code is in
	 * agreement with the loader callback function as to what those parameters mean.
	 * </ul>
	 * 
	 * If a locale is specified, but no type, then the calendar that is default for
	 * the locale will be instantiated and returned. If neither the type nor
	 * the locale are specified, then the calendar for the default locale will
	 * be used. 
	 * 
	 * @static
	 * @param {Object=} options options controlling the construction of this instance, or
	 * undefined to use the default options
	 * @return {Calendar} an instance of a calendar object of the appropriate type
	 */
	var CalendarFactory = function CalendarFactory(options) {
	  var locale,
	      type,
	      sync = true,
	      instance;

	  if (options) {
	    if (options.locale) {
	      locale = typeof options.locale === 'string' ? new Locale(options.locale) : options.locale;
	    }

	    type = options.type || options.calendar;

	    if (typeof options.sync === 'boolean') {
	      sync = options.sync;
	    }
	  }

	  if (!locale) {
	    locale = new Locale(); // default locale
	  }

	  if (!type) {
	    new LocaleInfo(locale, {
	      sync: sync,
	      loadParams: options && options.loadParams,
	      onLoad: ilib.bind(this, function (info) {
	        type = info.getCalendar();

	        instance = CalendarFactory._init(type, options);

	        if (options && typeof options.onLoad === 'function') {
	          options.onLoad(instance);
	        }
	      })
	    });
	  } else {
	    instance = CalendarFactory._init(type, options);
	  }

	  return instance;
	};

	/**
	 * Map calendar names to classes to initialize in the dynamic code model.
	 * TODO: Need to figure out some way that this doesn't have to be updated by hand.
	 * @private
	 */
	CalendarFactory._dynMap = {
	  "coptic": "Coptic",
	  "ethiopic": "Ethiopic",
	  "gregorian": "Gregorian",
	  "han": "Han",
	  "hebrew": "Hebrew",
	  "islamic": "Islamic",
	  "julian": "Julian",
	  "persian": "Persian",
	  "persian-algo": "PersianAlgo",
	  "thaisolar": "ThaiSolar"
	};

	/**
	 * Dynamically load the code for a calendar and calendar class if necessary.
	 * @protected
	 */
	CalendarFactory._dynLoadCalendar = function (name) {
	  if (!Calendar._constructors[name]) {
	    var entry = CalendarFactory._dynMap[name];
	    if (entry) {
	      Calendar._constructors[name] = __webpack_require__(287)("./" + entry + "Cal.js");
	    }
	  }
	  return Calendar._constructors[name];
	};

	/** @private */
	CalendarFactory._init = function (type, options) {
	  var cons;

	  if (ilib.isDynCode()) {
	    CalendarFactory._dynLoadCalendar(type);
	  }

	  cons = Calendar._constructors[type];

	  // pass the same options through to the constructor so the subclass
	  // has the ability to do something with if it needs to
	  return cons && new cons(options);
	};

	/**
	 * Return an array of known calendar types that the factory method can instantiate.
	 * 
	 * @return {Array.<string>} an array of calendar types
	 */
	CalendarFactory.getCalendars = function () {
	  var arr = [],
	      c;

	  if (ilib.isDynCode()) {
	    for (c in CalendarFactory._dynMap) {
	      CalendarFactory._dynLoadCalendar(c);
	    }
	  }

	  for (c in Calendar._constructors) {
	    if (c && Calendar._constructors[c]) {
	      arr.push(c); // code like a pirate
	    }
	  }

	  return arr;
	};

	module.exports = CalendarFactory;

/***/ },
/* 205 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	/*
	 * caseMapper.js - define upper- and lower-case mapper
	 * 
	 * Copyright Â© 2014-2015, JEDLSoft
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 *
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */

	// !depends Locale.js IString.js

	var ilib = __webpack_require__(2);

	var Locale = __webpack_require__(12);
	var IString = __webpack_require__(56);

	/**
	 * @class
	 * Create a new string mapper instance that maps strings to upper or
	 * lower case. This mapping will work for any string as characters 
	 * that have no case will be returned unchanged.<p>
	 * 
	 * The options may contain any of the following properties:
	 * 
	 * <ul>
	 * <li><i>locale</i> - locale to use when loading the mapper. Some maps are 
	 * locale-dependent, and this locale selects the right one. Default if this is
	 * not specified is the current locale.
	 * 
	 * <li><i>direction</i> - "toupper" for upper-casing, or "tolower" for lower-casing.
	 * Default if not specified is "toupper".
	 * </ul>
	 * 
	 * 
	 * @constructor
	 * @param {Object=} options options to initialize this mapper 
	 */
	var CaseMapper = function CaseMapper(options) {
		this.up = true;
		this.locale = new Locale();

		if (options) {
			if (typeof options.locale !== 'undefined') {
				this.locale = typeof options.locale === 'string' ? new Locale(options.locale) : options.locale;
			}

			this.up = !options.direction || options.direction === "toupper";
		}

		this.mapData = this.up ? {
			"Ã": "SS", // German
			'Î': 'Î', // Greek
			'Î¬': 'Î',
			'Î­': 'Î',
			'Î®': 'Î',
			'Î¯': 'Î',
			'Î°': 'Î¥',
			'Ï': 'Î',
			'Ï': 'Î¥',
			'Ï': 'Î',
			'Ï': 'Î¥',
			'Ï': 'Î©',
			'Ó': 'Ó', // Russian and slavic languages
			'Ó': 'Ó'
		} : {
			'Ó': 'Ó' // Russian and slavic languages
		};

		switch (this.locale.getLanguage()) {
			case "az":
			case "tr":
			case "crh":
			case "kk":
			case "krc":
			case "tt":
				var lower = "iÄ±";
				var upper = "Ä°I";
				this._setUpMap(lower, upper);
				break;
			case "fr":
				if (this.up && this.locale.getRegion() !== "CA") {
					this._setUpMap("Ã Ã¡Ã¢Ã£Ã¤Ã§Ã¨Ã©ÃªÃ«Ã¬Ã­Ã®Ã¯Ã±Ã²Ã³Ã´Ã¶Ã¹ÃºÃ»Ã¼", "AAAAACEEEEIIIINOOOOUUUU");
				}
				break;
		}

		if (ilib._getBrowser() === "ie") {
			// IE is missing these mappings for some reason
			if (this.up) {
				this.mapData['Ï'] = 'Î£';
			}
			this._setUpMap("â²â²â²â²â²â²â²â²â²â²â²â²â²â²â²â²â²¡â²£â²¥â²§â²©â²«â²­â²¯â²±â³â³â³", "â²â²â²â²â²â²â²â²â²â²â²â²â²â²â²â²â² â²¢â²¤â²¦â²¨â²ªâ²¬â²®â²°â³â³â³"); // Coptic
			// Georgian Nuskhuri <-> Asomtavruli
			this._setUpMap("â´â´â´â´â´â´â´â´â´â´â´â´â´â´â´â´â´â´â´â´â´â´â´â´â´â´â´â´â´â´â´â´â´ â´¡â´¢â´£â´¤â´¥", "á á¡á¢á£á¤á¥á¦á§á¨á©áªá«á¬á­á®á¯á°á±á²á³á´áµá¶á·á¸á¹áºá»á¼á½á¾á¿áááááá");
		}
	};

	CaseMapper.prototype = {
		/** 
	  * @private 
	  */
		_charMapper: function _charMapper(string) {
			if (!string) {
				return string;
			}
			var input = typeof string === 'string' ? new IString(string) : string.toString();
			var ret = "";
			var it = input.charIterator();
			var c;

			while (it.hasNext()) {
				c = it.next();
				if (!this.up && c === 'Î£') {
					if (it.hasNext()) {
						c = it.next();
						var code = c.charCodeAt(0);
						// if the next char is not a greek letter, this is the end of the word so use the
						// final form of sigma. Otherwise, use the mid-word form.
						ret += code < 0x0388 && code !== 0x0386 || code > 0x03CE ? 'Ï' : 'Ï';
						ret += c.toLowerCase();
					} else {
						// no next char means this is the end of the word, so use the final form of sigma
						ret += 'Ï';
					}
				} else {
					if (this.mapData[c]) {
						ret += this.mapData[c];
					} else {
						ret += this.up ? c.toUpperCase() : c.toLowerCase();
					}
				}
			}

			return ret;
		},

		/** @private */
		_setUpMap: function _setUpMap(lower, upper) {
			var from, to;
			if (this.up) {
				from = lower;
				to = upper;
			} else {
				from = upper;
				to = lower;
			}
			for (var i = 0; i < upper.length; i++) {
				this.mapData[from[i]] = to[i];
			}
		},

		/**
	  * Return the locale that this mapper was constructed with. 
	  * @returns {Locale} the locale that this mapper was constructed with
	  */
		getLocale: function getLocale() {
			return this.locale;
		},

		/**
	  * Map a string to lower case in a locale-sensitive manner.
	  * 
	  * @param {string|undefined} string
	  * @return {string|undefined}
	  */
		map: function map(string) {
			return this._charMapper(string);
		}
	};

	module.exports = CaseMapper;

/***/ },
/* 206 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	/*
	 * CopticDate.js - Represent a date in the Coptic calendar
	 * 
	 * Copyright Â© 2015, JEDLSoft
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 *
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */

	/* !depends 
	ilib.js
	IDate.js 
	CopticCal.js 
	MathUtils.js
	JSUtils.js
	Locale.js
	LocaleInfo.js 
	TimeZone.js
	EthiopicDate.js
	CopticRataDie.js
	*/

	var ilib = __webpack_require__(2);
	var MathUtils = __webpack_require__(6);
	var JSUtils = __webpack_require__(23);

	var Locale = __webpack_require__(12);
	var LocaleInfo = __webpack_require__(14);
	var IDate = __webpack_require__(21);
	var TimeZone = __webpack_require__(24);
	var Calendar = __webpack_require__(9);

	var EthiopicDate = __webpack_require__(113);
	var CopticCal = __webpack_require__(74);
	var CopticRataDie = __webpack_require__(207);

	/**
	 * @class
	 * Construct a new date object for the Coptic Calendar. The constructor can be called
	 * with a parameter object that contains any of the following properties:
	 * 
	 * <ul>
	 * <li><i>unixtime<i> - sets the time of this instance according to the given 
	 * unix time. Unix time is the number of milliseconds since midnight on Jan 1, 1970 (Gregorian).
	 * <li><i>julianday</i> - the Julian Day to set into this date
	 * <li><i>year</i> - any integer
	 * <li><i>month</i> - 1 to 13, where 1 means Thoout, 2 means Paope, etc., and 13 means Epagomene
	 * <li><i>day</i> - 1 to 30
	 * <li><i>hour</i> - 0 to 23. A formatter is used to display 12 hour clocks, but this representation 
	 * is always done with an unambiguous 24 hour representation
	 * <li><i>minute</i> - 0 to 59
	 * <li><i>second</i> - 0 to 59
	 * <li><i>millisecond<i> - 0 to 999
	 * <li><i>locale</i> - the TimeZone instance or time zone name as a string 
	 * of this coptic date. The date/time is kept in the local time. The time zone
	 * is used later if this date is formatted according to a different time zone and
	 * the difference has to be calculated, or when the date format has a time zone
	 * component in it.
	 * <li><i>timezone</i> - the time zone of this instance. If the time zone is not 
	 * given, it can be inferred from this locale. For locales that span multiple
	 * time zones, the one with the largest population is chosen as the one that 
	 * represents the locale. 
	 * 
	 * <li><i>date</i> - use the given intrinsic Javascript date to initialize this one.
	 * </ul>
	 *  
	 * If called with another Coptic date argument, the date components of the given
	 * date are copied into the current one.<p>
	 * 
	 * If the constructor is called with no arguments at all or if none of the 
	 * properties listed above 
	 * from <i>unixtime</i> through <i>millisecond</i> are present, then the date 
	 * components are 
	 * filled in with the current date at the time of instantiation. Note that if
	 * you do not give the time zone when defaulting to the current time and the 
	 * time zone for all of ilib was not set with <i>ilib.setTimeZone()</i>, then the
	 * time zone will default to UTC ("Universal Time, Coordinated" or "Greenwich 
	 * Mean Time").<p>
	 * 
	 * 
	 * @constructor
	 * @extends EthiopicDate
	 * @param {Object=} params parameters that govern the settings and behaviour of this Coptic date
	 */
	var CopticDate = function CopticDate(params) {
	  this.rd = undefined; // clear these out so that the EthiopicDate constructor can set it
	  EthiopicDate.call(this, params);
	  this.cal = new CopticCal();
	};

	CopticDate.prototype = new EthiopicDate({ noinstance: true });
	CopticDate.prototype.parent = EthiopicDate.prototype;
	CopticDate.prototype.constructor = CopticDate;

	/**
	 * Return a new RD for this date type using the given params.
	 * @protected
	 * @param {Object=} params the parameters used to create this rata die instance
	 * @returns {RataDie} the new RD instance for the given params
	 */
	CopticDate.prototype.newRd = function (params) {
	  return new CopticRataDie(params);
	};

	/**
	 * Return the day of the week of this date. The day of the week is encoded
	 * as number from 0 to 6, with 0=Sunday, 1=Monday, etc., until 6=Saturday.
	 * 
	 * @return {number} the day of the week
	 */
	CopticDate.prototype.getDayOfWeek = function () {
	  var rd = Math.floor(this.rd.getRataDie() + (this.offset || 0));
	  return MathUtils.mod(rd - 3, 7);
	};

	/**
	 * Return the name of the calendar that governs this date.
	 * 
	 * @return {string} a string giving the name of the calendar
	 */
	CopticDate.prototype.getCalendar = function () {
	  return "coptic";
	};

	//register with the factory method
	IDate._constructors["coptic"] = CopticDate;

	module.exports = CopticDate;

/***/ },
/* 207 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	/*
	 * CopticRataDie.js - Represent an RD date in the Coptic calendar
	 * 
	 * Copyright Â© 2015, JEDLSoft
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 *
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */

	/* !depends 
	ilib.js
	CopticCal.js 
	JSUtils.js
	EthiopicRataDie.js
	*/

	var ilib = __webpack_require__(2);
	var JSUtils = __webpack_require__(23);
	var CopticCal = __webpack_require__(74);
	var EthiopicRataDie = __webpack_require__(114);

	/**
	 * @class
	 * Construct a new Coptic RD date number object. The constructor parameters can 
	 * contain any of the following properties:
	 * 
	 * <ul>
	 * <li><i>unixtime<i> - sets the time of this instance according to the given 
	 * unix time. Unix time is the number of milliseconds since midnight on Jan 1, 1970.
	 * 
	 * <li><i>julianday</i> - sets the time of this instance according to the given
	 * Julian Day instance or the Julian Day given as a float
	 * 
	 * <li><i>year</i> - any integer, including 0
	 * 
	 * <li><i>month</i> - 1 to 13, where 1 means Thoout, 2 means Paope, etc., and 13 means Epagomene
	 * 
	 * <li><i>day</i> - 1 to 30
	 * 
	 * <li><i>hour</i> - 0 to 23. A formatter is used to display 12 hour clocks, but this representation 
	 * is always done with an unambiguous 24 hour representation
	 * 
	 * <li><i>minute</i> - 0 to 59
	 * 
	 * <li><i>second</i> - 0 to 59
	 * 
	 * <li><i>millisecond</i> - 0 to 999
	 * 
	 * <li><i>date</i> - use the given intrinsic Javascript date to initialize this one.
	 * </ul>
	 *
	 * If the constructor is called with another Coptic date instance instead of
	 * a parameter block, the other instance acts as a parameter block and its
	 * settings are copied into the current instance.<p>
	 * 
	 * If the constructor is called with no arguments at all or if none of the 
	 * properties listed above are present, then the RD is calculate based on 
	 * the current date at the time of instantiation. <p>
	 * 
	 * If any of the properties from <i>year</i> through <i>millisecond</i> are not
	 * specified in the params, it is assumed that they have the smallest possible
	 * value in the range for the property (zero or one).<p>
	 * 
	 * 
	 * @private
	 * @constructor
	 * @extends EthiopicRataDie
	 * @param {Object=} params parameters that govern the settings and behaviour of this Coptic RD date
	 */
	var CopticRataDie = function CopticRataDie(params) {
	  this.cal = params && params.cal || new CopticCal();
	  this.rd = undefined;
	  /**
	   * The difference between the zero Julian day and the first Coptic date
	   * of Friday, August 29, 284 CE Julian at 7:00am UTC. 
	   * @private
	   * @const
	   * @type number
	   */
	  this.epoch = 1825028.5;

	  var tmp = {};
	  if (params) {
	    JSUtils.shallowCopy(params, tmp);
	  }
	  tmp.cal = this.cal; // override the cal parameter that may be passed in
	  EthiopicRataDie.call(this, tmp);
	};

	CopticRataDie.prototype = new EthiopicRataDie();
	CopticRataDie.prototype.parent = EthiopicRataDie;
	CopticRataDie.prototype.constructor = CopticRataDie;

	module.exports = CopticRataDie;

/***/ },
/* 208 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	/*
	 * HanDate.js - Represent a date in the Han algorithmic calendar
	 * 
	 * Copyright Â© 2014-2015, JEDLSoft
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 *
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */

	/* !depends
	ilib.js
	IDate.js
	GregorianDate.js 
	HanCal.js
	Astro.js 
	JSUtils.js
	MathUtils.js
	LocaleInfo.js 
	Locale.js
	TimeZone.js
	HanRataDie.js
	RataDie.js
	*/

	var ilib = __webpack_require__(2);
	var JSUtils = __webpack_require__(23);
	var MathUtils = __webpack_require__(6);

	var Locale = __webpack_require__(12);
	var LocaleInfo = __webpack_require__(14);
	var IDate = __webpack_require__(21);
	var TimeZone = __webpack_require__(24);
	var Calendar = __webpack_require__(9);

	var Astro = __webpack_require__(53);
	var HanCal = __webpack_require__(75);
	var GregorianDate = __webpack_require__(30);
	var HanRataDie = __webpack_require__(209);
	var RataDie = __webpack_require__(17);

	/**
	 * @class
	 * 
	 * Construct a new Han date object. The constructor parameters can 
	 * contain any of the following properties:
	 * 
	 * <ul>
	 * <li><i>unixtime<i> - sets the time of this instance according to the given 
	 * unix time. Unix time is the number of milliseconds since midnight on Jan 1, 1970, Gregorian
	 * 
	 * <li><i>julianday</i> - sets the time of this instance according to the given
	 * Julian Day instance or the Julian Day given as a float
	 * 
	 * <li><i>cycle</i> - any integer giving the number of 60-year cycle in which the date is located.
	 * If the cycle is not given but the year is, it is assumed that the year parameter is a fictitious 
	 * linear count of years since the beginning of the epoch, much like other calendars. This linear
	 * count is never used. If both the cycle and year are given, the year is wrapped to the range 0 
	 * to 60 and treated as if it were a year in the regular 60-year cycle.
	 * 
	 * <li><i>year</i> - any integer, including 0
	 * 
	 * <li><i>month</i> - 1 to 12, where 1 means Farvardin, 2 means Ordibehesht, etc.
	 * 
	 * <li><i>day</i> - 1 to 31
	 * 
	 * <li><i>hour</i> - 0 to 23. A formatter is used to display 12 hour clocks, but this representation 
	 * is always done with an unambiguous 24 hour representation
	 * 
	 * <li><i>minute</i> - 0 to 59
	 * 
	 * <li><i>second</i> - 0 to 59
	 * 
	 * <li><i>millisecond</i> - 0 to 999
	 * 
	 * <li><i>timezone</i> - the TimeZone instance or time zone name as a string 
	 * of this han date. The date/time is kept in the local time. The time zone
	 * is used later if this date is formatted according to a different time zone and
	 * the difference has to be calculated, or when the date format has a time zone
	 * component in it.
	 * 
	 * <li><i>locale</i> - locale for this han date. If the time zone is not 
	 * given, it can be inferred from this locale. For locales that span multiple
	 * time zones, the one with the largest population is chosen as the one that 
	 * represents the locale.
	 * 
	 * <li><i>date</i> - use the given intrinsic Javascript date to initialize this one.
	 * </ul>
	 *
	 * If the constructor is called with another Han date instance instead of
	 * a parameter block, the other instance acts as a parameter block and its
	 * settings are copied into the current instance.<p>
	 * 
	 * If the constructor is called with no arguments at all or if none of the 
	 * properties listed above 
	 * from <i>unixtime</i> through <i>millisecond</i> are present, then the date 
	 * components are 
	 * filled in with the current date at the time of instantiation. Note that if
	 * you do not give the time zone when defaulting to the current time and the 
	 * time zone for all of ilib was not set with <i>ilib.setTimeZone()</i>, then the
	 * time zone will default to UTC ("Universal Time, Coordinated" or "Greenwich 
	 * Mean Time").<p>
	 * 
	 * If any of the properties from <i>year</i> through <i>millisecond</i> are not
	 * specified in the params, it is assumed that they have the smallest possible
	 * value in the range for the property (zero or one).<p>
	 * 
	 * 
	 * @constructor
	 * @extends Date
	 * @param {Object=} params parameters that govern the settings and behaviour of this Han date
	 */
	var HanDate = function HanDate(params) {
	  this.timezone = "local";
	  if (params) {
	    if (params.locale) {
	      this.locale = typeof params.locale === 'string' ? new Locale(params.locale) : params.locale;
	      var li = new LocaleInfo(this.locale);
	      this.timezone = li.getTimeZone();
	    }
	    if (params.timezone) {
	      this.timezone = params.timezone;
	    }
	  }

	  new HanCal({
	    sync: params && typeof params === 'boolean' ? params.sync : true,
	    loadParams: params && params.loadParams,
	    callback: ilib.bind(this, function (cal) {
	      this.cal = cal;

	      if (params && (params.year || params.month || params.day || params.hour || params.minute || params.second || params.millisecond || params.cycle || params.cycleYear)) {
	        if (typeof params.cycle !== 'undefined') {
	          /**
	           * Cycle number in the Han calendar.
	           * @type number
	           */
	          this.cycle = parseInt(params.cycle, 10) || 0;

	          var year = (typeof params.year !== 'undefined' ? parseInt(params.year, 10) : parseInt(params.cycleYear, 10)) || 0;

	          /**
	           * Year in the Han calendar.
	           * @type number
	           */
	          this.year = HanCal._getElapsedYear(year, this.cycle);
	        } else {
	          if (typeof params.year !== 'undefined') {
	            this.year = parseInt(params.year, 10) || 0;
	            this.cycle = Math.floor((this.year - 1) / 60);
	          } else {
	            this.year = this.cycle = 0;
	          }
	        }

	        /**
	         * The month number, ranging from 1 to 13
	         * @type number
	         */
	        this.month = parseInt(params.month, 10) || 1;

	        /**
	         * The day of the month. This ranges from 1 to 30.
	         * @type number
	         */
	        this.day = parseInt(params.day, 10) || 1;

	        /**
	         * The hour of the day. This can be a number from 0 to 23, as times are
	         * stored unambiguously in the 24-hour clock.
	         * @type number
	         */
	        this.hour = parseInt(params.hour, 10) || 0;

	        /**
	         * The minute of the hours. Ranges from 0 to 59.
	         * @type number
	         */
	        this.minute = parseInt(params.minute, 10) || 0;

	        /**
	         * The second of the minute. Ranges from 0 to 59.
	         * @type number
	         */
	        this.second = parseInt(params.second, 10) || 0;

	        /**
	         * The millisecond of the second. Ranges from 0 to 999.
	         * @type number
	         */
	        this.millisecond = parseInt(params.millisecond, 10) || 0;

	        // derived properties

	        /**
	         * Year in the cycle of the Han calendar
	         * @type number
	         */
	        this.cycleYear = MathUtils.amod(this.year, 60);

	        /**
	         * The day of the year. Ranges from 1 to 384.
	         * @type number
	         */
	        this.dayOfYear = parseInt(params.dayOfYear, 10);

	        if (typeof params.dst === 'boolean') {
	          this.dst = params.dst;
	        }

	        this.newRd({
	          cal: this.cal,
	          cycle: this.cycle,
	          year: this.year,
	          month: this.month,
	          day: this.day,
	          hour: this.hour,
	          minute: this.minute,
	          second: this.second,
	          millisecond: this.millisecond,
	          sync: params && typeof params.sync === 'boolean' ? params.sync : true,
	          loadParams: params && params.loadParams,
	          callback: ilib.bind(this, function (rd) {
	            if (rd) {
	              this.rd = rd;

	              // add the time zone offset to the rd to convert to UTC
	              if (!this.tz) {
	                this.tz = new TimeZone({ id: this.timezone });
	              }
	              // getOffsetMillis requires that this.year, this.rd, and this.dst 
	              // are set in order to figure out which time zone rules apply and 
	              // what the offset is at that point in the year
	              this.offset = this.tz._getOffsetMillisWallTime(this) / 86400000;
	              if (this.offset !== 0) {
	                this.rd = this.newRd({
	                  cal: this.cal,
	                  rd: this.rd.getRataDie() - this.offset
	                });
	                this._calcLeap();
	              } else {
	                // re-use the derived properties from the RD calculations
	                this.leapMonth = this.rd.leapMonth;
	                this.priorLeapMonth = this.rd.priorLeapMonth;
	                this.leapYear = this.rd.leapYear;
	              }
	            }

	            if (!this.rd) {
	              this.rd = this.newRd(JSUtils.merge(params || {}, {
	                cal: this.cal
	              }));
	              this._calcDateComponents();
	            }

	            if (params && typeof params.onLoad === 'function') {
	              params.onLoad(this);
	            }
	          })
	        });
	      } else {
	        if (!this.rd) {
	          this.rd = this.newRd(JSUtils.merge(params || {}, {
	            cal: this.cal
	          }));
	          this._calcDateComponents();
	        }

	        if (params && typeof params.onLoad === 'function') {
	          params.onLoad(this);
	        }
	      }
	    })
	  });
	};

	HanDate.prototype = new IDate({ noinstance: true });
	HanDate.prototype.parent = IDate;
	HanDate.prototype.constructor = HanDate;

	/**
	 * Return a new RD for this date type using the given params.
	 * @protected
	 * @param {Object=} params the parameters used to create this rata die instance
	 * @returns {RataDie} the new RD instance for the given params
	 */
	HanDate.prototype.newRd = function (params) {
	  return new HanRataDie(params);
	};

	/**
	 * Return the year for the given RD
	 * @protected
	 * @param {number} rd RD to calculate from 
	 * @returns {number} the year for the RD
	 */
	HanDate.prototype._calcYear = function (rd) {
	  var gregdate = new GregorianDate({
	    rd: rd,
	    timezone: this.timezone
	  });
	  var hanyear = gregdate.year + 2697;
	  var newYears = this.cal.newYears(hanyear);
	  return hanyear - (rd + RataDie.gregorianEpoch < newYears ? 1 : 0);
	};

	/** 
	 * @private 
	 * Calculate the leap year and months from the RD.
	 */
	HanDate.prototype._calcLeap = function () {
	  var jd = this.rd.getRataDie() + RataDie.gregorianEpoch;

	  var calc = HanCal._leapYearCalc(this.year);
	  var m2 = HanCal._newMoonOnOrAfter(calc.m1 + 1);
	  this.leapYear = Math.round((calc.m2 - calc.m1) / 29.530588853000001) === 12;

	  var newYears = this.leapYear && (HanCal._noMajorST(calc.m1) || HanCal._noMajorST(m2)) ? HanCal._newMoonOnOrAfter(m2 + 1) : m2;

	  var m = HanCal._newMoonBefore(jd + 1);
	  this.priorLeapMonth = HanRataDie._priorLeapMonth(newYears, HanCal._newMoonBefore(m));
	  this.leapMonth = this.leapYear && HanCal._noMajorST(m) && !this.priorLeapMonth;
	};

	/**
	 * @private
	 * Calculate date components for the given RD date.
	 */
	HanDate.prototype._calcDateComponents = function () {
	  var remainder,
	      jd = this.rd.getRataDie() + RataDie.gregorianEpoch;

	  // console.log("HanDate._calcDateComponents: calculating for jd " + jd);

	  if (typeof this.offset === "undefined") {
	    // now offset the jd by the time zone, then recalculate in case we were 
	    // near the year boundary
	    if (!this.tz) {
	      this.tz = new TimeZone({ id: this.timezone });
	    }
	    this.offset = this.tz.getOffsetMillis(this) / 86400000;
	  }

	  if (this.offset !== 0) {
	    jd += this.offset;
	  }

	  // use the Gregorian calendar objects as a convenient way to short-cut some
	  // of the date calculations

	  var gregyear = GregorianDate._calcYear(this.rd.getRataDie());
	  this.year = gregyear + 2697;
	  var calc = HanCal._leapYearCalc(this.year);
	  var m2 = HanCal._newMoonOnOrAfter(calc.m1 + 1);
	  this.leapYear = Math.round((calc.m2 - calc.m1) / 29.530588853000001) === 12;
	  var newYears = this.leapYear && (HanCal._noMajorST(calc.m1) || HanCal._noMajorST(m2)) ? HanCal._newMoonOnOrAfter(m2 + 1) : m2;

	  // See if it's between Jan 1 and the Chinese new years of that Gregorian year. If
	  // so, then the Han year is actually the previous one
	  if (jd < newYears) {
	    this.year--;
	    calc = HanCal._leapYearCalc(this.year);
	    m2 = HanCal._newMoonOnOrAfter(calc.m1 + 1);
	    this.leapYear = Math.round((calc.m2 - calc.m1) / 29.530588853000001) === 12;
	    newYears = this.leapYear && (HanCal._noMajorST(calc.m1) || HanCal._noMajorST(m2)) ? HanCal._newMoonOnOrAfter(m2 + 1) : m2;
	  }
	  // month is elapsed month, not the month number + leap month boolean
	  var m = HanCal._newMoonBefore(jd + 1);
	  this.month = Math.round((m - calc.m1) / 29.530588853000001);

	  this.priorLeapMonth = HanRataDie._priorLeapMonth(newYears, HanCal._newMoonBefore(m));
	  this.leapMonth = this.leapYear && HanCal._noMajorST(m) && !this.priorLeapMonth;

	  this.cycle = Math.floor((this.year - 1) / 60);
	  this.cycleYear = MathUtils.amod(this.year, 60);
	  this.day = Astro._floorToJD(jd) - m + 1;

	  /*
	  console.log("HanDate._calcDateComponents: year is " + this.year);
	  console.log("HanDate._calcDateComponents: isLeapYear is " + this.leapYear);
	  console.log("HanDate._calcDateComponents: cycle is " + this.cycle);
	  console.log("HanDate._calcDateComponents: cycleYear is " + this.cycleYear);
	  console.log("HanDate._calcDateComponents: month is " + this.month);
	  console.log("HanDate._calcDateComponents: isLeapMonth is " + this.leapMonth);
	  console.log("HanDate._calcDateComponents: day is " + this.day);
	  */

	  // floor to the start of the julian day
	  remainder = jd - Astro._floorToJD(jd);

	  // console.log("HanDate._calcDateComponents: time remainder is " + remainder);

	  // now convert to milliseconds for the rest of the calculation
	  remainder = Math.round(remainder * 86400000);

	  this.hour = Math.floor(remainder / 3600000);
	  remainder -= this.hour * 3600000;

	  this.minute = Math.floor(remainder / 60000);
	  remainder -= this.minute * 60000;

	  this.second = Math.floor(remainder / 1000);
	  remainder -= this.second * 1000;

	  this.millisecond = remainder;
	};

	/**
	 * Return the year within the Chinese cycle of this date. Cycles are 60 
	 * years long, and the value returned from this method is the number of the year 
	 * within this cycle. The year returned from getYear() is the total elapsed 
	 * years since the beginning of the Chinese epoch and does not include 
	 * the cycles. 
	 * 
	 * @return {number} the year within the current Chinese cycle
	 */
	HanDate.prototype.getCycleYears = function () {
	  return this.cycleYear;
	};

	/**
	 * Return the Chinese cycle number of this date. Cycles are 60 years long,
	 * and the value returned from getCycleYear() is the number of the year 
	 * within this cycle. The year returned from getYear() is the total elapsed 
	 * years since the beginning of the Chinese epoch and does not include 
	 * the cycles. 
	 * 
	 * @return {number} the current Chinese cycle
	 */
	HanDate.prototype.getCycles = function () {
	  return this.cycle;
	};

	/**
	 * Return whether the year of this date is a leap year in the Chinese Han 
	 * calendar. 
	 * 
	 * @return {boolean} true if the year of this date is a leap year in the 
	 * Chinese Han calendar. 
	 */
	HanDate.prototype.isLeapYear = function () {
	  return this.leapYear;
	};

	/**
	 * Return whether the month of this date is a leap month in the Chinese Han 
	 * calendar.
	 * 
	 * @return {boolean} true if the month of this date is a leap month in the 
	 * Chinese Han calendar.
	 */
	HanDate.prototype.isLeapMonth = function () {
	  return this.leapMonth;
	};

	/**
	 * Return the day of the week of this date. The day of the week is encoded
	 * as number from 0 to 6, with 0=Sunday, 1=Monday, etc., until 6=Saturday.
	 * 
	 * @return {number} the day of the week
	 */
	HanDate.prototype.getDayOfWeek = function () {
	  var rd = Math.floor(this.rd.getRataDie() + (this.offset || 0));
	  return MathUtils.mod(rd, 7);
	};

	/**
	 * Return the ordinal day of the year. Days are counted from 1 and proceed linearly up to 
	 * 365, regardless of months or weeks, etc. That is, Farvardin 1st is day 1, and 
	 * December 31st is 365 in regular years, or 366 in leap years.
	 * @return {number} the ordinal day of the year
	 */
	HanDate.prototype.getDayOfYear = function () {
	  var newYears = this.cal.newYears(this.year);
	  var priorNewMoon = HanCal._newMoonOnOrAfter(newYears + (this.month - 1) * 29);
	  return priorNewMoon - newYears + this.day;
	};

	/**
	 * Return the era for this date as a number. The value for the era for Han 
	 * calendars is -1 for "before the han era" (BP) and 1 for "the han era" (anno 
	 * persico or AP). 
	 * BP dates are any date before Farvardin 1, 1 AP. In the proleptic Han calendar, 
	 * there is a year 0, so any years that are negative or zero are BP.
	 * @return {number} 1 if this date is in the common era, -1 if it is before the 
	 * common era 
	 */
	HanDate.prototype.getEra = function () {
	  return this.year < 1 ? -1 : 1;
	};

	/**
	 * Return the name of the calendar that governs this date.
	 * 
	 * @return {string} a string giving the name of the calendar
	 */
	HanDate.prototype.getCalendar = function () {
	  return "han";
	};

	// register with the factory method
	IDate._constructors["han"] = HanDate;

	module.exports = HanDate;

/***/ },
/* 209 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	/*
	 * HanDate.js - Represent a date in the Han algorithmic calendar
	 * 
	 * Copyright Â© 2014-2015, JEDLSoft
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 *
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */

	/* !depends
	ilib.js
	HanCal.js
	MathUtils.js
	RataDie.js
	*/

	var ilib = __webpack_require__(2);
	var MathUtils = __webpack_require__(6);
	var HanCal = __webpack_require__(75);
	var RataDie = __webpack_require__(17);

	/**
	 * Construct a new Han RD date number object. The constructor parameters can 
	 * contain any of the following properties:
	 * 
	 * <ul>
	 * <li><i>unixtime<i> - sets the time of this instance according to the given 
	 * unix time. Unix time is the number of milliseconds since midnight on Jan 1, 1970, Gregorian
	 * 
	 * <li><i>julianday</i> - sets the time of this instance according to the given
	 * Julian Day instance or the Julian Day given as a float
	 * 
	 * <li><i>cycle</i> - any integer giving the number of 60-year cycle in which the date is located.
	 * If the cycle is not given but the year is, it is assumed that the year parameter is a fictitious 
	 * linear count of years since the beginning of the epoch, much like other calendars. This linear
	 * count is never used. If both the cycle and year are given, the year is wrapped to the range 0 
	 * to 60 and treated as if it were a year in the regular 60-year cycle.
	 * 
	 * <li><i>year</i> - any integer, including 0
	 * 
	 * <li><i>month</i> - 1 to 12, where 1 means Farvardin, 2 means Ordibehesht, etc.
	 * 
	 * <li><i>day</i> - 1 to 31
	 * 
	 * <li><i>hour</i> - 0 to 23. A formatter is used to display 12 hour clocks, but this representation 
	 * is always done with an unambiguous 24 hour representation
	 * 
	 * <li><i>minute</i> - 0 to 59
	 * 
	 * <li><i>second</i> - 0 to 59
	 * 
	 * <li><i>millisecond</i> - 0 to 999
	 * 
	 * <li><i>date</i> - use the given intrinsic Javascript date to initialize this one.
	 * </ul>
	 *
	 * If the constructor is called with another Han date instance instead of
	 * a parameter block, the other instance acts as a parameter block and its
	 * settings are copied into the current instance.<p>
	 * 
	 * If the constructor is called with no arguments at all or if none of the 
	 * properties listed above are present, then the RD is calculate based on 
	 * the current date at the time of instantiation. <p>
	 * 
	 * If any of the properties from <i>year</i> through <i>millisecond</i> are not
	 * specified in the params, it is assumed that they have the smallest possible
	 * value in the range for the property (zero or one).<p>
	 * 
	 * 
	 * @private
	 * @class
	 * @constructor
	 * @extends RataDie
	 * @param {Object=} params parameters that govern the settings and behaviour of this Han RD date
	 */
	var HanRataDie = function HanRataDie(params) {
	  this.rd = undefined;
	  if (params && params.cal) {
	    this.cal = params.cal;
	    RataDie.call(this, params);
	    if (params && typeof params.callback === 'function') {
	      params.callback(this);
	    }
	  } else {
	    new HanCal({
	      sync: params && params.sync,
	      loadParams: params && params.loadParams,
	      callback: ilib.bind(this, function (c) {
	        this.cal = c;
	        RataDie.call(this, params);
	        if (params && typeof params.callback === 'function') {
	          params.callback(this);
	        }
	      })
	    });
	  }
	};

	HanRataDie.prototype = new RataDie();
	HanRataDie.prototype.parent = RataDie;
	HanRataDie.prototype.constructor = HanRataDie;

	/**
	 * The difference between a zero Julian day and the first Han date
	 * which is February 15, -2636 (Gregorian).
	 * @private
	 * @const
	 * @type number
	 */
	HanRataDie.epoch = 758325.5;

	/**
	 * Calculate the Rata Die (fixed day) number of the given date from the
	 * date components.
	 *
	 * @protected
	 * @param {Object} date the date components to calculate the RD from
	 */
	HanRataDie.prototype._setDateComponents = function (date) {
	  var calc = HanCal._leapYearCalc(date.year, date.cycle);
	  var m2 = HanCal._newMoonOnOrAfter(calc.m1 + 1);
	  var newYears;
	  this.leapYear = Math.round((calc.m2 - calc.m1) / 29.530588853000001) === 12;
	  if (this.leapYear && (HanCal._noMajorST(calc.m1) || HanCal._noMajorST(m2))) {
	    newYears = HanCal._newMoonOnOrAfter(m2 + 1);
	  } else {
	    newYears = m2;
	  }

	  var priorNewMoon = HanCal._newMoonOnOrAfter(calc.m1 + date.month * 29); // this is a julian day
	  this.priorLeapMonth = HanRataDie._priorLeapMonth(newYears, HanCal._newMoonBefore(priorNewMoon));
	  this.leapMonth = this.leapYear && HanCal._noMajorST(priorNewMoon) && !this.priorLeapMonth;

	  var rdtime = (date.hour * 3600000 + date.minute * 60000 + date.second * 1000 + date.millisecond) / 86400000;

	  /*
	  console.log("getRataDie: converting " +  JSON.stringify(date) + " to an RD");
	  console.log("getRataDie: year is " +  date.year + " plus cycle " + date.cycle);
	  console.log("getRataDie: isLeapYear is " +  this.leapYear);
	  console.log("getRataDie: priorNewMoon is " +  priorNewMoon);
	  console.log("getRataDie: day in month is " +  date.day);
	  console.log("getRataDie: rdtime is " +  rdtime);
	  console.log("getRataDie: rd is " +  (priorNewMoon + date.day - 1 + rdtime));
	  */

	  this.rd = priorNewMoon + date.day - 1 + rdtime - RataDie.gregorianEpoch;
	};

	/**
	 * Return the rd number of the particular day of the week on or before the 
	 * given rd. eg. The Sunday on or before the given rd.
	 * @private
	 * @param {number} rd the rata die date of the reference date
	 * @param {number} dayOfWeek the day of the week that is being sought relative 
	 * to the current date
	 * @return {number} the rd of the day of the week
	 */
	HanRataDie.prototype._onOrBefore = function (rd, dayOfWeek) {
	  return rd - MathUtils.mod(Math.floor(rd) - dayOfWeek, 7);
	};

	/**
	 * @protected
	 * @static
	 * @param {number} jd1 first julian day
	 * @param {number} jd2 second julian day
	 * @returns {boolean} true if there is a leap month earlier in the same year 
	 * as the given months 
	 */
	HanRataDie._priorLeapMonth = function (jd1, jd2) {
	  return jd2 >= jd1 && (HanRataDie._priorLeapMonth(jd1, HanCal._newMoonBefore(jd2)) || HanCal._noMajorST(jd2));
	};

	module.exports = HanRataDie;

/***/ },
/* 210 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	/*
	 * HebrewDate.js - Represent a date in the Hebrew calendar
	 * 
	 * Copyright Â© 2012-2015, JEDLSoft
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 *
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */

	/* !depends 
	ilib.js
	Locale.js
	LocaleInfo.js
	TimeZone.js
	IDate.js
	MathUtils.js
	Calendar.js
	HebrewCal.js
	HebrewRataDie.js
	*/

	var ilib = __webpack_require__(2);
	var MathUtils = __webpack_require__(6);

	var Locale = __webpack_require__(12);
	var LocaleInfo = __webpack_require__(14);
	var IDate = __webpack_require__(21);
	var TimeZone = __webpack_require__(24);
	var Calendar = __webpack_require__(9);

	var HebrewCal = __webpack_require__(76);
	var HebrewRataDie = __webpack_require__(211);

	/**
	 * @class
	 * Construct a new civil Hebrew date object. The constructor can be called
	 * with a params object that can contain the following properties:<p>
	 * 
	 * <ul>
	 * <li><i>julianday</i> - the Julian Day to set into this date
	 * <li><i>year</i> - any integer except 0. Years go from -1 (BCE) to 1 (CE), skipping the zero year
	 * <li><i>month</i> - 1 to 12, where 1 means Nisan, 2 means Iyyar, etc.
	 * <li><i>day</i> - 1 to 30
	 * <li><i>hour</i> - 0 to 23. A formatter is used to display 12 hour clocks, but this representation 
	 * is always done with an unambiguous 24 hour representation
	 * <li><i>parts</i> - 0 to 1079. Specify the halaqim parts of an hour. Either specify 
	 * the parts or specify the minutes, seconds, and milliseconds, but not both. 
	 * <li><i>minute</i> - 0 to 59
	 * <li><i>second</i> - 0 to 59
	 * <li><i>millisecond</i> - 0 to 999
	 * <li><i>locale</i> - the TimeZone instance or time zone name as a string 
	 * of this julian date. The date/time is kept in the local time. The time zone
	 * is used later if this date is formatted according to a different time zone and
	 * the difference has to be calculated, or when the date format has a time zone
	 * component in it.
	 * <li><i>timezone</i> - the time zone of this instance. If the time zone is not 
	 * given, it can be inferred from this locale. For locales that span multiple
	 * time zones, the one with the largest population is chosen as the one that 
	 * represents the locale. 
	 * 
	 * <li><i>date</i> - use the given intrinsic Javascript date to initialize this one.
	 * </ul>
	 * 
	 * If called with another Hebrew date argument, the date components of the given
	 * date are copied into the current one.<p>
	 * 
	 * If the constructor is called with no arguments at all or if none of the 
	 * properties listed above 
	 * from <i>julianday</i> through <i>millisecond</i> are present, then the date 
	 * components are 
	 * filled in with the current date at the time of instantiation. Note that if
	 * you do not give the time zone when defaulting to the current time and the 
	 * time zone for all of ilib was not set with <i>ilib.setTimeZone()</i>, then the
	 * time zone will default to UTC ("Universal Time, Coordinated" or "Greenwich 
	 * Mean Time").<p>
	 * 
	 * 
	 * @constructor
	 * @extends IDate
	 * @param {Object=} params parameters that govern the settings and behaviour of this Hebrew date
	 */
	var HebrewDate = function HebrewDate(params) {
		this.cal = new HebrewCal();

		if (params) {
			if (params.timezone) {
				this.timezone = params.timezone;
			}
			if (params.locale) {
				this.locale = typeof params.locale === 'string' ? new Locale(params.locale) : params.locale;
				if (!this.timezone) {
					var li = new LocaleInfo(this.locale);
					this.timezone = li.getTimeZone();
				}
			}

			if (params.year || params.month || params.day || params.hour || params.minute || params.second || params.millisecond || params.parts) {
				/**
	    * Year in the Hebrew calendar.
	    * @type number
	    */
				this.year = parseInt(params.year, 10) || 0;

				/**
	    * The month number, ranging from 1 to 13.
	    * @type number
	    */
				this.month = parseInt(params.month, 10) || 1;

				/**
	    * The day of the month. This ranges from 1 to 30.
	    * @type number
	    */
				this.day = parseInt(params.day, 10) || 1;

				/**
	    * The hour of the day. This can be a number from 0 to 23, as times are
	    * stored unambiguously in the 24-hour clock.
	    * @type number
	    */
				this.hour = parseInt(params.hour, 10) || 0;

				if (typeof params.parts !== 'undefined') {
					/**
	     * The parts (halaqim) of the hour. This can be a number from 0 to 1079.
	     * @type number
	     */
					this.parts = parseInt(params.parts, 10);
					var seconds = parseInt(params.parts, 10) * 3.333333333333;
					this.minute = Math.floor(seconds / 60);
					seconds -= this.minute * 60;
					this.second = Math.floor(seconds);
					this.millisecond = seconds - this.second;
				} else {
					/**
	     * The minute of the hours. Ranges from 0 to 59.
	     * @type number
	     */
					this.minute = parseInt(params.minute, 10) || 0;

					/**
	     * The second of the minute. Ranges from 0 to 59.
	     * @type number
	     */
					this.second = parseInt(params.second, 10) || 0;

					/**
	     * The millisecond of the second. Ranges from 0 to 999.
	     * @type number
	     */
					this.millisecond = parseInt(params.millisecond, 10) || 0;
				}

				/**
	    * The day of the year. Ranges from 1 to 383.
	    * @type number
	    */
				this.dayOfYear = parseInt(params.dayOfYear, 10);

				if (typeof params.dst === 'boolean') {
					this.dst = params.dst;
				}

				this.rd = this.newRd(this);

				// add the time zone offset to the rd to convert to UTC
				if (!this.tz) {
					this.tz = new TimeZone({ id: this.timezone });
				}
				// getOffsetMillis requires that this.year, this.rd, and this.dst 
				// are set in order to figure out which time zone rules apply and 
				// what the offset is at that point in the year
				this.offset = this.tz._getOffsetMillisWallTime(this) / 86400000;
				if (this.offset !== 0) {
					this.rd = this.newRd({
						rd: this.rd.getRataDie() - this.offset
					});
				}
			}
		}

		if (!this.rd) {
			this.rd = this.newRd(params);
			this._calcDateComponents();
		}
	};

	HebrewDate.prototype = new IDate({ noinstance: true });
	HebrewDate.prototype.parent = IDate;
	HebrewDate.prototype.constructor = HebrewDate;

	/**
	 * the cumulative lengths of each month for a non-leap year, without new years corrections,
	 * that can be used in reverse to map days to months
	 * @private
	 * @const
	 * @type Array.<number>
	 */
	HebrewDate.cumMonthLengthsReverse = [
	//  [days, monthnumber],                                                
	[0, 7], /* Tishri - Jewish New Year (Rosh HaShanah) starts in month 7 */
	[30, 8], /* Heshvan */
	[59, 9], /* Kislev */
	[88, 10], /* Teveth */
	[117, 11], /* Shevat */
	[147, 12], /* Adar I */
	[176, 1], /* Nisan */
	[206, 2], /* Iyyar */
	[235, 3], /* Sivan */
	[265, 4], /* Tammuz */
	[294, 5], /* Av */
	[324, 6], /* Elul */
	[354, 7] /* end of year sentinel value */
	];

	/**
	 * the cumulative lengths of each month for a leap year, without new years corrections
	 * that can be used in reverse to map days to months 
	 * 
	 * @private
	 * @const
	 * @type Array.<number>
	 */
	HebrewDate.cumMonthLengthsLeapReverse = [
	//  [days, monthnumber],                                                
	[0, 7], /* Tishri - Jewish New Year (Rosh HaShanah) starts in month 7 */
	[30, 8], /* Heshvan */
	[59, 9], /* Kislev */
	[88, 10], /* Teveth */
	[117, 11], /* Shevat */
	[147, 12], /* Adar I */
	[177, 13], /* Adar II */
	[206, 1], /* Nisan */
	[236, 2], /* Iyyar */
	[265, 3], /* Sivan */
	[295, 4], /* Tammuz */
	[324, 5], /* Av */
	[354, 6], /* Elul */
	[384, 7] /* end of year sentinel value */
	];

	/**
	 * Number of days difference between RD 0 of the Hebrew calendar 
	 * (Jan 1, 1 Gregorian = JD 1721057.5) and RD 0 of the Hebrew calendar
	 * (September 7, -3760 Gregorian = JD 347997.25)
	 * @private
	 * @const
	 * @type number
	 */
	HebrewDate.GregorianDiff = 1373060.25;

	/**
	 * Return a new RD for this date type using the given params.
	 * @private
	 * @param {Object=} params the parameters used to create this rata die instance
	 * @returns {RataDie} the new RD instance for the given params
	 */
	HebrewDate.prototype.newRd = function (params) {
		return new HebrewRataDie(params);
	};

	/**
	 * Return the year for the given RD
	 * @protected
	 * @param {number} rd RD to calculate from 
	 * @returns {number} the year for the RD
	 */
	HebrewDate.prototype._calcYear = function (rd) {
		var year, approximation, nextNewYear;

		// divide by the average number of days per year in the Hebrew calendar
		// to approximate the year, then tweak it to get the real year
		approximation = Math.floor(rd / 365.246822206) + 1;

		// console.log("HebrewDate._calcYear: approx is " + approximation);

		// search forward from approximation-1 for the year that actually contains this rd
		year = approximation;
		nextNewYear = HebrewCal.newYear(year);
		while (rd >= nextNewYear) {
			year++;
			nextNewYear = HebrewCal.newYear(year);
		}
		return year - 1;
	};

	/**
	 * Calculate date components for the given RD date.
	 * @protected
	 */
	HebrewDate.prototype._calcDateComponents = function () {
		var remainder,
		    i,
		    table,
		    target,
		    rd = this.rd.getRataDie();

		// console.log("HebrewDate.calcComponents: calculating for rd " + rd);

		if (typeof this.offset === "undefined") {
			this.year = this._calcYear(rd);

			// now offset the RD by the time zone, then recalculate in case we were 
			// near the year boundary
			if (!this.tz) {
				this.tz = new TimeZone({ id: this.timezone });
			}
			this.offset = this.tz.getOffsetMillis(this) / 86400000;
		}

		if (this.offset !== 0) {
			rd += this.offset;
			this.year = this._calcYear(rd);
		}

		// console.log("HebrewDate.calcComponents: year is " + this.year + " with starting rd " + thisNewYear);

		remainder = rd - HebrewCal.newYear(this.year);
		// console.log("HebrewDate.calcComponents: remainder is " + remainder);

		// take out new years corrections so we get the right month when we look it up in the table
		if (remainder >= 59) {
			if (remainder >= 88) {
				if (HebrewCal.longKislev(this.year)) {
					remainder--;
				}
			}
			if (HebrewCal.longHeshvan(this.year)) {
				remainder--;
			}
		}

		// console.log("HebrewDate.calcComponents: after new years corrections, remainder is " + remainder);

		table = this.cal.isLeapYear(this.year) ? HebrewDate.cumMonthLengthsLeapReverse : HebrewDate.cumMonthLengthsReverse;

		i = 0;
		target = Math.floor(remainder);
		while (i + 1 < table.length && target >= table[i + 1][0]) {
			i++;
		}

		this.month = table[i][1];
		// console.log("HebrewDate.calcComponents: remainder is " + remainder);
		remainder -= table[i][0];

		// console.log("HebrewDate.calcComponents: month is " + this.month + " and remainder is " + remainder);

		this.day = Math.floor(remainder);
		remainder -= this.day;
		this.day++; // days are 1-based

		// console.log("HebrewDate.calcComponents: day is " + this.day + " and remainder is " + remainder);

		// now convert to milliseconds for the rest of the calculation
		remainder = Math.round(remainder * 86400000);

		this.hour = Math.floor(remainder / 3600000);
		remainder -= this.hour * 3600000;

		// the hours from 0 to 6 are actually 18:00 to midnight of the previous
		// gregorian day, so we have to adjust for that
		if (this.hour >= 6) {
			this.hour -= 6;
		} else {
			this.hour += 18;
		}

		this.minute = Math.floor(remainder / 60000);
		remainder -= this.minute * 60000;

		this.second = Math.floor(remainder / 1000);
		remainder -= this.second * 1000;

		this.millisecond = Math.floor(remainder);
	};

	/**
	 * Return the day of the week of this date. The day of the week is encoded
	 * as number from 0 to 6, with 0=Sunday, 1=Monday, etc., until 6=Saturday.
	 * 
	 * @return {number} the day of the week
	 */
	HebrewDate.prototype.getDayOfWeek = function () {
		var rd = Math.floor(this.rd.getRataDie() + (this.offset || 0));
		return MathUtils.mod(rd + 1, 7);
	};

	/**
	 * Get the Halaqim (parts) of an hour. There are 1080 parts in an hour, which means
	 * each part is 3.33333333 seconds long. This means the number returned may not
	 * be an integer.
	 * 
	 * @return {number} the halaqim parts of the current hour
	 */
	HebrewDate.prototype.getHalaqim = function () {
		if (this.parts < 0) {
			// convert to ms first, then to parts
			var h = this.minute * 60000 + this.second * 1000 + this.millisecond;
			this.parts = h * 0.0003;
		}
		return this.parts;
	};

	/**
	 * Return the rd number of the first Sunday of the given ISO year.
	 * @protected
	 * @return the rd of the first Sunday of the ISO year
	 */
	HebrewDate.prototype.firstSunday = function (year) {
		var tishri1 = this.newRd({
			year: year,
			month: 7,
			day: 1,
			hour: 18,
			minute: 0,
			second: 0,
			millisecond: 0,
			cal: this.cal
		});
		var firstThu = this.newRd({
			rd: tishri1.onOrAfter(4),
			cal: this.cal
		});
		return firstThu.before(0);
	};

	/**
	 * Return the ordinal day of the year. Days are counted from 1 and proceed linearly up to 
	 * 385, regardless of months or weeks, etc. That is, Tishri 1st is day 1, and 
	 * Elul 29 is 385 for a leap year with a long Heshvan and long Kislev.
	 * @return {number} the ordinal day of the year
	 */
	HebrewDate.prototype.getDayOfYear = function () {
		var table = this.cal.isLeapYear(this.year) ? HebrewRataDie.cumMonthLengthsLeap : HebrewRataDie.cumMonthLengths;
		var days = table[this.month - 1];
		if ((this.month < 7 || this.month > 8) && HebrewCal.longHeshvan(this.year)) {
			days++;
		}
		if ((this.month < 7 || this.month > 9) && HebrewCal.longKislev(this.year)) {
			days++;
		}

		return days + this.day;
	};

	/**
	 * Return the ordinal number of the week within the month. The first week of a month is
	 * the first one that contains 4 or more days in that month. If any days precede this
	 * first week, they are marked as being in week 0. This function returns values from 0
	 * through 6.<p>
	 * 
	 * The locale is a required parameter because different locales that use the same 
	 * Hebrew calendar consider different days of the week to be the beginning of
	 * the week. This can affect the week of the month in which some days are located.
	 * 
	 * @param {Locale|string} locale the locale or locale spec to use when figuring out 
	 * the first day of the week
	 * @return {number} the ordinal number of the week within the current month
	 */
	HebrewDate.prototype.getWeekOfMonth = function (locale) {
		var li = new LocaleInfo(locale),
		    first = this.newRd({
			year: this.year,
			month: this.month,
			day: 1,
			hour: 18,
			minute: 0,
			second: 0,
			millisecond: 0
		}),
		    rd = this.rd.getRataDie(),
		    weekStart = first.onOrAfter(li.getFirstDayOfWeek());

		if (weekStart - first.getRataDie() > 3) {
			// if the first week has 4 or more days in it of the current month, then consider
			// that week 1. Otherwise, it is week 0. To make it week 1, move the week start
			// one week earlier.
			weekStart -= 7;
		}
		return rd < weekStart ? 0 : Math.floor((rd - weekStart) / 7) + 1;
	};

	/**
	 * Return the era for this date as a number. The value for the era for Hebrew 
	 * calendars is -1 for "before the Hebrew era" and 1 for "the Hebrew era". 
	 * Hebrew era dates are any date after Tishri 1, 1, which is the same as
	 * September 7, 3760 BC in the Gregorian calendar. 
	 * 
	 * @return {number} 1 if this date is in the Hebrew era, -1 if it is before the 
	 * Hebrew era 
	 */
	HebrewDate.prototype.getEra = function () {
		return this.year < 1 ? -1 : 1;
	};

	/**
	 * Return the name of the calendar that governs this date.
	 * 
	 * @return {string} a string giving the name of the calendar
	 */
	HebrewDate.prototype.getCalendar = function () {
		return "hebrew";
	};

	// register with the factory method
	IDate._constructors["hebrew"] = HebrewDate;

	module.exports = HebrewDate;

/***/ },
/* 211 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	/*
	 * HebrewRataDie.js - Represent an RD date in the Hebrew calendar
	 * 
	 * Copyright Â© 2012-2015, JEDLSoft
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 *
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */

	/* !depends 
	MathUtils.js
	HebrewCal.js
	RataDie.js
	*/

	var HebrewCal = __webpack_require__(76);
	var MathUtils = __webpack_require__(6);
	var RataDie = __webpack_require__(17);

	/**
	 * @class
	 * Construct a new Hebrew RD date number object. The constructor parameters can 
	 * contain any of the following properties:
	 * 
	 * <ul>
	 * <li><i>unixtime<i> - sets the time of this instance according to the given 
	 * unix time. Unix time is the number of milliseconds since midnight on Jan 1, 1970.
	 * 
	 * <li><i>julianday</i> - sets the time of this instance according to the given
	 * Julian Day instance or the Julian Day given as a float
	 * 
	 * <li><i>year</i> - any integer, including 0
	 * 
	 * <li><i>month</i> - 1 to 12, where 1 means January, 2 means February, etc.
	 * 
	 * <li><i>day</i> - 1 to 31
	 * 
	 * <li><i>hour</i> - 0 to 23. A formatter is used to display 12 hour clocks, but this representation 
	 * is always done with an unambiguous 24 hour representation
	 * 
	 * <li><i>parts</i> - 0 to 1079. Specify the halaqim parts of an hour. Either specify 
	 * the parts or specify the minutes, seconds, and milliseconds, but not both. 
	 * 
	 * <li><i>minute</i> - 0 to 59
	 * 
	 * <li><i>second</i> - 0 to 59
	 * 
	 * <li><i>millisecond</i> - 0 to 999
	 * 
	 * <li><i>date</i> - use the given intrinsic Javascript date to initialize this one.
	 * </ul>
	 *
	 * If the constructor is called with another Hebrew date instance instead of
	 * a parameter block, the other instance acts as a parameter block and its
	 * settings are copied into the current instance.<p>
	 * 
	 * If the constructor is called with no arguments at all or if none of the 
	 * properties listed above are present, then the RD is calculate based on 
	 * the current date at the time of instantiation. <p>
	 * 
	 * If any of the properties from <i>year</i> through <i>millisecond</i> are not
	 * specified in the params, it is assumed that they have the smallest possible
	 * value in the range for the property (zero or one).<p>
	 * 
	 * 
	 * @private
	 * @constructor
	 * @extends RataDie
	 * @param {Object=} params parameters that govern the settings and behaviour of this Hebrew RD date
	 */
	var HebrewRataDie = function HebrewRataDie(params) {
	  this.cal = params && params.cal || new HebrewCal();
	  this.rd = undefined;
	  RataDie.call(this, params);
	};

	HebrewRataDie.prototype = new RataDie();
	HebrewRataDie.prototype.parent = RataDie;
	HebrewRataDie.prototype.constructor = HebrewRataDie;

	/**
	 * The difference between a zero Julian day and the first day of the Hebrew 
	 * calendar: sunset on Monday, Tishri 1, 1 = September 7, 3760 BC Gregorian = JD 347997.25
	 * @private
	 * @const
	 * @type number
	 */
	HebrewRataDie.prototype.epoch = 347997.25;

	/**
	 * the cumulative lengths of each month for a non-leap year, without new years corrections
	 * @private
	 * @const
	 * @type Array.<number>
	 */
	HebrewRataDie.cumMonthLengths = [176, /* Nisan */
	206, /* Iyyar */
	235, /* Sivan */
	265, /* Tammuz */
	294, /* Av */
	324, /* Elul */
	0, /* Tishri - Jewish New Year (Rosh HaShanah) starts in month 7 */
	30, /* Heshvan */
	59, /* Kislev */
	88, /* Teveth */
	117, /* Shevat */
	147 /* Adar I */
	];

	/**
	 * the cumulative lengths of each month for a leap year, without new years corrections 
	 * @private
	 * @const
	 * @type Array.<number>
	 */
	HebrewRataDie.cumMonthLengthsLeap = [206, /* Nisan */
	236, /* Iyyar */
	265, /* Sivan */
	295, /* Tammuz */
	324, /* Av */
	354, /* Elul */
	0, /* Tishri - Jewish New Year (Rosh HaShanah) starts in month 7 */
	30, /* Heshvan */
	59, /* Kislev */
	88, /* Teveth */
	117, /* Shevat */
	147, /* Adar I */
	177 /* Adar II */
	];

	/**
	 * Calculate the Rata Die (fixed day) number of the given date from the
	 * date components.
	 * 
	 * @private
	 * @param {Object} date the date components to calculate the RD from
	 */
	HebrewRataDie.prototype._setDateComponents = function (date) {
	  var elapsed = HebrewCal.elapsedDays(date.year);
	  var days = elapsed + HebrewCal.newYearsCorrection(date.year, elapsed) + date.day - 1;
	  var sum = 0,
	      table;

	  //console.log("getRataDie: converting " +  JSON.stringify(date));
	  //console.log("getRataDie: days is " +  days);
	  //console.log("getRataDie: new years correction is " +  HebrewCal.newYearsCorrection(date.year, elapsed));

	  table = this.cal.isLeapYear(date.year) ? HebrewRataDie.cumMonthLengthsLeap : HebrewRataDie.cumMonthLengths;
	  sum = table[date.month - 1];

	  // gets cumulative without correction, so now add in the correction
	  if ((date.month < 7 || date.month > 8) && HebrewCal.longHeshvan(date.year)) {
	    sum++;
	  }
	  if ((date.month < 7 || date.month > 9) && HebrewCal.longKislev(date.year)) {
	    sum++;
	  }
	  // console.log("getRataDie: cum days is now " +  sum);

	  days += sum;

	  // the date starts at sunset, which we take as 18:00, so the hours from
	  // midnight to 18:00 are on the current Gregorian day, and the hours from
	  // 18:00 to midnight are on the previous Gregorian day. So to calculate the 
	  // number of hours into the current day that this time represents, we have
	  // to count from 18:00 to midnight first, and add in 6 hours if the time is
	  // less than 18:00
	  var minute, second, millisecond;

	  if (typeof date.parts !== 'undefined') {
	    // The parts (halaqim) of the hour. This can be a number from 0 to 1079.
	    var parts = parseInt(date.parts, 10);
	    var seconds = parseInt(parts, 10) * 3.333333333333;
	    minute = Math.floor(seconds / 60);
	    seconds -= minute * 60;
	    second = Math.floor(seconds);
	    millisecond = seconds - second;
	  } else {
	    minute = parseInt(date.minute, 10) || 0;
	    second = parseInt(date.second, 10) || 0;
	    millisecond = parseInt(date.millisecond, 10) || 0;
	  }

	  var time;
	  if (date.hour >= 18) {
	    time = ((date.hour - 18 || 0) * 3600000 + (minute || 0) * 60000 + (second || 0) * 1000 + (millisecond || 0)) / 86400000;
	  } else {
	    time = 0.25 + // 6 hours from 18:00 to midnight on the previous gregorian day
	    ((date.hour || 0) * 3600000 + (minute || 0) * 60000 + (second || 0) * 1000 + (millisecond || 0)) / 86400000;
	  }

	  //console.log("getRataDie: rd is " +  (days + time));
	  this.rd = days + time;
	};

	/**
	 * Return the rd number of the particular day of the week on or before the 
	 * given rd. eg. The Sunday on or before the given rd.
	 * @private
	 * @param {number} rd the rata die date of the reference date
	 * @param {number} dayOfWeek the day of the week that is being sought relative 
	 * to the current date
	 * @return {number} the rd of the day of the week
	 */
	HebrewRataDie.prototype._onOrBefore = function (rd, dayOfWeek) {
	  return rd - MathUtils.mod(Math.floor(rd) - dayOfWeek + 1, 7);
	};

	module.exports = HebrewRataDie;

/***/ },
/* 212 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	/*
	 * islamicDate.js - Represent a date in the Islamic calendar
	 * 
	 * Copyright Â© 2012-2015, JEDLSoft
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 *
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */

	/* !depends 
	ilib.js
	Locale.js
	LocaleInfo.js
	TimeZone.js
	IDate.js
	MathUtils.js
	SearchUtils.js
	Calendar.js
	IslamicCal.js
	IslamicRataDie.js
	*/

	var ilib = __webpack_require__(2);
	var SearchUtils = __webpack_require__(33);
	var MathUtils = __webpack_require__(6);

	var Locale = __webpack_require__(12);
	var LocaleInfo = __webpack_require__(14);
	var TimeZone = __webpack_require__(24);
	var IDate = __webpack_require__(21);
	var Calendar = __webpack_require__(9);

	var IslamicRataDie = __webpack_require__(213);
	var IslamicCal = __webpack_require__(77);

	/**
	 * @class
	 * Construct a new civil Islamic date object. The constructor can be called
	 * with a params object that can contain the following properties:<p>
	 * 
	 * <ul>
	 * <li><i>julianday</i> - the Julian Day to set into this date
	 * <li><i>year</i> - any integer except 0. Years go from -1 (BCE) to 1 (CE), skipping the zero year
	 * <li><i>month</i> - 1 to 12, where 1 means Muharram, 2 means Saffar, etc.
	 * <li><i>day</i> - 1 to 30
	 * <li><i>hour</i> - 0 to 23. A formatter is used to display 12 hour clocks, but this representation 
	 * is always done with an unambiguous 24 hour representation
	 * <li><i>minute</i> - 0 to 59
	 * <li><i>second</i> - 0 to 59
	 * <li><i>millisecond</i> - 0 to 999
	 * <li><i>locale</i> - the TimeZone instance or time zone name as a string 
	 * of this julian date. The date/time is kept in the local time. The time zone
	 * is used later if this date is formatted according to a different time zone and
	 * the difference has to be calculated, or when the date format has a time zone
	 * component in it.
	 * <li><i>timezone</i> - the time zone of this instance. If the time zone is not 
	 * given, it can be inferred from this locale. For locales that span multiple
	 * time zones, the one with the largest population is chosen as the one that 
	 * represents the locale. 
	 * 
	 * <li><i>date</i> - use the given intrinsic Javascript date to initialize this one.
	 * </ul>
	 * 
	 * If called with another Islamic date argument, the date components of the given
	 * date are copied into the current one.<p>
	 * 
	 * If the constructor is called with no arguments at all or if none of the 
	 * properties listed above 
	 * from <i>julianday</i> through <i>millisecond</i> are present, then the date 
	 * components are 
	 * filled in with the current date at the time of instantiation. Note that if
	 * you do not give the time zone when defaulting to the current time and the 
	 * time zone for all of ilib was not set with <i>ilib.setTimeZone()</i>, then the
	 * time zone will default to UTC ("Universal Time, Coordinated" or "Greenwich 
	 * Mean Time").<p>
	 * 
	 * 
	 * @constructor
	 * @extends IDate
	 * @param {Object=} params parameters that govern the settings and behaviour of this Islamic date
	 */
	var IslamicDate = function IslamicDate(params) {
	  this.cal = new IslamicCal();

	  if (params) {
	    if (params.locale) {
	      this.locale = typeof params.locale === 'string' ? new Locale(params.locale) : params.locale;
	      var li = new LocaleInfo(this.locale);
	      this.timezone = li.getTimeZone();
	    }
	    if (params.timezone) {
	      this.timezone = params.timezone;
	    }

	    if (params.year || params.month || params.day || params.hour || params.minute || params.second || params.millisecond) {
	      /**
	       * Year in the Islamic calendar.
	       * @type number
	       */
	      this.year = parseInt(params.year, 10) || 0;

	      /**
	       * The month number, ranging from 1 to 12 (December).
	       * @type number
	       */
	      this.month = parseInt(params.month, 10) || 1;

	      /**
	       * The day of the month. This ranges from 1 to 30.
	       * @type number
	       */
	      this.day = parseInt(params.day, 10) || 1;

	      /**
	       * The hour of the day. This can be a number from 0 to 23, as times are
	       * stored unambiguously in the 24-hour clock.
	       * @type number
	       */
	      this.hour = parseInt(params.hour, 10) || 0;

	      /**
	       * The minute of the hours. Ranges from 0 to 59.
	       * @type number
	       */
	      this.minute = parseInt(params.minute, 10) || 0;

	      /**
	       * The second of the minute. Ranges from 0 to 59.
	       * @type number
	       */
	      this.second = parseInt(params.second, 10) || 0;

	      /**
	       * The millisecond of the second. Ranges from 0 to 999.
	       * @type number
	       */
	      this.millisecond = parseInt(params.millisecond, 10) || 0;

	      /**
	       * The day of the year. Ranges from 1 to 355.
	       * @type number
	       */
	      this.dayOfYear = parseInt(params.dayOfYear, 10);

	      if (typeof params.dst === 'boolean') {
	        this.dst = params.dst;
	      }

	      this.rd = this.newRd(this);

	      // add the time zone offset to the rd to convert to UTC
	      if (!this.tz) {
	        this.tz = new TimeZone({ id: this.timezone });
	      }
	      // getOffsetMillis requires that this.year, this.rd, and this.dst 
	      // are set in order to figure out which time zone rules apply and 
	      // what the offset is at that point in the year
	      this.offset = this.tz._getOffsetMillisWallTime(this) / 86400000;
	      if (this.offset !== 0) {
	        this.rd = this.newRd({
	          rd: this.rd.getRataDie() - this.offset
	        });
	      }
	    }
	  }

	  if (!this.rd) {
	    this.rd = this.newRd(params);
	    this._calcDateComponents();
	  }
	};

	IslamicDate.prototype = new IDate({ noinstance: true });
	IslamicDate.prototype.parent = IDate;
	IslamicDate.prototype.constructor = IslamicDate;

	/**
	 * the cumulative lengths of each month, for a non-leap year 
	 * @private
	 * @const
	 * @type Array.<number>
	 */
	IslamicDate.cumMonthLengths = [0, /* Muharram */
	30, /* Saffar */
	59, /* Rabi'I */
	89, /* Rabi'II */
	118, /* Jumada I */
	148, /* Jumada II */
	177, /* Rajab */
	207, /* Sha'ban */
	236, /* Ramadan */
	266, /* Shawwal */
	295, /* Dhu al-Qa'da */
	325, /* Dhu al-Hijja */
	354];

	/**
	 * Number of days difference between RD 0 of the Gregorian calendar and
	 * RD 0 of the Islamic calendar. 
	 * @private
	 * @const
	 * @type number
	 */
	IslamicDate.GregorianDiff = 227015;

	/**
	 * Return a new RD for this date type using the given params.
	 * @protected
	 * @param {Object=} params the parameters used to create this rata die instance
	 * @returns {RataDie} the new RD instance for the given params
	 */
	IslamicDate.prototype.newRd = function (params) {
	  return new IslamicRataDie(params);
	};

	/**
	 * Return the year for the given RD
	 * @protected
	 * @param {number} rd RD to calculate from 
	 * @returns {number} the year for the RD
	 */
	IslamicDate.prototype._calcYear = function (rd) {
	  return Math.floor((30 * rd + 10646) / 10631);
	};

	/**
	 * Calculate date components for the given RD date.
	 * @protected
	 */
	IslamicDate.prototype._calcDateComponents = function () {
	  var remainder,
	      rd = this.rd.getRataDie();

	  this.year = this._calcYear(rd);

	  if (typeof this.offset === "undefined") {
	    this.year = this._calcYear(rd);

	    // now offset the RD by the time zone, then recalculate in case we were 
	    // near the year boundary
	    if (!this.tz) {
	      this.tz = new TimeZone({ id: this.timezone });
	    }
	    this.offset = this.tz.getOffsetMillis(this) / 86400000;
	  }

	  if (this.offset !== 0) {
	    rd += this.offset;
	    this.year = this._calcYear(rd);
	  }

	  //console.log("IslamicDate.calcComponent: calculating for rd " + rd);
	  //console.log("IslamicDate.calcComponent: year is " + ret.year);
	  var yearStart = this.newRd({
	    year: this.year,
	    month: 1,
	    day: 1,
	    hour: 0,
	    minute: 0,
	    second: 0,
	    millisecond: 0
	  });
	  remainder = rd - yearStart.getRataDie() + 1;

	  this.dayOfYear = remainder;

	  //console.log("IslamicDate.calcComponent: remainder is " + remainder);

	  this.month = SearchUtils.bsearch(remainder, IslamicDate.cumMonthLengths);
	  remainder -= IslamicDate.cumMonthLengths[this.month - 1];

	  //console.log("IslamicDate.calcComponent: month is " + this.month + " and remainder is " + remainder);

	  this.day = Math.floor(remainder);
	  remainder -= this.day;

	  //console.log("IslamicDate.calcComponent: day is " + this.day + " and remainder is " + remainder);

	  // now convert to milliseconds for the rest of the calculation
	  remainder = Math.round(remainder * 86400000);

	  this.hour = Math.floor(remainder / 3600000);
	  remainder -= this.hour * 3600000;

	  this.minute = Math.floor(remainder / 60000);
	  remainder -= this.minute * 60000;

	  this.second = Math.floor(remainder / 1000);
	  remainder -= this.second * 1000;

	  this.millisecond = remainder;
	};

	/**
	 * Return the day of the week of this date. The day of the week is encoded
	 * as number from 0 to 6, with 0=Sunday, 1=Monday, etc., until 6=Saturday.
	 * 
	 * @return {number} the day of the week
	 */
	IslamicDate.prototype.getDayOfWeek = function () {
	  var rd = Math.floor(this.rd.getRataDie() + (this.offset || 0));
	  return MathUtils.mod(rd - 2, 7);
	};

	/**
	 * Return the ordinal day of the year. Days are counted from 1 and proceed linearly up to 
	 * 354 or 355, regardless of months or weeks, etc. That is, Muharran 1st is day 1, and 
	 * Dhu al-Hijja 29 is 354.
	 * @return {number} the ordinal day of the year
	 */
	IslamicDate.prototype.getDayOfYear = function () {
	  return IslamicDate.cumMonthLengths[this.month - 1] + this.day;
	};

	/**
	 * Return the era for this date as a number. The value for the era for Islamic 
	 * calendars is -1 for "before the Islamic era" and 1 for "the Islamic era". 
	 * Islamic era dates are any date after Muharran 1, 1, which is the same as
	 * July 16, 622 CE in the Gregorian calendar. 
	 * 
	 * @return {number} 1 if this date is in the common era, -1 if it is before the 
	 * common era 
	 */
	IslamicDate.prototype.getEra = function () {
	  return this.year < 1 ? -1 : 1;
	};

	/**
	 * Return the name of the calendar that governs this date.
	 * 
	 * @return {string} a string giving the name of the calendar
	 */
	IslamicDate.prototype.getCalendar = function () {
	  return "islamic";
	};

	//register with the factory method
	IDate._constructors["islamic"] = IslamicDate;

	module.exports = IslamicDate;

/***/ },
/* 213 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	/*
	 * IslamicRataDie.js - Represent an RD date in the Islamic calendar
	 * 
	 * Copyright Â© 2012-2015, JEDLSoft
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 *
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */

	/* !depends 
	IslamicCal.js
	RataDie.js
	*/

	var RataDie = __webpack_require__(17);
	var IslamicCal = __webpack_require__(77);

	/**
	 * @class
	 * Construct a new Islamic RD date number object. The constructor parameters can 
	 * contain any of the following properties:
	 * 
	 * <ul>
	 * <li><i>unixtime<i> - sets the time of this instance according to the given 
	 * unix time. Unix time is the number of milliseconds since midnight on Jan 1, 1970.
	 * 
	 * <li><i>julianday</i> - sets the time of this instance according to the given
	 * Julian Day instance or the Julian Day given as a float
	 * 
	 * <li><i>year</i> - any integer, including 0
	 * 
	 * <li><i>month</i> - 1 to 12, where 1 means January, 2 means February, etc.
	 * 
	 * <li><i>day</i> - 1 to 31
	 * 
	 * <li><i>hour</i> - 0 to 23. A formatter is used to display 12 hour clocks, but this representation 
	 * is always done with an unambiguous 24 hour representation
	 * 
	 * <li><i>minute</i> - 0 to 59
	 * 
	 * <li><i>second</i> - 0 to 59
	 * 
	 * <li><i>millisecond</i> - 0 to 999
	 * 
	 * <li><i>date</i> - use the given intrinsic Javascript date to initialize this one.
	 * </ul>
	 *
	 * If the constructor is called with another Islamic date instance instead of
	 * a parameter block, the other instance acts as a parameter block and its
	 * settings are copied into the current instance.<p>
	 * 
	 * If the constructor is called with no arguments at all or if none of the 
	 * properties listed above are present, then the RD is calculate based on 
	 * the current date at the time of instantiation. <p>
	 * 
	 * If any of the properties from <i>year</i> through <i>millisecond</i> are not
	 * specified in the params, it is assumed that they have the smallest possible
	 * value in the range for the property (zero or one).<p>
	 * 
	 * 
	 * @private
	 * @constructor
	 * @extends RataDie
	 * @param {Object=} params parameters that govern the settings and behaviour of this Islamic RD date
	 */
	var IslamicRataDie = function IslamicRataDie(params) {
	  this.cal = params && params.cal || new IslamicCal();
	  this.rd = undefined;
	  RataDie.call(this, params);
	};

	IslamicRataDie.prototype = new RataDie();
	IslamicRataDie.prototype.parent = RataDie;
	IslamicRataDie.prototype.constructor = IslamicRataDie;

	/**
	 * The difference between a zero Julian day and the first Islamic date
	 * of Friday, July 16, 622 CE Julian. 
	 * @private
	 * @const
	 * @type number
	 */
	IslamicRataDie.prototype.epoch = 1948439.5;

	/**
	 * Calculate the Rata Die (fixed day) number of the given date from the
	 * date components.
	 *
	 * @protected
	 * @param {Object} date the date components to calculate the RD from
	 */
	IslamicRataDie.prototype._setDateComponents = function (date) {
	  var days = (date.year - 1) * 354 + Math.ceil(29.5 * (date.month - 1)) + date.day + Math.floor((3 + 11 * date.year) / 30) - 1;
	  var time = (date.hour * 3600000 + date.minute * 60000 + date.second * 1000 + date.millisecond) / 86400000;

	  //console.log("getRataDie: converting " +  JSON.stringify(date));
	  //console.log("getRataDie: days is " +  days);
	  //console.log("getRataDie: time is " +  time);
	  //console.log("getRataDie: rd is " +  (days + time));

	  this.rd = days + time;
	};

	module.exports = IslamicRataDie;

/***/ },
/* 214 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	/*
	 * JulianDate.js - Represent a date in the Julian calendar
	 * 
	 * Copyright Â© 2012-2015, JEDLSoft
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 *
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */

	/* !depends 
	ilib.js
	Locale.js
	IDate.js 
	TimeZone.js
	Calendar.js 
	JulianCal.js 
	SearchUtils.js 
	MathUtils.js
	LocaleInfo.js 
	JulianRataDie.js
	*/

	var ilib = __webpack_require__(2);
	var SearchUtils = __webpack_require__(33);
	var MathUtils = __webpack_require__(6);

	var Locale = __webpack_require__(12);
	var LocaleInfo = __webpack_require__(14);
	var TimeZone = __webpack_require__(24);
	var IDate = __webpack_require__(21);
	var Calendar = __webpack_require__(9);

	var JulianRataDie = __webpack_require__(215);
	var JulianCal = __webpack_require__(78);

	/**
	 * @class
	 * Construct a new date object for the Julian Calendar. The constructor can be called
	 * with a parameter object that contains any of the following properties:
	 * 
	 * <ul>
	 * <li><i>unixtime<i> - sets the time of this instance according to the given 
	 * unix time. Unix time is the number of milliseconds since midnight on Jan 1, 1970 (Gregorian).
	 * <li><i>julianday</i> - the Julian Day to set into this date
	 * <li><i>year</i> - any integer except 0. Years go from -1 (BCE) to 1 (CE), skipping the zero 
	 * year which doesn't exist in the Julian calendar
	 * <li><i>month</i> - 1 to 12, where 1 means January, 2 means February, etc.
	 * <li><i>day</i> - 1 to 31
	 * <li><i>hour</i> - 0 to 23. A formatter is used to display 12 hour clocks, but this representation 
	 * is always done with an unambiguous 24 hour representation
	 * <li><i>minute</i> - 0 to 59
	 * <li><i>second</i> - 0 to 59
	 * <li><i>millisecond<i> - 0 to 999
	 * <li><i>locale</i> - the TimeZone instance or time zone name as a string 
	 * of this julian date. The date/time is kept in the local time. The time zone
	 * is used later if this date is formatted according to a different time zone and
	 * the difference has to be calculated, or when the date format has a time zone
	 * component in it.
	 * <li><i>timezone</i> - the time zone of this instance. If the time zone is not 
	 * given, it can be inferred from this locale. For locales that span multiple
	 * time zones, the one with the largest population is chosen as the one that 
	 * represents the locale. 
	 * 
	 * <li><i>date</i> - use the given intrinsic Javascript date to initialize this one.
	 * </ul>
	 * 
	 * NB. The <a href="http://en.wikipedia.org/wiki/Julian_date">Julian Day</a> 
	 * (JulianDay) object is a <i>different</i> object than a 
	 * <a href="http://en.wikipedia.org/wiki/Julian_calendar">date in
	 * the Julian calendar</a> and the two are not to be confused. The Julian Day 
	 * object represents time as a number of whole and fractional days since the 
	 * beginning of the epoch, whereas a date in the Julian 
	 * calendar is a regular date that signifies year, month, day, etc. using the rules
	 * of the Julian calendar. The naming of Julian Days and the Julian calendar are
	 * unfortunately close, and come from history.<p>
	 *  
	 * If called with another Julian date argument, the date components of the given
	 * date are copied into the current one.<p>
	 * 
	 * If the constructor is called with no arguments at all or if none of the 
	 * properties listed above 
	 * from <i>unixtime</i> through <i>millisecond</i> are present, then the date 
	 * components are 
	 * filled in with the current date at the time of instantiation. Note that if
	 * you do not give the time zone when defaulting to the current time and the 
	 * time zone for all of ilib was not set with <i>ilib.setTimeZone()</i>, then the
	 * time zone will default to UTC ("Universal Time, Coordinated" or "Greenwich 
	 * Mean Time").<p>
	 * 
	 * 
	 * @constructor
	 * @extends IDate
	 * @param {Object=} params parameters that govern the settings and behaviour of this Julian date
	 */
	var JulianDate = function JulianDate(params) {
	  this.cal = new JulianCal();

	  if (params) {
	    if (params.locale) {
	      this.locale = typeof params.locale === 'string' ? new Locale(params.locale) : params.locale;
	      var li = new LocaleInfo(this.locale);
	      this.timezone = li.getTimeZone();
	    }
	    if (params.timezone) {
	      this.timezone = params.timezone;
	    }

	    if (params.year || params.month || params.day || params.hour || params.minute || params.second || params.millisecond) {
	      /**
	       * Year in the Julian calendar.
	       * @type number
	       */
	      this.year = parseInt(params.year, 10) || 0;
	      /**
	       * The month number, ranging from 1 (January) to 12 (December).
	       * @type number
	       */
	      this.month = parseInt(params.month, 10) || 1;
	      /**
	       * The day of the month. This ranges from 1 to 31.
	       * @type number
	       */
	      this.day = parseInt(params.day, 10) || 1;
	      /**
	       * The hour of the day. This can be a number from 0 to 23, as times are
	       * stored unambiguously in the 24-hour clock.
	       * @type number
	       */
	      this.hour = parseInt(params.hour, 10) || 0;
	      /**
	       * The minute of the hours. Ranges from 0 to 59.
	       * @type number
	       */
	      this.minute = parseInt(params.minute, 10) || 0;
	      /**
	       * The second of the minute. Ranges from 0 to 59.
	       * @type number
	       */
	      this.second = parseInt(params.second, 10) || 0;
	      /**
	       * The millisecond of the second. Ranges from 0 to 999.
	       * @type number
	       */
	      this.millisecond = parseInt(params.millisecond, 10) || 0;

	      /**
	       * The day of the year. Ranges from 1 to 383.
	       * @type number
	       */
	      this.dayOfYear = parseInt(params.dayOfYear, 10);

	      if (typeof params.dst === 'boolean') {
	        this.dst = params.dst;
	      }

	      this.rd = this.newRd(this);

	      // add the time zone offset to the rd to convert to UTC
	      if (!this.tz) {
	        this.tz = new TimeZone({ id: this.timezone });
	      }
	      // getOffsetMillis requires that this.year, this.rd, and this.dst 
	      // are set in order to figure out which time zone rules apply and 
	      // what the offset is at that point in the year
	      this.offset = this.tz._getOffsetMillisWallTime(this) / 86400000;
	      if (this.offset !== 0) {
	        this.rd = this.newRd({
	          rd: this.rd.getRataDie() - this.offset
	        });
	      }
	    }
	  }

	  if (!this.rd) {
	    this.rd = this.newRd(params);
	    this._calcDateComponents();
	  }
	};

	JulianDate.prototype = new IDate({ noinstance: true });
	JulianDate.prototype.parent = IDate;
	JulianDate.prototype.constructor = JulianDate;

	/**
	 * Return a new RD for this date type using the given params.
	 * @protected
	 * @param {Object=} params the parameters used to create this rata die instance
	 * @returns {RataDie} the new RD instance for the given params
	 */
	JulianDate.prototype.newRd = function (params) {
	  return new JulianRataDie(params);
	};

	/**
	 * Return the year for the given RD
	 * @protected
	 * @param {number} rd RD to calculate from 
	 * @returns {number} the year for the RD
	 */
	JulianDate.prototype._calcYear = function (rd) {
	  var year = Math.floor((4 * (Math.floor(rd) - 1) + 1464) / 1461);

	  return year <= 0 ? year - 1 : year;
	};

	/**
	 * Calculate date components for the given RD date.
	 * @protected
	 */
	JulianDate.prototype._calcDateComponents = function () {
	  var remainder,
	      cumulative,
	      rd = this.rd.getRataDie();

	  this.year = this._calcYear(rd);

	  if (typeof this.offset === "undefined") {
	    this.year = this._calcYear(rd);

	    // now offset the RD by the time zone, then recalculate in case we were 
	    // near the year boundary
	    if (!this.tz) {
	      this.tz = new TimeZone({ id: this.timezone });
	    }
	    this.offset = this.tz.getOffsetMillis(this) / 86400000;
	  }

	  if (this.offset !== 0) {
	    rd += this.offset;
	    this.year = this._calcYear(rd);
	  }

	  var jan1 = this.newRd({
	    year: this.year,
	    month: 1,
	    day: 1,
	    hour: 0,
	    minute: 0,
	    second: 0,
	    millisecond: 0
	  });
	  remainder = rd + 1 - jan1.getRataDie();

	  cumulative = this.cal.isLeapYear(this.year) ? JulianCal.cumMonthLengthsLeap : JulianCal.cumMonthLengths;

	  this.month = SearchUtils.bsearch(Math.floor(remainder), cumulative);
	  remainder = remainder - cumulative[this.month - 1];

	  this.day = Math.floor(remainder);
	  remainder -= this.day;
	  // now convert to milliseconds for the rest of the calculation
	  remainder = Math.round(remainder * 86400000);

	  this.hour = Math.floor(remainder / 3600000);
	  remainder -= this.hour * 3600000;

	  this.minute = Math.floor(remainder / 60000);
	  remainder -= this.minute * 60000;

	  this.second = Math.floor(remainder / 1000);
	  remainder -= this.second * 1000;

	  this.millisecond = remainder;
	};

	/**
	 * Return the day of the week of this date. The day of the week is encoded
	 * as number from 0 to 6, with 0=Sunday, 1=Monday, etc., until 6=Saturday.
	 * 
	 * @return {number} the day of the week
	 */
	JulianDate.prototype.getDayOfWeek = function () {
	  var rd = Math.floor(this.rd.getRataDie() + (this.offset || 0));
	  return MathUtils.mod(rd - 2, 7);
	};

	/**
	 * Return the name of the calendar that governs this date.
	 * 
	 * @return {string} a string giving the name of the calendar
	 */
	JulianDate.prototype.getCalendar = function () {
	  return "julian";
	};

	//register with the factory method
	IDate._constructors["julian"] = JulianDate;

	module.exports = JulianDate;

/***/ },
/* 215 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	/*
	 * julianDate.js - Represent a date in the Julian calendar
	 * 
	 * Copyright Â© 2012-2015, JEDLSoft
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 *
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */

	/* !depends 
	JulianCal.js 
	RataDie.js
	*/

	var RataDie = __webpack_require__(17);
	var JulianCal = __webpack_require__(78);

	/**
	 * @class
	 * Construct a new Julian RD date number object. The constructor parameters can 
	 * contain any of the following properties:
	 * 
	 * <ul>
	 * <li><i>unixtime<i> - sets the time of this instance according to the given 
	 * unix time. Unix time is the number of milliseconds since midnight on Jan 1, 1970.
	 * 
	 * <li><i>julianday</i> - sets the time of this instance according to the given
	 * Julian Day instance or the Julian Day given as a float
	 * 
	 * <li><i>year</i> - any integer, including 0
	 * 
	 * <li><i>month</i> - 1 to 12, where 1 means January, 2 means February, etc.
	 * 
	 * <li><i>day</i> - 1 to 31
	 * 
	 * <li><i>hour</i> - 0 to 23. A formatter is used to display 12 hour clocks, but this representation 
	 * is always done with an unambiguous 24 hour representation
	 * 
	 * <li><i>minute</i> - 0 to 59
	 * 
	 * <li><i>second</i> - 0 to 59
	 * 
	 * <li><i>millisecond</i> - 0 to 999
	 * 
	 * <li><i>date</i> - use the given intrinsic Javascript date to initialize this one.
	 * </ul>
	 *
	 * If the constructor is called with another Julian date instance instead of
	 * a parameter block, the other instance acts as a parameter block and its
	 * settings are copied into the current instance.<p>
	 * 
	 * If the constructor is called with no arguments at all or if none of the 
	 * properties listed above are present, then the RD is calculate based on 
	 * the current date at the time of instantiation. <p>
	 * 
	 * If any of the properties from <i>year</i> through <i>millisecond</i> are not
	 * specified in the params, it is assumed that they have the smallest possible
	 * value in the range for the property (zero or one).<p>
	 * 
	 * 
	 * @private
	 * @constructor
	 * @extends RataDie
	 * @param {Object=} params parameters that govern the settings and behaviour of this Julian RD date
	 */
	var JulianRataDie = function JulianRataDie(params) {
	  this.cal = params && params.cal || new JulianCal();
	  this.rd = undefined;
	  RataDie.call(this, params);
	};

	JulianRataDie.prototype = new RataDie();
	JulianRataDie.prototype.parent = RataDie;
	JulianRataDie.prototype.constructor = JulianRataDie;

	/**
	 * The difference between a zero Julian day and the first Julian date
	 * of Friday, July 16, 622 CE Julian. 
	 * @private
	 * @const
	 * @type number
	 */
	JulianRataDie.prototype.epoch = 1721422.5;

	/**
	 * Calculate the Rata Die (fixed day) number of the given date from the
	 * date components.
	 * 
	 * @protected
	 * @param {Object} date the date components to calculate the RD from
	 */
	JulianRataDie.prototype._setDateComponents = function (date) {
	  var year = date.year + (date.year < 0 ? 1 : 0);
	  var years = 365 * (year - 1) + Math.floor((year - 1) / 4);
	  var dayInYear = (date.month > 1 ? JulianCal.cumMonthLengths[date.month - 1] : 0) + date.day + (this.cal.isLeapYear(date.year) && date.month > 2 ? 1 : 0);
	  var rdtime = (date.hour * 3600000 + date.minute * 60000 + date.second * 1000 + date.millisecond) / 86400000;

	  /*
	  console.log("calcRataDie: converting " +  JSON.stringify(parts));
	  console.log("getRataDie: year is " +  years);
	  console.log("getRataDie: day in year is " +  dayInYear);
	  console.log("getRataDie: rdtime is " +  rdtime);
	  console.log("getRataDie: rd is " +  (years + dayInYear + rdtime));
	  */

	  this.rd = years + dayInYear + rdtime;
	};

	module.exports = JulianRataDie;

/***/ },
/* 216 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	/*
	 * Loader.js - shared loader implementation
	 * 
	 * Copyright Â© 2015, JEDLSoft
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 *
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */

	var Path = __webpack_require__(217);
	var ilib = __webpack_require__(2);

	/** 
	 * @class
	 * Superclass of the loader classes that contains shared functionality.
	 * 
	 * @private
	 * @constructor
	 */
	var Loader = function Loader() {
		// console.log("new Loader instance");

		this.protocol = "file://";
		this.includePath = [];
	};

	Loader.prototype = new ilib.Loader();
	Loader.prototype.parent = ilib.Loader;
	Loader.prototype.constructor = Loader;

	/** @abstract */
	Loader.prototype._loadFile = function (pathname, sync, cb) {};

	Loader.prototype._exists = function (dir, file) {
		var fullpath = Path.normalize(Path.join(dir, file));
		if (this.protocol !== "http://") {
			var text = this._loadFile(fullpath, true);
			if (text) {
				this.includePath.push(dir);
			}
		} else {
			// put the dir on the list now assuming it exists, and check for its availability 
			// later so we can avoid the 404 errors eventually
			this.includePath.push(dir);
			this._loadFile(fullpath, false, ilib.bind(this, function (text) {
				if (!text) {
					//console.log("Loader._exists: removing " + dir + " from the include path because it doesn't exist.");
					this.includePath = this.includePath.slice(-1);
				}
			}));
		}
	};

	Loader.prototype._loadFileAlongIncludePath = function (includePath, pathname) {
		for (var i = 0; i < includePath.length; i++) {
			var manifest = this.manifest[includePath[i]];
			if (!manifest || Loader.indexOf(manifest, pathname) > -1) {
				var filepath = Path.join(includePath[i], pathname);
				//console.log("Loader._loadFileAlongIncludePath: attempting sync load " + filepath);
				var text = this._loadFile(filepath, true);
				if (text) {
					//console.log("Loader._loadFileAlongIncludePath: succeeded");
					return text;
				}
				//else {
				//console.log("Loader._loadFileAlongIncludePath: failed");
				//} 
			}
			//else {
			//console.log("Loader._loadFileAlongIncludePath: " + pathname + " not in manifest for " + this.includePath[i]);
			//}
		}

		//console.log("Loader._loadFileAlongIncludePath: file not found anywhere along the path.");
		return undefined;
	};

	Loader.prototype.loadFiles = function (paths, sync, params, callback) {
		var includePath = params && params.base ? [params.base].concat(this.includePath) : this.includePath;

		//console.log("Loader loadFiles called");
		// make sure we know what we can load
		if (!paths) {
			// nothing to load
			//console.log("nothing to load");
			return;
		}

		if (params && params.returnOne) {
			// Only return the most locale-specific data. Do this by searching backwards
			// in the list of paths.
			var pathname;
			var tmp = [];
			while ((pathname = paths.pop()) !== undefined) {
				tmp.push(pathname);
			}
			paths = tmp;
		}

		//console.log("generic loader: attempting to load these files: " + JSON.stringify(paths) + "\n");
		if (sync) {
			var ret = [];

			// synchronous
			this._loadManifests(true);

			for (var i = 0; i < paths.length; i++) {
				var text = this._loadFileAlongIncludePath(includePath, Path.normalize(paths[i]));
				ret.push(text ? JSON.parse(text) : undefined);
				if (params && params.returnOne && text) {
					break;
				}
			};

			// only call the callback at the end of the chain of files
			if (typeof callback === 'function') {
				callback(ret);
			}

			return ret;
		}

		// asynchronous
		this._loadManifests(false, ilib.bind(this, function () {
			//console.log("Loader.loadFiles: now loading files asynchronously");
			this.results = [];
			this._loadFilesAsync(includePath, paths, callback);
		}));
	};

	Loader.prototype._loadFilesAsyncAlongIncludePath = function (includes, filename, cb) {
		var text = undefined;

		if (includes.length > 0) {
			var root = includes[0];
			includes = includes.slice(1);

			var manifest = this.manifest[root];
			if (!manifest || Loader.indexOf(manifest, filename) > -1) {
				var filepath = Path.join(root, filename);
				this._loadFile(filepath, false, ilib.bind(this, function (t) {
					//console.log("Loader._loadFilesAsyncAlongIncludePath: loading " + (t ? " success" : " failed"));
					if (t) {
						cb(t);
					} else {
						this._loadFilesAsyncAlongIncludePath(includes, filename, cb);
					}
				}));
			} else {
				//console.log("Loader._loadFilesAsyncAlongIncludePath: " + filepath + " not in manifest for " + root);
				this._loadFilesAsyncAlongIncludePath(includes, filename, cb);
			}
		} else {
			cb();
		}
	};

	Loader.prototype._loadFilesAsync = function (includePath, paths, callback) {
		if (paths.length > 0) {
			var filename = paths[0];
			paths = paths.slice(1);

			//console.log("Loader._loadFilesAsync: attempting to load " + filename + " along the include path.");
			this._loadFilesAsyncAlongIncludePath(includePath, filename, ilib.bind(this, function (json) {
				this.results.push(json ? JSON.parse(json) : undefined);
				this._loadFilesAsync(includePath, paths, callback);
			}));
		} else {
			// only call the callback at the end of the chain of files
			if (typeof callback === 'function') {
				callback(this.results);
			}
		}
	};

	Loader.prototype._loadManifestFile = function (i, sync, cb) {
		//console.log("Loader._loadManifestFile: Checking include path " + i + " " + this.includePath[i]);
		if (i < this.includePath.length) {
			var filepath = Path.join(this.includePath[i], "ilibmanifest.json");
			//console.log("Loader._loadManifestFile: Loading manifest file " + filepath);
			var text = this._loadFile(filepath, sync, ilib.bind(this, function (text) {
				if (text) {
					//console.log("Loader._loadManifestFile: success!");
					this.manifest[this.includePath[i]] = JSON.parse(text).files;
				}
				//else console.log("Loader._loadManifestFile: failed...");
				this._loadManifestFile(i + 1, sync, cb);
			}));
		} else {
			if (typeof cb === 'function') {
				//console.log("Loader._loadManifestFile: now calling callback function");
				cb();
			}
		}
	};

	Loader.prototype._loadManifests = function (sync, cb) {
		//console.log("Loader._loadManifests: called " + (sync ? "synchronously" : "asychronously."));
		if (!this.manifest) {
			//console.log("Loader._loadManifests: attempting to find manifests");
			this.manifest = {};
			if (typeof sync !== 'boolean') {
				sync = true;
			}

			this._loadManifestFile(0, sync, cb);
		} else {
			//console.log("Loader._loadManifests: already loaded");
			if (typeof cb === 'function') {
				//console.log("Loader._loadManifests: now calling callback function");
				cb();
			}
		}
	};

	Loader.prototype.listAvailableFiles = function (sync, cb) {
		//console.log("generic loader: list available files called");
		this._loadManifests(sync, ilib.bind(this, function () {
			if (typeof cb === 'function') {
				//console.log("generic loader: now calling caller's callback function");
				cb(this.manifest);
			}
		}));
		return this.manifest;
	};

	Loader.indexOf = function (array, obj) {
		if (!array || !obj) {
			return -1;
		}
		if (typeof array.indexOf === 'function') {
			return array.indexOf(obj);
		} else {
			for (var i = 0; i < array.length; i++) {
				if (array[i] === obj) {
					return i;
				}
			}
			return -1;
		}
	};

	Loader.prototype.checkAvailability = function (file) {
		for (var dir in this.manifest) {
			if (Loader.indexOf(this.manifest[dir], file) !== -1) {
				return true;
			}
		}

		return false;
	};

	Loader.prototype.isAvailable = function (file, sync, cb) {
		//console.log("Loader.isAvailable: called");
		if (typeof sync !== 'boolean') {
			sync = true;
		}
		if (sync) {
			this._loadManifests(sync);
			return this.checkAvailability(file);
		}

		this._loadManifests(false, ilib.bind(this, function () {
			// console.log("generic loader: isAvailable " + path + "? ");
			if (typeof cb === 'function') {
				cb(this.checkAvailability(file));
			}
		}));
	};

	module.exports = Loader;

/***/ },
/* 217 */
/***/ function(module, exports) {

	"use strict";

	/*
	 * Path.js - minimal pure js implementation of the nodejs path module
	 * 
	 * Copyright Â© 2015, JEDLSoft
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 *
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */

	var Path = {
	  /**
	   * Return the parent directory of the given pathname
	   * similar to the dirname shell function.  
	   * @static
	   * @param {string} pathname path to check
	   * @return {string} the parent dir of the given pathname
	   */
	  dirname: function dirname(pathname) {
	    pathname = pathname.replace(/\\/g, "/");
	    var i = pathname.lastIndexOf("/");
	    return i !== -1 ? pathname.substring(0, i) : pathname;
	  },

	  /**
	   * Return the normalized version of the given pathname. This
	   * cleans up things like double directory separators and such.
	   * @static
	   * @param {string} pathname path to check
	   * @return {string} the normalized version of the given pathname
	   */
	  normalize: function normalize(pathname) {
	    if (pathname) {
	      pathname = pathname.replace(/\\/g, "/");
	      pathname = pathname.replace(/\/\//g, "/");
	      pathname = pathname.replace(/\/[^/]*[^\./]\/\.\./g, "/.");
	      pathname = pathname.replace(/\/\//g, "/");
	      pathname = pathname.replace(/\/\.\//g, "/");
	      pathname = pathname.replace(/^\.\//, "");
	      pathname = pathname.replace(/\/\//g, "/");
	      pathname = pathname.replace(/\/\.$/, "/");
	      pathname = pathname.replace(/\/\//g, "/");
	      if (pathname.length > 1) pathname = pathname.replace(/\/$/, "");
	      if (pathname.length === 0) pathname = '.';
	    }
	    return pathname;
	  },

	  /**
	   * Return a path that is the concatenation of all the of the arguments
	   * which each name a path segment.
	   * @static
	   * @param {...string} var_args
	   * @return {string} the concatenated pathname
	   */
	  join: function join(var_args) {
	    var arr = [];
	    for (var i = 0; i < arguments.length; i++) {
	      arr.push(arguments[i] && arguments[i].length > 0 ? arguments[i] : ".");
	    }
	    return Path.normalize(arr.join("/"));
	  }
	};

	module.exports = Path;

/***/ },
/* 218 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	/*
	 * PersAlsoRataDie.js - Represent an RD date in the Persian algorithmic calendar
	 * 
	 * Copyright Â© 2014-2015, JEDLSoft
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 *
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */

	/* !depends 
	PersianAlgoCal.js 
	MathUtils.js
	RataDie.js
	*/

	var MathUtils = __webpack_require__(6);
	var PersianAlgoCal = __webpack_require__(79);
	var RataDie = __webpack_require__(17);

	/**
	 * @class
	 * Construct a new Persian RD date number object. The constructor parameters can 
	 * contain any of the following properties:
	 * 
	 * <ul>
	 * <li><i>unixtime<i> - sets the time of this instance according to the given 
	 * unix time. Unix time is the number of milliseconds since midnight on Jan 1, 1970, Gregorian
	 * 
	 * <li><i>julianday</i> - sets the time of this instance according to the given
	 * Julian Day instance or the Julian Day given as a float
	 * 
	 * <li><i>year</i> - any integer, including 0
	 * 
	 * <li><i>month</i> - 1 to 12, where 1 means Farvardin, 2 means Ordibehesht, etc.
	 * 
	 * <li><i>day</i> - 1 to 31
	 * 
	 * <li><i>hour</i> - 0 to 23. A formatter is used to display 12 hour clocks, but this representation 
	 * is always done with an unambiguous 24 hour representation
	 * 
	 * <li><i>minute</i> - 0 to 59
	 * 
	 * <li><i>second</i> - 0 to 59
	 * 
	 * <li><i>millisecond</i> - 0 to 999
	 * 
	 * <li><i>date</i> - use the given intrinsic Javascript date to initialize this one.
	 * </ul>
	 *
	 * If the constructor is called with another Persian date instance instead of
	 * a parameter block, the other instance acts as a parameter block and its
	 * settings are copied into the current instance.<p>
	 * 
	 * If the constructor is called with no arguments at all or if none of the 
	 * properties listed above are present, then the RD is calculate based on 
	 * the current date at the time of instantiation. <p>
	 * 
	 * If any of the properties from <i>year</i> through <i>millisecond</i> are not
	 * specified in the params, it is assumed that they have the smallest possible
	 * value in the range for the property (zero or one).<p>
	 * 
	 * 
	 * @private
	 * @constructor
	 * @extends RataDie
	 * @param {Object=} params parameters that govern the settings and behaviour of this Persian RD date
	 */
	var PersAlgoRataDie = function PersAlgoRataDie(params) {
	  this.cal = params && params.cal || new PersianAlgoCal();
	  this.rd = undefined;
	  RataDie.call(this, params);
	};

	PersAlgoRataDie.prototype = new RataDie();
	PersAlgoRataDie.prototype.parent = RataDie;
	PersAlgoRataDie.prototype.constructor = PersAlgoRataDie;

	/**
	 * The difference between a zero Julian day and the first Persian date
	 * @private
	 * @const
	 * @type number
	 */
	PersAlgoRataDie.prototype.epoch = 1948319.5;

	/**
	 * @private
	 * @const
	 * @type Array.<number>
	 * the cumulative lengths of each month, for a non-leap year 
	 */
	PersAlgoRataDie.cumMonthLengths = [0, // Farvardin
	31, // Ordibehesht
	62, // Khordad
	93, // Tir
	124, // Mordad
	155, // Shahrivar
	186, // Mehr
	216, // Aban
	246, // Azar
	276, // Dey
	306, // Bahman
	336, // Esfand
	365];

	/**
	 * Calculate the Rata Die (fixed day) number of the given date from the
	 * date components.
	 *
	 * @protected
	 * @param {Object} date the date components to calculate the RD from
	 */
	PersAlgoRataDie.prototype._setDateComponents = function (date) {
	  var year = this.cal.equivalentCycleYear(date.year);
	  var y = date.year - (date.year >= 0 ? 474 : 473);
	  var rdOfYears = 1029983 * Math.floor(y / 2820) + 365 * (year - 1) + Math.floor((682 * year - 110) / 2816);
	  var dayInYear = (date.month > 1 ? PersAlgoRataDie.cumMonthLengths[date.month - 1] : 0) + date.day;
	  var rdtime = (date.hour * 3600000 + date.minute * 60000 + date.second * 1000 + date.millisecond) / 86400000;

	  /*
	  // console.log("getRataDie: converting " +  JSON.stringify(this));
	  console.log("getRataDie: year is " +  year);
	  console.log("getRataDie: rd of years is " +  rdOfYears);
	  console.log("getRataDie: day in year is " +  dayInYear);
	  console.log("getRataDie: rdtime is " +  rdtime);
	  console.log("getRataDie: rd is " +  (rdOfYears + dayInYear + rdtime));
	  */

	  this.rd = rdOfYears + dayInYear + rdtime;
	};

	/**
	 * Return the rd number of the particular day of the week on or before the 
	 * given rd. eg. The Sunday on or before the given rd.
	 * @private
	 * @param {number} rd the rata die date of the reference date
	 * @param {number} dayOfWeek the day of the week that is being sought relative 
	 * to the current date
	 * @return {number} the rd of the day of the week
	 */
	PersAlgoRataDie.prototype._onOrBefore = function (rd, dayOfWeek) {
	  return rd - MathUtils.mod(Math.floor(rd) - dayOfWeek - 3, 7);
	};

	module.exports = PersAlgoRataDie;

/***/ },
/* 219 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	/*
	 * PersianAlgoDate.js - Represent a date in the Persian algorithmic calendar
	 * 
	 * Copyright Â© 2014-2015, JEDLSoft
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 *
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */

	/* !depends 
	ilib.js
	Locale.js
	LocaleInfo.js
	TimeZone.js
	IDate.js
	PersianAlgoCal.js 
	SearchUtils.js
	MathUtils.js
	PersAlgoRataDie.js
	*/

	var ilib = __webpack_require__(2);
	var SearchUtils = __webpack_require__(33);
	var MathUtils = __webpack_require__(6);

	var Locale = __webpack_require__(12);
	var LocaleInfo = __webpack_require__(14);
	var TimeZone = __webpack_require__(24);
	var IDate = __webpack_require__(21);
	var Calendar = __webpack_require__(9);

	var PersianAlgoCal = __webpack_require__(79);
	var PersAlgoRataDie = __webpack_require__(218);

	/**
	 * @class
	 * 
	 * Construct a new Persian date object. The constructor parameters can 
	 * contain any of the following properties:
	 * 
	 * <ul>
	 * <li><i>unixtime<i> - sets the time of this instance according to the given 
	 * unix time. Unix time is the number of milliseconds since midnight on Jan 1, 1970, Gregorian
	 * 
	 * <li><i>julianday</i> - sets the time of this instance according to the given
	 * Julian Day instance or the Julian Day given as a float
	 * 
	 * <li><i>year</i> - any integer, including 0
	 * 
	 * <li><i>month</i> - 1 to 12, where 1 means Farvardin, 2 means Ordibehesht, etc.
	 * 
	 * <li><i>day</i> - 1 to 31
	 * 
	 * <li><i>hour</i> - 0 to 23. A formatter is used to display 12 hour clocks, but this representation 
	 * is always done with an unambiguous 24 hour representation
	 * 
	 * <li><i>minute</i> - 0 to 59
	 * 
	 * <li><i>second</i> - 0 to 59
	 * 
	 * <li><i>millisecond</i> - 0 to 999
	 * 
	 * <li><i>timezone</i> - the TimeZone instance or time zone name as a string 
	 * of this persian date. The date/time is kept in the local time. The time zone
	 * is used later if this date is formatted according to a different time zone and
	 * the difference has to be calculated, or when the date format has a time zone
	 * component in it.
	 * 
	 * <li><i>locale</i> - locale for this persian date. If the time zone is not 
	 * given, it can be inferred from this locale. For locales that span multiple
	 * time zones, the one with the largest population is chosen as the one that 
	 * represents the locale.
	 * 
	 * <li><i>date</i> - use the given intrinsic Javascript date to initialize this one.
	 * </ul>
	 *
	 * If the constructor is called with another Persian date instance instead of
	 * a parameter block, the other instance acts as a parameter block and its
	 * settings are copied into the current instance.<p>
	 * 
	 * If the constructor is called with no arguments at all or if none of the 
	 * properties listed above 
	 * from <i>unixtime</i> through <i>millisecond</i> are present, then the date 
	 * components are 
	 * filled in with the current date at the time of instantiation. Note that if
	 * you do not give the time zone when defaulting to the current time and the 
	 * time zone for all of ilib was not set with <i>ilib.setTimeZone()</i>, then the
	 * time zone will default to UTC ("Universal Time, Coordinated" or "Greenwich 
	 * Mean Time").<p>
	 * 
	 * If any of the properties from <i>year</i> through <i>millisecond</i> are not
	 * specified in the params, it is assumed that they have the smallest possible
	 * value in the range for the property (zero or one).<p>
	 * 
	 * 
	 * @constructor
	 * @extends IDate
	 * @param {Object=} params parameters that govern the settings and behaviour of this Persian date
	 */
	var PersianAlgoDate = function PersianAlgoDate(params) {
	  this.cal = new PersianAlgoCal();
	  this.timezone = "local";

	  if (params) {
	    if (params.locale) {
	      this.locale = typeof params.locale === 'string' ? new Locale(params.locale) : params.locale;
	      var li = new LocaleInfo(this.locale);
	      this.timezone = li.getTimeZone();
	    }
	    if (params.timezone) {
	      this.timezone = params.timezone;
	    }

	    if (params.year || params.month || params.day || params.hour || params.minute || params.second || params.millisecond) {
	      /**
	       * Year in the Persian calendar.
	       * @type number
	       */
	      this.year = parseInt(params.year, 10) || 0;

	      /**
	       * The month number, ranging from 1 to 12
	       * @type number
	       */
	      this.month = parseInt(params.month, 10) || 1;

	      /**
	       * The day of the month. This ranges from 1 to 31.
	       * @type number
	       */
	      this.day = parseInt(params.day, 10) || 1;

	      /**
	       * The hour of the day. This can be a number from 0 to 23, as times are
	       * stored unambiguously in the 24-hour clock.
	       * @type number
	       */
	      this.hour = parseInt(params.hour, 10) || 0;

	      /**
	       * The minute of the hours. Ranges from 0 to 59.
	       * @type number
	       */
	      this.minute = parseInt(params.minute, 10) || 0;

	      /**
	       * The second of the minute. Ranges from 0 to 59.
	       * @type number
	       */
	      this.second = parseInt(params.second, 10) || 0;

	      /**
	       * The millisecond of the second. Ranges from 0 to 999.
	       * @type number
	       */
	      this.millisecond = parseInt(params.millisecond, 10) || 0;

	      /**
	       * The day of the year. Ranges from 1 to 366.
	       * @type number
	       */
	      this.dayOfYear = parseInt(params.dayOfYear, 10);

	      if (typeof params.dst === 'boolean') {
	        this.dst = params.dst;
	      }

	      this.rd = this.newRd(this);

	      // add the time zone offset to the rd to convert to UTC
	      if (!this.tz) {
	        this.tz = new TimeZone({ id: this.timezone });
	      }
	      // getOffsetMillis requires that this.year, this.rd, and this.dst 
	      // are set in order to figure out which time zone rules apply and 
	      // what the offset is at that point in the year
	      this.offset = this.tz._getOffsetMillisWallTime(this) / 86400000;
	      if (this.offset !== 0) {
	        this.rd = this.newRd({
	          rd: this.rd.getRataDie() - this.offset
	        });
	      }
	    }
	  }

	  if (!this.rd) {
	    this.rd = this.newRd(params);
	    this._calcDateComponents();
	  }
	};

	PersianAlgoDate.prototype = new IDate({ noinstance: true });
	PersianAlgoDate.prototype.parent = IDate;
	PersianAlgoDate.prototype.constructor = PersianAlgoDate;

	/**
	 * Return a new RD for this date type using the given params.
	 * @protected
	 * @param {Object=} params the parameters used to create this rata die instance
	 * @returns {RataDie} the new RD instance for the given params
	 */
	PersianAlgoDate.prototype.newRd = function (params) {
	  return new PersAlgoRataDie(params);
	};

	/**
	 * Return the year for the given RD
	 * @protected
	 * @param {number} rd RD to calculate from 
	 * @returns {number} the year for the RD
	 */
	PersianAlgoDate.prototype._calcYear = function (rd) {
	  var shiftedRd = rd - 173126;
	  var numberOfCycles = Math.floor(shiftedRd / 1029983);
	  var shiftedDayInCycle = MathUtils.mod(shiftedRd, 1029983);
	  var yearInCycle = shiftedDayInCycle === 1029982 ? 2820 : Math.floor((2816 * shiftedDayInCycle + 1031337) / 1028522);
	  var year = 474 + 2820 * numberOfCycles + yearInCycle;
	  return year > 0 ? year : year - 1;
	};

	/**
	 * @private
	 * Calculate date components for the given RD date.
	 */
	PersianAlgoDate.prototype._calcDateComponents = function () {
	  var remainder,
	      rd = this.rd.getRataDie();

	  this.year = this._calcYear(rd);

	  if (typeof this.offset === "undefined") {
	    // now offset the RD by the time zone, then recalculate in case we were 
	    // near the year boundary
	    if (!this.tz) {
	      this.tz = new TimeZone({ id: this.timezone });
	    }
	    this.offset = this.tz.getOffsetMillis(this) / 86400000;
	  }

	  if (this.offset !== 0) {
	    rd += this.offset;
	    this.year = this._calcYear(rd);
	  }

	  //console.log("PersAlgoDate.calcComponent: calculating for rd " + rd);
	  //console.log("PersAlgoDate.calcComponent: year is " + ret.year);
	  var yearStart = this.newRd({
	    year: this.year,
	    month: 1,
	    day: 1,
	    hour: 0,
	    minute: 0,
	    second: 0,
	    millisecond: 0
	  });
	  remainder = rd - yearStart.getRataDie() + 1;

	  this.dayOfYear = remainder;

	  //console.log("PersAlgoDate.calcComponent: remainder is " + remainder);

	  this.month = SearchUtils.bsearch(remainder, PersAlgoRataDie.cumMonthLengths);
	  remainder -= PersAlgoRataDie.cumMonthLengths[this.month - 1];

	  //console.log("PersAlgoDate.calcComponent: month is " + this.month + " and remainder is " + remainder);

	  this.day = Math.floor(remainder);
	  remainder -= this.day;

	  //console.log("PersAlgoDate.calcComponent: day is " + this.day + " and remainder is " + remainder);

	  // now convert to milliseconds for the rest of the calculation
	  remainder = Math.round(remainder * 86400000);

	  this.hour = Math.floor(remainder / 3600000);
	  remainder -= this.hour * 3600000;

	  this.minute = Math.floor(remainder / 60000);
	  remainder -= this.minute * 60000;

	  this.second = Math.floor(remainder / 1000);
	  remainder -= this.second * 1000;

	  this.millisecond = remainder;
	};

	/**
	 * Return the day of the week of this date. The day of the week is encoded
	 * as number from 0 to 6, with 0=Sunday, 1=Monday, etc., until 6=Saturday.
	 * 
	 * @return {number} the day of the week
	 */
	PersianAlgoDate.prototype.getDayOfWeek = function () {
	  var rd = Math.floor(this.getRataDie());
	  return MathUtils.mod(rd - 3, 7);
	};

	/**
	 * Return the ordinal day of the year. Days are counted from 1 and proceed linearly up to 
	 * 365, regardless of months or weeks, etc. That is, Farvardin 1st is day 1, and 
	 * December 31st is 365 in regular years, or 366 in leap years.
	 * @return {number} the ordinal day of the year
	 */
	PersianAlgoDate.prototype.getDayOfYear = function () {
	  return PersAlgoRataDie.cumMonthLengths[this.month - 1] + this.day;
	};

	/**
	 * Return the era for this date as a number. The value for the era for Persian 
	 * calendars is -1 for "before the persian era" (BP) and 1 for "the persian era" (anno 
	 * persico or AP). 
	 * BP dates are any date before Farvardin 1, 1 AP. In the proleptic Persian calendar, 
	 * there is a year 0, so any years that are negative or zero are BP.
	 * @return {number} 1 if this date is in the common era, -1 if it is before the 
	 * common era 
	 */
	PersianAlgoDate.prototype.getEra = function () {
	  return this.year < 1 ? -1 : 1;
	};

	/**
	 * Return the name of the calendar that governs this date.
	 * 
	 * @return {string} a string giving the name of the calendar
	 */
	PersianAlgoDate.prototype.getCalendar = function () {
	  return "persian-algo";
	};

	// register with the factory method
	IDate._constructors["persian-algo"] = PersianAlgoDate;

	module.exports = PersianAlgoDate;

/***/ },
/* 220 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	/*
	 * PersianDate.js - Represent a date in the Persian astronomical (Hijjri) calendar
	 * 
	 * Copyright Â© 2014-2015, JEDLSoft
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 *
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */

	/* !depends 
	ilib.js
	Locale.js
	TimeZone.js
	IDate.js
	PersRataDie.js
	PersianCal.js 
	SearchUtils.js
	MathUtils.js
	LocaleInfo.js 
	Astro.js
	*/

	// !data astro

	var ilib = __webpack_require__(2);
	var SearchUtils = __webpack_require__(33);
	var MathUtils = __webpack_require__(6);

	var Locale = __webpack_require__(12);
	var LocaleInfo = __webpack_require__(14);
	var TimeZone = __webpack_require__(24);
	var IDate = __webpack_require__(21);
	var Calendar = __webpack_require__(9);

	var Astro = __webpack_require__(53);
	var PersianCal = __webpack_require__(117);
	var PersRataDie = __webpack_require__(116);

	/**
	 * @class
	 * 
	 * Construct a new Persian astronomical date object. The constructor parameters can 
	 * contain any of the following properties:
	 * 
	 * <ul>
	 * <li><i>unixtime<i> - sets the time of this instance according to the given 
	 * unix time. Unix time is the number of milliseconds since midnight on Jan 1, 1970, Gregorian
	 * 
	 * <li><i>julianday</i> - sets the time of this instance according to the given
	 * Julian Day instance or the Julian Day given as a float
	 * 
	 * <li><i>year</i> - any integer, including 0
	 * 
	 * <li><i>month</i> - 1 to 12, where 1 means Farvardin, 2 means Ordibehesht, etc.
	 * 
	 * <li><i>day</i> - 1 to 31
	 * 
	 * <li><i>hour</i> - 0 to 23. A formatter is used to display 12 hour clocks, but this representation 
	 * is always done with an unambiguous 24 hour representation
	 * 
	 * <li><i>minute</i> - 0 to 59
	 * 
	 * <li><i>second</i> - 0 to 59
	 * 
	 * <li><i>millisecond</i> - 0 to 999
	 * 
	 * <li><i>timezone</i> - the TimeZone instance or time zone name as a string 
	 * of this persian date. The date/time is kept in the local time. The time zone
	 * is used later if this date is formatted according to a different time zone and
	 * the difference has to be calculated, or when the date format has a time zone
	 * component in it.
	 * 
	 * <li><i>locale</i> - locale for this persian date. If the time zone is not 
	 * given, it can be inferred from this locale. For locales that span multiple
	 * time zones, the one with the largest population is chosen as the one that 
	 * represents the locale.
	 * 
	 * <li><i>date</i> - use the given intrinsic Javascript date to initialize this one.
	 * </ul>
	 *
	 * If the constructor is called with another Persian date instance instead of
	 * a parameter block, the other instance acts as a parameter block and its
	 * settings are copied into the current instance.<p>
	 * 
	 * If the constructor is called with no arguments at all or if none of the 
	 * properties listed above 
	 * from <i>unixtime</i> through <i>millisecond</i> are present, then the date 
	 * components are 
	 * filled in with the current date at the time of instantiation. Note that if
	 * you do not give the time zone when defaulting to the current time and the 
	 * time zone for all of ilib was not set with <i>ilib.setTimeZone()</i>, then the
	 * time zone will default to UTC ("Universal Time, Coordinated" or "Greenwich 
	 * Mean Time").<p>
	 * 
	 * If any of the properties from <i>year</i> through <i>millisecond</i> are not
	 * specified in the params, it is assumed that they have the smallest possible
	 * value in the range for the property (zero or one).<p>
	 * 
	 * 
	 * @constructor
	 * @extends IDate
	 * @param {Object=} params parameters that govern the settings and behaviour of this Persian date
	 */
	var PersianDate = function PersianDate(params) {
	  this.cal = new PersianCal();
	  this.timezone = "local";

	  if (params) {
	    if (params.locale) {
	      this.locale = typeof params.locale === 'string' ? new Locale(params.locale) : params.locale;
	      var li = new LocaleInfo(this.locale);
	      this.timezone = li.getTimeZone();
	    }
	    if (params.timezone) {
	      this.timezone = params.timezone;
	    }
	  }

	  Astro.initAstro(params && typeof params.sync === 'boolean' ? params.sync : true, params && params.loadParams, ilib.bind(this, function (x) {
	    if (params && (params.year || params.month || params.day || params.hour || params.minute || params.second || params.millisecond)) {
	      /**
	       * Year in the Persian calendar.
	       * @type number
	       */
	      this.year = parseInt(params.year, 10) || 0;

	      /**
	       * The month number, ranging from 1 to 12
	       * @type number
	       */
	      this.month = parseInt(params.month, 10) || 1;

	      /**
	       * The day of the month. This ranges from 1 to 31.
	       * @type number
	       */
	      this.day = parseInt(params.day, 10) || 1;

	      /**
	       * The hour of the day. This can be a number from 0 to 23, as times are
	       * stored unambiguously in the 24-hour clock.
	       * @type number
	       */
	      this.hour = parseInt(params.hour, 10) || 0;

	      /**
	       * The minute of the hours. Ranges from 0 to 59.
	       * @type number
	       */
	      this.minute = parseInt(params.minute, 10) || 0;

	      /**
	       * The second of the minute. Ranges from 0 to 59.
	       * @type number
	       */
	      this.second = parseInt(params.second, 10) || 0;

	      /**
	       * The millisecond of the second. Ranges from 0 to 999.
	       * @type number
	       */
	      this.millisecond = parseInt(params.millisecond, 10) || 0;

	      /**
	       * The day of the year. Ranges from 1 to 366.
	       * @type number
	       */
	      this.dayOfYear = parseInt(params.dayOfYear, 10);

	      if (typeof params.dst === 'boolean') {
	        this.dst = params.dst;
	      }

	      this.rd = this.newRd(this);

	      // add the time zone offset to the rd to convert to UTC
	      if (!this.tz) {
	        this.tz = new TimeZone({ id: this.timezone });
	      }
	      // getOffsetMillis requires that this.year, this.rd, and this.dst 
	      // are set in order to figure out which time zone rules apply and 
	      // what the offset is at that point in the year
	      this.offset = this.tz._getOffsetMillisWallTime(this) / 86400000;
	      if (this.offset !== 0) {
	        this.rd = this.newRd({
	          rd: this.rd.getRataDie() - this.offset
	        });
	      }
	    }

	    if (!this.rd) {
	      this.rd = this.newRd(params);
	      this._calcDateComponents();
	    }

	    if (params && typeof params.onLoad === 'function') {
	      params.onLoad(this);
	    }
	  }));
	};

	PersianDate.prototype = new IDate({ noinstance: true });
	PersianDate.prototype.parent = IDate;
	PersianDate.prototype.constructor = PersianDate;

	/**
	 * @private
	 * @const
	 * @type Array.<number>
	 * the cumulative lengths of each month, for a non-leap year 
	 */
	PersianDate.cumMonthLengths = [0, // Farvardin
	31, // Ordibehesht
	62, // Khordad
	93, // Tir
	124, // Mordad
	155, // Shahrivar
	186, // Mehr
	216, // Aban
	246, // Azar
	276, // Dey
	306, // Bahman
	336, // Esfand
	366];

	/**
	 * Return a new RD for this date type using the given params.
	 * @protected
	 * @param {Object=} params the parameters used to create this rata die instance
	 * @returns {RataDie} the new RD instance for the given params
	 */
	PersianDate.prototype.newRd = function (params) {
	  return new PersRataDie(params);
	};

	/**
	 * Return the year for the given RD
	 * @protected
	 * @param {number} rd RD to calculate from 
	 * @returns {number} the year for the RD
	 */
	PersianDate.prototype._calcYear = function (rd) {
	  var julianday = rd + this.rd.epoch;
	  return this.rd._getYear(julianday).year;
	};

	/**
	 * @private
	 * Calculate date components for the given RD date.
	 */
	PersianDate.prototype._calcDateComponents = function () {
	  var remainder,
	      rd = this.rd.getRataDie();

	  this.year = this._calcYear(rd);

	  if (typeof this.offset === "undefined") {
	    // now offset the RD by the time zone, then recalculate in case we were 
	    // near the year boundary
	    if (!this.tz) {
	      this.tz = new TimeZone({ id: this.timezone });
	    }
	    this.offset = this.tz.getOffsetMillis(this) / 86400000;
	  }

	  if (this.offset !== 0) {
	    rd += this.offset;
	    this.year = this._calcYear(rd);
	  }

	  //console.log("PersDate.calcComponent: calculating for rd " + rd);
	  //console.log("PersDate.calcComponent: year is " + ret.year);
	  var yearStart = this.newRd({
	    year: this.year,
	    month: 1,
	    day: 1,
	    hour: 0,
	    minute: 0,
	    second: 0,
	    millisecond: 0
	  });
	  remainder = rd - yearStart.getRataDie() + 1;

	  this.dayOfYear = remainder;

	  //console.log("PersDate.calcComponent: remainder is " + remainder);

	  this.month = SearchUtils.bsearch(Math.floor(remainder), PersianDate.cumMonthLengths);
	  remainder -= PersianDate.cumMonthLengths[this.month - 1];

	  //console.log("PersDate.calcComponent: month is " + this.month + " and remainder is " + remainder);

	  this.day = Math.floor(remainder);
	  remainder -= this.day;

	  //console.log("PersDate.calcComponent: day is " + this.day + " and remainder is " + remainder);

	  // now convert to milliseconds for the rest of the calculation
	  remainder = Math.round(remainder * 86400000);

	  this.hour = Math.floor(remainder / 3600000);
	  remainder -= this.hour * 3600000;

	  this.minute = Math.floor(remainder / 60000);
	  remainder -= this.minute * 60000;

	  this.second = Math.floor(remainder / 1000);
	  remainder -= this.second * 1000;

	  this.millisecond = remainder;
	};

	/**
	 * Return the day of the week of this date. The day of the week is encoded
	 * as number from 0 to 6, with 0=Sunday, 1=Monday, etc., until 6=Saturday.
	 * 
	 * @return {number} the day of the week
	 */
	PersianDate.prototype.getDayOfWeek = function () {
	  var rd = Math.floor(this.getRataDie());
	  return MathUtils.mod(rd - 3, 7);
	};

	/**
	 * Return the ordinal day of the year. Days are counted from 1 and proceed linearly up to 
	 * 365, regardless of months or weeks, etc. That is, Farvardin 1st is day 1, and 
	 * December 31st is 365 in regular years, or 366 in leap years.
	 * @return {number} the ordinal day of the year
	 */
	PersianDate.prototype.getDayOfYear = function () {
	  return PersianDate.cumMonthLengths[this.month - 1] + this.day;
	};

	/**
	 * Return the era for this date as a number. The value for the era for Persian 
	 * calendars is -1 for "before the persian era" (BP) and 1 for "the persian era" (anno 
	 * persico or AP). 
	 * BP dates are any date before Farvardin 1, 1 AP. In the proleptic Persian calendar, 
	 * there is a year 0, so any years that are negative or zero are BP.
	 * @return {number} 1 if this date is in the common era, -1 if it is before the 
	 * common era 
	 */
	PersianDate.prototype.getEra = function () {
	  return this.year < 1 ? -1 : 1;
	};

	/**
	 * Return the name of the calendar that governs this date.
	 * 
	 * @return {string} a string giving the name of the calendar
	 */
	PersianDate.prototype.getCalendar = function () {
	  return "persian";
	};

	// register with the factory method
	IDate._constructors["persian"] = PersianDate;

	module.exports = PersianDate;

/***/ },
/* 221 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	/*
	 * ResBundle.js - Resource bundle definition
	 * 
	 * Copyright Â© 2012-2015, JEDLSoft
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 *
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */

	// !depends ilib.js Locale.js LocaleInfo.js IString.js Utils.js JSUtils.js

	// !data pseudomap

	var ilib = __webpack_require__(2);
	var Utils = __webpack_require__(25);
	var JSUtils = __webpack_require__(23);

	var Locale = __webpack_require__(12);
	var LocaleInfo = __webpack_require__(14);

	var IString = __webpack_require__(56);

	/**
	 * @class
	 * Create a new resource bundle instance. The resource bundle loads strings
	 * appropriate for a particular locale and provides them via the getString 
	 * method.<p>
	 * 
	 * The options object may contain any (or none) of the following properties:
	 * 
	 * <ul>
	 * <li><i>locale</i> - The locale of the strings to load. If not specified, the default
	 * locale is the the default for the web page or app in which the bundle is 
	 * being loaded.
	 * 
	 * <li><i>name</i> - Base name of the resource bundle to load. If not specified the default
	 * base name is "resources".
	 * 
	 * <li><i>type</i> - Name the type of strings this bundle contains. Valid values are 
	 * "xml", "html", "text", or "raw". The default is "text". If the type is "xml" or "html",
	 * then XML/HTML entities and tags are not pseudo-translated. During a real translation, 
	 * HTML character entities are translated to their corresponding characters in a source
	 * string before looking that string up in the translations. Also, the characters "<", ">",
	 * and "&" are converted to entities again in the output, but characters are left as they
	 * are. If the type is "xml", "html", or "text" types, then the replacement parameter names
	 * are not pseudo-translated as well so that the output can be used for formatting with 
	 * the IString class. If the type is raw, all characters are pseudo-translated, 
	 * including replacement parameters as well as XML/HTML tags and entities.
	 * 
	 * <li><i>lengthen</i> - when pseudo-translating the string, tell whether or not to 
	 * automatically lengthen the string to simulate "long" languages such as German
	 * or French. This is a boolean value. Default is false.
	 * 
	 * <li><i>missing</i> - what to do when a resource is missing. The choices are:
	 * <ul>
	 *   <li><i>source</i> - return the source string unchanged
	 *   <li><i>pseudo</i> - return the pseudo-translated source string, translated to the
	 *   script of the locale if the mapping is available, or just the default Latin 
	 *   pseudo-translation if not
	 *   <li><i>empty</i> - return the empty string 
	 * </ul>
	 * The default behaviour is the same as before, which is to return the source string
	 * unchanged.
	 * 
	 * <li><i>onLoad</i> - a callback function to call when the resources are fully 
	 * loaded. When the onLoad option is given, this class will attempt to
	 * load any missing locale data using the ilib loader callback.
	 * When the constructor is done (even if the data is already preassembled), the 
	 * onLoad function is called with the current instance as a parameter, so this
	 * callback can be used with preassembled or dynamic loading or a mix of the two. 
	 * 
	 * <li>sync - tell whether to load any missing locale data synchronously or 
	 * asynchronously. If this option is given as "false", then the "onLoad"
	 * callback must be given, as the instance returned from this constructor will
	 * not be usable for a while. 
	 *
	 * <li><i>loadParams</i> - an object containing parameters to pass to the 
	 * loader callback function when locale data is missing. The parameters are not
	 * interpretted or modified in any way. They are simply passed along. The object 
	 * may contain any property/value pairs as long as the calling code is in
	 * agreement with the loader callback function as to what those parameters mean.
	 * </ul>
	 * 
	 * The locale option may be given as a locale spec string or as an 
	 * Locale object. If the locale option is not specified, then strings for
	 * the default locale will be loaded.<p> 
	 * 
	 * The name option can be used to put groups of strings together in a
	 * single bundle. The strings will then appear together in a JS object in
	 * a JS file that can be included before the ilib.<p>
	 * 
	 * A resource bundle with a particular name is actually a set of bundles
	 * that are each specific to a language, a language plus a region, etc. 
	 * All bundles with the same base name should
	 * contain the same set of source strings, but with different translations for 
	 * the given locale. The user of the bundle does not need to be aware of 
	 * the locale of the bundle, as long as it contains values for the strings 
	 * it needs.<p>
	 * 
	 * Strings in bundles for a particular locale are inherited from parent bundles
	 * that are more generic. In general, the hierarchy is as follows (from 
	 * least locale-specific to most locale-specific):
	 * 
	 * <ol>
	 * <li> language
	 * <li> region
	 * <li> language_script
	 * <li> language_region
	 * <li> region_variant
	 * <li> language_script_region
	 * <li> language_region_variant
	 * <li> language_script_region_variant
	 * </ol>
	 * 
	 * That is, if the translation for a string does not exist in the current
	 * locale, the more-generic parent locale is searched for the string. In the
	 * worst case scenario, the string is not found in the base locale's strings. 
	 * In this case, the missing option guides this class on what to do. If
	 * the missing option is "source", then the original source is returned as 
	 * the translation. If it is "empty", the empty string is returned. If it
	 * is "pseudo", then the pseudo-translated string that is appropriate for
	 * the default script of the locale is returned.<p> 
	 * 
	 * This allows developers to create code with new or changed strings in it and check in that
	 * code without waiting for the translations to be done first. The translated
	 * version of the app or web site will still function properly, but will show 
	 * a spurious untranslated string here and there until the translations are 
	 * done and also checked in.<p>   
	 *  
	 * The base is whatever language your developers use to code in. For
	 * a German web site, strings in the source code may be written in German 
	 * for example. Often this base is English, as many web sites are coded in
	 * English, but that is not required.<p>
	 * 
	 * The strings can be extracted with the ilib localization tool (which will be
	 * shipped at some future time.) Once the strings
	 * have been translated, the set of translated files can be generated with the
	 * same tool. The output from the tool can be used as input to the ResBundle
	 * object. It is up to the web page or app to make sure the JS file that defines
	 * the bundle is included before creating the ResBundle instance.<p>
	 * 
	 * A special locale "zxx-XX" is used as the pseudo-translation locale because
	 * zxx means "no linguistic information" in the ISO 639 standard, and the region 
	 * code XX is defined to be user-defined in the ISO 3166 standard. 
	 * Pseudo-translation is a locale where the translations are generated on
	 * the fly based on the contents of the source string. Characters in the source 
	 * string are replaced with other characters and returned. 
	 * 
	 * Example. If the source string is:
	 * 
	 * <pre>
	 * "This is a string"
	 * </pre>
	 * 
	 * then the pseudo-translated version might look something like this: 
	 * 
	 * <pre>
	 * "Å¢Ä§Ã¯Å Ã¯Å Ã¡ ÅÅ£ÅÃ¯Ã±Ä"
	 * </pre>
	 * <p>
	 * 
	 * Pseudo-translation can be used to test that your app or web site is translatable
	 * before an actual translation has happened. These bugs can then be fixed 
	 * before the translation starts, avoiding an explosion of bugs later when
	 * each language's tester registers the same bug complaining that the same 
	 * string is not translated. When pseudo-localizing with
	 * the Latin script, this allows the strings to be readable in the UI in the 
	 * source language (if somewhat funky-looking), 
	 * so that a tester can easily verify that the string is properly externalized 
	 * and loaded from a resource bundle without the need to be able to read a
	 * foreign language.<p> 
	 * 
	 * If one of a list of script tags is given in the pseudo-locale specifier, then the
	 * pseudo-localization can map characters to very rough transliterations of
	 * characters in the given script. For example, zxx-Hebr-XX maps strings to
	 * Hebrew characters, which can be used to test your UI in a right-to-left
	 * language to catch bidi bugs before a translation is done. Currently, the
	 * list of target scripts includes Hebrew (Hebr), Chinese Simplified Han (Hans),
	 * and Cyrillic (Cyrl) with more to be added later. If no script is explicitly
	 * specified in the locale spec, or if the script is not supported,
	 * then the default mapping maps Latin base characters to accented versions of
	 * those Latin characters as in the example above.
	 *  
	 * When the "lengthen" property is set to true in the options, the 
	 * pseudotranslation code will add digits to the end of the string to simulate
	 * the lengthening that occurs when translating to other languages. The above 
	 * example will come out like this:
	 * 
	 * <pre>
	 * "Å¢Ä§Ã¯Å Ã¯Å Ã¡ ÅÅ£ÅÃ¯Ã±Ä76543210"
	 * </pre>
	 * 
	 * The string is lengthened according to the length of the source string. If
	 * the source string is less than 20 characters long, the string is lengthened 
	 * by 50%. If the source string is 20-40 
	 * characters long, the string is lengthened by 33%. If te string is greater
	 * than 40 characters long, the string is lengthened by 20%.<p>
	 * 
	 * The pseudotranslation always ends a string with the digit "0". If you do
	 * not see the digit "0" in the UI for your app, you know that truncation
	 * has occurred, and the number you see at the end of the string tells you 
	 * how many characters were truncated.<p>
	 * 
	 * 
	 * @constructor
	 * @param {?Object} options Options controlling how the bundle is created
	 */
	var ResBundle = function ResBundle(options) {
	  var lookupLocale, spec;

	  this.locale = new Locale(); // use the default locale
	  this.baseName = "strings";
	  this.type = "text";
	  this.loadParams = {};
	  this.missing = "source";
	  this.sync = true;

	  if (options) {
	    if (options.locale) {
	      this.locale = typeof options.locale === 'string' ? new Locale(options.locale) : options.locale;
	    }
	    if (options.name) {
	      this.baseName = options.name;
	    }
	    if (options.type) {
	      this.type = options.type;
	    }
	    this.lengthen = options.lengthen || false;

	    if (typeof options.sync !== 'undefined') {
	      this.sync = options.sync == true;
	    }

	    if (typeof options.loadParams !== 'undefined') {
	      this.loadParams = options.loadParams;
	    }
	    if (typeof options.missing !== 'undefined') {
	      if (options.missing === "pseudo" || options.missing === "empty") {
	        this.missing = options.missing;
	      }
	    }
	  } else {
	    options = {};
	  }

	  this.map = {};

	  if (!ResBundle[this.baseName]) {
	    ResBundle[this.baseName] = {};
	  }

	  lookupLocale = this.locale.isPseudo() ? new Locale("en-US") : this.locale;

	  Utils.loadData({
	    object: ResBundle[this.baseName],
	    locale: lookupLocale,
	    name: this.baseName + ".json",
	    sync: this.sync,
	    loadParams: this.loadParams,
	    callback: ilib.bind(this, function (map) {
	      if (!map) {
	        map = ilib.data[this.baseName] || {};
	        spec = lookupLocale.getSpec().replace(/-/g, '_');
	        ResBundle[this.baseName].cache[spec] = map;
	      }
	      this.map = map;
	      if (this.locale.isPseudo()) {
	        if (!ResBundle.pseudomap) {
	          ResBundle.pseudomap = {};
	        }

	        this._loadPseudo(this.locale, options.onLoad);
	      } else if (this.missing === "pseudo") {
	        if (!ResBundle.pseudomap) {
	          ResBundle.pseudomap = {};
	        }

	        new LocaleInfo(this.locale, {
	          sync: this.sync,
	          loadParams: this.loadParams,
	          onLoad: ilib.bind(this, function (li) {
	            var pseudoLocale = new Locale("zxx", "XX", undefined, li.getDefaultScript());
	            this._loadPseudo(pseudoLocale, options.onLoad);
	          })
	        });
	      } else {
	        if (typeof options.onLoad === 'function') {
	          options.onLoad(this);
	        }
	      }
	    })
	  });

	  // console.log("Merged resources " + this.locale.toString() + " are: " + JSON.stringify(this.map));
	  //if (!this.locale.isPseudo() && JSUtils.isEmpty(this.map)) {
	  //	console.log("Resources for bundle " + this.baseName + " locale " + this.locale.toString() + " are not available.");
	  //}
	};

	ResBundle.defaultPseudo = ilib.data.pseudomap || {
	  "a": "Ã ",
	  "e": "Ã«",
	  "i": "Ã­",
	  "o": "Ãµ",
	  "u": "Ã¼",
	  "y": "Ã¿",
	  "A": "Ã",
	  "E": "Ã",
	  "I": "Ã",
	  "O": "Ã",
	  "U": "Ã",
	  "Y": "Å¶"
	};

	ResBundle.prototype = {
	  /**
	   * @protected
	   */
	  _loadPseudo: function _loadPseudo(pseudoLocale, onLoad) {
	    Utils.loadData({
	      object: ResBundle.pseudomap,
	      locale: pseudoLocale,
	      name: "pseudomap.json",
	      sync: this.sync,
	      loadParams: this.loadParams,
	      callback: ilib.bind(this, function (map) {
	        if (!map || JSUtils.isEmpty(map)) {
	          map = ResBundle.defaultPseudo;
	          var spec = pseudoLocale.getSpec().replace(/-/g, '_');
	          ResBundle.pseudomap.cache[spec] = map;
	        }
	        this.pseudomap = map;
	        if (typeof onLoad === 'function') {
	          onLoad(this);
	        }
	      })
	    });
	  },

	  /**
	   * Return the locale of this resource bundle.
	   * @return {Locale} the locale of this resource bundle object 
	   */
	  getLocale: function getLocale() {
	    return this.locale;
	  },

	  /**
	   * Return the name of this resource bundle. This corresponds to the name option
	   * given to the constructor.
	   * @return {string} name of the the current instance
	   */
	  getName: function getName() {
	    return this.baseName;
	  },

	  /**
	   * Return the type of this resource bundle. This corresponds to the type option
	   * given to the constructor.
	   * @return {string} type of the the current instance
	   */
	  getType: function getType() {
	    return this.type;
	  },

	  /*
	   * @private
	   * Pseudo-translate a string
	   */
	  pseudo: function pseudo(str) {
	    if (!str) {
	      return undefined;
	    }
	    var ret = "",
	        i;
	    for (i = 0; i < str.length; i++) {
	      if (this.type !== "raw") {
	        if (this.type === "html" || this.type === "xml") {
	          if (str.charAt(i) === '<') {
	            ret += str.charAt(i++);
	            while (i < str.length && str.charAt(i) !== '>') {
	              ret += str.charAt(i++);
	            }
	            if (i < str.length) {
	              ret += str.charAt(i++);
	            }
	          } else if (str.charAt(i) === '&') {
	            ret += str.charAt(i++);
	            while (i < str.length && str.charAt(i) !== ';' && str.charAt(i) !== ' ') {
	              ret += str.charAt(i++);
	            }
	            if (i < str.length) {
	              ret += str.charAt(i++);
	            }
	          }
	        }
	        if (i < str.length) {
	          if (str.charAt(i) === '{') {
	            ret += str.charAt(i++);
	            while (i < str.length && str.charAt(i) !== '}') {
	              ret += str.charAt(i++);
	            }
	            if (i < str.length) {
	              ret += str.charAt(i);
	            }
	          } else {
	            ret += this.pseudomap[str.charAt(i)] || str.charAt(i);
	          }
	        }
	      } else {
	        ret += this.pseudomap[str.charAt(i)] || str.charAt(i);
	      }
	    }
	    if (this.lengthen) {
	      var add;
	      if (ret.length <= 20) {
	        add = Math.round(ret.length / 2);
	      } else if (ret.length > 20 && ret.length <= 40) {
	        add = Math.round(ret.length / 3);
	      } else {
	        add = Math.round(ret.length / 5);
	      }
	      for (i = add - 1; i >= 0; i--) {
	        ret += i % 10;
	      }
	    }
	    if (this.locale.getScript() === "Hans" || this.locale.getScript() === "Hant" || this.locale.getScript() === "Hani" || this.locale.getScript() === "Hrkt" || this.locale.getScript() === "Jpan" || this.locale.getScript() === "Hira" || this.locale.getScript() === "Kana") {
	      // simulate Asian languages by getting rid of all the spaces
	      ret = ret.replace(/ /g, "");
	    }
	    return ret;
	  },

	  /*
	   * @private
	   * Escape html characters in the output.
	   */
	  escapeXml: function escapeXml(str) {
	    str = str.replace(/&/g, '&amp;');
	    str = str.replace(/</g, '&lt;');
	    str = str.replace(/>/g, '&gt;');
	    return str;
	  },

	  /*
	   * @private
	   * @param {string} str the string to unescape
	   */
	  unescapeXml: function unescapeXml(str) {
	    str = str.replace(/&amp;/g, '&');
	    str = str.replace(/&lt;/g, '<');
	    str = str.replace(/&gt;/g, '>');
	    return str;
	  },

	  /*
	   * @private
	   * Create a key name out of a source string. All this does so far is 
	   * compress sequences of white space into a single space on the assumption
	   * that this doesn't really change the meaning of the string, and therefore
	   * all such strings that compress to the same thing should share the same
	   * translation.
	   * @param {string} source the source string to make a key out of
	   */
	  makeKey: function makeKey(source) {
	    var key = source.replace(/\s+/gm, ' ');
	    return this.type === "xml" || this.type === "html" ? this.unescapeXml(key) : key;
	  },

	  /**
	   * Return a localized string. If the string is not found in the loaded set of
	   * resources, the original source string is returned. If the key is not given,
	   * then the source string itself is used as the key. In the case where the 
	   * source string is used as the key, the whitespace is compressed down to 1 space
	   * each, and the whitespace at the beginning and end of the string is trimmed.<p>
	   * 
	   * The escape mode specifies what type of output you are escaping the returned
	   * string for. Modes are similar to the types: 
	   * 
	   * <ul>
	   * <li>"html" -- prevents HTML injection by escaping the characters &lt &gt; and &amp;
	   * <li>"xml" -- currently same as "html" mode
	   * <li>"js" -- prevents breaking Javascript syntax by backslash escaping all quote and 
	   * double-quote characters
	   * <li>"attribute" -- meant for HTML attribute values. Currently this is the same as
	   * "js" escape mode.
	   * <li>"default" -- use the type parameter from the constructor as the escape mode as well
	   * <li>"none" or undefined -- no escaping at all.
	   * </ul>
	   * 
	   * The type parameter of the constructor specifies what type of strings this bundle
	   * is operating upon. This allows pseudo-translation and automatic key generation
	   * to happen properly by telling this class how to parse the string. The escape mode 
	   * for this method is different in that it specifies how this string will be used in 
	   * the calling code and therefore how to escape it properly.<p> 
	   * 
	   * For example, a section of Javascript code may be constructing an HTML snippet in a 
	   * string to add to the web page. In this case, the type parameter in the constructor should
	   * be "html" so that the source string can be parsed properly, but the escape mode should
	   * be "js" so that the output string can be used in Javascript without causing syntax
	   * errors.
	   * 
	   * @param {?string=} source the source string to translate
	   * @param {?string=} key optional name of the key, if any
	   * @param {?string=} escapeMode escape mode, if any
	   * @return {IString|undefined} the translation of the given source/key or undefined 
	   * if the translation is not found and the source is undefined 
	   */
	  getString: function getString(source, key, escapeMode) {
	    if (!source && !key) return new IString("");

	    var trans;
	    if (this.locale.isPseudo()) {
	      var str = source ? source : this.map[key];
	      trans = this.pseudo(str || key);
	    } else {
	      var keyName = key || this.makeKey(source);
	      if (typeof this.map[keyName] !== 'undefined') {
	        trans = this.map[keyName];
	      } else if (this.missing === "pseudo") {
	        trans = this.pseudo(source || key);
	      } else if (this.missing === "empty") {
	        trans = "";
	      } else {
	        trans = source;
	      }
	    }

	    if (escapeMode && escapeMode !== "none") {
	      if (escapeMode == "default") {
	        escapeMode = this.type;
	      }
	      if (escapeMode === "xml" || escapeMode === "html") {
	        trans = this.escapeXml(trans);
	      } else if (escapeMode == "js" || escapeMode === "attribute") {
	        trans = trans.replace(/'/g, "\\\'").replace(/"/g, "\\\"");
	      }
	    }
	    if (trans === undefined) {
	      return undefined;
	    } else {
	      var ret = new IString(trans);
	      ret.setLocale(this.locale.getSpec(), true, this.loadParams); // no callback
	      return ret;
	    }
	  },

	  /**
	   * Return a localized string as a Javascript object. This does the same thing as
	   * the getString() method, but it returns a regular Javascript string instead of
	   * and IString instance. This means it cannot be formatted with the format()
	   * method without being wrapped in an IString instance first.
	   * 
	   * @param {?string=} source the source string to translate
	   * @param {?string=} key optional name of the key, if any
	   * @param {?string=} escapeMode escape mode, if any
	   * @return {string|undefined} the translation of the given source/key or undefined 
	   * if the translation is not found and the source is undefined
	   */
	  getStringJS: function getStringJS(source, key, escapeMode) {
	    return this.getString(source, key, escapeMode).toString();
	  },

	  /**
	   * Return true if the current bundle contains a translation for the given key and
	   * source. The
	   * getString method will always return a string for any given key and source 
	   * combination, so it cannot be used to tell if a translation exists. Either one
	   * or both of the source and key must be specified. If both are not specified,
	   * this method will return false.
	   * 
	   * @param {?string=} source source string to look up
	   * @param {?string=} key key to look up
	   * @return {boolean} true if this bundle contains a translation for the key, and 
	   * false otherwise
	   */
	  containsKey: function containsKey(source, key) {
	    if (typeof source === 'undefined' && typeof key === 'undefined') {
	      return false;
	    }

	    var keyName = key || this.makeKey(source);
	    return typeof this.map[keyName] !== 'undefined';
	  },

	  /**
	   * Return the merged resources as an entire object. When loading resources for a
	   * locale that are not just a set of translated strings, but instead an entire 
	   * structured javascript object, you can gain access to that object via this call. This method
	   * will ensure that all the of the parts of the object are correct for the locale.<p>
	   * 
	   * For pre-assembled data, it starts by loading <i>ilib.data[name]</i>, where 
	   * <i>name</i> is the base name for this set of resources. Then, it successively 
	   * merges objects in the base data using progressively more locale-specific data. 
	   * It loads it in this order from <i>ilib.data</i>:
	   * 
	   * <ol>
	   * <li> language
	   * <li> region
	   * <li> language_script
	   * <li> language_region
	   * <li> region_variant
	   * <li> language_script_region
	   * <li> language_region_variant
	   * <li> language_script_region_variant
	   * </ol>
	   * 
	   * For dynamically loaded data, the code attempts to load the same sequence as
	   * above, but with slash path separators instead of underscores.<p>
	   *  
	   * Loading the resources this way allows the program to share resources between all
	   * locales that share a common language, region, or script. As a 
	   * general rule-of-thumb, resources should be as generic as possible in order to
	   * cover as many locales as possible.
	   * 
	   * @return {Object} returns the object that is the basis for this resources instance
	   */
	  getResObj: function getResObj() {
	    return this.map;
	  }
	};

	module.exports = ResBundle;

/***/ },
/* 222 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	/*
	 * ScriptInfo.js - information about scripts
	 * 
	 * Copyright Â© 2012-2015, JEDLSoft
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 *
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */

	// !depends ilib.js Utils.js

	// !data scripts

	var ilib = __webpack_require__(2);
	var Utils = __webpack_require__(25);

	/**
	 * @class
	 * Create a new script info instance. This class encodes information about
	 * scripts, which are sets of characters used in a writing system.<p>
	 * 
	 * The options object may contain any of the following properties:
	 * 
	 * <ul>
	 * <li><i>onLoad</i> - a callback function to call when the script info object is fully 
	 * loaded. When the onLoad option is given, the script info object will attempt to
	 * load any missing locale data using the ilib loader callback.
	 * When the constructor is done (even if the data is already preassembled), the 
	 * onLoad function is called with the current instance as a parameter, so this
	 * callback can be used with preassembled or dynamic loading or a mix of the two.
	 * 
	 * <li><i>sync</i> - tell whether to load any missing locale data synchronously or 
	 * asynchronously. If this option is given as "false", then the "onLoad"
	 * callback must be given, as the instance returned from this constructor will
	 * not be usable for a while. 
	 *
	 * <li><i>loadParams</i> - an object containing parameters to pass to the 
	 * loader callback function when locale data is missing. The parameters are not
	 * interpretted or modified in any way. They are simply passed along. The object 
	 * may contain any property/value pairs as long as the calling code is in
	 * agreement with the loader callback function as to what those parameters mean.
	 * </ul>
	 * 
	 * 
	 * @constructor
	 * @param {string} script The ISO 15924 4-letter identifier for the script
	 * @param {Object} options parameters to initialize this matcher 
	 */
	var ScriptInfo = function ScriptInfo(script, options) {
	  var sync = true,
	      loadParams = undefined;

	  this.script = script;

	  if (options) {
	    if (typeof options.sync !== 'undefined') {
	      sync = options.sync == true;
	    }

	    if (typeof options.loadParams !== 'undefined') {
	      loadParams = options.loadParams;
	    }
	  }

	  if (!ScriptInfo.cache) {
	    ScriptInfo.cache = {};
	  }

	  if (!ilib.data.scripts) {
	    Utils.loadData({
	      object: ScriptInfo,
	      locale: "-",
	      name: "scripts.json",
	      sync: sync,
	      loadParams: loadParams,
	      callback: ilib.bind(this, function (info) {
	        if (!info) {
	          info = { "Latn": { "nb": 215, "nm": "Latin", "lid": "Latin", "rtl": false, "ime": false, "casing": true } };
	          var spec = this.locale.getSpec().replace(/-/g, "_");
	          ScriptInfo.cache[spec] = info;
	        }
	        ilib.data.scripts = info;
	        this.info = script && ilib.data.scripts[script];
	        if (options && typeof options.onLoad === 'function') {
	          options.onLoad(this);
	        }
	      })
	    });
	  } else {
	    this.info = ilib.data.scripts[script];
	  }
	};

	/**
	 * @private
	 */
	ScriptInfo._getScriptsArray = function () {
	  var ret = [],
	      script = undefined,
	      scripts = ilib.data.scripts;

	  for (script in scripts) {
	    if (script && scripts[script]) {
	      ret.push(script);
	    }
	  }

	  return ret;
	};

	/**
	 * Return an array of all ISO 15924 4-letter identifier script identifiers that
	 * this copy of ilib knows about.
	 * @static
	 * @param {boolean} sync whether to find the available ids synchronously (true) or asynchronously (false)
	 * @param {Object} loadParams arbitrary object full of properties to pass to the loader
	 * @param {function(Array.<string>)} onLoad callback function to call when the data is finished loading
	 * @return {Array.<string>} an array of all script identifiers that this copy of
	 * ilib knows about
	 */
	ScriptInfo.getAllScripts = function (sync, loadParams, onLoad) {
	  if (!ilib.data.scripts) {
	    Utils.loadData({
	      object: ScriptInfo,
	      locale: "-",
	      name: "scripts.json",
	      sync: sync,
	      loadParams: loadParams,
	      callback: ilib.bind(this, function (info) {
	        ilib.data.scripts = info;

	        if (typeof onLoad === 'function') {
	          onLoad(ScriptInfo._getScriptsArray());
	        }
	      })
	    });
	  }

	  return ScriptInfo._getScriptsArray();
	};

	ScriptInfo.prototype = {
	  /**
	   * Return the 4-letter ISO 15924 identifier associated
	   * with this script.
	   * @return {string} the 4-letter ISO code for this script
	   */
	  getCode: function getCode() {
	    return this.info && this.script;
	  },

	  /**
	   * Get the ISO 15924 code number associated with this
	   * script.
	   * 
	   * @return {number} the ISO 15924 code number
	   */
	  getCodeNumber: function getCodeNumber() {
	    return this.info && this.info.nb || 0;
	  },

	  /**
	   * Get the name of this script in English.
	   * 
	   * @return {string} the name of this script in English
	   */
	  getName: function getName() {
	    return this.info && this.info.nm;
	  },

	  /**
	   * Get the long identifier assciated with this script.
	   * 
	   * @return {string} the long identifier of this script
	   */
	  getLongCode: function getLongCode() {
	    return this.info && this.info.lid;
	  },

	  /**
	   * Return the usual direction that text in this script is written
	   * in. Possible return values are "rtl" for right-to-left,
	   * "ltr" for left-to-right, and "ttb" for top-to-bottom.
	   * 
	   * @return {string} the usual direction that text in this script is
	   * written in
	   */
	  getScriptDirection: function getScriptDirection() {
	    return this.info && typeof this.info.rtl !== 'undefined' && this.info.rtl ? "rtl" : "ltr";
	  },

	  /**
	   * Return true if this script typically requires an input method engine
	   * to enter its characters.
	   * 
	   * @return {boolean} true if this script typically requires an IME
	   */
	  getNeedsIME: function getNeedsIME() {
	    return this.info && this.info.ime ? true : false; // converts undefined to false
	  },

	  /**
	   * Return true if this script uses lower- and upper-case characters.
	   * 
	   * @return {boolean} true if this script uses letter case
	   */
	  getCasing: function getCasing() {
	    return this.info && this.info.casing ? true : false; // converts undefined to false
	  }
	};

	module.exports = ScriptInfo;

/***/ },
/* 223 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	/*
	 * ThaiSolarDate.js - Represent a date in the ThaiSolar calendar
	 * 
	 * Copyright Â© 2013-2015, JEDLSoft
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 *
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */

	/* !depends 
	ilib.js
	IDate.js 
	JSUtils.js
	GregorianDate.js
	ThaiSolarCal.js
	*/

	var ilib = __webpack_require__(2);
	var JSUtils = __webpack_require__(23);

	var Calendar = __webpack_require__(9);
	var IDate = __webpack_require__(21);

	var ThaiSolarCal = __webpack_require__(118);
	var GregorianDate = __webpack_require__(30);
	var GregRataDie = __webpack_require__(43);

	/**
	 * @class
	 * Construct a new Thai solar date object. The constructor parameters can 
	 * contain any of the following properties:
	 * 
	 * <ul>
	 * <li><i>unixtime<i> - sets the time of this instance according to the given 
	 * unix time. Unix time is the number of milliseconds since midnight on Jan 1, 1970.
	 * 
	 * <li><i>julianday</i> - sets the time of this instance according to the given
	 * Julian Day instance or the Julian Day given as a float
	 * 
	 * <li><i>year</i> - any integer, including 0
	 * 
	 * <li><i>month</i> - 1 to 12, where 1 means January, 2 means February, etc.
	 * 
	 * <li><i>day</i> - 1 to 31
	 * 
	 * <li><i>hour</i> - 0 to 23. A formatter is used to display 12 hour clocks, but this representation 
	 * is always done with an unambiguous 24 hour representation
	 * 
	 * <li><i>minute</i> - 0 to 59
	 * 
	 * <li><i>second</i> - 0 to 59
	 * 
	 * <li><i>millisecond</i> - 0 to 999
	 * 
	 * <li><i>timezone</i> - the TimeZone instance or time zone name as a string 
	 * of this Thai solar date. The date/time is kept in the local time. The time zone
	 * is used later if this date is formatted according to a different time zone and
	 * the difference has to be calculated, or when the date format has a time zone
	 * component in it.
	 * 
	 * <li><i>locale</i> - locale for this Thai solar date. If the time zone is not 
	 * given, it can be inferred from this locale. For locales that span multiple
	 * time zones, the one with the largest population is chosen as the one that 
	 * represents the locale. 
	 * </ul>
	 *
	 * If the constructor is called with another Thai solar date instance instead of
	 * a parameter block, the other instance acts as a parameter block and its
	 * settings are copied into the current instance.<p>
	 * 
	 * If the constructor is called with no arguments at all or if none of the 
	 * properties listed above 
	 * from <i>unixtime</i> through <i>millisecond</i> are present, then the date 
	 * components are 
	 * filled in with the current date at the time of instantiation. Note that if
	 * you do not give the time zone when defaulting to the current time and the 
	 * time zone for all of ilib was not set with <i>ilib.setTimeZone()</i>, then the
	 * time zone will default to UTC ("Universal Time, Coordinated" or "Greenwich 
	 * Mean Time").<p>
	 * 
	 * If any of the properties from <i>year</i> through <i>millisecond</i> are not
	 * specified in the params, it is assumed that they have the smallest possible
	 * value in the range for the property (zero or one).<p>
	 * 
	 * 
	 * @constructor
	 * @extends GregorianDate
	 * @param {Object=} params parameters that govern the settings and behaviour of this Thai solar date
	 */
	var ThaiSolarDate = function ThaiSolarDate(params) {
	  var p = params;
	  if (params) {
	    // there is 198327 days difference between the Thai solar and 
	    // Gregorian epochs which is equivalent to 543 years
	    p = {};
	    JSUtils.shallowCopy(params, p);
	    if (typeof p.year !== 'undefined') {
	      p.year -= 543;
	    }
	    if (typeof p.rd !== 'undefined') {
	      p.rd -= 198327;
	    }
	  }
	  this.rd = undefined; // clear these out so that the GregorianDate constructor can set it
	  this.offset = undefined;
	  //console.log("ThaiSolarDate.constructor: date is " + JSON.stringify(this) + " parent is " + JSON.stringify(this.parent) + " and parent.parent is " + JSON.stringify(this.parent.parent));
	  GregorianDate.call(this, p);
	  this.cal = new ThaiSolarCal();
	  // make sure the year is set correctly
	  if (params && typeof params.year !== 'undefined') {
	    this.year = parseInt(params.year, 10);
	  }
	};

	ThaiSolarDate.prototype = new GregorianDate({ noinstance: true });
	ThaiSolarDate.prototype.parent = GregorianDate.prototype;
	ThaiSolarDate.prototype.constructor = ThaiSolarDate;

	/**
	 * the difference between a zero Julian day and the zero Thai Solar date.
	 * This is some 543 years before the start of the Gregorian epoch. 
	 * @private
	 * @const
	 * @type number
	 */
	ThaiSolarDate.epoch = 1523097.5;

	/**
	 * Calculate the date components for the current time zone
	 * @protected
	 */
	ThaiSolarDate.prototype._calcDateComponents = function () {
	  // there is 198327 days difference between the Thai solar and 
	  // Gregorian epochs which is equivalent to 543 years
	  // console.log("ThaiSolarDate._calcDateComponents: date is " + JSON.stringify(this) + " parent is " + JSON.stringify(this.parent) + " and parent.parent is " + JSON.stringify(this.parent.parent));
	  this.parent._calcDateComponents.call(this);
	  this.year += 543;
	};

	/**
	 * Return the Rata Die (fixed day) number of this date.
	 * 
	 * @protected
	 * @return {number} the rd date as a number
	 */
	ThaiSolarDate.prototype.getRataDie = function () {
	  // there is 198327 days difference between the Thai solar and 
	  // Gregorian epochs which is equivalent to 543 years
	  return this.rd.getRataDie() + 198327;
	};

	/**
	 * Return a new Gregorian date instance that represents the first instance of the 
	 * given day of the week before the current date. The day of the week is encoded
	 * as a number where 0 = Sunday, 1 = Monday, etc.
	 * 
	 * @param {number} dow the day of the week before the current date that is being sought
	 * @return {IDate} the date being sought
	 */
	ThaiSolarDate.prototype.before = function (dow) {
	  return new ThaiSolarDate({
	    rd: this.rd.before(dow, this.offset) + 198327,
	    timezone: this.timezone
	  });
	};

	/**
	 * Return a new Gregorian date instance that represents the first instance of the 
	 * given day of the week after the current date. The day of the week is encoded
	 * as a number where 0 = Sunday, 1 = Monday, etc.
	 * 
	 * @param {number} dow the day of the week after the current date that is being sought
	 * @return {IDate} the date being sought
	 */
	ThaiSolarDate.prototype.after = function (dow) {
	  return new ThaiSolarDate({
	    rd: this.rd.after(dow, this.offset) + 198327,
	    timezone: this.timezone
	  });
	};

	/**
	 * Return a new Gregorian date instance that represents the first instance of the 
	 * given day of the week on or before the current date. The day of the week is encoded
	 * as a number where 0 = Sunday, 1 = Monday, etc.
	 * 
	 * @param {number} dow the day of the week on or before the current date that is being sought
	 * @return {IDate} the date being sought
	 */
	ThaiSolarDate.prototype.onOrBefore = function (dow) {
	  return new ThaiSolarDate({
	    rd: this.rd.onOrBefore(dow, this.offset) + 198327,
	    timezone: this.timezone
	  });
	};

	/**
	 * Return a new Gregorian date instance that represents the first instance of the 
	 * given day of the week on or after the current date. The day of the week is encoded
	 * as a number where 0 = Sunday, 1 = Monday, etc.
	 * 
	 * @param {number} dow the day of the week on or after the current date that is being sought
	 * @return {IDate} the date being sought
	 */
	ThaiSolarDate.prototype.onOrAfter = function (dow) {
	  return new ThaiSolarDate({
	    rd: this.rd.onOrAfter(dow, this.offset) + 198327,
	    timezone: this.timezone
	  });
	};

	/**
	 * Return the name of the calendar that governs this date.
	 * 
	 * @return {string} a string giving the name of the calendar
	 */
	ThaiSolarDate.prototype.getCalendar = function () {
	  return "thaisolar";
	};

	//register with the factory method
	IDate._constructors["thaisolar"] = ThaiSolarDate;

	module.exports = ThaiSolarDate;

/***/ },
/* 224 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	exports.Loader = undefined;

	var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
		return typeof obj === "undefined" ? "undefined" : _typeof2(obj);
	} : function (obj) {
		return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof2(obj);
	}; /* global XMLHttpRequest, ILIB_BASE_PATH, ILIB_RESOURCES_PATH, ILIB_CACHE_ID */

	var _xhr = __webpack_require__(436);

	var _xhr2 = _interopRequireDefault(_xhr);

	var _Loader = __webpack_require__(216);

	var _Loader2 = _interopRequireDefault(_Loader);

	var _LocaleInfo = __webpack_require__(14);

	var _LocaleInfo2 = _interopRequireDefault(_LocaleInfo);

	var _zoneinfo = __webpack_require__(227);

	var _zoneinfo2 = _interopRequireDefault(_zoneinfo);

	function _interopRequireDefault(obj) {
		return obj && obj.__esModule ? obj : { default: obj };
	}

	var get = function get(url, callback) {
		if (typeof XMLHttpRequest !== 'undefined') {
			_xhr2.default.XMLHttpRequest = XMLHttpRequest || _xhr2.default.XMLHttpRequest;
			var req = void 0;
			(0, _xhr2.default)({ url: url, sync: true, beforeSend: function beforeSend(r) {
					return req = r;
				} }, function (err, resp, body) {
				var error = err || resp.statusCode !== 200 && resp.statusCode;
				// false failure from chrome and file:// urls
				if (error && req.status === 0 && req.response.length > 0) {
					body = req.response;
					error = false;
				}
				var json = error ? null : JSON.parse(body);
				callback(json, error);
			});
		} else {
			callback(null, new Error('Not a web browser environment'));
		}
	};

	var iLibBase = (__webpack_require__.p + "node_modules/@enact/i18n/ilib");
	var iLibResources = (__webpack_require__.p + "resources");
	var cachePrefix = 'ENACT-ILIB-';
	var cacheKey = cachePrefix + 'CACHE-ID';
	var cacheID = (__webpack_require__.ilib_cache_id);

	function EnyoLoader() {
		this.base = iLibBase;
		// TODO: full enyo.platform implementation for improved accuracy
		if ((typeof window === 'undefined' ? 'undefined' : _typeof(window)) === 'object' && _typeof(window.PalmSystem) === 'object') {
			this.webos = true;
		}
	}

	EnyoLoader.prototype = new _Loader2.default();
	EnyoLoader.prototype.constructor = EnyoLoader;

	EnyoLoader.prototype._createZoneFile = function (path) {
		var zone = path.substring(path.indexOf('zoneinfo'));

		// remove the .json suffix to get the name of the zone
		zone = zone.substring(0, zone.length - 5);

		try {
			var zif = new _zoneinfo2.default('/usr/share/' + zone);

			// only get the info for this year. Later we can get the info
			// for any historical or future year too
			return zif.getIlibZoneInfo(new Date());
		} catch (e) {
			// no file, so just return nothing
		}
	};

	EnyoLoader.prototype._pathjoin = function (_root, subpath) {
		if (!_root || !_root.length) {
			return subpath;
		}
		if (!subpath || !subpath.length) {
			return _root;
		}
		return _root + (_root.charAt(_root.length - 1) !== '/' ? '/' : '') + subpath;
	};

	/**
	 * Load the list of files asynchronously. This uses recursion in
	 * order to create a queue of files that will be loaded serially.
	 * Each layer, starting at the bottom, loads a file and then loads
	 * the layer on top of it. The very top file on the stack will have
	 * zero files to load, so instead it will be the one to call the
	 * callback to notify the caller that all the content is loaded.
	 *
	 * @param {Array.<string>} paths array of strings containing relative paths for required locale data
	 *	files
	 * @param {Array} results empty array in which to place the resulting json when it is loaded from a
	 *	file
	 * @param {Object} params An object full of parameters that the caller is passing to this function
	 *	to help load the files
	 * @param {function(Array.<Object>)} callback callback to call when this function is finished
	 *	attempting to load all the files that exist and can be loaded
	 *
	 * @returns {undefined}
	 */
	EnyoLoader.prototype._loadFilesAsync = function (paths, results, params, cache, callback) {
		var _this = this;

		var _root = iLibResources;
		if (params && typeof params.root !== 'undefined') {
			_root = params.root;
		}
		if (paths.length > 0) {
			var path = paths.shift(),
			    cacheItem = cache.data.shift(),
			    url = void 0;

			if (this.webos && path.indexOf('zoneinfo') !== -1) {
				results.push(this._createZoneFile(path));
			} else if (cacheItem) {
				results.push(cacheItem);
			} else {
				if (this.isAvailable(_root, path)) {
					url = this._pathjoin(_root, path);
				} else if (this.isAvailable(this.base + 'locale', path)) {
					url = this._pathjoin(this._pathjoin(this.base, 'locale'), path);
				}

				var resultFunc = function resultFunc(json, err) {
					if (!err && (typeof json === 'undefined' ? 'undefined' : _typeof(json)) === 'object') {
						cache.update = true;
						results.push(json);
					} else if (path === 'localeinfo.json') {
						results.push(_LocaleInfo2.default.defaultInfo);
					} else {
						// eslint-disable-next-line no-undefined
						results.push(undefined);
					}
					if (paths.length > 0) {
						_this._loadFilesAsync(paths, results, params, cache, callback);
					} else {
						// only the bottom item on the stack will call the callback
						callback(results);
					}
				};

				if (url) {
					get(url, resultFunc);
				} else {
					// nothing to load, so go to the next file
					resultFunc({});
				}
			}
		}
	};

	EnyoLoader.prototype._loadFilesCache = function (paths) {
		this._validateCache();
		if (typeof window !== 'undefined' && window.localStorage && paths.length > 0) {
			var stored = window.localStorage.getItem(cachePrefix + paths[0]);
			if (stored) {
				var target = JSON.stringify(paths);
				var data = JSON.parse(stored);
				if (data.target === target) {
					return data.value;
				} else {
					window.localStorage.removeItem(cachePrefix + paths[0]);
				}
			}
		}
		return new Array(paths.length);
	};

	EnyoLoader.prototype._storeFilesCache = function (paths, data) {
		if (typeof window !== 'undefined' && window.localStorage && paths.length > 0) {
			var target = JSON.stringify(paths);
			window.localStorage.setItem(cachePrefix + paths[0], JSON.stringify({ target: target, value: data }));
		}
	};

	EnyoLoader.prototype._validateCache = function () {
		if (!this._cacheValidated && typeof window !== 'undefined' && window.localStorage) {
			var activeID = window.localStorage.getItem(cacheKey);
			if (activeID !== cacheID) {
				for (var i = 0; i < window.localStorage.length; i++) {
					var key = window.localStorage.key(i);
					if (key.indexOf(cachePrefix) === 0) {
						window.localStorage.removeItem(key);
						i--;
					}
				}
				window.localStorage.setItem(cacheKey, cacheID);
			}
		}
		this._cacheValidated = true;
	};

	EnyoLoader.prototype.loadFiles = function (paths, sync, params, callback) {
		var cache = { data: this._loadFilesCache(paths) };
		if (sync) {
			var ret = [];
			var _root = iLibResources;
			var locdata = this._pathjoin(this.base, 'locale');
			if (params && typeof params.root !== 'undefined') {
				_root = params.root;
			}
			// synchronous
			paths.forEach(function (path, index) {
				if (this.webos && path.indexOf('zoneinfo') !== -1) {
					ret.push(this._createZoneFile(path));
				} else if (cache.data[index]) {
					ret.push(cache.data[index]);
				} else {
					var found = false;

					var handler = function handler(json, err) {
						if (!err && (typeof json === 'undefined' ? 'undefined' : _typeof(json)) === 'object') {
							cache.update = true;
							ret.push(json);
							found = true;
						}
					};

					if (this.isAvailable(_root, path)) {
						get(this._pathjoin(_root, path), handler);
					}

					if (!found && this.isAvailable(locdata, path)) {
						get(this._pathjoin(locdata, path), handler);
					}

					if (!found) {
						if (path === 'localeinfo.json') {
							// Use default locale info when xhr on root localeinfo.json fails/skips
							ret.push(_LocaleInfo2.default.defaultInfo);
						} else {
							// not there, so fill in a blank entry in the array
							// eslint-disable-next-line no-undefined
							ret.push(undefined);
						}
					}
				}
			}.bind(this));

			if (cache.update) {
				this._storeFilesCache(paths, ret);
			}
			if (typeof callback === 'function') {
				callback.call(this, ret);
			}
			return ret;
		}

		// asynchronous
		var results = [];
		this._loadFilesAsync(paths.slice(0), results, params, cache, function (res) {
			if (cache.update) {
				this._storeFilesCache(paths, res);
			}
			if (typeof callback === 'function') {
				callback.call(this, res);
			}
		}.bind(this));
	};

	EnyoLoader.prototype._loadManifest = function (_root, subpath) {
		var _this2 = this;

		if (!this.manifest) {
			this.manifest = {};
		}

		var dirpath = this._pathjoin(_root, subpath);
		var filepath = this._pathjoin(dirpath, 'ilibmanifest.json');

		// util.print('enyo loader: loading manifest ' + filepath + '\n');

		var handler = function handler(json, err) {
			// console.log((!inSender.failed && json ? 'success' : 'failed'));
			// star indicates there was no ilibmanifest.json, so always try to load files from that dir
			if (!err && (typeof json === 'undefined' ? 'undefined' : _typeof(json)) === 'object') {
				if (typeof window !== 'undefined' && window.localStorage) {
					window.localStorage.setItem(cachePrefix + filepath, JSON.stringify(json));
				}
				_this2.manifest[dirpath] = json.files;
			} else {
				_this2.manifest[dirpath] = '*';
			}
		};

		var cachedManifest = void 0;
		if (typeof window !== 'undefined' && window.localStorage) {
			cachedManifest = window.localStorage.getItem(cachePrefix + filepath);
		}
		if (cachedManifest) {
			this.manifest[dirpath] = JSON.parse(cachedManifest).files;
		} else {
			get(filepath, handler);
		}
	};

	EnyoLoader.prototype._loadStandardManifests = function () {
		// util.print('enyo loader: load manifests\n');
		if (!this.manifest) {
			this._validateCache();
			this._loadManifest(this.base, 'locale'); // standard ilib locale data
			this._loadManifest('', iLibResources); // the app's resources dir
		}
	};

	EnyoLoader.prototype.listAvailableFiles = function () {
		// util.print('enyo loader: list available files called\n');
		this._loadStandardManifests();
		return this.manifest;
	};

	EnyoLoader.prototype.isAvailable = function (_root, path) {
		this._loadStandardManifests();

		if (!this.manifest[_root]) {
			// maybe it's a custom root? If so, try to load
			// the manifest file first in case it is there
			this._loadManifest(_root, '');
		}

		// util.print('enyo loader: isAvailable ' + path + '? ');
		// star means attempt to load everything because there was no manifest in that dir
		if (this.manifest[_root] === '*' || this.manifest[_root].indexOf(path) !== -1) {
			// util.print('true\n');
			return true;
		}

		// util.print('false\n');
		return false;
	};

	exports.default = EnyoLoader;
	exports.Loader = EnyoLoader;

/***/ },
/* 225 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	// ilib doesn't load the non-Gregorian calendars and dates initially. To ensure they are packaged
	// by enyo-dev, we've added explicit requires for each Date (which in turn requires the relevant
	// Calendar). This is only necessary for builds not using the library-mode build of enyo-ilib which
	// would have included everything

	__webpack_require__(30); // not required (rimshot) but included for completeness
	__webpack_require__(206);
	__webpack_require__(113);
	__webpack_require__(30);
	__webpack_require__(208);
	__webpack_require__(210);
	__webpack_require__(212);
	__webpack_require__(214);
	__webpack_require__(220);
	__webpack_require__(219);
	__webpack_require__(223);

/***/ },
/* 226 */
/***/ function(module, exports) {

	'use strict';

	/*
	 * packedbuffer.js - represent a packed buffer of bytes
	 *
	 * Copyright Â© 2014 LG Electronics, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 *
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */

	/**
	 * Represents a binary buffer of unsigned bytes that will be parsed in various ways. The buffer
	 * can be decoded by reading various lengths of bytes and interpreting them as longs
	 * or unsigned bytes, etc. The bytes are interpreted in big-endian (network) format.
	 * @constructor
	 * @param {string} buffer the binary buffer represented as a string
	 */

	var PackedBuffer = function PackedBuffer(buffer) {
	  this.buffer = buffer;
	  this.index = 0;
	};

	/**
	 * Return the specified number of signed long integers from the current location in
	 * the buffer as an array of numbers and advance the current pointer in the buffer.
	 * This method will only return as many longs as are available in the rest of the
	 * buffer.
	 *
	 * @param {number} num The number of longs to return
	 * @returns {Array.<number>} the array of signed long integers
	 */
	PackedBuffer.prototype.getLongs = function (num) {
	  var result = void 0;
	  if (this.buffer && this.index < this.buffer.length) {
	    result = [];
	    for (var i = 0; i < num && this.index + 3 < this.buffer.length; i++) {
	      var longnum = this.buffer[this.index] << 24 | this.buffer[this.index + 1] << 16 | this.buffer[this.index + 2] << 8 | this.buffer[this.index + 3];
	      result.push(longnum);
	      this.index += 4;
	    }
	  }
	  return result;
	};

	/**
	 * Return a signed long integer from the current location in
	 * the buffer as an array of numbers and advance the current pointer in the buffer.
	 * This method will only return a long if it is available in the buffer, otherwise
	 * it will return undefined.
	 *
	 * @returns {number} the long at the current point in the buffer, or undefined if
	 * there is not enough bytes left in the buffer to form a long
	 */
	PackedBuffer.prototype.getLong = function () {
	  var longs = this.getLongs(1);
	  if (longs && longs.length > 0) {
	    return longs[0];
	  }
	};

	/**
	 * Return the specified number of signed byte integers from the current location in
	 * the buffer as an array of numbers and advance the current pointer in the buffer.
	 * This method will only return as many bytes as are available in the rest of the
	 * buffer.
	 *
	 * @param {number|undefined} num The number of bytes to return
	 * @returns {Array.<number>} the array of signed byte integers
	 */
	PackedBuffer.prototype.getBytes = function (num) {
	  var result = void 0;
	  if (this.buffer && this.index < this.buffer.length) {
	    result = [];
	    for (var i = 0; i < num && this.index < this.buffer.length; i++) {
	      var bytenum = this.buffer[this.index++];
	      if (bytenum & 0x80) {
	        bytenum -= 0x100;
	      }
	      result.push(bytenum);
	    }
	  }
	  return result;
	};

	/**
	 * Return a signed byte integer from the current location in
	 * the buffer as an array of numbers and advance the current pointer in the buffer.
	 * This method will only return a byte if it is available in the buffer, otherwise
	 * it will return undefined.
	 *
	 * @returns {number} the byte at the current point in the buffer, or undefined if
	 * there is not enough bytes left in the buffer to form a byte
	 */
	PackedBuffer.prototype.getByte = function () {
	  var bytes = this.getBytes(1);
	  if (bytes && bytes.length > 0) {
	    return bytes[0];
	  }
	};

	/**
	 * Return the specified number of unsigned byte integers from the current location in
	 * the buffer as an array of numbers and advance the current pointer in the buffer.
	 * This method will only return as many bytes as are available in the rest of the
	 * buffer.
	 *
	 * @param {number} num The number of bytes to return
	 * @returns {Array.<number>} the array of unsigned byte integers
	 */
	PackedBuffer.prototype.getUnsignedBytes = function (num) {
	  var result = void 0;
	  if (this.buffer && this.index < this.buffer.length) {
	    result = [];
	    for (var i = 0; i < num && this.index < this.buffer.length; i++) {
	      result.push(this.buffer[this.index++]);
	    }
	  }
	  return result;
	};

	/**
	 * Return a string made out of the given number of bytes and convert
	 * from UTF-8 to UTF-16.
	 *
	 * @param {number} num The number of bytes to make a string out of
	 * @returns {string} a string made out of the given bytes
	 */
	PackedBuffer.prototype.getString = function (num) {
	  var arr = this.getUnsignedBytes(num);
	  var str = '';
	  for (var i = 0; i < arr.length; i++) {
	    str += String.fromCharCode(arr[i]);
	  }
	  return str;
	};

	/**
	 * Advance the current pointer in the buffer by the specified number of
	 * bytes in the string.
	 *
	 * @param {number} num The number of bytes to skip
	 * @returns {void}
	 */
	PackedBuffer.prototype.skip = function (num) {
	  this.index += num;
	};

	module.exports = PackedBuffer;

/***/ },
/* 227 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/* eslint-env browser,es6 */
	/*
	 * zoneinfo.js - represent a binary zone info file
	 *
	 * Copyright Â© 2014 LG Electronics, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 *
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * The portion of this code that parses the zone info file format is derived
	 * from the code in the node-zoneinfo project by Gregory McWhirter licensed
	 * under the MIT license:
	 *
	 * Copyright (c) 2013 Gregory McWhirter
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining
	 * a copy of this software and associated documentation files (the
	 * "Software"), to deal in the Software without restriction, including
	 * without limitation the rights to use, copy, modify, merge, publish,
	 * distribute, sublicense, and/or sell copies of the Software, and to
	 * permit persons to whom the Software is furnished to do so, subject
	 * to the following conditions:

	 * The above copyright notice and this permission notice shall be included
	 * in all copies or substantial portions of the Software.

	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
	 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
	 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
	 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
	 * OTHER DEALINGS IN THE SOFTWARE.
	 */

	var PackedBuffer = __webpack_require__(226);

	var _platform = typeof PalmSystem !== 'undefined' ? 'webos' : 'browser';

	/**
	 * Represents a binary zone info file of the sort that the Unix Zone Info Compiler
	 * produces.
	 * @constructor
	 * @param {string} path path to the file to be loaded
	 * @param {number} year year of the zone info rules needed
	 */
	var ZoneInfoFile = function ZoneInfoFile(path) {
		var that = this;
		switch (_platform) {
			/*
	  Uncomment and use this when enyo works for binary load.
	  case 'enyo':
	  	let ajax = new enyo.Ajax({
	  		xhrFields: {
	  			responseType:'arraybuffer'
	  		},
	  		cacheBust: false,
	  		sync: true,
	  		handleAs: 'binary',
	  		url: 'file://' + path
	  	});
	  	ajax.response(this, function (s, r) {
	  		let byteArray = new Uint8Array(r);
	  		// console.log('ZoneInfoFile bytes received: ' + byteArray.length);
	  		that._parseInfo(byteArray);
	  	});
	  	//ajax.error(this, function (s, r) {
	  	//	console.log('ZoneInfoFile: failed to load files ' + JSON.stringify(s) + ' ' + r);
	  	//});
	  	ajax.go();
	  	break;
	  */

			default:
				{
					// use normal web techniques for sync binary data fetching
					// see https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/Sending_and_Receiving_Binary_Data
					var req = new XMLHttpRequest();
					req.open('GET', 'file:' + path, false);
					req.overrideMimeType('text\/plain; charset=x-user-defined');
					req.onload = function () {
						var byteArray = new Uint8Array(req.response.length);
						for (var i = 0; i < req.response.length; i++) {
							byteArray[i] = req.response.charCodeAt(i) & 0xff;
						}
						// console.log('ZoneInfoFile bytes received: ' + byteArray.length);
						that._parseInfo(byteArray);
					};
					req.onerror = function () {
						throw new Error('Cannot load file ' + path);
					};
					req.send();
					break;
				}
		}
	};

	/**
	 * @private
	 * Parse the binary buffer to find the zone info
	 * @param {Buffer} buffer The buffer to process
	 * @returns {void}
	 */
	ZoneInfoFile.prototype._parseInfo = function (buffer) {
		var packed = new PackedBuffer(buffer);

		// The time zone information files used by tzset(3)
		// begin with the magic characters 'TZif' to identify
		// them as time zone information files, followed by
		// sixteen bytes reserved for future use, followed by
		// six four-byte values of type long, written in a
		// ''standard'' byte order (the high-order byte
		// of the value is written first).
		if (packed.getString(4) !== 'TZif') {
			throw new Error('file format not recognized');
		} else {
			// ignore 16 bytes
			packed.skip(16);

			/* eslint-disable camelcase */
			// The number of UTC/local indicators stored in the file.
			var tzh_ttisgmtcnt = packed.getLong();
			// The number of standard/wall indicators stored in the file.
			var tzh_ttisstdcnt = packed.getLong();
			// The number of leap seconds for which data is stored in the file.
			var tzh_leapcnt = packed.getLong();
			// The number of 'transition times' for which data is stored in the file.
			var tzh_timecnt = packed.getLong();
			// The number of 'local time types' for which data is stored in the file (must not be zero).
			var tzh_typecnt = packed.getLong();
			// The number of characters of 'time zone abbreviation strings' stored in the file.
			var tzh_charcnt = packed.getLong();

			this.transitionTimes = tzh_timecnt ? packed.getLongs(tzh_timecnt) : [];

			this.transitionTimes = this.transitionTimes.map(function (item) {
				return item * 1000;
			});

			// these are indexes into the zonesInfo that correspond to each transition time
			this.ruleIndex = tzh_timecnt ? packed.getUnsignedBytes(tzh_timecnt) : [];

			this.zoneInfo = [];
			for (var i = 0; i < tzh_typecnt; i++) {
				this.zoneInfo.push({
					offset: Math.floor(packed.getLong() / 60), // offset in seconds, so convert to minutes
					isdst: !!packed.getByte(),
					abbreviationIndex: packed.getByte()
				});
			}

			var allAbbreviations = packed.getString(tzh_charcnt);

			for (var _i = 0; _i < tzh_typecnt; _i++) {
				var abbreviation = allAbbreviations.substring(this.zoneInfo[_i].abbreviationIndex);
				this.zoneInfo[_i].abbreviation = abbreviation.substring(0, abbreviation.indexOf('\x00'));
			}

			// ignore the leap seconds
			if (tzh_leapcnt) {
				packed.skip(tzh_leapcnt * 2);
			}

			// skip the standard/wall time indicators
			if (tzh_ttisstdcnt) {
				packed.skip(tzh_ttisstdcnt);
			}

			// ignore the UTC/local time indicators -- everything should be UTC
			if (tzh_ttisgmtcnt) {
				packed.skip(tzh_ttisgmtcnt);
			}

			// finished reading

			// Replace ttinfo indexes for ttinfo objects.
			var that = this;
			this.ruleIndex = this.ruleIndex.map(function (item) {
				return {
					offset: that.zoneInfo[item].offset,
					isdst: that.zoneInfo[item].isdst,
					abbreviation: that.zoneInfo[item].abbreviation
				};
			});

			// calculate the dst savings for each daylight time
			for (var _i2 = 0; _i2 < tzh_timecnt; _i2++) {
				if (_i2 > 0 && this.ruleIndex[_i2].isdst) {
					this.ruleIndex[_i2].savings = this.ruleIndex[_i2].offset - this.ruleIndex[_i2 - 1].offset;
				}
			}

			// Set standard, dst, and before ttinfos. before will be
			// used when a given time is before any transitions,
			// and will be set to the first non-dst ttinfo, or to
			// the first dst, if all of them are dst.
			if (!this.transitionTimes.length) {
				this.standardTime = this.zoneInfo[0];
			} else {
				for (var j = tzh_timecnt - 1; j > -1; j--) {
					var tti = this.ruleIndex[j];
					if (!this.standardTime && !tti.isdst) {
						this.standardTime = tti;
					} else if (!this.daylightTime && tti.isdst) {
						this.daylightTime = tti;
					}

					if (this.daylightTime && this.standardTime) {
						break;
					}
				}

				if (this.daylightTime && !this.standardTime) {
					this.standardTime = this.daylightTime;
				}

				for (var k = this.zoneInfo.length - 1; k > 0; k--) {
					if (!this.zoneInfo[k].isdst) {
						this.defaultTime = this.zoneInfo[k];
						break;
					}
				}
			}
			if (!this.defaultTime) {
				this.defaultTime = this.zoneInfo[this.zoneInfo.length - 1];
			}
		}
	};

	/**
	 * Binary search a sorted array of numbers for a particular target value.
	 * If the exact value is not found, it returns the index of the largest
	 * entry that is smaller than the given target value.<p>
	 *
	 * @param {number} target element being sought
	 * @param {Array} arr the array being searched
	 * @returns {number} the index of the array into which the value would fit if
	 * inserted, or -1 if given array is not an array or the target is not
	 * a number
	 */
	ZoneInfoFile.prototype.bsearch = function (target, arr) {
		if (typeof arr === 'undefined' || !arr || typeof target === 'undefined' || target < arr[0]) {
			return -1;
		}

		// greater than the end of the array
		if (target > arr[arr.length - 1]) {
			return arr.length - 1;
		}

		var high = arr.length - 1,
		    low = 0,
		    mid = 0,
		    value = void 0;

		while (low <= high) {
			mid = Math.floor((high + low) / 2);
			value = arr[mid] - target;
			if (value > 0) {
				high = mid - 1;
			} else if (value < 0) {
				low = mid + 1;
			} else {
				return mid;
			}
		}

		return high;
	};

	/**
	 * Return whether or not this zone uses DST in the given year.
	 *
	 * @param {Date} date the Gregorian date to test
	 * @returns {boolean} true if the zone uses DST in the given year
	 */
	ZoneInfoFile.prototype.usesDST = function (date) {
		var thisYear = date.getTime();
		var nextYear = thisYear + 31536000000; // this is the number of ms in 1 Gregorian year

		// search for the zone that was effective Jan 1 of this year
		// to Jan 1 of next year, and if any of the infos is DST, then
		// this zone supports DST in the given year.

		var index = this.bsearch(thisYear, this.transitionTimes);
		if (index !== -1) {
			while (index < this.transitionTimes.length && this.transitionTimes[index] < nextYear) {
				if (this.ruleIndex[index++].isdst) {
					return true;
				}
			}
		}

		return false;
	};

	/**
	 * Return the raw offset from UTC that this zone uses at the given time.
	 *
	 * @param {Date} date the Gregorian date to test
	 * @returns {number} offset from from UTC in number of minutes. Negative
	 * numbers are west of Greenwich, positive are east of Greenwich
	 */
	ZoneInfoFile.prototype.getRawOffset = function (date) {
		var thisYear = date.getTime();
		var nextYear = thisYear + 31536000000; // this is the number of ms in 1 Gregorian year

		var index = this.bsearch(thisYear, this.transitionTimes);

		var offset = this.defaultTime.offset;
		if (index > -1) {
			while (index < this.transitionTimes.length && this.ruleIndex[index].isdst && this.transitionTimes[index + 1] < nextYear) {
				index++;
			}

			if (index < this.transitionTimes.length && !this.ruleIndex[index].isdst) {
				offset = this.ruleIndex[index].offset;
			}
		}

		return offset;
	};

	/**
	 * If this zone uses DST in the given year, return the DST savings
	 * in use. If the zone does not use DST in the given year, this
	 * method will return 0.
	 *
	 * @param {Date} date the Gregorian date to test
	 * @returns {number} number of minutes in DST savings if the zone
	 * uses DST in the given year, or zero otherwise
	 */
	ZoneInfoFile.prototype.getDSTSavings = function (date) {
		var thisYear = date.getTime();
		var nextYear = thisYear + 31536000000; // this is the number of ms in 1 Gregorian year

		// search for all transitions between now and one year
		// from now, and calculate the difference in DST (if any)

		var index = this.bsearch(thisYear, this.transitionTimes);
		var savings = 0;
		if (index > -1) {
			while (index < this.transitionTimes.length && !this.ruleIndex[index].isdst && this.transitionTimes[index + 1] < nextYear) {
				index++;
			}

			if (index < this.transitionTimes.length && this.ruleIndex[index].isdst) {
				savings = this.ruleIndex[index].savings;
			}
		}

		return savings;
	};

	/**
	 * Return the start date/time of DST if this zone uses
	 * DST in the given year.
	 *
	 * @param {Date} date the Gregorian date to test
	 * @returns {number} unixtime representation of the start
	 * of DST in the given year, or -1 if the zone does not
	 * use DST in the given year
	 */
	ZoneInfoFile.prototype.getDSTStartDate = function (date) {
		var year = date.getFullYear();
		var thisYear = new Date(year, 0, 1).getTime();
		var nextYear = new Date(year + 1, 0, 1).getTime();

		// search for all transitions between Jan 1 of this year
		// to Jan 1 of next year, and calculate the difference
		// in DST (if any)

		var index = this.bsearch(thisYear, this.transitionTimes);
		var startDate = -1;
		if (index > -1) {
			if (this.transitionTimes[index] < thisYear) {
				index++; // start in this year instead of the previous year
			}
			while (index < this.transitionTimes.length && !this.ruleIndex[index].isdst && this.transitionTimes[index + 1] < nextYear) {
				index++;
			}

			if (index < this.transitionTimes.length && this.ruleIndex[index].isdst) {
				startDate = this.transitionTimes[index];
			}
		}

		return startDate;
	};

	/**
	 * Return the end date/time of DST if this zone uses
	 * DST in the given year.
	 *
	 * @param {Date} date the Gregorian date to test
	 * @returns {number} unixtime representation of the end
	 * of DST in the given year, or -1 if the zone does not
	 * use DST in the given year
	 */
	ZoneInfoFile.prototype.getDSTEndDate = function (date) {
		var year = date.getFullYear();
		var thisYear = new Date(year, 0, 1).getTime();
		var nextYear = new Date(year + 1, 0, 1).getTime();

		// search for all transitions between Jan 1 of this year
		// to Jan 1 of next year, and calculate the difference
		// in DST (if any)

		var index = this.bsearch(thisYear, this.transitionTimes);
		var endDate = -1;
		if (index > -1) {
			if (this.transitionTimes[index] < thisYear) {
				index++; // start in this year instead of the previous year
			}
			while (index < this.transitionTimes.length && this.ruleIndex[index].isdst && this.transitionTimes[index + 1] < nextYear) {
				index++;
			}

			if (index < this.transitionTimes.length && !this.ruleIndex[index].isdst) {
				endDate = this.transitionTimes[index];
			}
		}

		return endDate;
	};

	/**
	 * Return the abbreviation used by this zone in standard
	 * time.
	 *
	 * @param {Date} date the Gregorian date to test
	 * @returns {string} a string representing the abbreviation
	 * used in this time zone during standard time
	 */
	ZoneInfoFile.prototype.getAbbreviation = function (date) {
		var thisYear = date.getTime();
		var nextYear = thisYear + 31536000000; // this is the number of ms in 1 Gregorian year

		// search for all transitions between now and one year from now, and calculate the difference
		// in DST (if any)
		var abbr = void 0;
		if (this.transitionTimes.length > 0) {
			var index = this.bsearch(thisYear, this.transitionTimes);
			abbr = this.ruleIndex[index].abbreviation;
			if (index > -1) {
				while (index < this.transitionTimes.length && this.ruleIndex[index].isdst && this.transitionTimes[index + 1] < nextYear) {
					index++;
				}

				if (index < this.transitionTimes.length && !this.ruleIndex[index].isdst) {
					abbr = this.ruleIndex[index].abbreviation;
				}
			}
		} else {
			abbr = this.standardTime.abbreviation;
		}

		return abbr;
	};

	/**
	 * Return the abbreviation used by this zone in daylight
	 * time. If the zone does not use DST in the given year,
	 * this returns the same thing as getAbbreviation().
	 *
	 * @param {Date} date the Gregorian date to test
	 * @returns {string} a string representing the abbreviation
	 * used in this time zone during daylight time
	 */
	ZoneInfoFile.prototype.getDSTAbbreviation = function (date) {
		var thisYear = date.getTime();
		var nextYear = thisYear + 31536000000; // this is the number of ms in 1 Gregorian year

		// search for all transitions between now and one year from now, and calculate the difference
		// in DST (if any)

		var abbr = void 0;
		if (this.transitionTimes.length > 0) {
			var index = this.bsearch(thisYear, this.transitionTimes);
			abbr = this.ruleIndex[index].abbreviation;
			if (index > -1) {
				while (index < this.transitionTimes.length && !this.ruleIndex[index].isdst && this.transitionTimes[index + 1] < nextYear) {
					index++;
				}

				if (index < this.transitionTimes.length && this.ruleIndex[index].isdst) {
					abbr = this.ruleIndex[index].abbreviation;
				}
			}
		} else {
			abbr = this.standardTime.abbreviation;
		}

		return abbr;
	};

	/**
	 * Return the zone information for the given date in ilib
	 * format.
	 *
	 * @param {Date} date the Gregorian date to test
	 * @returns {Object} an object containing the zone information
	 * for the given date in the format that ilib can use directly
	 */
	ZoneInfoFile.prototype.getIlibZoneInfo = function (date) {
		function minutesToStr(min) {
			var hours = Math.floor(min / 60);
			var minutes = min - hours * 60;

			return hours + ':' + minutes;
		}

		function unixtimeToJD(millis) {
			return 2440587.5 + millis / 86400000;
		}
		var res = {
			'o': minutesToStr(this.getRawOffset(date))
		};
		if (this.usesDST(date)) {
			res.f = '{c}';
			res.e = {
				'c': this.getAbbreviation(date),
				'j': unixtimeToJD(this.getDSTEndDate(date))
			};
			res.s = {
				'c': this.getDSTAbbreviation(date),
				'j': unixtimeToJD(this.getDSTStartDate(date)),
				'v': minutesToStr(this.getDSTSavings(date))
			};
		} else {
			res.f = this.getAbbreviation(date);
		}

		return res;
	};

	module.exports = ZoneInfoFile;

/***/ },
/* 228 */
/***/ function(module, exports) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	// Full List (Hash) of Moonstone Supported Icons
	//

	exports.default = {
		plus: 0x0002B, // plus
		minus: 0x0002D, // hyphen
		arrowhookleft: 0x021A9, // LeftArrowHook
		arrowhookright: 0x021AA, // RightArrowHook
		ellipsis: 0x022EF, // ellipsis
		check: 0x02713, // checkmark
		circle: 0x0EFFDB, // record
		stop: 0x0EFFDC, // stop
		play: 0x0EFFDD, // play
		pause: 0x0EFFDE, // pause
		forward: 0x0EFFDF, // forward
		backward: 0x0EFFE0, // rewind
		skipforward: 0x0EFFE1, // skip_forward
		skipbackward: 0x0EFFE2, // skip_backwards
		pauseforward: 0x0EFFE3, // indicator_forward
		pausebackward: 0x0EFFE4, // indicator_backward
		pausejumpforward: 0x0EFFE5, // indicator_skip_forward
		pausejumpbackward: 0x0EFFE6, // indicator_skip_backward
		jumpforward: 0x0EFFE7, // indicator_end
		jumpbackward: 0x0EFFE8, // indicator_begin
		denselist: 0x0EFFE9, // list_big
		bulletlist: 0x0EFFEA, // list_bullets
		list: 0x0EFFEB, // list_simple
		drawer: 0x0EFFEC, // list_actions
		arrowlargedown: 0x0EFFED, // caret_down_large
		arrowlargeup: 0x0EFFEE, // caret_up_large
		arrowlargeleft: 0x0EFFEF, // caret_left_large
		arrowlargeright: 0x0EFFF0, // caret_right_large
		arrowsmallup: 0x0EFFF1, // caret_up_small
		arrowsmalldown: 0x0EFFF2, // caret_down_small
		arrowsmallleft: 0x0EFFF3, // caret_left_small
		arrowsmallright: 0x0EFFF4, // caret_right_small
		closex: 0x0EFFF5, // close_x
		search: 0x0EFFF6, // magnify
		rollforward: 0x0EFFF7, // redo
		rollbackward: 0x0EFFF8, // undo
		exitfullscreen: 0x0EFFF9, // minimize
		fullscreen: 0x0EFFFA, // maximize
		arrowextend: 0x0F0021, // arrow_left
		arrowshrink: 0x0F0022, // arrow_right
		flag: 0x0F0023, // flag
		funnel: 0x0F0024, // filter
		trash: 0x0F0025, // trash
		star: 0x0F0028, // star_full
		hollowstar: 0x0F0029, // star_empty
		halfstar: 0x0F002A, // star_half
		gear: 0x0F002B, // gear
		plug: 0x0F002C, // input
		lock: 0x0F002D // lock
	};

/***/ },
/* 229 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.MarqueeTextBase = exports.MarqueeText = undefined;

	var _MarqueeDecorator = __webpack_require__(127);

	var _MarqueeDecorator2 = _interopRequireDefault(_MarqueeDecorator);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	/**
	 * {@link moonstone/Marquee.MarqueeText} is a basic marqueeing text component.
	 *
	 * @class MarqueeText
	 * @memberof moonstone/Marquee
	 * @ui
	 * @mixes moonstone/Marquee.MarqueeDecorator
	 * @public
	 */
	var MarqueeText = (0, _MarqueeDecorator2.default)('div');
	MarqueeText.displayName = 'MarqueeText';

	exports.default = MarqueeText;
	exports.MarqueeText = MarqueeText;
	exports.MarqueeTextBase = MarqueeText;

/***/ },
/* 230 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	exports.I18nFontDecorator = undefined;

	var _hoc = __webpack_require__(10);

	var _hoc2 = _interopRequireDefault(_hoc);

	var _kind = __webpack_require__(8);

	var _kind2 = _interopRequireDefault(_kind);

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _fontGenerator = __webpack_require__(233);

	var _fontGenerator2 = _interopRequireDefault(_fontGenerator);

	function _interopRequireDefault(obj) {
		return obj && obj.__esModule ? obj : { default: obj };
	}

	var I18nFontDecorator = (0, _hoc2.default)(function (config, Wrapped) {
		return (0, _kind2.default)({
			name: 'I18nFontDecorator',

			render: function render(props) {
				(0, _fontGenerator2.default)();
				return _react2.default.createElement(Wrapped, props);
			}
		});
	});

	exports.default = I18nFontDecorator;
	exports.I18nFontDecorator = I18nFontDecorator;

/***/ },
/* 231 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	exports.MoonstoneDecorator = undefined;

	var _extends = Object.assign || function (target) {
		for (var i = 1; i < arguments.length; i++) {
			var source = arguments[i];for (var key in source) {
				if (Object.prototype.hasOwnProperty.call(source, key)) {
					target[key] = source[key];
				}
			}
		}return target;
	};

	var _createClass = function () {
		function defineProperties(target, props) {
			for (var i = 0; i < props.length; i++) {
				var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
			}
		}return function (Constructor, protoProps, staticProps) {
			if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
		};
	}();

	var _keymap = __webpack_require__(42);

	var _hoc = __webpack_require__(10);

	var _hoc2 = _interopRequireDefault(_hoc);

	var _I18nDecorator = __webpack_require__(72);

	var _I18nDecorator2 = _interopRequireDefault(_I18nDecorator);

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _resolution = __webpack_require__(45);

	var _FloatingLayer = __webpack_require__(82);

	var _SpotlightRootDecorator = __webpack_require__(137);

	var _SpotlightRootDecorator2 = _interopRequireDefault(_SpotlightRootDecorator);

	var _I18nFontDecorator = __webpack_require__(230);

	var _I18nFontDecorator2 = _interopRequireDefault(_I18nFontDecorator);

	var _TextSizeDecorator = __webpack_require__(232);

	var _TextSizeDecorator2 = _interopRequireDefault(_TextSizeDecorator);

	var _screenTypes = __webpack_require__(276);

	var _screenTypes2 = _interopRequireDefault(_screenTypes);

	var _MoonstoneDecorator = __webpack_require__(266);

	var _MoonstoneDecorator2 = _interopRequireDefault(_MoonstoneDecorator);

	function _interopRequireDefault(obj) {
		return obj && obj.__esModule ? obj : { default: obj };
	}

	function _classCallCheck(instance, Constructor) {
		if (!(instance instanceof Constructor)) {
			throw new TypeError("Cannot call a class as a function");
		}
	}

	function _possibleConstructorReturn(self, call) {
		if (!self) {
			throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
		}return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
		if (typeof superClass !== "function" && superClass !== null) {
			throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
		}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	} /**
	   * Exports the {@link moonstone/MoonstoneDecorator.MoonstoneDecorator} HOC
	   *
	   * @module moonstone/MoonstoneDecorator
	   */

	/**
	 * Default config for {@link moonstone/MoonstoneDecorator.MoonstoneDecorator}.
	 *
	 * @memberof moonstone/MoonstoneDecorator
	 * @hocconfig
	 */
	var defaultConfig = {
		i18n: true,
		float: true,
		overlay: false,
		ri: {
			screenTypes: _screenTypes2.default
		},
		spotlight: true,
		textSize: true
	};

	/**
	 * {@link moonstone/MoonstoneDecorator.MoonstoneDecorator} is a Higher-order Component that applies
	 * Moonstone theming to an application. It also applies
	 * [floating layer]{@link ui/FloatingLayer.FloatingLayerDecorator},
	 * [resolution independence]{@link ui/resolution.ResolutionDecorator},
	 * [custom text sizing]{@link moonstone/MoonstoneDecorator.TextSizeDecorator},
	 * [spotlight]{@link spotlight.SpotlightRootDecorator}, and
	 * [internationalization support]{@link i18n/I18nDecorator.I18nDecorator}. It is meant to be applied to
	 * the root element of an app.
	 *
	 * @class MoonstoneDecorator
	 * @memberof moonstone/MoonstoneDecorator
	 * @hoc
	 * @public
	 */
	var MoonstoneDecorator = (0, _hoc2.default)(defaultConfig, function (config, Wrapped) {
		var _class, _temp;

		var ri = config.ri,
		    i18n = config.i18n,
		    spotlight = config.spotlight,
		    float = config.float,
		    overlay = config.overlay,
		    textSize = config.textSize;

		// Apply classes depending on screen type (overlay / fullscreen)

		var bgClassName = 'enact-fit' + (overlay ? '' : ' ' + _MoonstoneDecorator2.default.bg);

		var App = Wrapped;
		if (float) App = (0, _FloatingLayer.FloatingLayerDecorator)({ wrappedClassName: bgClassName }, App);
		if (ri) App = (0, _resolution.ResolutionDecorator)(ri, App);
		if (i18n) {
			// Apply the @enact/i18n decorator around the font decorator so the latter will update the
			// font stylesheet when the locale changes
			App = (0, _I18nDecorator2.default)((0, _I18nFontDecorator2.default)(App));
		}
		if (spotlight) App = (0, _SpotlightRootDecorator2.default)(App);
		if (textSize) App = (0, _TextSizeDecorator2.default)(App);

		// add webOS-specific key maps
		(0, _keymap.addAll)({
			cancel: 461,
			pointerHide: 1537,
			pointerShow: 1536
		});

		var Decorator = (_temp = _class = function (_React$Component) {
			_inherits(Decorator, _React$Component);

			function Decorator() {
				_classCallCheck(this, Decorator);

				return _possibleConstructorReturn(this, (Decorator.__proto__ || Object.getPrototypeOf(Decorator)).apply(this, arguments));
			}

			_createClass(Decorator, [{
				key: 'render',
				value: function render() {
					var className = _MoonstoneDecorator2.default.moon + ' enact-unselectable';
					if (!float) {
						className += ' ' + bgClassName;
					}
					if (this.props.className) {
						className += ' ' + this.props.className;
					}

					return _react2.default.createElement(App, _extends({}, this.props, { className: className }));
				}
			}]);

			return Decorator;
		}(_react2.default.Component), _class.displayName = 'MoonstoneDecorator', _temp);

		return Decorator;
	});

	exports.default = MoonstoneDecorator;
	exports.MoonstoneDecorator = MoonstoneDecorator;

/***/ },
/* 232 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	exports.TextSizeDecorator = undefined;

	var _hoc = __webpack_require__(10);

	var _hoc2 = _interopRequireDefault(_hoc);

	var _kind = __webpack_require__(8);

	var _kind2 = _interopRequireDefault(_kind);

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	function _interopRequireDefault(obj) {
		return obj && obj.__esModule ? obj : { default: obj };
	}

	/**
	 * {@link moonstone/MoonstoneDecorator.TextSizeDecorator} is a Higher-order Component that
	 * classifies an application with a target set of font sizing rules
	 *
	 * @class TextSizeDecorator
	 * @memberof moonstone/MoonstoneDecorator
	 * @hoc
	 * @public
	 */
	var TextSizeDecorator = (0, _hoc2.default)(function (config, Wrapped) {
		return (0, _kind2.default)({
			name: 'TextSizeDecorator',

			propTypes: /** @lends moonstone/MoonstoneDecorator.TextSizeDecorator.prototype */{
				/**
	    * Set the goal size of the text. The UI library will be responsible for using this
	    * information to adjust the components' text sizes to this preset.
	    * Current presets are `'normal'` (default), and `'large'`.
	    *
	    * @type {String}
	    * @default 'normal'
	    * @public
	    */
				textSize: _react2.default.PropTypes.oneOf(['normal', 'large'])
			},

			defaultProps: {
				textSize: 'normal'
			},

			styles: {}, // Empty `styles` tells `kind` that we want to use `styler` later and don't have a base className.

			computed: {
				className: function className(_ref) {
					var textSize = _ref.textSize,
					    styler = _ref.styler;
					return styler.append('enact-text-' + textSize);
				}
			},

			render: function render(props) {
				delete props.textSize;
				return _react2.default.createElement(Wrapped, props);
			}
		});
	});

	exports.default = TextSizeDecorator;
	exports.TextSizeDecorator = TextSizeDecorator;

/***/ },
/* 233 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	exports.fontGenerator = undefined;

	var _i18n = __webpack_require__(120);

	var _i18n2 = _interopRequireDefault(_i18n);

	var _Locale = __webpack_require__(12);

	var _Locale2 = _interopRequireDefault(_Locale);

	function _interopRequireDefault(obj) {
		return obj && obj.__esModule ? obj : { default: obj };
	}

	/*
	* This module loads Moonstone specific fonts. It only includes one function,
	* {@link moonstone/MoonstoneDecorator.fontGenerator} and is not intended to be directly
	* included by external developers.
	*/

	var previousLocale = null;

	/**
	* `fontGenerator` is the locale-specific font generator, allowing any locale to have its own custom
	* font. Each locale-font from the configuration block (defined in this file) is generated at
	* run-time. If the locale you're currently in is in the locale-font list an additional
	* `@font-face` rule will be generated that will override the standard "Moonstone LG Display"
	* font.
	*
	* In addition to the standard override-font being generated, named region-specific fonts are also
	* generated. This lets you incorporate language specific fonts when you're outside of one of those
	* regions; useful in a language list context where you want the name of each language to be
	* represented by that language's designated font.
	*
	* Below is example genarated-output of the Urdu ("ur") locale-font.
	*
	* ```css
	* &#64;font-face {
	* 	font-family: 'Moonstone LG Display ur';
	* 	font-weight: 500;
	* 	src: local('LG Display_Urdu');
	* 	unicode-range: U+0600-U+06FF, U+FE70-U+FEFE, U+FB50-U+FDFF;
	* }
	* &#64;font-face {
	* 	font-family: 'Moonstone LG Display ur Bold';
	* 	font-weight: 700;
	* 	src: local('LG Display_Urdu');
	* 	unicode-range: U+0600-U+06FF, U+FE70-U+FEFE, U+FB50-U+FDFF;
	* }
	* &#64;font-face {
	* 	font-family: 'Moonstone LG Display ur Light';
	* 	font-weight: 300;
	* 	src: local('LG Display_Urdu');
	* 	unicode-range: U+0600-U+06FF, U+FE70-U+FEFE, U+FB50-U+FDFF;
	* }
	* ```
	*
	* @name fontGenerator
	* @memberof moonstone/MoonstoneDecorator
	* @param {String} [locale] Locale string defaulting to the current locale
	* @returns {undefined}
	* @private
	*/
	function fontGenerator() {
		var locale = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _i18n2.default.getLocale();

		// If document object is unavailable, bail out.
		if (typeof document === 'undefined') return;

		// If the locale is the same as the last time this ran, bail out and don't bother to recompile this again.
		if (locale === previousLocale) return;

		previousLocale = locale;
		var loc = new _Locale2.default(locale),
		    language = loc.getLanguage(),
		    region = loc.getRegion(),
		    styleId = 'enact-localization-font-override',


		// Locale Configuration Block
		fonts = {
			'NonLatin': {
				regular: 'LG Display-Light',
				bold: 'LG Display-Regular'
			},
			'ja': {
				regular: 'LG Display_JP'
			},
			'en-JP': {
				regular: 'LG Display_JP'
			},
			'ur': {
				regular: 'LG Display_Urdu',
				unicodeRanges: 'U+600-6FF,' + 'U+FE70-FEFE,' + 'U+FB50-FDFF'
			},
			'zh-HK': {
				regular: 'LG Display GP4_HK-Light',
				bold: 'LG Display GP4_HK-Regular',
				unicodeRanges: 'U+0-FF,' + 'U+2E80-2EFF,' + 'U+3000-303F,' + 'U+3200-33FF,' + 'U+3400-4DBF,' + 'U+4E00-9FFF,' + 'U+E000-FAFF,' + 'U+FF00-FFEF'
			}
		};

		var styleElem = document.getElementById(styleId),
		    fontDefinitionCss = '';

		// Duplications and alternate locale names
		fonts['zh-TW'] = fonts['zh-HK'];

		// Generate a single font-face rule
		var buildFont = function buildFont(inOptions) {
			if (!inOptions && !inOptions.name) {
				return '';
			}
			var strOut = '@font-face { \n' + '  font-family: "' + inOptions.name + '";\n' + '  font-weight: ' + (inOptions.weight || 'normal') + ';\n';

			if (inOptions.localName) {
				strOut += '  src: local("' + inOptions.localName + '");\n';
			}
			if (inOptions.unicodeRanges) {
				strOut += '  unicode-range: ' + inOptions.unicodeRanges + ';\n';
			}
			strOut += '} \n';
			return strOut;
		};

		// Generate a collection of font-face rules, in multiple font-variants
		var buildFontSet = function buildFontSet(strLang, bitDefault) {
			var strOut = '',
			    name = bitDefault ? '' : ' ' + strLang;

			if (fonts[strLang].regular) {
				// Build Regular
				strOut += buildFont({
					name: 'Moonstone LG Display' + name,
					localName: fonts[strLang].regular,
					weight: 500,
					unicodeRanges: fonts[strLang].unicodeRanges
				});

				// Build Bold
				strOut += buildFont({
					name: 'Moonstone LG Display' + name,
					localName: fonts[strLang].bold || fonts[strLang].regular,
					weight: 700,
					unicodeRanges: fonts[strLang].unicodeRanges
				});

				// Build Light
				strOut += buildFont({
					name: 'Moonstone LG Display' + name,
					localName: fonts[strLang].light || fonts[strLang].regular,
					weight: 300,
					unicodeRanges: fonts[strLang].unicodeRanges
				});
			}
			return strOut;
		};

		if (!styleElem) {
			styleElem = document.createElement('style');
			styleElem.setAttribute('id', styleId);
			document.head.appendChild(styleElem);
		}

		// Build all the fonts so they could be explicitly called
		for (var lang in fonts) {
			fontDefinitionCss += buildFontSet(lang);
		}

		// Set up the override so "Moonstone LG Display" becomes the local-specific font.
		if (language === 'ja') {
			fontDefinitionCss += buildFontSet('ja', true);
		} else if (language === 'en' && region === 'JP') {
			fontDefinitionCss += buildFontSet('en-JP', true);
		} else if (language === 'ur') {
			fontDefinitionCss += buildFontSet('ur', true);
		} else if (language === 'zh' && region === 'HK') {
			fontDefinitionCss += buildFontSet('zh-HK', true);
		} else if (language === 'zh' && region === 'TW') {
			fontDefinitionCss += buildFontSet('zh-TW', true);
		}

		styleElem.innerHTML = fontDefinitionCss;
	}

	exports.default = fontGenerator;
	exports.fontGenerator = fontGenerator;

/***/ },
/* 234 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.ActivityPanels = undefined;

	var _Arrangers = __webpack_require__(129);

	var _BreadcrumbDecorator = __webpack_require__(130);

	var _BreadcrumbDecorator2 = _interopRequireDefault(_BreadcrumbDecorator);

	var _Panels = __webpack_require__(132);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	/**
	 * An instance of Panels in which the Panel uses the entire viewable screen with a single breadcrumb
	 * for the previous panel when viewing any panel beyond the first.
	 *
	 * **Note** ActivityPanels requires that the `data-index` property that all panels variations add to
	 * its children be applied to the root DOM node of each child in order to manage layout correctly.
	 * It is recommended that you spread any extra props on the root node but you may also handle this
	 * property explicitly if necessary.
	 *
	 * @class ActivityPanels
	 * @memberof moonstone/Panels
	 * @ui
	 * @public
	 */
	var ActivityPanels = (0, _BreadcrumbDecorator2.default)({
	  className: 'panels activity enact-fit',
	  max: 1,
	  panelArranger: _Arrangers.ActivityArranger
	}, _Panels.PanelsBase);

	exports.default = ActivityPanels;
	exports.ActivityPanels = ActivityPanels;

/***/ },
/* 235 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.AlwaysViewingPanels = undefined;

	var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
	  return typeof obj === "undefined" ? "undefined" : _typeof2(obj);
	} : function (obj) {
	  return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof2(obj);
	};

	var _resolution = __webpack_require__(45);

	var _Arrangers = __webpack_require__(129);

	var _Breadcrumb = __webpack_require__(44);

	var _BreadcrumbDecorator = __webpack_require__(130);

	var _BreadcrumbDecorator2 = _interopRequireDefault(_BreadcrumbDecorator);

	var _Viewport = __webpack_require__(134);

	var _Viewport2 = _interopRequireDefault(_Viewport);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	/**
	 * Calculates the number of breadcrumbs that would fit in half of the viewport
	 *
	 * @param {Number} viewportWidth inner width of the viewport (usually the window)
	 * @param {Number} width         width of a breadcrumb
	 *
	 * @returns {Number} Number of breadcrumbs that can completely fit in that space
	 * @private
	 */
	var calcMax = function calcMax() {
	  if ((typeof window === 'undefined' ? 'undefined' : _typeof(window)) === 'object') {
	    return Math.floor(window.innerWidth / 2 / (0, _resolution.scale)(_Breadcrumb.breadcrumbWidth));
	  }
	};

	/**
	 * An instance of Panels in which the Panel uses the right half of the viewable screen with
	 * breadcrumbs to the left for any panels prior to the active panel.
	 *
	 * @class AlwaysViewingPanels
	 * @memberof moonstone/Panels
	 * @ui
	 * @public
	 */
	var AlwaysViewingPanels = (0, _BreadcrumbDecorator2.default)({
	  className: 'panels alwaysViewing enact-fit',
	  max: calcMax,
	  panelArranger: _Arrangers.AlwaysViewingArranger
	}, _Viewport2.default);

	exports.default = AlwaysViewingPanels;
	exports.AlwaysViewingPanels = AlwaysViewingPanels;

/***/ },
/* 236 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
		value: true
	});

	var _extends = Object.assign || function (target) {
		for (var i = 1; i < arguments.length; i++) {
			var source = arguments[i];for (var key in source) {
				if (Object.prototype.hasOwnProperty.call(source, key)) {
					target[key] = source[key];
				}
			}
		}return target;
	};

	var _kind = __webpack_require__(8);

	var _kind2 = _interopRequireDefault(_kind);

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _IconButton = __webpack_require__(124);

	var _IconButton2 = _interopRequireDefault(_IconButton);

	var _ApplicationCloseButton = __webpack_require__(267);

	var _ApplicationCloseButton2 = _interopRequireDefault(_ApplicationCloseButton);

	function _interopRequireDefault(obj) {
		return obj && obj.__esModule ? obj : { default: obj };
	}

	function _objectWithoutProperties(obj, keys) {
		var target = {};for (var i in obj) {
			if (keys.indexOf(i) >= 0) continue;if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;target[i] = obj[i];
		}return target;
	}

	/**
	 * An {@link moonstone/ApplicationCloseButton.ApplicationCloseButton} with `closex` icon. It is used in
	 * {@link moonstone/Panels.Panels} positioned at the top right corner.
	 * `onApplicationClose` callback function should be specified to close your app. The recommended
	 * action to take with the event is `window.close()`, but you may also want to also do operations
	 * like save user work or close database connections.
	 *
	 * @class ApplicationCloseButton
	 * @memberof moonstone/Panels
	 * @private
	 */
	var ApplicationCloseButton = (0, _kind2.default)({
		name: 'ApplicationCloseButton',

		propTypes: /** @lends moonstone/Panels.ApplicationCloseButton.prototype */{
			/**
	   * A function to run when app close button is clicked
	   *
	   * @type {Function}
	   */
			onApplicationClose: _react2.default.PropTypes.func
		},

		styles: {
			css: _ApplicationCloseButton2.default,
			className: 'applicationCloseButton'
		},

		render: function render(_ref) {
			var onApplicationClose = _ref.onApplicationClose,
			    rest = _objectWithoutProperties(_ref, ['onApplicationClose']);

			return _react2.default.createElement(_IconButton2.default, _extends({}, rest, {
				small: true,
				backgroundOpacity: 'transparent',
				onClick: onApplicationClose
			}), 'closex');
		}
	});

	exports.default = ApplicationCloseButton;

/***/ },
/* 237 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.BreadcrumbArranger = undefined;

	var _cubicOut = __webpack_require__(290);

	var _cubicOut2 = _interopRequireDefault(_cubicOut);

	var _arrange = __webpack_require__(84);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	/**
	 * Panel arrangers have a unique design requirement that varies their transition depending on the
	 * direction (reverse) of the transition. This takes the two arrangement functions and returns
	 * another function that picks which to call based on the value of `reverseTransition`.
	 *
	 * @param {Function} f forward function
	 * @param {Function} b backward function
	 * @returns {Function} Arrangement function
	 * @method
	 * @private
	 */
	var forwardBackward = function forwardBackward(f, b) {
	  return function (config) {
	    var f2 = config.reverseTransition ? b : f;
	    f2(config);
	  };
	};

	/**
	 * Positions a breadcrumb based on its `data-index` and the current index, `to`
	 *
	 * @param  {Object} config  Arrangement configuration object
	 * @returns {undefined}
	 * @method
	 * @private
	 */
	var positionBreadcrumb = (0, _arrange.ease)(_cubicOut2.default, function (config) {
	  var _config$from = config.from,
	      from = _config$from === undefined ? 0 : _config$from,
	      node = config.node,
	      percent = config.percent,
	      to = config.to;

	  var crumbIndex = node.dataset.index;
	  var dx = (to - from) * percent;
	  var x = from - crumbIndex;
	  var percentX = (x + dx) * -100;

	  (0, _arrange.replaceTransform)('translateX(' + percentX + '%)', config);
	});

	/**
	 * Arrangement function for breadcrumbs
	 *
	 * @param  {Object} config  Arrangement configuration object
	 * @returns {undefined}
	 * @method
	 * @private
	 */
	var enter = forwardBackward((0, _arrange.startAfter)(0.75, positionBreadcrumb), (0, _arrange.startAfter)(0.5, positionBreadcrumb));

	/**
	 * Arranger for panel breadcrumbs
	 *
	 * @type {Arranger}
	 * @private
	 */
	var BreadcrumbArranger = {
	  enter: enter,
	  stay: enter,
	  leave: enter
	};

	exports.default = BreadcrumbArranger;
	exports.BreadcrumbArranger = BreadcrumbArranger;

/***/ },
/* 238 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	exports.HeaderBase = exports.Header = undefined;

	var _extends = Object.assign || function (target) {
		for (var i = 1; i < arguments.length; i++) {
			var source = arguments[i];for (var key in source) {
				if (Object.prototype.hasOwnProperty.call(source, key)) {
					target[key] = source[key];
				}
			}
		}return target;
	};

	var _kind = __webpack_require__(8);

	var _kind2 = _interopRequireDefault(_kind);

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _Uppercase = __webpack_require__(73);

	var _Uppercase2 = _interopRequireDefault(_Uppercase);

	var _Slottable = __webpack_require__(139);

	var _Slottable2 = _interopRequireDefault(_Slottable);

	var _Marquee = __webpack_require__(128);

	var _util = __webpack_require__(57);

	var _Header = __webpack_require__(268);

	var _Header2 = _interopRequireDefault(_Header);

	function _interopRequireDefault(obj) {
		return obj && obj.__esModule ? obj : { default: obj };
	}

	function _objectWithoutProperties(obj, keys) {
		var target = {};for (var i in obj) {
			if (keys.indexOf(i) >= 0) continue;if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;target[i] = obj[i];
		}return target;
	}

	// Create a <h1> and Marquee component that support the uppercase attribute
	var UppercaseH1 = (0, _Uppercase2.default)('h1'); // Used by compact header, which provides its own inline strings and tags for marqueeing
	var MarqueeH2 = (0, _Marquee.MarqueeDecorator)('h2');
	var HeaderH1 = (0, _Uppercase2.default)((0, _Marquee.MarqueeDecorator)('h1'));

	/**
	 * A visual header component for a Panel with a title, titleAbove, titleBelow, and subTitleBelow
	 *
	 * @class Header
	 * @memberof moonstone/Panels
	 * @see i18n/Uppercase.Uppercase
	 * @ui
	 * @public
	 */
	var HeaderBase = (0, _kind2.default)({
		name: 'Header',

		propTypes: /** @lends moonstone/Panels.Header.prototype */{
			/**
	   * Children provided are added to the header-components area. A space for controls which
	   * live in the header, apart from the body of the panel view.
	   *
	   * @type {String}
	   */
			children: _react2.default.PropTypes.oneOfType([_react2.default.PropTypes.arrayOf(_react2.default.PropTypes.element), _react2.default.PropTypes.element]),

			/**
	   * When `true`, the header content is indented and the header lines are removed.
	   *
	   * @type {Boolean}
	   * @default false
	   * @public
	   */
			fullBleed: _react2.default.PropTypes.bool,

			/**
	   * When true, the case of the [`title`]{@link moonstone/Panels.Header#title} will
	   * remain unchanged.
	   * Uses [Uppercase HOC]{@link i18n/Uppercase.Uppercase} and mirrors the
	   * [preserveCase prop]{@link i18n/Uppercase.Uppercase#preserveCase}
	   *
	   * @type {Boolean}
	   * @default false
	   * @public
	   */
			preserveCase: _react2.default.PropTypes.bool,

			/**
	   * Sub-title displayed at the bottom of the panel
	   *
	   * @type {String}
	   */
			subTitleBelow: _react2.default.PropTypes.string,

			/**
	   * Title of the header
	   *
	   * @type {String}
	   */
			title: _react2.default.PropTypes.string,

			// /**
			//  * Text displayed above the title
			//  *
			//  * @type {String}
			//  */
			// titleAbove: React.PropTypes.string,

			/**
	   * Text displayed below the title
	   *
	   * @type {String}
	   */
			titleBelow: _react2.default.PropTypes.string,

			/**
	   * Set the type of header to be used. `standard` or `compact`.
	   *
	   * @type {String}
	   * @default 'standard'
	   */
			type: _react2.default.PropTypes.oneOf(['compact', 'standard'])
		},

		defaultProps: {
			fullBleed: false,
			preserveCase: false,
			// titleAbove: '00',
			type: 'standard'
		},

		styles: {
			css: _Header2.default,
			className: 'header'
		},

		computed: {
			className: function className(_ref) {
				var fullBleed = _ref.fullBleed,
				    type = _ref.type,
				    styler = _ref.styler;
				return styler.append({ fullBleed: fullBleed }, type);
			},
			direction: function direction(_ref2) {
				var title = _ref2.title,
				    titleBelow = _ref2.titleBelow;
				return (0, _util.isRtlText)(title) || (0, _util.isRtlText)(titleBelow) ? 'rtl' : 'ltr';
			},
			titleBelowComponent: function titleBelowComponent(_ref3) {
				var titleBelow = _ref3.titleBelow,
				    type = _ref3.type;

				switch (type) {
					case 'compact':
						return titleBelow ? _react2.default.createElement('h2', { className: _Header2.default.titleBelow }, titleBelow) : null;
					case 'standard':
						return titleBelow ? _react2.default.createElement(MarqueeH2, { className: _Header2.default.titleBelow, marqueeOn: 'hover' }, titleBelow) : null;
				}
			},
			subTitleBelowComponent: function subTitleBelowComponent(_ref4) {
				var subTitleBelow = _ref4.subTitleBelow;

				return subTitleBelow ? _react2.default.createElement(MarqueeH2, { className: _Header2.default.subTitleBelow, marqueeOn: 'hover' }, subTitleBelow) : null;
			}
		},

		render: function render(_ref5) {
			var children = _ref5.children,
			    direction = _ref5.direction,
			    preserveCase = _ref5.preserveCase,
			    subTitleBelowComponent = _ref5.subTitleBelowComponent,
			    title = _ref5.title,
			    titleBelowComponent = _ref5.titleBelowComponent,
			    type = _ref5.type,
			    rest = _objectWithoutProperties(_ref5, ['children', 'direction', 'preserveCase', 'subTitleBelowComponent', 'title', 'titleBelowComponent', 'type']);

			delete rest.fullBleed;
			delete rest.subTitleBelow;
			delete rest.titleBelow;

			switch (type) {
				case 'compact':
					return _react2.default.createElement('header', _extends({ 'aria-label': title }, rest), _react2.default.createElement(_Marquee.MarqueeText, { className: _Header2.default.headerCell, marqueeOn: 'hover', forceDirection: direction }, _react2.default.createElement(UppercaseH1, { className: _Header2.default.title, preserveCase: preserveCase }, title), titleBelowComponent), _react2.default.createElement('nav', { className: _Header2.default.headerComponents }, children));
				// Keeping this block in case we need to add it back after discussing with UX and GUI about future plans.
				// case 'large': return (
				// 	<header {...rest}>
				// 		<div className={css.titleAbove}>{titleAbove}</div>
				// 		<h1 className={css.title}><UppercaseMarquee preserveCase={preserveCase}>{title}</UppercaseMarquee></h1>
				// 		<h2 className={css.titleBelow}><Marquee>{titleBelow}</Marquee></h2>
				// 		<h2 className={css.subTitleBelow}><Marquee>{subTitleBelow}</Marquee></h2>
				// 		<nav className={css.headerComponents}>{children}</nav>
				// 	</header>
				// );
				case 'standard':
					return _react2.default.createElement('header', _extends({ 'aria-label': title }, rest), _react2.default.createElement(HeaderH1, { className: _Header2.default.title, preserveCase: preserveCase, marqueeOn: 'hover' }, title), _react2.default.createElement('div', { className: _Header2.default.headerRow }, _react2.default.createElement('div', { className: _Header2.default.headerCell }, titleBelowComponent, subTitleBelowComponent), _react2.default.createElement('nav', { className: _Header2.default.headerComponents }, children)));
			}
		}
	});

	// Note that we only export this (even as HeaderBase).  HeaderBase is not useful on its own.
	var Header = (0, _Slottable2.default)({ slots: ['subTitleBelow', /* 'titleAbove', */'title', 'titleBelow'] }, HeaderBase);

	// Set up Header so when it's used in a slottable layout (like Panel), it is automatically
	// recognized as this specific slot.
	Header.defaultSlot = 'header';

	exports.default = Header;
	exports.Header = Header;
	exports.HeaderBase = Header;

/***/ },
/* 239 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	exports.IdProvider = undefined;

	var _extends = Object.assign || function (target) {
		for (var i = 1; i < arguments.length; i++) {
			var source = arguments[i];for (var key in source) {
				if (Object.prototype.hasOwnProperty.call(source, key)) {
					target[key] = source[key];
				}
			}
		}return target;
	};

	var _createClass = function () {
		function defineProperties(target, props) {
			for (var i = 0; i < props.length; i++) {
				var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
			}
		}return function (Constructor, protoProps, staticProps) {
			if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
		};
	}();

	var _hoc = __webpack_require__(10);

	var _hoc2 = _interopRequireDefault(_hoc);

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	function _interopRequireDefault(obj) {
		return obj && obj.__esModule ? obj : { default: obj };
	}

	function _defineProperty(obj, key, value) {
		if (key in obj) {
			Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });
		} else {
			obj[key] = value;
		}return obj;
	}

	function _classCallCheck(instance, Constructor) {
		if (!(instance instanceof Constructor)) {
			throw new TypeError("Cannot call a class as a function");
		}
	}

	function _possibleConstructorReturn(self, call) {
		if (!self) {
			throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
		}return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
		if (typeof superClass !== "function" && superClass !== null) {
			throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
		}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	var GlobalId = 0;

	/**
	 * Default config for {@link moonstone/Panels.IdProvider}
	 *
	 * @hocconfig
	 * @memberof moonstone/Panels.IdProvider
	 */
	var defaultConfig = {
		/**
	  * Callback for each generated identifier when unmounting
	  *
	  * @type {Function}
	  * @memberof moonstone/Panels.IdProvider.defaultConfig
	  */
		onUnmount: null,

		/**
	  * Optional prefix for the identifier
	  *
	  * @type {String}
	  * @default ''
	  * @memberof moonstone/Panels.IdProvider.defaultConfig
	  */
		prefix: '',

		/**
	  * Prop to pass the identifier generation function
	  *
	  * @type {String}
	  * @default generateId
	  * @memberof moonstone/Panels.IdProvider.defaultConfig
	  */
		prop: 'generateId'
	};

	/**
	 * Higher-order Component that generates globally-unique identifiers
	 *
	 * @class IdProvider
	 * @hoc
	 * @private
	 * @memberof moonstone/Panels
	 */
	var IdProvider = (0, _hoc2.default)(defaultConfig, function (config, Wrapped) {
		var _class, _temp;

		var onUnmount = config.onUnmount,
		    prefix = config.prefix,
		    prop = config.prop;

		return _temp = _class = function (_React$Component) {
			_inherits(_class, _React$Component);

			function _class() {
				_classCallCheck(this, _class);

				var _this = _possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).call(this));

				_this.generateId = function (key) {
					// if an id has been generated for the key, return it
					if (key in _this.ids) {
						return _this.ids[key];
					}

					// otherwise generate a new id (with an optional prefix), cache it, and return it
					var id = '' + prefix + ++GlobalId;
					_this.ids[typeof key === 'undefined' ? 'generated-' + id : key] = id;

					return id;
				};

				_this.ids = {};
				return _this;
			}

			_createClass(_class, [{
				key: 'componentWillUnmount',
				value: function componentWillUnmount() {
					if (typeof onUnmount === 'function') {
						// Call the onUnmount handler for each generated id (note: not the key)
						for (var id in this.ids) {
							onUnmount(this.ids[id]);
						}
					}
				}
			}, {
				key: 'render',
				value: function render() {
					var props = this.props;

					if (prop) {
						props = _extends({}, this.props, _defineProperty({}, prop, this.generateId));
					}

					return _react2.default.createElement(Wrapped, props);
				}
			}]);

			return _class;
		}(_react2.default.Component), _class.displayName = 'IdProvider', _temp;
	});

	exports.default = IdProvider;
	exports.IdProvider = IdProvider;

/***/ },
/* 240 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	exports.IndexedBreadcrumbs = undefined;

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _Breadcrumb = __webpack_require__(44);

	var _Breadcrumb2 = _interopRequireDefault(_Breadcrumb);

	function _interopRequireDefault(obj) {
		return obj && obj.__esModule ? obj : { default: obj };
	}

	/**
	 * Generates an array of at most `max` breadcrumbs with zero-padded labels prefixed by <
	 *
	 * @param {Number} index      Index of active breadcrumb
	 * @param {Number} max        Maximum number of breadcrumbs to dispaly
	 * @param {Function} onSelect Handler for selecting a breadcrumb
	 * @returns {React.element[]} Array of breadcrumbs
	 * @private
	 */
	var IndexedBreadcrumbs = function IndexedBreadcrumbs(index, max, onSelect) {
		var breadcrumbs = new Array(index < max ? index : max);
		var start = Math.max(index - max, 0);

		for (var i = start; i < index; i++) {
			var label = (i < 9 ? '0' : '') + (i + 1);

			breadcrumbs[index - i - 1] = _react2.default.createElement(_Breadcrumb2.default, { onSelect: onSelect, index: i, key: i }, '< ', label);
		}

		return breadcrumbs;
	};

	exports.default = IndexedBreadcrumbs;
	exports.IndexedBreadcrumbs = IndexedBreadcrumbs;

/***/ },
/* 241 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	exports.PanelBase = exports.Panel = undefined;

	var _extends = Object.assign || function (target) {
		for (var i = 1; i < arguments.length; i++) {
			var source = arguments[i];for (var key in source) {
				if (Object.prototype.hasOwnProperty.call(source, key)) {
					target[key] = source[key];
				}
			}
		}return target;
	};

	var _kind = __webpack_require__(8);

	var _kind2 = _interopRequireDefault(_kind);

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _Slottable = __webpack_require__(139);

	var _Slottable2 = _interopRequireDefault(_Slottable);

	var _spotlight = __webpack_require__(31);

	var _spotlight2 = _interopRequireDefault(_spotlight);

	var _SpotlightContainerDecorator = __webpack_require__(136);

	var _SpotlightContainerDecorator2 = _interopRequireDefault(_SpotlightContainerDecorator);

	var _Spottable = __webpack_require__(34);

	var _Panel = __webpack_require__(269);

	var _Panel2 = _interopRequireDefault(_Panel);

	function _interopRequireDefault(obj) {
		return obj && obj.__esModule ? obj : { default: obj };
	}

	function _objectWithoutProperties(obj, keys) {
		var target = {};for (var i in obj) {
			if (keys.indexOf(i) >= 0) continue;if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;target[i] = obj[i];
		}return target;
	}

	var spotPanel = function spotPanel(node) {
		if (node && !_spotlight2.default.getCurrent()) {
			var containerId = node.dataset.containerId;

			// set the default element so that we can try to spot the container and let it fall through
			// to the default element if there isn't a lastFocusedElement/Index

			var body = node.querySelector('section .' + _Spottable.spottableClass);
			var header = node.querySelector('header .' + _Spottable.spottableClass);
			var defaultElement = body || header;

			_spotlight2.default.set(containerId, { defaultElement: defaultElement });
			_spotlight2.default.focus(containerId);
		}
	};

	var panelId = 0;

	/**
	* {@link moonstone/Panels.Panel} is the default kind for controls created inside a
	* [moonstone/Panels]{@link moonstone/Panels.Panels} container. A `moonstone/Panels`
	* will typically contain several instances of these.
	*
	* @class Panel
	* @memberof moonstone/Panels
	* @ui
	* @public
	*/
	var PanelBase = (0, _kind2.default)({

		name: 'Panel',

		propTypes: /** @lends moonstone/Panels.Panel.prototype */{
			/**
	   * By default, the panel will be labeled by its [Header]{@link moonstone/Panels.Header}.
	   * When `aria-label` is set, it will be used instead to provide an accessibility label for
	   * the panel.
	   *
	   * @memberof moonstone/Panels.Panel.prototype
	   * @type {String}
	   * @public
	   */
			'aria-label': _react2.default.PropTypes.string,

			/**
	   * Header for the panel. This is usually passed by the {@link ui/Slottable.Slottable} API by
	   * using a [Header]{@link moonstone/Panels.Header} component as a child of the Panel.
	   *
	   * @type {Header}
	   * @public
	   */
			header: _react2.default.PropTypes.node,

			/**
	   * When `true`, only the `header` is rendered and the body components are not. Setting to
	   * `false` will cause all components to be rendered and the body components will fade in.
	   *
	   * When a Panel is used within {@link moonstone/Panels.Panels},
	   * {@link moonstone/Panels.ActivityPanels}, or {@link moonstone/Panels.AlwaysViewingPanels},
	   * this property will be set automatically to `true` on render and `false` after animating
	   * into view.
	   *
	   * @type {Boolean}
	   * @default false
	   * @public
	   */
			hideChildren: _react2.default.PropTypes.bool
		},

		defaultProps: {
			hideChildren: false
		},

		styles: {
			css: _Panel2.default,
			className: 'panel'
		},

		computed: {
			// In order to spot the body components, we defer spotting until !hideChildren. If the Panel
			// opts out of hideChildren support by explicitly setting it to false, it'll spot on first
			// render.
			spotOnRender: function spotOnRender(_ref) {
				var hideChildren = _ref.hideChildren;
				return hideChildren ? null : spotPanel;
			},
			children: function children(_ref2) {
				var _children = _ref2.children,
				    hideChildren = _ref2.hideChildren;
				return hideChildren ? null : _children;
			},
			bodyClassName: function bodyClassName(_ref3) {
				var hideChildren = _ref3.hideChildren,
				    styler = _ref3.styler;
				return styler.join({
					body: true,
					visible: !hideChildren
				});
			},
			// nulling headerId prevents the aria-labelledby relationship which is necessary to allow
			// aria-label to take precedence
			// (see https://www.w3.org/TR/wai-aria/states_and_properties#aria-labelledby)
			headerId: function headerId(_ref4) {
				var label = _ref4['aria-label'];
				return label ? null : 'panel_' + ++panelId + '_header';
			}
		},

		render: function render(_ref5) {
			var bodyClassName = _ref5.bodyClassName,
			    children = _ref5.children,
			    header = _ref5.header,
			    headerId = _ref5.headerId,
			    spotOnRender = _ref5.spotOnRender,
			    rest = _objectWithoutProperties(_ref5, ['bodyClassName', 'children', 'header', 'headerId', 'spotOnRender']);

			delete rest.hideChildren;

			return _react2.default.createElement('article', _extends({ role: 'region' }, rest, { 'aria-labelledby': headerId, ref: spotOnRender }), _react2.default.createElement('div', { className: _Panel2.default.header, id: headerId }, header), _react2.default.createElement('section', { className: bodyClassName }, children));
		}
	});

	var Panel = (0, _SpotlightContainerDecorator2.default)({ enterTo: 'last-focused', preserveId: true }, (0, _Slottable2.default)({ slots: ['header'] }, PanelBase));

	exports.default = Panel;
	exports.Panel = Panel;
	exports.PanelBase = PanelBase;

/***/ },
/* 242 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	exports.Routable = undefined;

	var _extends = Object.assign || function (target) {
		for (var i = 1; i < arguments.length; i++) {
			var source = arguments[i];for (var key in source) {
				if (Object.prototype.hasOwnProperty.call(source, key)) {
					target[key] = source[key];
				}
			}
		}return target;
	};

	var _hoc = __webpack_require__(10);

	var _hoc2 = _interopRequireDefault(_hoc);

	var _invariant = __webpack_require__(61);

	var _invariant2 = _interopRequireDefault(_invariant);

	var _kind = __webpack_require__(8);

	var _kind2 = _interopRequireDefault(_kind);

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _Router = __webpack_require__(133);

	function _interopRequireDefault(obj) {
		return obj && obj.__esModule ? obj : { default: obj };
	}

	function _objectWithoutProperties(obj, keys) {
		var target = {};for (var i in obj) {
			if (keys.indexOf(i) >= 0) continue;if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;target[i] = obj[i];
		}return target;
	}

	function _defineProperty(obj, key, value) {
		if (key in obj) {
			Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });
		} else {
			obj[key] = value;
		}return obj;
	}

	/**
	 * Default config for {@link moonstone/Panels.Routable}
	 *
	 * @memberof moonstone/Panels.Routable
	 * @hocconfig
	 */
	var defaultConfig = {
		/**
	  * The event callback invoked when navigating back up the path
	  *
	  * @type {Function}
	  * @required
	  * @memberof moonstone/Panels.Routable.defaultConfig
	  */
		navigate: null
	};

	/**
	 * Adds support for Routes as children of Panels which are selected via `path` instead of the usual
	 * flat array of Panels. When using `Routable` you must specify the `navigate` config option.
	 *
	 * @class Routable
	 * @memberof moonstone/Panels
	 * @hoc
	 * @public
	 */
	var Routable = (0, _hoc2.default)(defaultConfig, function (config, Wrapped) {
		var navigate = config.navigate;

		!navigate ?  false ? (0, _invariant2.default)(false, 'navigate must be specified with Routable') : (0, _invariant2.default)(false) : void 0;

		return (0, _kind2.default)({
			name: 'Routable',

			propTypes: /** @lends moonstone/Panels.Routable.prototype */_defineProperty({
				/**
	    * Path to the active panel
	    *
	    * May either be a URI-style path (`'/app/home/settings'`) or an array
	    * of strings (`['app', 'home', 'settings']`)
	    *
	    * @type {String|String[]}
	    * @public
	    */
				path: _Router.propTypes.path.isRequired

			}, navigate, _react2.default.PropTypes.func),

			handlers: _defineProperty({}, navigate, function (_ref, _ref2) {
				var path = _ref2.path,
				    handler = _ref2[navigate];

				var index = _ref.index,
				    rest = _objectWithoutProperties(_ref, ['index']);

				if (handler) {
					var p = (0, _Router.toSegments)(path).slice(0, index + 1);
					handler(_extends({}, rest, {
						index: index,
						path: Array.isArray(path) ? p : '/' + p.join('/')
					}));
				}
			}),

			computed: {
				// Determines the `index` as 1 less than the number of segments in the path
				index: function index(_ref3) {
					var path = _ref3.path;
					return (0, _Router.toSegments)(path).length - 1;
				}
			},

			render: function render(_ref4) {
				var children = _ref4.children,
				    index = _ref4.index,
				    path = _ref4.path,
				    rest = _objectWithoutProperties(_ref4, ['children', 'index', 'path']);

				return _react2.default.createElement(_Router.Router, _extends({}, rest, { path: path, component: Wrapped, index: index }), children);
			}
		});
	});

	exports.default = Routable;
	exports.Routable = Routable;

/***/ },
/* 243 */,
/* 244 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	exports.TooltipBase = exports.Tooltip = undefined;

	var _extends = Object.assign || function (target) {
		for (var i = 1; i < arguments.length; i++) {
			var source = arguments[i];for (var key in source) {
				if (Object.prototype.hasOwnProperty.call(source, key)) {
					target[key] = source[key];
				}
			}
		}return target;
	};

	var _kind = __webpack_require__(8);

	var _kind2 = _interopRequireDefault(_kind);

	var _Uppercase = __webpack_require__(73);

	var _Uppercase2 = _interopRequireDefault(_Uppercase);

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _TooltipLabel = __webpack_require__(246);

	var _TooltipLabel2 = _interopRequireDefault(_TooltipLabel);

	var _Tooltip = __webpack_require__(143);

	var _Tooltip2 = _interopRequireDefault(_Tooltip);

	function _interopRequireDefault(obj) {
		return obj && obj.__esModule ? obj : { default: obj };
	}

	function _objectWithoutProperties(obj, keys) {
		var target = {};for (var i in obj) {
			if (keys.indexOf(i) >= 0) continue;if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;target[i] = obj[i];
		}return target;
	}

	/**
	 * {@link moonstone/TooltipDecorator.TooltipBase} is a stateless tooltip component with
	 * Moonston styling applied.
	 *
	 * @class TooltipBase
	 * @memberof moonstone/TooltipDecorator
	 * @ui
	 * @public
	 */
	var TooltipBase = (0, _kind2.default)({
		name: 'Tooltip',

		propTypes: /** @lends moonstone/TooltipDecorator.TooltipBase.prototype */{
			/**
	   * The node to be displayed as the main content of the tooltip.
	   *
	   * @type {Node}
	   * @required
	   */
			children: _react.PropTypes.node.isRequired,

			/**
	   * Position of tooltip arrow in relation to the activator; valid values are
	   * `'left'`, `'center'`, `'right'`, `'top'`, `'middle'`, and `'bottom'`.
	   *
	   * Note that `'left'`, `'center'`, `'right'` are applicable when direction is in vertical
	   * orientation (i.e. `'above'`, `'below'`), and `'top'`, `'middle'`, and `'bottom'` are
	   * applicable when direction is in horizontal orientation (i.e. `'left'`, `'right'`)
	   *
	   * @type {String}
	   * @default 'right'
	   * @public
	   */
			arrowAnchor: _react.PropTypes.oneOf(['left', 'center', 'right', 'top', 'middle', 'bottom']),

			/**
	   * Direction of label in relation to the activator; valid values are `'above'`, `'below'`,
	   * `'left'`, and `'right'`.
	   *
	   * @type {String}
	   * @default 'above'
	   * @public
	   */
			direction: _react.PropTypes.oneOf(['above', 'below', 'left', 'right']),

			/**
	   * Style object for tooltip position.
	   *
	   * @type {Object}
	   * @public
	   */
			position: _react.PropTypes.shape({
				top: _react.PropTypes.number,
				bottom: _react.PropTypes.number,
				left: _react.PropTypes.number,
				right: _react.PropTypes.number
			}),

			/**
	   * The method to run when the tooltip mounts/unmounts, giving a reference to the DOM.
	   *
	   * @type {Function}
	   * @public
	   */
			tooltipRef: _react.PropTypes.func,

			/**
	   * The width of tooltip content in pixels (px). If the content goes over the given width,
	   * then it will automatically wrap. When `null`, content does not wrap.
	   *
	   * @type {Number|null}
	   * @public
	   */
			width: _react.PropTypes.number
		},

		defaultProps: {
			arrowAnchor: 'right',
			direction: 'above'
		},

		styles: {
			css: _Tooltip2.default,
			className: 'tooltip'
		},

		computed: {
			arrowType: function arrowType(_ref) {
				var arrowAnchor = _ref.arrowAnchor;
				return arrowAnchor === 'center' || arrowAnchor === 'middle' ? 'M0,5C0,4,1,3,3,2.5C1,2,0,1,0,0V5Z' : 'M0,5C0,3,1,0,3,0H0V5Z';
			},
			className: function className(_ref2) {
				var direction = _ref2.direction,
				    arrowAnchor = _ref2.arrowAnchor,
				    styler = _ref2.styler;
				return styler.append(direction, arrowAnchor + 'Arrow');
			},
			style: function style(_ref3) {
				var position = _ref3.position,
				    _style = _ref3.style;

				return _extends({}, _style, position);
			}
		},

		render: function render(_ref4) {
			var children = _ref4.children,
			    tooltipRef = _ref4.tooltipRef,
			    arrowType = _ref4.arrowType,
			    width = _ref4.width,
			    rest = _objectWithoutProperties(_ref4, ['children', 'tooltipRef', 'arrowType', 'width']);

			delete rest.arrowAnchor;
			delete rest.direction;
			delete rest.position;

			return _react2.default.createElement('div', rest, _react2.default.createElement('svg', { className: _Tooltip2.default.tooltipArrow, viewBox: '0 0 3 5' }, _react2.default.createElement('path', { d: arrowType })), _react2.default.createElement(_TooltipLabel2.default, { tooltipRef: tooltipRef, width: width }, children));
		}
	});

	/**
	 * {@link moonstone/TooltipDecorator.Tooltip} is a tooltip component with Moonstone styling
	 * applied. If the Tooltip's child component is text, it will be uppercased unless
	 * `preserveCase` is set.
	 *
	 * @class Tooltip
	 * @memberof moonstone/TooltipDecorator
	 * @mixes i18n/Uppercase.Uppercase
	 * @ui
	 * @public
	 */
	var Tooltip = (0, _Uppercase2.default)(TooltipBase);

	exports.default = Tooltip;
	exports.Tooltip = Tooltip;
	exports.TooltipBase = TooltipBase;

/***/ },
/* 245 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	exports.TooltipBase = exports.Tooltip = exports.TooltipDecorator = undefined;

	var _extends = Object.assign || function (target) {
		for (var i = 1; i < arguments.length; i++) {
			var source = arguments[i];for (var key in source) {
				if (Object.prototype.hasOwnProperty.call(source, key)) {
					target[key] = source[key];
				}
			}
		}return target;
	};

	var _slicedToArray = function () {
		function sliceIterator(arr, i) {
			var _arr = [];var _n = true;var _d = false;var _e = undefined;try {
				for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
					_arr.push(_s.value);if (i && _arr.length === i) break;
				}
			} catch (err) {
				_d = true;_e = err;
			} finally {
				try {
					if (!_n && _i["return"]) _i["return"]();
				} finally {
					if (_d) throw _e;
				}
			}return _arr;
		}return function (arr, i) {
			if (Array.isArray(arr)) {
				return arr;
			} else if (Symbol.iterator in Object(arr)) {
				return sliceIterator(arr, i);
			} else {
				throw new TypeError("Invalid attempt to destructure non-iterable instance");
			}
		};
	}();

	var _createClass = function () {
		function defineProperties(target, props) {
			for (var i = 0; i < props.length; i++) {
				var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
			}
		}return function (Constructor, protoProps, staticProps) {
			if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
		};
	}();

	var _I18nDecorator = __webpack_require__(72);

	var _hoc = __webpack_require__(10);

	var _hoc2 = _interopRequireDefault(_hoc);

	var _FloatingLayer = __webpack_require__(82);

	var _FloatingLayer2 = _interopRequireDefault(_FloatingLayer);

	var _handle = __webpack_require__(16);

	var _util = __webpack_require__(28);

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _resolution = __webpack_require__(45);

	var _resolution2 = _interopRequireDefault(_resolution);

	var _Tooltip = __webpack_require__(244);

	function _interopRequireDefault(obj) {
		return obj && obj.__esModule ? obj : { default: obj };
	}

	function _objectWithoutProperties(obj, keys) {
		var target = {};for (var i in obj) {
			if (keys.indexOf(i) >= 0) continue;if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;target[i] = obj[i];
		}return target;
	}

	function _classCallCheck(instance, Constructor) {
		if (!(instance instanceof Constructor)) {
			throw new TypeError("Cannot call a class as a function");
		}
	}

	function _possibleConstructorReturn(self, call) {
		if (!self) {
			throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
		}return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
		if (typeof superClass !== "function" && superClass !== null) {
			throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
		}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	} /**
	   * Exports the {@link moonstone/TooltipDecorator.TooltipDecorator} Higher-order Component (HOC),
	   * {@link moonstone/TooltipDecorator.Tooltip} and {@link moonstone/TooltipDecorator.TooltipBase}
	   * components. The default export is {@link moonstone/TooltipDecorator.TooltipDecorator}.
	   *
	   * @module moonstone/TooltipDecorator
	   */

	var currentTooltip = void 0; // needed to know whether or not we should stop a showing job when unmounting

	/**
	 * {@link moonstone/TooltipDecorator.TooltipDecorator} is a Higher-order Component which
	 * positions {@link moonstone/TooltipDecorator.Tooltip} in relation to the
	 * Wrapped component.
	 * The tooltip is automatically displayed when the user hovers over the decorator for
	 * a given period of time. The tooltip is positioned around the decorator where there
	 * is available window space.
	 *
	 * Note that the direction of tooltip will be flipped horizontally in RTL locales.
	 *
	 * @class TooltipDecorator
	 * @memberof moonstone/TooltipDecorator
	 * @hoc
	 * @public
	 */
	var TooltipDecorator = (0, _hoc2.default)(function (config, Wrapped) {
		var _class, _temp;

		var forwardBlur = (0, _handle.forward)('onBlur');
		var forwardFocus = (0, _handle.forward)('onFocus');
		var forwardMouseOver = (0, _handle.forward)('onMouseOver');
		var forwardMouseOut = (0, _handle.forward)('onMouseOut');

		return _temp = _class = function (_React$Component) {
			_inherits(_class, _React$Component);

			function _class(props) {
				_classCallCheck(this, _class);

				var _this = _possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).call(this, props));

				_this.showTooltipJob = new _util.Job(function () {
					_this.setState({
						showing: true
					});
				});

				_this.handleMouseOver = function (ev) {
					if (_this.props.disabled) {
						_this.showTooltip(ev.target);
					}
					forwardMouseOver(ev, _this.props);
				};

				_this.handleMouseOut = function (ev) {
					if (_this.props.disabled) {
						_this.hideTooltip();
					}
					forwardMouseOut(ev, _this.props);
				};

				_this.handleFocus = function (ev) {
					_this.showTooltip(ev.target);
					forwardFocus(ev, _this.props);
				};

				_this.handleBlur = function (ev) {
					_this.hideTooltip();
					forwardBlur(ev, _this.props);
				};

				_this.getTooltipRef = function (node) {
					_this.tooltipRef = node;
					if (node) {
						_this.setTooltipLayout();
					}
				};

				_this.TOOLTIP_HEIGHT = _resolution2.default.scale(18); // distance between client and tooltip's label

				_this.state = {
					showing: false,
					tooltipDirection: null,
					arrowAnchor: null,
					position: { top: 0, left: 0 }
				};
				return _this;
			}

			_createClass(_class, [{
				key: 'componentWillUnmount',
				value: function componentWillUnmount() {
					if (currentTooltip === this) {
						currentTooltip = null;
						this.showTooltipJob.stop();
					}
				}
			}, {
				key: 'setTooltipLayout',
				value: function setTooltipLayout() {
					var position = this.props.tooltipPosition;
					var arr = position.split(' ');
					var tooltipDirection = null;
					var arrowAnchor = null;

					if (arr.length === 2) {
						var _arr = _slicedToArray(arr, 2);

						tooltipDirection = _arr[0];
						arrowAnchor = _arr[1];
					} else if (position === 'above' || position === 'below') {
						tooltipDirection = position;
						arrowAnchor = 'right';
					} else {
						tooltipDirection = 'above';
						arrowAnchor = 'right';
					}

					var tooltipNode = this.tooltipRef.getBoundingClientRect(); // label bound
					var clientNode = this.clientRef.getBoundingClientRect(); // client bound
					var overflow = this.calcOverflow(tooltipNode, clientNode, tooltipDirection);

					tooltipDirection = this.adjustDirection(tooltipDirection, overflow);
					arrowAnchor = this.adjustAnchor(arrowAnchor, tooltipDirection, overflow);

					this.setState({
						tooltipDirection: tooltipDirection,
						arrowAnchor: arrowAnchor,
						position: this.getPosition(tooltipNode, clientNode, arrowAnchor, tooltipDirection)
					});
				}
			}, {
				key: 'calcOverflow',
				value: function calcOverflow(tooltip, clientNode, tooltipDirection) {
					if (tooltipDirection === 'above' || tooltipDirection === 'below') {
						return {
							isOverTop: clientNode.top - tooltip.height - this.TOOLTIP_HEIGHT < 0,
							isOverBottom: clientNode.bottom + tooltip.height + this.TOOLTIP_HEIGHT > window.innerHeight,
							isOverLeft: clientNode.left - tooltip.width + clientNode.width / 2 < 0,
							isOverRight: clientNode.right + tooltip.width - clientNode.width / 2 > window.innerWidth
						};
					} else if (tooltipDirection === 'left' || tooltipDirection === 'right') {
						return {
							isOverTop: clientNode.top - tooltip.height + clientNode.height / 2 < 0,
							isOverBottom: clientNode.bottom + tooltip.height - clientNode.height / 2 > window.innerHeight,
							isOverLeft: clientNode.left - tooltip.width < 0,
							isOverRight: clientNode.right + tooltip.width > window.innerWidth
						};
					}
				}
			}, {
				key: 'adjustDirection',
				value: function adjustDirection(tooltipDirection, overflow) {
					if (this.context.rtl && (tooltipDirection === 'left' || tooltipDirection === 'right')) {
						tooltipDirection = tooltipDirection === 'left' ? 'right' : 'left';
					}

					// Flip tooltip if it overlows towards the tooltip direction
					if (overflow.isOverTop && tooltipDirection === 'above') {
						tooltipDirection = 'below';
					} else if (overflow.isOverBottom && tooltipDirection === 'below') {
						tooltipDirection = 'above';
					} else if (overflow.isOverLeft && tooltipDirection === 'left') {
						tooltipDirection = 'right';
					} else if (overflow.isOverRight && tooltipDirection === 'right') {
						tooltipDirection = 'left';
					}

					return tooltipDirection;
				}
			}, {
				key: 'adjustAnchor',
				value: function adjustAnchor(arrowAnchor, tooltipDirection, overflow) {
					if (tooltipDirection === 'above' || tooltipDirection === 'below') {
						if (this.context.rtl && arrowAnchor !== 'center') {
							arrowAnchor = arrowAnchor === 'left' ? 'right' : 'left';
						}

						// Flip sideways if it overflows to the sides
						if (overflow.isOverRight) {
							arrowAnchor = 'left';
						} else if (overflow.isOverLeft) {
							arrowAnchor = 'right';
						}
					}

					return arrowAnchor;
				}
			}, {
				key: 'getPosition',
				value: function getPosition(tooltipNode, clientNode, arrowAnchor, tooltipDirection) {
					var position = {};
					switch (tooltipDirection) {
						case 'above':
							position.top = clientNode.top - tooltipNode.height - this.TOOLTIP_HEIGHT;
							break;
						case 'below':
							position.top = clientNode.bottom + this.TOOLTIP_HEIGHT;
							break;
						case 'right':
							position.left = clientNode.right + this.TOOLTIP_HEIGHT;
							break;
						case 'left':
							position.left = clientNode.left - tooltipNode.width - this.TOOLTIP_HEIGHT;
							break;
						default:
							position = {};
					}

					if (tooltipDirection === 'above' || tooltipDirection === 'below') {
						position.left = clientNode.left + clientNode.width / 2;

						if (arrowAnchor === 'left') {
							position.left -= tooltipNode.width;
						} else if (arrowAnchor === 'center') {
							position.left -= tooltipNode.width / 2;
						}
					} else if (tooltipDirection === 'left' || tooltipDirection === 'right') {
						position.top = clientNode.top + clientNode.height / 2;

						if (arrowAnchor === 'top') {
							position.top -= tooltipNode.height;
						} else if (arrowAnchor === 'middle') {
							position.top -= tooltipNode.height / 2;
						}
					}

					return position;
				}
			}, {
				key: 'showTooltip',
				value: function showTooltip(client) {
					var _props = this.props,
					    tooltipDelay = _props.tooltipDelay,
					    tooltipText = _props.tooltipText;

					if (tooltipText) {
						this.clientRef = client;
						currentTooltip = this;
						this.showTooltipJob.startAfter(tooltipDelay);
					}
				}
			}, {
				key: 'hideTooltip',
				value: function hideTooltip() {
					if (this.props.tooltipText) {
						this.clientRef = null;
						currentTooltip = null;
						this.showTooltipJob.stop();
						this.setState({ showing: false });
					}
				}
			}, {
				key: 'render',
				value: function render() {
					var _props2 = this.props,
					    children = _props2.children,
					    tooltipPreserveCase = _props2.tooltipPreserveCase,
					    tooltipText = _props2.tooltipText,
					    tooltipWidth = _props2.tooltipWidth,
					    rest = _objectWithoutProperties(_props2, ['children', 'tooltipPreserveCase', 'tooltipText', 'tooltipWidth']);

					delete rest.tooltipDelay;
					delete rest.tooltipPosition;

					return _react2.default.createElement(Wrapped, _extends({}, rest, {
						onBlur: this.handleBlur,
						onFocus: this.handleFocus,
						onMouseOut: this.handleMouseOut,
						onMouseOver: this.handleMouseOver
					}), children, _react2.default.createElement(_FloatingLayer2.default, { open: this.state.showing, scrimType: 'none' }, _react2.default.createElement(_Tooltip.Tooltip, {
						'aria-live': 'off',
						arrowAnchor: this.state.arrowAnchor,
						direction: this.state.tooltipDirection,
						position: this.state.position,
						preserveCase: tooltipPreserveCase,
						role: 'alert',
						tooltipRef: this.getTooltipRef,
						width: tooltipWidth
					}, tooltipText)));
				}
			}]);

			return _class;
		}(_react2.default.Component), _class.displayName = 'TooltipDecorator', _class.propTypes = /** @lends moonstone/TooltipDecorator.TooltipDecorator.prototype */{
			/**
	   * When `true`, the component is shown as disabled but will show a tooltip, if present.
	   *
	   * @type {Boolean}
	   * @default false
	   * @public
	   */
			disabled: _react.PropTypes.bool,

			/**
	   * Number of milliseconds to wait before showing tooltip when hover.
	   *
	   * @type {Number}
	   * @default 500
	   * @public
	   */
			tooltipDelay: _react.PropTypes.number,

			/**
	   * Position of the tooltip with respect to the activating control. Valid values are
	   * `'above'`, `'above center'`, `'above left'`, `'above right'`, `'below'`, `'below center'`,
	   * `'below left'`, `'below right'`, `'left bottom'`, `'left middle'`, `'left top'`,
	   * `'right bottom'`, `'right middle'`, `'right top'`.
	   * The values starting with `'left`' and `'right'` place the tooltip on the side
	   * (sideways tooltip) with two additional positions available, `'top'` and `'bottom'`, which
	   * places the tooltip content toward the top or bottom, with the tooltip pointer
	   * middle-aligned to the activator.
	   *
	   * @type {String}
	   * @default 'above'
	   * @public
	   */
			tooltipPosition: _react.PropTypes.oneOf(['above', 'above center', 'above left', 'above right', 'below', 'below center', 'below left', 'below right', 'left bottom', 'left middle', 'left top', 'right bottom', 'right middle', 'right top']),

			/**
	   * When true, the case of the [`tooltipText`]{@link moonstone/TooltipDecorator.TooltipDecorator#tooltipText}
	   * will remain unchanged.
	   * Uses [Uppercase HOC]{@link i18n/Uppercase.Uppercase} and mirrors the
	   * [preserveCase prop]{@link i18n/Uppercase.Uppercase#preserveCase}
	   *
	   * @type {Boolean}
	   * @default false
	   * @public
	   */
			tooltipPreserveCase: _react.PropTypes.bool,

			/**
	   * The text to be displayed as the main content of the tooltip.
	   *
	   * @type {String}
	   * @public
	   */
			tooltipText: _react.PropTypes.string,

			/**
	   * The width of tooltip content in pixels (px). If the content goes over the given width,
	   * then it will automatically wrap. When `null`, content does not wrap.
	   *
	   * @type {Number|null}
	   * @public
	   */
			tooltipWidth: _react.PropTypes.number
		}, _class.defaultProps = {
			disabled: false,
			tooltipDelay: 500,
			tooltipPosition: 'above',
			tooltipPreserveCase: false
		}, _class.contextTypes = _I18nDecorator.contextTypes, _temp;
	});

	exports.default = TooltipDecorator;
	exports.TooltipDecorator = TooltipDecorator;
	exports.Tooltip = _Tooltip.Tooltip;
	exports.TooltipBase = _Tooltip.TooltipBase;

/***/ },
/* 246 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	exports.TooltipLabel = undefined;

	var _extends = Object.assign || function (target) {
		for (var i = 1; i < arguments.length; i++) {
			var source = arguments[i];for (var key in source) {
				if (Object.prototype.hasOwnProperty.call(source, key)) {
					target[key] = source[key];
				}
			}
		}return target;
	};

	var _kind = __webpack_require__(8);

	var _kind2 = _interopRequireDefault(_kind);

	var _util = __webpack_require__(57);

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _Tooltip = __webpack_require__(143);

	var _Tooltip2 = _interopRequireDefault(_Tooltip);

	function _interopRequireDefault(obj) {
		return obj && obj.__esModule ? obj : { default: obj };
	}

	function _objectWithoutProperties(obj, keys) {
		var target = {};for (var i in obj) {
			if (keys.indexOf(i) >= 0) continue;if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;target[i] = obj[i];
		}return target;
	}

	/**
	 * {@link moonstone/TooltipDecorator.TooltipLabel} is a stateless tooltip component with
	 * Moonston styling applied.
	 *
	 * @class TooltipLabel
	 * @memberof moonstone/TooltipDecorator
	 * @ui
	 * @private
	 */
	var TooltipLabel = (0, _kind2.default)({
		name: 'TooltipLabel',

		propTypes: /** @lends moonstone/TooltipDecorator.TooltipLabel.prototype */{
			/**
	   * The node to be displayed as the main content of the tooltip.
	   *
	   * @type {Node}
	   * @required
	   */
			children: _react.PropTypes.node.isRequired,

			/**
	   * The method to run when the tooltip mounts/unmounts, giving a reference to the DOM.
	   *
	   * @type {Function}
	   * @public
	   */
			tooltipRef: _react.PropTypes.func,

			/**
	   * The width of tooltip content in pixels (px). If the content goes over the given width,
	   * then it will automatically wrap. When `null`, content does not wrap.
	   *
	   * @type {Number}
	   * @public
	   */
			width: _react.PropTypes.number
		},

		styles: {
			css: _Tooltip2.default,
			className: 'tooltipLabel'
		},

		computed: {
			className: function className(_ref) {
				var width = _ref.width,
				    styler = _ref.styler;
				return styler.append({ multi: !!width });
			},
			style: function style(_ref2) {
				var children = _ref2.children,
				    width = _ref2.width,
				    _style = _ref2.style;

				return _extends({}, _style, {
					direction: (0, _util.isRtlText)(children) ? 'rtl' : 'ltr',
					width: width
				});
			}
		},

		render: function render(_ref3) {
			var children = _ref3.children,
			    tooltipRef = _ref3.tooltipRef,
			    rest = _objectWithoutProperties(_ref3, ['children', 'tooltipRef']);

			delete rest.width;

			return _react2.default.createElement('div', _extends({}, rest, { ref: tooltipRef }), children);
		}
	});

	exports.default = TooltipLabel;
	exports.TooltipLabel = TooltipLabel;

/***/ },
/* 247 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	function _classCallCheck(instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	}

	/**
	 * Provides the {@link spotlight/Accelerator.Accelerator} class.
	 *
	 * @module spotlight/Accelerator
	 */

	/**
	 * @class Accelerator
	 * @memberof spotlight/Accelerator
	 */
	var Accelerator =
	/**
	 * @constructor
	 * @param {Number[]} frequency - Controls the frequency with which the acceleration will
	 *	"freeze". While frozen, the current target item cannot change, and all events are directed
	 *	to it.
	 * @memberof spotlight/Accelerator.Accelerator
	 */
	function Accelerator() {
	  var _this = this;

	  var frequency = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [3, 3, 3, 2, 2, 2, 1];

	  _classCallCheck(this, Accelerator);

	  this.processKey = function (event, callback) {
	    switch (event.type) {
	      case 'keydown':
	        if (event.keyCode !== _this.keyCode) {
	          _this.reset();
	          _this.time = Date.now();
	          _this.keyCode = event.keyCode;
	          return callback(event);
	        } else if (_this.canceled) {

	          // Prevent skipped keydown events from bubbling
	          event.preventDefault();
	          return true;
	        } else {
	          var elapsedTime = Date.now() - _this.time,
	              seconds = Math.floor(elapsedTime / 1000),
	              toSkip = 0;

	          seconds = seconds > _this.frequency.length - 1 ? _this.frequency.length - 1 : seconds;

	          toSkip = _this.frequency[seconds] - 1;
	          if (toSkip < 0) {
	            toSkip = 0;
	          }

	          _this.accelerating = !(seconds === 0 && _this.skipped === 0);

	          if (_this.skipped >= toSkip) {
	            _this.skipped = 0;
	            return callback(event);
	          } else {
	            _this.skipped++;
	            // Prevent skipped keydown events from bubbling
	            event.preventDefault();
	            return true;
	          }
	        }
	      case 'keyup':
	        _this.reset();
	        return callback(event);
	    }
	  };

	  this.reset = function () {
	    _this.skipped = 0;
	    _this.time = 0;
	    _this.keyCode = 0;
	    _this.canceled = false;
	    _this.accelerating = false;
	  };

	  this.cancel = function () {
	    _this.canceled = true;
	  };

	  this.isAccelerating = function () {
	    return _this.accelerating;
	  };

	  /*
	   * Whether the instance is currently in an accelerating state.
	   *
	   * @type {Boolean}
	   * @default false
	   */
	  this.accelerating = false;

	  /*
	   * The current count of skipped events.
	   *
	   * @type {Number}
	   * @default 0
	   */
	  this.skipped = 0;

	  /*
	   * The timestamp of the last evaluated event.
	   *
	   * @type {Number}
	   * @default 0
	   */
	  this.time = 0;

	  /*
	   * The keyCode of the last evaluated event.
	   *
	   * @type {Number}
	   * @default 0
	   */
	  this.keyCode = 0;

	  /*
	   * Whether the instance is in a state of being canceled.
	   *
	   * @type {Boolean}
	   * @default false
	   */
	  this.canceled = false;

	  /*
	   * Controls the frequency with which the acceleration will "freeze". While frozen,
	   * the current target item cannot change, and all events are directed to it.
	   *
	   * @type {Array}
	   * @default [3, 3, 3, 2, 2, 2, 1]
	   * @public
	   */
	  this.frequency = frequency;
	}

	/**
	 * Called with the current keydown event and callback, which will be called when the event is
	 * allowed through.
	 *
	 * @function
	 * @param  {Object} event - The current event to validate.
	 * @param  {Function} callback - The callback to execute.
	 * @returns {Boolean} `true` if the event was consumed by processKey and callback was not called
	 * @public
	 * @memberof spotlight/Accelerator.Accelerator
	 */

	/**
	 * Resets the Accelerator instance to the default values.
	 *
	 * @function
	 * @returns {undefined}
	 * @public
	 * @memberof spotlight/Accelerator.Accelerator
	 */

	/**
	 * Cancels the Accelerator.
	 *
	 * @function
	 * @returns {undefined}
	 * @public
	 * @memberof spotlight/Accelerator.Accelerator
	 */

	/**
	 * Verifies that the Accelerator is active.
	 *
	 * @function
	 * @returns {Boolean} `true` if the Accelerator is active; otherwise, `false`.
	 * @public
	 * @memberof spotlight/Accelerator.Accelerator
	 */
	;

	exports.default = Accelerator;
	exports.Accelerator = Accelerator;

/***/ },
/* 248 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.removeCancelHandler = exports.forCancel = exports.addCancelHandler = undefined;

	var _handle = __webpack_require__(16);

	/**
	 * Array of cancel handlers. If any of these returns `false`, `forCancel` will return `false`;
	 *
	 * @type {Function[]}
	 * @private
	 */
	var cancelHandlers = [
	// always support the Escape key
	(0, _handle.forKey)('cancel')];

	/**
	 * Event handler compatible with {@link core/handle} that allows the handler chain to
	 * continue for any cancel event. A cancel event is an Escape key press by default but can be
	 * extended adding additional handlers using
	 * {@link ui/Cancelable/cancelHandler.addCancelHandler}.
	 *
	 * @function
	 * @memberof ui/Cancelable
	 * @param  {Object} ev Event object
	 * @returns {Boolean} `true` to stop the handler chain
	 * @private
	 */
	var forCancel = function forCancel(ev) {
	  var ok = false;
	  cancelHandlers.forEach(function (fn) {
	    // if any handler returns true, we don't need to call any more
	    ok = ok || fn(ev);
	  });

	  return ok;
	};

	/**
	 * Adds an event handler to filter cancel events.
	 *
	 * @function
	 * @memberof ui/Cancelable
	 * @param {Function} handler	Function that will receive the event and should return `false` if
	 *								the event is a cancel event.
	 * @returns {undefined}
	 * @public
	 */
	var addCancelHandler = function addCancelHandler(handler) {
	  if (cancelHandlers.indexOf(handler) < 0) {
	    cancelHandlers.push(handler);
	  }
	};

	/**
	 * Removes an event handler to filter cancel events
	 *
	 * @function
	 * @memberof ui/Cancelable
	 * @param  {Function} handler A previously added filter function
	 * @returns {undefined}
	 * @public
	 */
	var removeCancelHandler = function removeCancelHandler(handler) {
	  var index = cancelHandlers.indexOf(handler);
	  if (index >= 0) {
	    cancelHandlers.splice(index, 1);
	  }
	};

	exports.addCancelHandler = addCancelHandler;
	exports.forCancel = forCancel;
	exports.removeCancelHandler = removeCancelHandler;

/***/ },
/* 249 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.removeModal = exports.addModal = undefined;

	var _dispatcher = __webpack_require__(71);

	// Contains references to modal Cancelable instances in LIFO order to allow multiple modals to be
	// displayed with the last having the first priority to handle the cancel.
	var modals = [];

	/**
	 * Dispatches the cancel event to each modal `Cancelable` instance. Consistent with
	 * {@link core/handle.handle}, returning a `true` value means the event was handled and anything
	 * falsey allows the event to pass to the next handler.
	 *
	 * @param	{Object}	ev	Event payload
	 *
	 * @returns	{undefined}
	 * @private
	 */
	var dispatchToModals = function dispatchToModals(ev) {
	  for (var i = modals.length - 1, handled = false; !handled && i >= 0; i--) {
	    handled = modals[i].handleCancel(ev);
	  }
	};

	/**
	 * Adds a modal `Cancelable` instance to the list of modals.
	 *
	 * @param	{ui/Cancelable.Cancelable}	obj	Cancelable instance
	 *
	 * @returns	{undefined}
	 * @private
	 */
	var addModal = function addModal(obj) {
	  if (modals.push(obj) === 1) {
	    (0, _dispatcher.on)('keyup', dispatchToModals);
	  }
	};

	/**
	 * Removes a modal `Cancelable` instance from the list of modals.
	 *
	 * @param	{ui/Cancelable.Cancelable}	obj	Cancelable instance
	 *
	 * @returns	{undefined}
	 * @private
	 */
	var removeModal = function removeModal(obj) {
	  var index = modals.indexOf(obj);
	  if (index >= 0) {
	    modals.splice(index, 1);
	  }

	  if (modals.length === 0) {
	    (0, _dispatcher.off)('keyup', dispatchToModals);
	  }
	};

	exports.addModal = addModal;
	exports.removeModal = removeModal;

/***/ },
/* 250 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	exports.FloatingLayerBase = exports.FloatingLayer = undefined;

	var _createClass = function () {
		function defineProperties(target, props) {
			for (var i = 0; i < props.length; i++) {
				var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
			}
		}return function (Constructor, protoProps, staticProps) {
			if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
		};
	}();

	var _dispatcher = __webpack_require__(71);

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(58);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _Cancelable = __webpack_require__(138);

	var _Cancelable2 = _interopRequireDefault(_Cancelable);

	var _Scrim = __webpack_require__(252);

	var _Scrim2 = _interopRequireDefault(_Scrim);

	function _interopRequireDefault(obj) {
		return obj && obj.__esModule ? obj : { default: obj };
	}

	function _objectWithoutProperties(obj, keys) {
		var target = {};for (var i in obj) {
			if (keys.indexOf(i) >= 0) continue;if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;target[i] = obj[i];
		}return target;
	}

	function _classCallCheck(instance, Constructor) {
		if (!(instance instanceof Constructor)) {
			throw new TypeError("Cannot call a class as a function");
		}
	}

	function _possibleConstructorReturn(self, call) {
		if (!self) {
			throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
		}return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
		if (typeof superClass !== "function" && superClass !== null) {
			throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
		}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	/**
	 * {@link ui/FloatingLayer.FloatingLayerBase} is a component that creates an entry point to the new
	 * render tree. This is used for modal components such as popups.
	 *
	 * @class FloatingLayerBase
	 * @memberof ui/FloatingLayer
	 * @ui
	 * @public
	 */
	var FloatingLayerBase = function (_React$Component) {
		_inherits(FloatingLayerBase, _React$Component);

		function FloatingLayerBase(props) {
			_classCallCheck(this, FloatingLayerBase);

			var _this = _possibleConstructorReturn(this, (FloatingLayerBase.__proto__ || Object.getPrototypeOf(FloatingLayerBase)).call(this, props));

			_this.handleClick = function () {
				if (!_this.props.noAutoDismiss && _this.props.open && _this.props.onDismiss) {
					_this.props.onDismiss();
				}
			};

			_this.stopPropagation = function (ev) {
				ev.nativeEvent.stopImmediatePropagation();

				if (_this.props.children.props.onClick) {
					_this.props.children.props.onClick();
				}
			};

			_this.node = null;
			_this.floatLayer = null;
			return _this;
		}

		_createClass(FloatingLayerBase, [{
			key: 'componentDidMount',
			value: function componentDidMount() {
				if (this.props.open) {
					this.renderFloatingLayer(this.props);
				}
			}
		}, {
			key: 'componentWillReceiveProps',
			value: function componentWillReceiveProps(nextProps) {
				if (nextProps.open) {
					this.renderFloatingLayer(nextProps, this.props.open);
				} else {
					this.closeFloatingLayer();
				}
			}
		}, {
			key: 'componentWillUnmount',
			value: function componentWillUnmount() {
				this.closeFloatingLayer();
			}
		}, {
			key: 'closeFloatingLayer',
			value: function closeFloatingLayer() {
				if (this.node) {
					_reactDom2.default.unmountComponentAtNode(this.node);
					document.getElementById(this.props.floatLayerId).removeChild(this.node);

					if (this.props.onClose) {
						this.props.onClose();
					}
				}
				this.floatLayer = null;
				this.node = null;

				(0, _dispatcher.off)('click', this.handleClick);
			}
		}, {
			key: 'renderNode',
			value: function renderNode() {
				var _props = this.props,
				    floatLayerClassName = _props.floatLayerClassName,
				    floatLayerId = _props.floatLayerId;

				if (!this.node) {
					this.node = document.createElement('div');
					document.getElementById(floatLayerId).appendChild(this.node);
				}

				this.node.className = floatLayerClassName;
				this.node.style.zIndex = 100;

				return this.node;
			}
		}, {
			key: 'renderFloatingLayer',
			value: function renderFloatingLayer(_ref) {
				var isOpened = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

				var children = _ref.children,
				    onOpen = _ref.onOpen,
				    scrimType = _ref.scrimType,
				    rest = _objectWithoutProperties(_ref, ['children', 'onOpen', 'scrimType']);

				delete rest.floatLayerClassName;
				delete rest.floatLayerId;
				delete rest.noAutoDismiss;
				delete rest.onClose;
				delete rest.onDismiss;
				delete rest.open;

				var node = this.renderNode();
				this.floatLayer = _reactDom2.default.unstable_renderSubtreeIntoContainer(this, _react2.default.createElement('div', rest, scrimType !== 'none' ? _react2.default.createElement(_Scrim2.default, { type: scrimType, onClick: this.handleClick }) : null, _react2.default.cloneElement(children, { onClick: this.stopPropagation })), node);

				if (!isOpened) {
					if (onOpen) {
						onOpen();
					}

					if (scrimType === 'none') {
						(0, _dispatcher.on)('click', this.handleClick);
					}
				}
			}
		}, {
			key: 'render',
			value: function render() {
				return null;
			}
		}]);

		return FloatingLayerBase;
	}(_react2.default.Component);

	FloatingLayerBase.displayName = 'FloatingLayer';
	FloatingLayerBase.propTypes = /** @lends ui/FloatingLayer.FloatingLayerBase.prototype */{
		/**
	  * CSS classes for FloatingLayer.
	  *
	  * @type {String}
	  * @default 'enact-fit enact-clip enact-untouchable'
	  * @public
	  */
		floatLayerClassName: _react2.default.PropTypes.string,

		/**
	  * Element id for floating layer.
	  *
	  * @type {String}
	  * @default 'floatLayer'
	  * @public
	  */
		floatLayerId: _react2.default.PropTypes.string,

		/**
	  * When `true`, FloatingLayer will not hide when the user presses `ESC` key.
	  *
	  * @type {Boolean}
	  * @default false
	  * @public
	  */
		noAutoDismiss: _react2.default.PropTypes.bool,

		/**
	  * A function to be run when floating layer is closed.
	  *
	  * @type {Function}
	  * @public
	  */
		onClose: _react2.default.PropTypes.func,

		/**
	  * A function to be run when `ESC` key is pressed. The function will only invoke if
	  * `noAutoDismiss` is set to `false`.
	  *
	  * @type {Function}
	  * @public
	  */
		onDismiss: _react2.default.PropTypes.func,

		/**
	  * A function to be run when floating layer is opened. It will only be invoked for the first render.
	  *
	  * @type {Function}
	  * @public
	  */
		onOpen: _react2.default.PropTypes.func,

		/**
	  * When `true`, the floating layer and its components will be rendered.
	  *
	  * @type {Boolean}
	  * @default false
	  * @public
	  */
		open: _react2.default.PropTypes.bool,

		/**
	  * The scrim type. It can be either `'transparent'`, `'translucent'`, or `'none'`.
	  *
	  * @type {String}
	  * @default 'translucent'
	  * @public
	  */
		scrimType: _react2.default.PropTypes.oneOf(['transparent', 'translucent', 'none'])
	};
	FloatingLayerBase.defaultProps = {
		floatLayerClassName: 'enact-fit enact-clip enact-untouchable',
		floatLayerId: 'floatLayer',
		noAutoDismiss: false,
		open: false,
		scrimType: 'translucent'
	};

	var handleCancel = function handleCancel(props) {
		if (props.open && !props.noAutoDismiss && props.onDismiss) {
			props.onDismiss();
			return true;
		}
	};

	/**
	 * {@link ui/FloatingLayer.FloatingLayer} is a component that creates an entry point to the new
	 * render tree. This is used for modal components such as popups.
	 *
	 * @class FloatingLayer
	 * @memberof ui/FloatingLayer
	 * @ui
	 * @mixes ui/Cancelable.Cancelable
	 * @public
	 */
	var FloatingLayer = (0, _Cancelable2.default)({ modal: true, onCancel: handleCancel }, FloatingLayerBase);

	exports.default = FloatingLayer;
	exports.FloatingLayer = FloatingLayer;
	exports.FloatingLayerBase = FloatingLayerBase;

/***/ },
/* 251 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends = Object.assign || function (target) {
	  for (var i = 1; i < arguments.length; i++) {
	    var source = arguments[i];for (var key in source) {
	      if (Object.prototype.hasOwnProperty.call(source, key)) {
	        target[key] = source[key];
	      }
	    }
	  }return target;
	};

	var _hoc = __webpack_require__(10);

	var _hoc2 = _interopRequireDefault(_hoc);

	var _kind = __webpack_require__(8);

	var _kind2 = _interopRequireDefault(_kind);

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	function _objectWithoutProperties(obj, keys) {
	  var target = {};for (var i in obj) {
	    if (keys.indexOf(i) >= 0) continue;if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;target[i] = obj[i];
	  }return target;
	} /*
	   * Exports the {@link ui/FloatingLayer.FloatingLayerDecorator} Higher-order Component (HOC).
	   */

	/**
	 * Default config for {@link ui/FloatingLayer.FloatingLayerDecorator}.
	 *
	 * @memberof ui/FloatingLayer.FloatingLayerDecorator
	 * @hocconfig
	 */
	var defaultConfig = {
	  /**
	   * Element Id of the floatLayer
	   *
	   * @type {String}
	   * @default 'floatLayer'
	   * @public
	   * @memberof ui/FloatingLayer.FloatingLayerDecorator.defaultConfig
	   */
	  floatLayerId: 'floatLayer',

	  /**
	   * Classname applied to wrapped component. It can be used when you want to only apply
	   * certain styles to the wrapped component and not to the float layer.
	   *
	   * @type {String}
	   * @default ''
	   * @public
	   * @memberof ui/FloatingLayer.FloatingLayerDecorator.defaultConfig
	   */
	  wrappedClassName: ''
	};

	/**
	 * Higher-order Component that adds a FloatingLayer adjacent to wrapped component.
	 *
	 * @class FloatingLayerDecorator
	 * @memberof ui/FloatingLayer
	 * @hoc
	 * @public
	 */
	var FloatingLayerDecorator = (0, _hoc2.default)(defaultConfig, function (config, Wrapped) {
	  var floatLayerId = config.floatLayerId,
	      wrappedClassName = config.wrappedClassName;

	  return (0, _kind2.default)({
	    name: 'FloatingLayerDecorator',

	    render: function render(_ref) {
	      var className = _ref.className,
	          rest = _objectWithoutProperties(_ref, ['className']);

	      return _react2.default.createElement('div', { className: className }, _react2.default.createElement(Wrapped, _extends({}, rest, { className: wrappedClassName })), _react2.default.createElement('div', { id: floatLayerId }));
	    }
	  });
	});

	exports.default = FloatingLayerDecorator;

/***/ },
/* 252 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	exports.Scrim = undefined;

	var _extends = Object.assign || function (target) {
		for (var i = 1; i < arguments.length; i++) {
			var source = arguments[i];for (var key in source) {
				if (Object.prototype.hasOwnProperty.call(source, key)) {
					target[key] = source[key];
				}
			}
		}return target;
	};

	var _createClass = function () {
		function defineProperties(target, props) {
			for (var i = 0; i < props.length; i++) {
				var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
			}
		}return function (Constructor, protoProps, staticProps) {
			if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
		};
	}();

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _Scrim = __webpack_require__(271);

	var _Scrim2 = _interopRequireDefault(_Scrim);

	function _interopRequireDefault(obj) {
		return obj && obj.__esModule ? obj : { default: obj };
	}

	function _objectWithoutProperties(obj, keys) {
		var target = {};for (var i in obj) {
			if (keys.indexOf(i) >= 0) continue;if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;target[i] = obj[i];
		}return target;
	}

	function _classCallCheck(instance, Constructor) {
		if (!(instance instanceof Constructor)) {
			throw new TypeError("Cannot call a class as a function");
		}
	}

	function _possibleConstructorReturn(self, call) {
		if (!self) {
			throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
		}return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
		if (typeof superClass !== "function" && superClass !== null) {
			throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
		}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	var transparentClassName = _Scrim2.default.scrim + ' enact-fit ' + _Scrim2.default.transparent;
	var translucentClassName = _Scrim2.default.scrim + ' enact-fit ' + _Scrim2.default.translucent;

	// Stores references to any Scrim instances whose type is translucent to ensure that only the top-
	// most Scrim is visible to avoid stacking scrims.
	var scrimStack = [];

	/**
	 * Pushes a translucent scrim to the top of the stack and hiding the previously top
	 *
	 * @param {ui/FloatingLayer.Scrim} scrim A scrim instance to add
	 * @returns {undefined}
	 * @private
	 */
	function pushTranslucentScrim(scrim) {
		var last = scrimStack.length - 1;
		if (last >= 0) {
			// if there are other translucent scrims, hide the topmost one assuming the others have been
			// hidden correctly by previous calls
			scrimStack[last].hide();
		}

		scrimStack.push(scrim);
	}

	/**
	 * Removes a translucent scrim from the stack. If the scrim was the top-most, removing it will show
	 * the next scrim. If not, it will just be removed
	 *
	 * @param {ui/FloatingLayer.Scrim} scrim A scrim instance to remove
	 * @returns {undefined}
	 * @private
	 */
	function removeTranslucentScrim(scrim) {
		var index = scrimStack.indexOf(scrim);
		var last = scrimStack.length - 1;
		if (index === last) {
			// if scrim is the top of the stack (most likely case), show the one below it then pop it
			scrimStack.pop();
			if (scrimStack.length) {
				scrimStack[scrimStack.length - 1].show();
			}
		} else {
			// if it's in the middle of the stack, just remove it
			scrimStack.splice(index, 1);
		}
	}

	/**
	 * {@link ui/FloatingLayer.Scrim} provides an overlay that will prevent taps from propagating
	 * to the controls that it covers.
	 *
	 * @class Scrim
	 * @memberof ui/FloatingLayer
	 * @ui
	 * @private
	 */

	var Scrim = function (_React$Component) {
		_inherits(Scrim, _React$Component);

		function Scrim(props) {
			_classCallCheck(this, Scrim);

			var _this = _possibleConstructorReturn(this, (Scrim.__proto__ || Object.getPrototypeOf(Scrim)).call(this, props));

			_this.show = function () {
				return _this.setState({ visible: true });
			};

			_this.hide = function () {
				return _this.setState({ visible: false });
			};

			_this.state = {
				visible: true
			};
			return _this;
		}

		_createClass(Scrim, [{
			key: 'componentWillMount',
			value: function componentWillMount() {
				if (this.props.type === 'translucent') {
					pushTranslucentScrim(this);
				}
			}
		}, {
			key: 'componentWillReceiveProps',
			value: function componentWillReceiveProps(nextProps) {
				if (this.props.type === 'translucent' && nextProps.type !== 'translucent') {
					removeTranslucentScrim(this);
					this.setState({ visible: true });
				}
			}
		}, {
			key: 'componentWillUnmount',
			value: function componentWillUnmount() {
				if (this.props.type === 'translucent') {
					removeTranslucentScrim(this);
				}
			}
		}, {
			key: 'render',
			value: function render() {
				if (this.state.visible) {
					var _props = this.props,
					    type = _props.type,
					    rest = _objectWithoutProperties(_props, ['type']);

					var className = type === 'transparent' ? transparentClassName : translucentClassName;

					return _react2.default.createElement('div', _extends({}, rest, { className: className }));
				}

				return null;
			}
		}]);

		return Scrim;
	}(_react2.default.Component);

	Scrim.propTypes = /** @lends ui/FloatingLayer.Scrim.prototype */{
		/**
	  * Types of scrim. It can be either `'transparent'` or `'translucent'`.
	  *
	  * @type {String}
	  * @default `translucent`
	  * @public
	  */
		type: _react2.default.PropTypes.oneOf(['transparent', 'translucent'])
	};
	Scrim.defaultProps = {
		type: 'translucent'
	};
	exports.default = Scrim;
	exports.Scrim = Scrim;

/***/ },
/* 253 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	exports.Pressable = undefined;

	var _createClass = function () {
		function defineProperties(target, props) {
			for (var i = 0; i < props.length; i++) {
				var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
			}
		}return function (Constructor, protoProps, staticProps) {
			if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
		};
	}();

	var _handle = __webpack_require__(16);

	var _hoc = __webpack_require__(10);

	var _hoc2 = _interopRequireDefault(_hoc);

	var _util = __webpack_require__(28);

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _warning = __webpack_require__(110);

	var _warning2 = _interopRequireDefault(_warning);

	function _interopRequireDefault(obj) {
		return obj && obj.__esModule ? obj : { default: obj };
	}

	function _defineProperty(obj, key, value) {
		if (key in obj) {
			Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });
		} else {
			obj[key] = value;
		}return obj;
	}

	function _classCallCheck(instance, Constructor) {
		if (!(instance instanceof Constructor)) {
			throw new TypeError("Cannot call a class as a function");
		}
	}

	function _possibleConstructorReturn(self, call) {
		if (!self) {
			throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
		}return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
		if (typeof superClass !== "function" && superClass !== null) {
			throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
		}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	} /* eslint-disable react/sort-prop-types */

	/**
	 * Exports the {@link ui/Pressable.Pressable} Higher-order Component (HOC).
	 *
	 * @module ui/Pressable
	 */

	/**
	 * Default config for {@link ui/Pressable.Pressable}
	 *
	 * @memberof ui/Pressable.Pressable
	 * @hocconfig
	 */
	var defaultConfig = {
		/**
	  * Configures the event name that activates the Pressable
	  *
	  * @type {String}
	  * @default 'onMouseDown'
	  * @memberof ui/Pressable.Pressable.defaultConfig
	  */
		depress: 'onMouseDown',

		/**
	  * Configures the event name that deactivates the Pressable when onMouseLeave is triggered
	  *
	  * @type {String}
	  * @default 'onMouseLeave'
	  * @memberof ui/Pressable.Pressable.defaultConfig
	  */
		leave: 'onMouseLeave',

		/**
	  * Configures the event name that deactivates the Pressable
	  *
	  * @type {String}
	  * @default 'onMouseUp'
	  * @memberof ui/Pressable.Pressable.defaultConfig
	  */
		release: 'onMouseUp',

		/**
	  * Configures the property that is passed to the wrapped component when pressed
	  *
	  * @type {String}
	  * @default 'pressed'
	  * @memberof ui/Pressable.Pressable.defaultConfig
	  */
		prop: 'pressed'
	};

	/**
	 * {@link ui/Pressable.Pressable} is a Higher-order Component that applies a 'Pressable' behavior
	 * to its wrapped component.  Its default event and property can be configured when applied to a component.
	 *
	 * By default, Pressable applies the `pressed` property on mouseDown and removes it on mouseUp.
	 *
	 * @class Pressable
	 * @memberof ui/Pressable
	 * @hoc
	 * @public
	 */
	var PressableHOC = (0, _hoc2.default)(defaultConfig, function (config, Wrapped) {
		var _class, _temp, _initialiseProps, _class$propTypes, _class$defaultProps;

		var depress = config.depress,
		    release = config.release,
		    prop = config.prop,
		    leave = config.leave;

		var defaultPropKey = 'default' + (0, _util.cap)(prop);

		return _temp = _class = function (_React$Component) {
			_inherits(Pressable, _React$Component);

			function Pressable(props) {
				_classCallCheck(this, Pressable);

				var _this = _possibleConstructorReturn(this, (Pressable.__proto__ || Object.getPrototypeOf(Pressable)).call(this, props));

				_initialiseProps.call(_this);

				var pressed = props[defaultPropKey];
				var controlled = false;

				if (prop in props) {
					if (props[prop] != null) {
						pressed = props[prop];
					}

					controlled = true;
				}

				_this.state = {
					controlled: controlled,
					pressed: pressed
				};
				return _this;
			}

			_createClass(Pressable, [{
				key: 'componentWillReceiveProps',
				value: function componentWillReceiveProps(nextProps) {
					if (this.state.controlled) {
						var pressed = nextProps[prop];
						this.setState({ pressed: pressed });
					} else {
						 false ? (0, _warning2.default)(!(prop in nextProps), '\'' + prop + '\' specified for an uncontrolled instance of Pressable and will be\n\t\t\t\t\tignored. To make this instance of Pressable controlled, \'' + prop + '\' should be\n\t\t\t\t\tspecified at creation.') : void 0;
					}
				}
			}, {
				key: 'render',
				value: function render() {
					var props = Object.assign({}, this.props);
					if (depress) props[depress] = this.handleDepress;
					if (release) props[release] = this.handleRelease;
					if (leave) props[leave] = this.handleLeave;
					if (prop) props[prop] = this.state.pressed;
					delete props[defaultPropKey];

					return _react2.default.createElement(Wrapped, props);
				}
			}]);

			return Pressable;
		}(_react2.default.Component), _class.propTypes = (_class$propTypes = {}, _defineProperty(_class$propTypes, defaultPropKey, _react2.default.PropTypes.bool), _defineProperty(_class$propTypes, prop, _react2.default.PropTypes.bool), _defineProperty(_class$propTypes, 'disabled', _react.PropTypes.bool), _class$propTypes), _class.defaultProps = (_class$defaultProps = {}, _defineProperty(_class$defaultProps, defaultPropKey, false), _defineProperty(_class$defaultProps, 'disabled', false), _class$defaultProps), _initialiseProps = function _initialiseProps() {
			var _this2 = this;

			this.handle = _handle.handle.bind(this);

			this.updatePressed = function (pressed) {
				if (!_this2.state.controlled) {
					_this2.setState({ pressed: pressed });
				}
			};

			this.handleDepress = this.handle((0, _handle.forward)(depress), (0, _handle.forProp)('disabled', false), function (ev) {
				return _this2.updatePressed(ev && ev.pressed || true);
			});
			this.handleRelease = this.handle((0, _handle.forward)(release), (0, _handle.forProp)('disabled', false), function () {
				return _this2.updatePressed(false);
			});
			this.handleLeave = this.handle((0, _handle.forward)(leave), (0, _handle.forProp)('disabled', false), function () {
				return _this2.updatePressed(false);
			});
		}, _temp;
	});

	exports.default = PressableHOC;
	exports.Pressable = PressableHOC;

/***/ },
/* 254 */,
/* 255 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	exports.TransitionGroup = undefined;

	var _createClass = function () {
		function defineProperties(target, props) {
			for (var i = 0; i < props.length; i++) {
				var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
			}
		}return function (Constructor, protoProps, staticProps) {
			if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
		};
	}();

	var _util = __webpack_require__(28);

	var _compose = __webpack_require__(62);

	var _compose2 = _interopRequireDefault(_compose);

	var _eqBy = __webpack_require__(313);

	var _eqBy2 = _interopRequireDefault(_eqBy);

	var _findIndex = __webpack_require__(314);

	var _findIndex2 = _interopRequireDefault(_findIndex);

	var _handle = __webpack_require__(16);

	var _identity = __webpack_require__(151);

	var _identity2 = _interopRequireDefault(_identity);

	var _lte = __webpack_require__(334);

	var _lte2 = _interopRequireDefault(_lte);

	var _prop = __webpack_require__(91);

	var _prop2 = _interopRequireDefault(_prop);

	var _propEq = __webpack_require__(340);

	var _propEq2 = _interopRequireDefault(_propEq);

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _remove = __webpack_require__(341);

	var _remove2 = _interopRequireDefault(_remove);

	var _unionWith = __webpack_require__(347);

	var _unionWith2 = _interopRequireDefault(_unionWith);

	var _useWith = __webpack_require__(161);

	var _useWith2 = _interopRequireDefault(_useWith);

	function _interopRequireDefault(obj) {
		return obj && obj.__esModule ? obj : { default: obj };
	}

	function _classCallCheck(instance, Constructor) {
		if (!(instance instanceof Constructor)) {
			throw new TypeError("Cannot call a class as a function");
		}
	}

	function _possibleConstructorReturn(self, call) {
		if (!self) {
			throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
		}return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
		if (typeof superClass !== "function" && superClass !== null) {
			throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
		}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	} /*
	   * Exports the {@link ui/ViewManager.TransitionGroup} component.
	   */

	// Using string refs from the source code of ReactTransitionGroup
	/* eslint-disable react/no-string-refs */

	/**
	 * Returns the index of a child in an array found by `key` matching
	 *
	 * @param {Object} child React element to find
	 * @param {Object[]} children Array of React elements
	 * @returns {Number} Index of child
	 * @method
	 * @private
	 */
	var indexOfChild = (0, _useWith2.default)(_findIndex2.default, [(0, _propEq2.default)('key'), _identity2.default]);

	/**
	 * Returns `true` if `children` contains `child`
	 *
	 * @param {Object} child React element to find
	 * @param {Object[]} children Array of React elements
	 * @returns {Boolean} `true` if `child` is present
	 * @method
	 * @private
	 */
	var hasChild = (0, _compose2.default)((0, _lte2.default)(0), indexOfChild);

	/**
	 * Returns an array of non-null children
	 *
	 * @param  {Object[]} children Array of React children
	 *
	 * @returns {Object[]}          Array of children
	 * @private
	 */
	var mapChildren = function mapChildren(children) {
		var result = children && _react2.default.Children.toArray(children);
		return result ? result.filter(function (c) {
			return !!c;
		}) : [];
	};

	/**
	 * Merges two arrays of children without any duplicates (by `key`)
	 *
	 * @param {Object[]} a Set of children
	 * @param {Object[]} b Set of children
	 * @returns {Object[]} Merged set of children
	 * @method
	 * @private
	 */
	var mergeChildren = (0, _unionWith2.default)((0, _eqBy2.default)((0, _prop2.default)('key')));

	// Cached event forwarders
	var forwardOnAppear = (0, _handle.forward)('onAppear');
	var forwardOnEnter = (0, _handle.forward)('onEnter');
	var forwardOnLeave = (0, _handle.forward)('onLeave');
	var forwardOnStay = (0, _handle.forward)('onStay');
	var forwardOnTransition = (0, _handle.forward)('onTransition');
	var forwardOnWillTransition = (0, _handle.forward)('onWillTransition');

	/**
	 * Manages the transition of added and removed child components. Children that are added are
	 * transitioned in and those removed are transition out via optional callbacks on the child.
	 *
	 * Ported from [ReactTransitionGroup]
	 * (https://facebook.github.io/react/docs/animation.html#low-level-api-reacttransitiongroup).
	 * Currently somewhat specialized for the purposes of ViewManager.
	 *
	 * @class TransitionGroup
	 * @memberof ui/ViewManager
	 * @private
	 */

	var TransitionGroup = function (_React$Component) {
		_inherits(TransitionGroup, _React$Component);

		function TransitionGroup(props) {
			_classCallCheck(this, TransitionGroup);

			var _this = _possibleConstructorReturn(this, (TransitionGroup.__proto__ || Object.getPrototypeOf(TransitionGroup)).call(this, props));

			_this.performAppear = function (key) {
				_this.currentlyTransitioningKeys[key] = true;

				var component = _this.refs[key];

				if (component.componentWillAppear) {
					component.componentWillAppear(_this._handleDoneAppearing.bind(_this, key));
				} else {
					_this._handleDoneAppearing(key);
				}
			};

			_this._handleDoneAppearing = function (key) {
				var component = _this.refs[key];
				if (component.componentDidAppear) {
					component.componentDidAppear();
				}

				forwardOnAppear({
					view: component
				}, _this.props);

				_this.completeTransition(key);

				var currentChildMapping = mapChildren(_this.props.children);

				if (!currentChildMapping || !hasChild(key, currentChildMapping)) {
					// This was removed before it had fully appeared. Remove it.
					_this.performLeave(key);
				}
			};

			_this.performEnter = function (key) {
				_this.currentlyTransitioningKeys[key] = true;

				var component = _this.refs[key];

				if (component.componentWillEnter) {
					component.componentWillEnter(_this._handleDoneEntering.bind(_this, key));
				} else {
					_this._handleDoneEntering(key);
				}
			};

			_this._handleDoneEntering = function (key) {
				var component = _this.refs[key];
				if (component.componentDidEnter) {
					component.componentDidEnter();
				}

				forwardOnEnter({
					view: component
				}, _this.props);

				_this.completeTransition(key);
			};

			_this.performStay = function (key) {
				var component = _this.refs[key];

				if (component.componentWillStay) {
					component.componentWillStay(_this._handleDoneStaying.bind(_this, key));
				} else {
					_this._handleDoneStaying(key);
				}
			};

			_this._handleDoneStaying = function (key) {
				var component = _this.refs[key];
				if (component.componentDidStay) {
					component.componentDidStay();
				}

				forwardOnStay({
					view: component
				}, _this.props);
			};

			_this.performLeave = function (key) {
				_this.currentlyTransitioningKeys[key] = true;

				var component = _this.refs[key];
				if (component.componentWillLeave) {
					component.componentWillLeave(_this._handleDoneLeaving.bind(_this, key));
				} else {
					// Note that this is somewhat dangerous b/c it calls setState()
					// again, effectively mutating the component before all the work
					// is done.
					_this._handleDoneLeaving(key);
				}
			};

			_this._handleDoneLeaving = function (key) {
				var component = _this.refs[key];

				if (component.componentDidLeave) {
					component.componentDidLeave();
				}

				forwardOnLeave({
					view: component
				}, _this.props);

				_this.completeTransition(key);

				_this.setState(function (state) {
					var index = indexOfChild(key, state.children);
					return { children: (0, _remove2.default)(index, 1, state.children) };
				});
			};

			_this.state = {
				children: mapChildren(_this.props.children)
			};
			return _this;
		}

		_createClass(TransitionGroup, [{
			key: 'componentWillMount',
			value: function componentWillMount() {
				this.currentlyTransitioningKeys = {};
				this.keysToEnter = [];
				this.keysToLeave = [];
				this.keysToStay = [];
			}
		}, {
			key: 'componentDidMount',
			value: function componentDidMount() {
				var _this2 = this;

				// this isn't used by ViewManager or View at the moment but leaving it around for future
				// flexibility
				this.state.children.forEach(function (child) {
					return _this2.performAppear(child.key);
				});
			}
		}, {
			key: 'componentWillReceiveProps',
			value: function componentWillReceiveProps(nextProps) {
				var _this3 = this;

				// Avoid an unnecessary setState and reconcileChildren if the children haven't changed
				if (!(0, _util.childrenEquals)(this.props.children, nextProps.children)) {
					var nextChildMapping = mapChildren(nextProps.children);
					var prevChildMapping = this.state.children;
					var children = mergeChildren(nextChildMapping, prevChildMapping);

					// drop children exceeding allowed size
					var drop = children.length - nextProps.size;
					var dropped = drop > 0 ? children.splice(drop) : null;

					this.setState({
						children: children
					}, function () {
						_this3.reconcileChildren(dropped, prevChildMapping, nextChildMapping);
					});
				}
			}
		}, {
			key: 'reconcileChildren',
			value: function reconcileChildren(dropped, prevChildMapping, nextChildMapping) {
				var _this4 = this;

				// mark any new child as entering
				nextChildMapping.forEach(function (child) {
					var key = child.key;
					var hasPrev = hasChild(key, prevChildMapping);
					var isDropped = dropped && hasChild(key, dropped);
					// flag a view to enter if it isn't being dropped, if it's new (!hasPrev), or if it's
					// not new (hasPrev) but is re-entering (is currently transitioning)
					if (!isDropped) {
						if (!hasPrev || _this4.currentlyTransitioningKeys[key]) {
							_this4.keysToEnter.push(key);
						} else {
							_this4.keysToStay.push(key);
						}
					}
				});

				// mark any previous child not remaining as leaving
				prevChildMapping.forEach(function (child) {
					var key = child.key;
					var hasNext = hasChild(key, nextChildMapping);
					var isDropped = dropped && hasChild(key, dropped);
					// flag a view to leave if it isn't being dropped and it isn't in the new set (!hasNext)
					if (!isDropped && !hasNext) {
						_this4.keysToLeave.push(key);
					}
				});

				// if any views were dropped because they exceeded `size`, the can no longer be
				// transitioning so indicate as such
				if (dropped) {
					dropped.forEach(function (child) {
						delete _this4.currentlyTransitioningKeys[child.key];
					});
				}

				if (this.keysToEnter.length) {
					forwardOnWillTransition(null, this.props);
				}

				// once the component has been updated, start the enter transition for new children,
				var keysToEnter = this.keysToEnter;
				this.keysToEnter = [];
				keysToEnter.forEach(this.performEnter);

				// ... the stay transition for any children remaining,
				var keysToStay = this.keysToStay;
				this.keysToStay = [];
				keysToStay.forEach(this.performStay);

				// ... and the leave transition for departing children
				var keysToLeave = this.keysToLeave;
				this.keysToLeave = [];
				keysToLeave.forEach(this.performLeave);
			}
		}, {
			key: 'completeTransition',
			value: function completeTransition(key) {
				delete this.currentlyTransitioningKeys[key];

				if (Object.keys(this.currentlyTransitioningKeys).length === 0) {
					forwardOnTransition(null, this.props);
				}
			}
		}, {
			key: 'render',
			value: function render() {
				var _this5 = this;

				// support wrapping arbitrary children with a component that supports the necessary
				// lifecycle methods to animate transitions
				var childrenToRender = this.state.children.map(function (child) {
					return _react2.default.cloneElement(_this5.props.childFactory(child), { key: child.key, ref: child.key });
				});

				// Do not forward TransitionGroup props to primitive DOM nodes
				var props = Object.assign({}, this.props);
				delete props.size;
				delete props.childFactory;
				delete props.component;
				delete props.onAppear;
				delete props.onEnter;
				delete props.onLeave;
				delete props.onStay;
				delete props.onTransition;
				delete props.onWillTransition;

				return _react2.default.createElement(this.props.component, props, childrenToRender);
			}
		}]);

		return TransitionGroup;
	}(_react2.default.Component);

	TransitionGroup.propTypes = /** @lends ui/ViewManager.TransitionGroup.prototype */{
		children: _react2.default.PropTypes.node.isRequired,

		/**
	  * Adapts children to be compatible with TransitionGroup
	  *
	  * @type {Function}
	  */
		childFactory: _react2.default.PropTypes.func,

		/**
	  * Type of component wrapping the children. May be a DOM node or a custom React component.
	  *
	  * @type {String|Component}
	  * @default 'div'
	  */
		component: _react2.default.PropTypes.any,

		/**
	  * Called when each view is rendered during initial construction.
	  *
	  * @type {Function}
	  */
		onAppear: _react2.default.PropTypes.func,

		/**
	  * Called when each view completes its transition into the viewport.
	  *
	  * @type {Function}
	  */
		onEnter: _react2.default.PropTypes.func,

		/**
	  * Called when each view completes its transition out of the viewport.
	  *
	  * @type {Function}
	  */
		onLeave: _react2.default.PropTypes.func,

		/**
	  * Called when each view completes its transition within the viewport.
	  *
	  * @type {Function}
	  */
		onStay: _react2.default.PropTypes.func,

		/**
	  * Called once when all views have completed their transition.
	  *
	  * @type {Function}
	  */
		onTransition: _react2.default.PropTypes.func,

		/**
	  * Called once before views begin their transition.
	  *
	  * @type {Function}
	  */
		onWillTransition: _react2.default.PropTypes.func,

		/**
	  * Maximum number of rendered children. Used to limit how many visible transitions are
	  * active at any time. A value of 1 would prevent any exit transitions whereas a value of 2,
	  * the default, would ensure that only 1 view is transitioning on and 1 view is
	  * transitioning off at a time.
	  *
	  * @type {Number}
	  * @default 2
	  */
		size: _react2.default.PropTypes.number
	};
	TransitionGroup.defaultProps = {
		childFactory: _identity2.default,
		component: 'div',
		size: 2
	};
	exports.default = TransitionGroup;
	exports.TransitionGroup = TransitionGroup;

/***/ },
/* 256 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	exports.wrapWithView = exports.View = undefined;

	var _createClass = function () {
		function defineProperties(target, props) {
			for (var i = 0; i < props.length; i++) {
				var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
			}
		}return function (Constructor, protoProps, staticProps) {
			if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
		};
	}();

	var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
		return typeof obj === "undefined" ? "undefined" : _typeof2(obj);
	} : function (obj) {
		return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof2(obj);
	}; /*
	    * Exports the {@link ui/ViewManager.View} component.
	    */

	var _util = __webpack_require__(28);

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(58);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _Arranger = __webpack_require__(140);

	function _interopRequireDefault(obj) {
		return obj && obj.__esModule ? obj : { default: obj };
	}

	function _defineProperty(obj, key, value) {
		if (key in obj) {
			Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });
		} else {
			obj[key] = value;
		}return obj;
	}

	function _classCallCheck(instance, Constructor) {
		if (!(instance instanceof Constructor)) {
			throw new TypeError("Cannot call a class as a function");
		}
	}

	function _possibleConstructorReturn(self, call) {
		if (!self) {
			throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
		}return call && ((typeof call === "undefined" ? "undefined" : _typeof2(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
		if (typeof superClass !== "function" && superClass !== null) {
			throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof2(superClass)));
		}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	// Isomorphic guards
	var nop = function nop() {};
	var isBrowser = (typeof window === 'undefined' ? 'undefined' : _typeof(window)) === 'object';
	var _cancelAnimationFrame = isBrowser ? window.cancelAnimationFrame.bind(window) : nop;
	var requestAnimationFrame = isBrowser ? window.requestAnimationFrame.bind(window) : nop;
	var now = isBrowser ? window.performance.now.bind(window.performance) : nop;

	/**
	 * A `View` wraps a set of children for {@link ui/ViewManager.ViewManager}.
	 * It is not intended to be used directly
	 *
	 * @class View
	 * @memberof ui/ViewManager
	 * @private
	 */

	var View = function (_React$Component) {
		_inherits(View, _React$Component);

		function View(props) {
			_classCallCheck(this, View);

			var _this = _possibleConstructorReturn(this, (View.__proto__ || Object.getPrototypeOf(View)).call(this, props));

			_this.enteringJob = new _util.Job(function () {
				_this.setState({
					entering: false
				});
			});

			_this.prepareTransition = function (arranger, callback, noAnimation) {
				var _this$props = _this.props,
				    duration = _this$props.duration,
				    index = _this$props.index,
				    previousIndex = _this$props.previousIndex,
				    reverseTransition = _this$props.reverseTransition;

				var startTime = now();
				var endTime = startTime + duration;
				/* eslint react/no-find-dom-node: "off" */
				var node = _reactDom2.default.findDOMNode(_this);

				// disable animation when the instance or props flag is true
				noAnimation = noAnimation || _this.props.noAnimation;

				// Arranges the control each tick and calls the provided callback on complete
				var fn = function fn(start, end, time) {
					_this.cancelAnimationFrame();

					// percent is the ratio (between 0 and 1) of the current step to the total steps
					var percent = (time - start) / (end - start);
					if (!noAnimation && percent < 1) {
						// the transition is still in progress so call the arranger
						arranger({
							node: node,
							percent: percent,
							reverseTransition: reverseTransition,
							from: previousIndex,
							to: index
						});

						return true;
					} else {
						// the transition is complete so clean up and ensure we fire a final arrange with
						// a value of 1.
						_this.animation = null;
						arranger({
							node: node,
							percent: 1,
							reverseTransition: reverseTransition,
							from: previousIndex,
							to: index
						});
						callback();

						return false;
					}
				};

				var initialTime = 0;

				// When a new transition is initiated mid-transition, adjust time to account for the current
				// percent complete.
				if (_this.animation && _this.changeDirection) {
					var a = _this.animation;
					var percentComplete = (a.time - a.start) / (a.end - a.start);
					initialTime = (endTime - startTime) * (1 - percentComplete);
				}

				_this.transition(startTime, endTime, initialTime, fn);
			};

			_this.transition = function (start, end, time, callback) {
				var a = _this.animation = _this.animation || {};
				a.start = start;
				a.end = end;
				a.time = time;

				if (callback(start, end, time)) {
					_this._raf = requestAnimationFrame(function () {
						var current = now();
						_this.transition(start, end, current, callback);
					});
				} else {
					_this._raf = null;
				}
			};

			_this.animation = null;
			_this._raf = null;
			_this.state = {
				entering: true
			};
			return _this;
		}

		_createClass(View, [{
			key: 'componentWillReceiveProps',
			value: function componentWillReceiveProps(nextProps) {
				// changeDirection let's us know we need to switch mid-transition
				this.changeDirection = this.animation ? this.props.reverseTransition !== nextProps.reverseTransition : false;
			}
		}, {
			key: 'componentWillUnmount',
			value: function componentWillUnmount() {
				this.cancelAnimationFrame();
				this.enteringJob.stop();
			}
		}, {
			key: 'cancelAnimationFrame',
			value: function cancelAnimationFrame() {
				if (this._raf) {
					_cancelAnimationFrame(this._raf);
					this._raf = null;
				}
			}
		}, {
			key: 'componentWillAppear',
			value: function componentWillAppear(callback) {
				var arranger = this.props.arranger;

				if (arranger && arranger.stay) {
					this.prepareTransition(arranger.stay, callback, true);
				} else {
					callback();
				}
			}
		}, {
			key: 'componentDidAppear',
			value: function componentDidAppear() {
				this.setState({
					entering: false
				});
			}

			// This is called at the same time as componentDidMount() for components added to an existing
			// TransitionGroup. It will block other animations from occurring until callback is called. It
			// will not be called on the initial render of a TransitionGroup.

		}, {
			key: 'componentWillEnter',
			value: function componentWillEnter(callback) {
				var _props = this.props,
				    arranger = _props.arranger,
				    reverseTransition = _props.reverseTransition;

				if (arranger) {
					this.prepareTransition(reverseTransition ? arranger.leave : arranger.enter, callback);
				} else {
					callback();
				}
			}
		}, {
			key: 'componentDidEnter',
			value: function componentDidEnter() {
				var _props2 = this.props,
				    enteringDelay = _props2.enteringDelay,
				    enteringProp = _props2.enteringProp;

				if (enteringProp) {
					this.enteringJob.startAfter(enteringDelay);
				}
			}
		}, {
			key: 'componentWillStay',
			value: function componentWillStay(callback) {
				var arranger = this.props.arranger;

				if (arranger && arranger.stay) {
					this.prepareTransition(arranger.stay, callback);
				} else {
					callback();
				}
			}

			// This is called when the child has been removed from the ReactTransitionGroup. Though the
			// child has been removed, ReactTransitionGroup will keep it in the DOM until callback is
			// called.

		}, {
			key: 'componentWillLeave',
			value: function componentWillLeave(callback) {
				var _props3 = this.props,
				    arranger = _props3.arranger,
				    reverseTransition = _props3.reverseTransition;

				this.enteringJob.stop();
				if (arranger) {
					this.prepareTransition(reverseTransition ? arranger.enter : arranger.leave, callback);
				} else {
					callback();
				}
			}

			/**
	   * Initiates a new transition
	   *
	   * @param	{Function}	arranger		Arranger function to call (enter, leave)
	   * @param	{Function}	callback		Completion callback
	   * @param	{Boolean}	[noAnimation]	`true` to disable animation for this transition
	   * @returns {undefined}
	   * @private
	   */

			/**
	   * Calls the arranger method and schedules the next animation frame
	   *
	   * @param   {Number}    start    Animation start time
	   * @param   {Number}    end      Animation end time
	   * @param   {Number}    time     Current animation time
	   * @param   {Function}  callback Completion callback
	   * @returns {undefined}
	   * @private
	   */

		}, {
			key: 'render',
			value: function render() {
				var _props4 = this.props,
				    enteringProp = _props4.enteringProp,
				    children = _props4.children;

				if (enteringProp) {
					return _react2.default.cloneElement(children, _defineProperty({}, enteringProp, this.state.entering));
				} else {
					return _react2.default.Children.only(children);
				}
			}
		}]);

		return View;
	}(_react2.default.Component);

	// Not a true render method but instead a wrapper for TransitionGroup to wrap arbitrary children
	// with a TransitionGroup-compatible child that supports animation
	//
	// eslint-disable-next-line enact/display-name


	View.propTypes = /** @lends ui/ViewManager.View.prototype */{
		children: _react2.default.PropTypes.node.isRequired,

		/**
	  * Time in milliseconds to complete a transition
	  *
	  * @type {Number}
	  */
		duration: _react2.default.PropTypes.number.isRequired,

		/**
	  * Arranger to control the animation
	  *
	  * @type {Arranger}
	  */
		arranger: _Arranger.shape,

		/**
	  * Time, in milliseconds, to wait after a view has entered to inform it by passing the
	  * `enteringProp` as false.
	  *
	  * @type {Number}
	  * @default 0
	  */
		enteringDelay: _react2.default.PropTypes.number,

		/**
	  * Name of the property to pass to the wrapped view to indicate when it is entering the
	  * viewport. When `true`, the view has been created but has not transitioned into place.
	  * When `false`, the view has finished its transition.
	  *
	  * The notification can be delayed by setting `enteringDelay`. If not set, the view will not
	  * be notified of the change in transition.
	  *
	  * @type {String}
	  */
		enteringProp: _react2.default.PropTypes.string,

		/**
	  * Index of the currently 'active' view.
	  *
	  * @type {Number}
	  */
		index: _react2.default.PropTypes.number,

		/**
	  * Indicates if the transition should be animated
	  *
	  * @type {Boolean}
	  * @default true
	  */
		noAnimation: _react2.default.PropTypes.bool,

		/**
	  * Index of the previously 'active' view.
	  *
	  * @type {Number}
	  */
		previousIndex: _react2.default.PropTypes.number,

		/**
	  * Indicates if the transition should be reversed. The effect depends on how the provided
	  * `arranger` handles reversal.
	  *
	  * @type {Boolean}
	  * @default false
	  */
		reverseTransition: _react2.default.PropTypes.bool
	};
	View.defaultProps = {
		enteringDelay: 0
	};
	var wrapWithView = function wrapWithView(config) {
		return function (child) {
			return _react2.default.createElement(View, config, child);
		};
	};

	exports.default = View;
	exports.View = View;
	exports.wrapWithView = wrapWithView;

/***/ },
/* 257 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	exports.ResolutionDecorator = undefined;

	var _extends = Object.assign || function (target) {
		for (var i = 1; i < arguments.length; i++) {
			var source = arguments[i];for (var key in source) {
				if (Object.prototype.hasOwnProperty.call(source, key)) {
					target[key] = source[key];
				}
			}
		}return target;
	};

	var _createClass = function () {
		function defineProperties(target, props) {
			for (var i = 0; i < props.length; i++) {
				var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
			}
		}return function (Constructor, protoProps, staticProps) {
			if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
		};
	}();

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _hoc = __webpack_require__(10);

	var _hoc2 = _interopRequireDefault(_hoc);

	var _resolution = __webpack_require__(141);

	function _interopRequireDefault(obj) {
		return obj && obj.__esModule ? obj : { default: obj };
	}

	function _classCallCheck(instance, Constructor) {
		if (!(instance instanceof Constructor)) {
			throw new TypeError("Cannot call a class as a function");
		}
	}

	function _possibleConstructorReturn(self, call) {
		if (!self) {
			throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
		}return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
		if (typeof superClass !== "function" && superClass !== null) {
			throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
		}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	} /*
	   * Exports the {@link ui/resolution.ResolutionDecorator} Higher-order Component (HOC).
	   *
	   * not jsdoc module on purpose
	   */

	/**
	 * Default config for {@link ui/resolution.ResolutionDecorator}
	 *
	 * @memberof ui/resolution.ResolutionDecorator
	 * @hocconfig
	 */
	var defaultConfig = {
		/**
	  * When `true`, an event listener will be attached to the window to listen for resize events.
	  *
	  * @type {Boolean}
	  * @default true
	  * @public
	  * @memberof ui/resolution.ResolutionDecorator.defaultConfig
	  */
		dynamic: true,

		/**
	  * An array of objects containing declarations for screen types to add to the list of known
	  * screen types.
	  *
	  * @type {Object[]}
	  * @default null
	  * @public
	  * @memberof ui/resolution.ResolutionDecorator.defaultConfig
	  */
		screenTypes: null
	};

	/**
	 * Higher-order Component that configures resolution support for its wrapped component tree.
	 *
	 * Configuration options:
	 *	* dynamic: true - when true, updates the resolution classes when the window resizes
	 *	* screenTypes: null - defines a set of screen types to support
	 *
	 * @example
	 *	// Will have the resolution classes and will be updated when the window resizes
	 *	const AppWithResolution = ResolutionDecorator(App);
	 *	// Will have the resolution classes for the screen at the time of render only
	 *	const AppWithStaticResolution = ResolutionDecorator({dynamic: false}, App);
	 *	const AppWithScreenTypes = ResolutionDecorator({screenTypes: [
	 *		{name: 'hd', pxPerRem: 16, width: 1280, height: 720, aspectRatioName: 'hdtv', base: true}
	 *	]}, App);
	 *
	 * @class ResolutionDecorator
	 * @memberof ui/resolution
	 * @hoc
	 * @public
	 */
	var ResolutionDecorator = (0, _hoc2.default)(defaultConfig, function (config, Wrapped) {
		var _class, _temp2;

		if (config.screenTypes) {
			(0, _resolution.defineScreenTypes)(config.screenTypes);
		}

		return _temp2 = _class = function (_React$Component) {
			_inherits(_class, _React$Component);

			function _class() {
				var _ref;

				var _temp, _this, _ret;

				_classCallCheck(this, _class);

				for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
					args[_key] = arguments[_key];
				}

				return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = _class.__proto__ || Object.getPrototypeOf(_class)).call.apply(_ref, [this].concat(args))), _this), _this.handleResize = function () {
					(0, _resolution.init)();
					_this.setState({
						screenType: (0, _resolution.getScreenTypeObject)().name
					});
				}, _temp), _possibleConstructorReturn(_this, _ret);
			}

			_createClass(_class, [{
				key: 'componentDidMount',
				value: function componentDidMount() {
					if (config.dynamic) window.addEventListener('resize', this.handleResize);
				}
			}, {
				key: 'componentWillUnmount',
				value: function componentWillUnmount() {
					if (config.dynamic) window.removeEventListener('resize', this.handleResize);
				}
			}, {
				key: 'render',
				value: function render() {
					// ensure we've initialized the RI members
					if (!this.state || !this.state.screenType) (0, _resolution.init)();

					var classes = (0, _resolution.getResolutionClasses)();
					if (this.props.className) classes += (classes ? ' ' : '') + this.props.className;
					return _react2.default.createElement(Wrapped, _extends({}, this.props, { className: classes }));
				}
			}]);

			return _class;
		}(_react2.default.Component), _class.displayName = 'ResolutionDecorator', _class.propTypes = /** @lends ui/resolution.ResolutionDecorator.prototype */{
			className: _react2.default.PropTypes.string
		}, _temp2;
	});

	exports.default = ResolutionDecorator;
	exports.ResolutionDecorator = ResolutionDecorator;

/***/ },
/* 258 */
/***/ function(module, exports) {

	'use strict'

	exports.byteLength = byteLength
	exports.toByteArray = toByteArray
	exports.fromByteArray = fromByteArray

	var lookup = []
	var revLookup = []
	var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

	var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
	for (var i = 0, len = code.length; i < len; ++i) {
	  lookup[i] = code[i]
	  revLookup[code.charCodeAt(i)] = i
	}

	revLookup['-'.charCodeAt(0)] = 62
	revLookup['_'.charCodeAt(0)] = 63

	function placeHoldersCount (b64) {
	  var len = b64.length
	  if (len % 4 > 0) {
	    throw new Error('Invalid string. Length must be a multiple of 4')
	  }

	  // the number of equal signs (place holders)
	  // if there are two placeholders, than the two characters before it
	  // represent one byte
	  // if there is only one, then the three characters before it represent 2 bytes
	  // this is just a cheap hack to not do indexOf twice
	  return b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0
	}

	function byteLength (b64) {
	  // base64 is 4/3 + up to two characters of the original data
	  return b64.length * 3 / 4 - placeHoldersCount(b64)
	}

	function toByteArray (b64) {
	  var i, j, l, tmp, placeHolders, arr
	  var len = b64.length
	  placeHolders = placeHoldersCount(b64)

	  arr = new Arr(len * 3 / 4 - placeHolders)

	  // if there are placeholders, only get up to the last complete 4 chars
	  l = placeHolders > 0 ? len - 4 : len

	  var L = 0

	  for (i = 0, j = 0; i < l; i += 4, j += 3) {
	    tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)]
	    arr[L++] = (tmp >> 16) & 0xFF
	    arr[L++] = (tmp >> 8) & 0xFF
	    arr[L++] = tmp & 0xFF
	  }

	  if (placeHolders === 2) {
	    tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4)
	    arr[L++] = tmp & 0xFF
	  } else if (placeHolders === 1) {
	    tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2)
	    arr[L++] = (tmp >> 8) & 0xFF
	    arr[L++] = tmp & 0xFF
	  }

	  return arr
	}

	function tripletToBase64 (num) {
	  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]
	}

	function encodeChunk (uint8, start, end) {
	  var tmp
	  var output = []
	  for (var i = start; i < end; i += 3) {
	    tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])
	    output.push(tripletToBase64(tmp))
	  }
	  return output.join('')
	}

	function fromByteArray (uint8) {
	  var tmp
	  var len = uint8.length
	  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
	  var output = ''
	  var parts = []
	  var maxChunkLength = 16383 // must be multiple of 3

	  // go through the array every three bytes, we'll deal with trailing stuff later
	  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
	    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))
	  }

	  // pad the end with zeros, but make sure to not forget the extra bytes
	  if (extraBytes === 1) {
	    tmp = uint8[len - 1]
	    output += lookup[tmp >> 2]
	    output += lookup[(tmp << 4) & 0x3F]
	    output += '=='
	  } else if (extraBytes === 2) {
	    tmp = (uint8[len - 2] << 8) + (uint8[len - 1])
	    output += lookup[tmp >> 10]
	    output += lookup[(tmp >> 4) & 0x3F]
	    output += lookup[(tmp << 2) & 0x3F]
	    output += '='
	  }

	  parts.push(output)

	  return parts.join('')
	}


/***/ },
/* 259 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {/*!
	 * The buffer module from node.js, for the browser.
	 *
	 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
	 * @license  MIT
	 */
	/* eslint-disable no-proto */

	'use strict'

	var base64 = __webpack_require__(258)
	var ieee754 = __webpack_require__(274)
	var isArray = __webpack_require__(275)

	exports.Buffer = Buffer
	exports.SlowBuffer = SlowBuffer
	exports.INSPECT_MAX_BYTES = 50

	/**
	 * If `Buffer.TYPED_ARRAY_SUPPORT`:
	 *   === true    Use Uint8Array implementation (fastest)
	 *   === false   Use Object implementation (most compatible, even IE6)
	 *
	 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
	 * Opera 11.6+, iOS 4.2+.
	 *
	 * Due to various browser bugs, sometimes the Object implementation will be used even
	 * when the browser supports typed arrays.
	 *
	 * Note:
	 *
	 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
	 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
	 *
	 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
	 *
	 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
	 *     incorrect length in some situations.

	 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
	 * get the Object implementation, which is slower but behaves correctly.
	 */
	Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined
	  ? global.TYPED_ARRAY_SUPPORT
	  : typedArraySupport()

	/*
	 * Export kMaxLength after typed array support is determined.
	 */
	exports.kMaxLength = kMaxLength()

	function typedArraySupport () {
	  try {
	    var arr = new Uint8Array(1)
	    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}
	    return arr.foo() === 42 && // typed array instances can be augmented
	        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
	        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
	  } catch (e) {
	    return false
	  }
	}

	function kMaxLength () {
	  return Buffer.TYPED_ARRAY_SUPPORT
	    ? 0x7fffffff
	    : 0x3fffffff
	}

	function createBuffer (that, length) {
	  if (kMaxLength() < length) {
	    throw new RangeError('Invalid typed array length')
	  }
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    // Return an augmented `Uint8Array` instance, for best performance
	    that = new Uint8Array(length)
	    that.__proto__ = Buffer.prototype
	  } else {
	    // Fallback: Return an object instance of the Buffer class
	    if (that === null) {
	      that = new Buffer(length)
	    }
	    that.length = length
	  }

	  return that
	}

	/**
	 * The Buffer constructor returns instances of `Uint8Array` that have their
	 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
	 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
	 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
	 * returns a single octet.
	 *
	 * The `Uint8Array` prototype remains unmodified.
	 */

	function Buffer (arg, encodingOrOffset, length) {
	  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
	    return new Buffer(arg, encodingOrOffset, length)
	  }

	  // Common case.
	  if (typeof arg === 'number') {
	    if (typeof encodingOrOffset === 'string') {
	      throw new Error(
	        'If encoding is specified then the first argument must be a string'
	      )
	    }
	    return allocUnsafe(this, arg)
	  }
	  return from(this, arg, encodingOrOffset, length)
	}

	Buffer.poolSize = 8192 // not used by this implementation

	// TODO: Legacy, not needed anymore. Remove in next major version.
	Buffer._augment = function (arr) {
	  arr.__proto__ = Buffer.prototype
	  return arr
	}

	function from (that, value, encodingOrOffset, length) {
	  if (typeof value === 'number') {
	    throw new TypeError('"value" argument must not be a number')
	  }

	  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
	    return fromArrayBuffer(that, value, encodingOrOffset, length)
	  }

	  if (typeof value === 'string') {
	    return fromString(that, value, encodingOrOffset)
	  }

	  return fromObject(that, value)
	}

	/**
	 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
	 * if value is a number.
	 * Buffer.from(str[, encoding])
	 * Buffer.from(array)
	 * Buffer.from(buffer)
	 * Buffer.from(arrayBuffer[, byteOffset[, length]])
	 **/
	Buffer.from = function (value, encodingOrOffset, length) {
	  return from(null, value, encodingOrOffset, length)
	}

	if (Buffer.TYPED_ARRAY_SUPPORT) {
	  Buffer.prototype.__proto__ = Uint8Array.prototype
	  Buffer.__proto__ = Uint8Array
	  if (typeof Symbol !== 'undefined' && Symbol.species &&
	      Buffer[Symbol.species] === Buffer) {
	    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
	    Object.defineProperty(Buffer, Symbol.species, {
	      value: null,
	      configurable: true
	    })
	  }
	}

	function assertSize (size) {
	  if (typeof size !== 'number') {
	    throw new TypeError('"size" argument must be a number')
	  } else if (size < 0) {
	    throw new RangeError('"size" argument must not be negative')
	  }
	}

	function alloc (that, size, fill, encoding) {
	  assertSize(size)
	  if (size <= 0) {
	    return createBuffer(that, size)
	  }
	  if (fill !== undefined) {
	    // Only pay attention to encoding if it's a string. This
	    // prevents accidentally sending in a number that would
	    // be interpretted as a start offset.
	    return typeof encoding === 'string'
	      ? createBuffer(that, size).fill(fill, encoding)
	      : createBuffer(that, size).fill(fill)
	  }
	  return createBuffer(that, size)
	}

	/**
	 * Creates a new filled Buffer instance.
	 * alloc(size[, fill[, encoding]])
	 **/
	Buffer.alloc = function (size, fill, encoding) {
	  return alloc(null, size, fill, encoding)
	}

	function allocUnsafe (that, size) {
	  assertSize(size)
	  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)
	  if (!Buffer.TYPED_ARRAY_SUPPORT) {
	    for (var i = 0; i < size; ++i) {
	      that[i] = 0
	    }
	  }
	  return that
	}

	/**
	 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
	 * */
	Buffer.allocUnsafe = function (size) {
	  return allocUnsafe(null, size)
	}
	/**
	 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
	 */
	Buffer.allocUnsafeSlow = function (size) {
	  return allocUnsafe(null, size)
	}

	function fromString (that, string, encoding) {
	  if (typeof encoding !== 'string' || encoding === '') {
	    encoding = 'utf8'
	  }

	  if (!Buffer.isEncoding(encoding)) {
	    throw new TypeError('"encoding" must be a valid string encoding')
	  }

	  var length = byteLength(string, encoding) | 0
	  that = createBuffer(that, length)

	  var actual = that.write(string, encoding)

	  if (actual !== length) {
	    // Writing a hex string, for example, that contains invalid characters will
	    // cause everything after the first invalid character to be ignored. (e.g.
	    // 'abxxcd' will be treated as 'ab')
	    that = that.slice(0, actual)
	  }

	  return that
	}

	function fromArrayLike (that, array) {
	  var length = array.length < 0 ? 0 : checked(array.length) | 0
	  that = createBuffer(that, length)
	  for (var i = 0; i < length; i += 1) {
	    that[i] = array[i] & 255
	  }
	  return that
	}

	function fromArrayBuffer (that, array, byteOffset, length) {
	  array.byteLength // this throws if `array` is not a valid ArrayBuffer

	  if (byteOffset < 0 || array.byteLength < byteOffset) {
	    throw new RangeError('\'offset\' is out of bounds')
	  }

	  if (array.byteLength < byteOffset + (length || 0)) {
	    throw new RangeError('\'length\' is out of bounds')
	  }

	  if (byteOffset === undefined && length === undefined) {
	    array = new Uint8Array(array)
	  } else if (length === undefined) {
	    array = new Uint8Array(array, byteOffset)
	  } else {
	    array = new Uint8Array(array, byteOffset, length)
	  }

	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    // Return an augmented `Uint8Array` instance, for best performance
	    that = array
	    that.__proto__ = Buffer.prototype
	  } else {
	    // Fallback: Return an object instance of the Buffer class
	    that = fromArrayLike(that, array)
	  }
	  return that
	}

	function fromObject (that, obj) {
	  if (Buffer.isBuffer(obj)) {
	    var len = checked(obj.length) | 0
	    that = createBuffer(that, len)

	    if (that.length === 0) {
	      return that
	    }

	    obj.copy(that, 0, 0, len)
	    return that
	  }

	  if (obj) {
	    if ((typeof ArrayBuffer !== 'undefined' &&
	        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {
	      if (typeof obj.length !== 'number' || isnan(obj.length)) {
	        return createBuffer(that, 0)
	      }
	      return fromArrayLike(that, obj)
	    }

	    if (obj.type === 'Buffer' && isArray(obj.data)) {
	      return fromArrayLike(that, obj.data)
	    }
	  }

	  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
	}

	function checked (length) {
	  // Note: cannot use `length < kMaxLength()` here because that fails when
	  // length is NaN (which is otherwise coerced to zero.)
	  if (length >= kMaxLength()) {
	    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
	                         'size: 0x' + kMaxLength().toString(16) + ' bytes')
	  }
	  return length | 0
	}

	function SlowBuffer (length) {
	  if (+length != length) { // eslint-disable-line eqeqeq
	    length = 0
	  }
	  return Buffer.alloc(+length)
	}

	Buffer.isBuffer = function isBuffer (b) {
	  return !!(b != null && b._isBuffer)
	}

	Buffer.compare = function compare (a, b) {
	  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
	    throw new TypeError('Arguments must be Buffers')
	  }

	  if (a === b) return 0

	  var x = a.length
	  var y = b.length

	  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
	    if (a[i] !== b[i]) {
	      x = a[i]
	      y = b[i]
	      break
	    }
	  }

	  if (x < y) return -1
	  if (y < x) return 1
	  return 0
	}

	Buffer.isEncoding = function isEncoding (encoding) {
	  switch (String(encoding).toLowerCase()) {
	    case 'hex':
	    case 'utf8':
	    case 'utf-8':
	    case 'ascii':
	    case 'latin1':
	    case 'binary':
	    case 'base64':
	    case 'ucs2':
	    case 'ucs-2':
	    case 'utf16le':
	    case 'utf-16le':
	      return true
	    default:
	      return false
	  }
	}

	Buffer.concat = function concat (list, length) {
	  if (!isArray(list)) {
	    throw new TypeError('"list" argument must be an Array of Buffers')
	  }

	  if (list.length === 0) {
	    return Buffer.alloc(0)
	  }

	  var i
	  if (length === undefined) {
	    length = 0
	    for (i = 0; i < list.length; ++i) {
	      length += list[i].length
	    }
	  }

	  var buffer = Buffer.allocUnsafe(length)
	  var pos = 0
	  for (i = 0; i < list.length; ++i) {
	    var buf = list[i]
	    if (!Buffer.isBuffer(buf)) {
	      throw new TypeError('"list" argument must be an Array of Buffers')
	    }
	    buf.copy(buffer, pos)
	    pos += buf.length
	  }
	  return buffer
	}

	function byteLength (string, encoding) {
	  if (Buffer.isBuffer(string)) {
	    return string.length
	  }
	  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&
	      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
	    return string.byteLength
	  }
	  if (typeof string !== 'string') {
	    string = '' + string
	  }

	  var len = string.length
	  if (len === 0) return 0

	  // Use a for loop to avoid recursion
	  var loweredCase = false
	  for (;;) {
	    switch (encoding) {
	      case 'ascii':
	      case 'latin1':
	      case 'binary':
	        return len
	      case 'utf8':
	      case 'utf-8':
	      case undefined:
	        return utf8ToBytes(string).length
	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return len * 2
	      case 'hex':
	        return len >>> 1
	      case 'base64':
	        return base64ToBytes(string).length
	      default:
	        if (loweredCase) return utf8ToBytes(string).length // assume utf8
	        encoding = ('' + encoding).toLowerCase()
	        loweredCase = true
	    }
	  }
	}
	Buffer.byteLength = byteLength

	function slowToString (encoding, start, end) {
	  var loweredCase = false

	  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
	  // property of a typed array.

	  // This behaves neither like String nor Uint8Array in that we set start/end
	  // to their upper/lower bounds if the value passed is out of range.
	  // undefined is handled specially as per ECMA-262 6th Edition,
	  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
	  if (start === undefined || start < 0) {
	    start = 0
	  }
	  // Return early if start > this.length. Done here to prevent potential uint32
	  // coercion fail below.
	  if (start > this.length) {
	    return ''
	  }

	  if (end === undefined || end > this.length) {
	    end = this.length
	  }

	  if (end <= 0) {
	    return ''
	  }

	  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
	  end >>>= 0
	  start >>>= 0

	  if (end <= start) {
	    return ''
	  }

	  if (!encoding) encoding = 'utf8'

	  while (true) {
	    switch (encoding) {
	      case 'hex':
	        return hexSlice(this, start, end)

	      case 'utf8':
	      case 'utf-8':
	        return utf8Slice(this, start, end)

	      case 'ascii':
	        return asciiSlice(this, start, end)

	      case 'latin1':
	      case 'binary':
	        return latin1Slice(this, start, end)

	      case 'base64':
	        return base64Slice(this, start, end)

	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return utf16leSlice(this, start, end)

	      default:
	        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
	        encoding = (encoding + '').toLowerCase()
	        loweredCase = true
	    }
	  }
	}

	// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
	// Buffer instances.
	Buffer.prototype._isBuffer = true

	function swap (b, n, m) {
	  var i = b[n]
	  b[n] = b[m]
	  b[m] = i
	}

	Buffer.prototype.swap16 = function swap16 () {
	  var len = this.length
	  if (len % 2 !== 0) {
	    throw new RangeError('Buffer size must be a multiple of 16-bits')
	  }
	  for (var i = 0; i < len; i += 2) {
	    swap(this, i, i + 1)
	  }
	  return this
	}

	Buffer.prototype.swap32 = function swap32 () {
	  var len = this.length
	  if (len % 4 !== 0) {
	    throw new RangeError('Buffer size must be a multiple of 32-bits')
	  }
	  for (var i = 0; i < len; i += 4) {
	    swap(this, i, i + 3)
	    swap(this, i + 1, i + 2)
	  }
	  return this
	}

	Buffer.prototype.swap64 = function swap64 () {
	  var len = this.length
	  if (len % 8 !== 0) {
	    throw new RangeError('Buffer size must be a multiple of 64-bits')
	  }
	  for (var i = 0; i < len; i += 8) {
	    swap(this, i, i + 7)
	    swap(this, i + 1, i + 6)
	    swap(this, i + 2, i + 5)
	    swap(this, i + 3, i + 4)
	  }
	  return this
	}

	Buffer.prototype.toString = function toString () {
	  var length = this.length | 0
	  if (length === 0) return ''
	  if (arguments.length === 0) return utf8Slice(this, 0, length)
	  return slowToString.apply(this, arguments)
	}

	Buffer.prototype.equals = function equals (b) {
	  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
	  if (this === b) return true
	  return Buffer.compare(this, b) === 0
	}

	Buffer.prototype.inspect = function inspect () {
	  var str = ''
	  var max = exports.INSPECT_MAX_BYTES
	  if (this.length > 0) {
	    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
	    if (this.length > max) str += ' ... '
	  }
	  return '<Buffer ' + str + '>'
	}

	Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
	  if (!Buffer.isBuffer(target)) {
	    throw new TypeError('Argument must be a Buffer')
	  }

	  if (start === undefined) {
	    start = 0
	  }
	  if (end === undefined) {
	    end = target ? target.length : 0
	  }
	  if (thisStart === undefined) {
	    thisStart = 0
	  }
	  if (thisEnd === undefined) {
	    thisEnd = this.length
	  }

	  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
	    throw new RangeError('out of range index')
	  }

	  if (thisStart >= thisEnd && start >= end) {
	    return 0
	  }
	  if (thisStart >= thisEnd) {
	    return -1
	  }
	  if (start >= end) {
	    return 1
	  }

	  start >>>= 0
	  end >>>= 0
	  thisStart >>>= 0
	  thisEnd >>>= 0

	  if (this === target) return 0

	  var x = thisEnd - thisStart
	  var y = end - start
	  var len = Math.min(x, y)

	  var thisCopy = this.slice(thisStart, thisEnd)
	  var targetCopy = target.slice(start, end)

	  for (var i = 0; i < len; ++i) {
	    if (thisCopy[i] !== targetCopy[i]) {
	      x = thisCopy[i]
	      y = targetCopy[i]
	      break
	    }
	  }

	  if (x < y) return -1
	  if (y < x) return 1
	  return 0
	}

	// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
	// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
	//
	// Arguments:
	// - buffer - a Buffer to search
	// - val - a string, Buffer, or number
	// - byteOffset - an index into `buffer`; will be clamped to an int32
	// - encoding - an optional encoding, relevant is val is a string
	// - dir - true for indexOf, false for lastIndexOf
	function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
	  // Empty buffer means no match
	  if (buffer.length === 0) return -1

	  // Normalize byteOffset
	  if (typeof byteOffset === 'string') {
	    encoding = byteOffset
	    byteOffset = 0
	  } else if (byteOffset > 0x7fffffff) {
	    byteOffset = 0x7fffffff
	  } else if (byteOffset < -0x80000000) {
	    byteOffset = -0x80000000
	  }
	  byteOffset = +byteOffset  // Coerce to Number.
	  if (isNaN(byteOffset)) {
	    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
	    byteOffset = dir ? 0 : (buffer.length - 1)
	  }

	  // Normalize byteOffset: negative offsets start from the end of the buffer
	  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
	  if (byteOffset >= buffer.length) {
	    if (dir) return -1
	    else byteOffset = buffer.length - 1
	  } else if (byteOffset < 0) {
	    if (dir) byteOffset = 0
	    else return -1
	  }

	  // Normalize val
	  if (typeof val === 'string') {
	    val = Buffer.from(val, encoding)
	  }

	  // Finally, search either indexOf (if dir is true) or lastIndexOf
	  if (Buffer.isBuffer(val)) {
	    // Special case: looking for empty string/buffer always fails
	    if (val.length === 0) {
	      return -1
	    }
	    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
	  } else if (typeof val === 'number') {
	    val = val & 0xFF // Search for a byte value [0-255]
	    if (Buffer.TYPED_ARRAY_SUPPORT &&
	        typeof Uint8Array.prototype.indexOf === 'function') {
	      if (dir) {
	        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
	      } else {
	        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
	      }
	    }
	    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
	  }

	  throw new TypeError('val must be string, number or Buffer')
	}

	function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
	  var indexSize = 1
	  var arrLength = arr.length
	  var valLength = val.length

	  if (encoding !== undefined) {
	    encoding = String(encoding).toLowerCase()
	    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
	        encoding === 'utf16le' || encoding === 'utf-16le') {
	      if (arr.length < 2 || val.length < 2) {
	        return -1
	      }
	      indexSize = 2
	      arrLength /= 2
	      valLength /= 2
	      byteOffset /= 2
	    }
	  }

	  function read (buf, i) {
	    if (indexSize === 1) {
	      return buf[i]
	    } else {
	      return buf.readUInt16BE(i * indexSize)
	    }
	  }

	  var i
	  if (dir) {
	    var foundIndex = -1
	    for (i = byteOffset; i < arrLength; i++) {
	      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
	        if (foundIndex === -1) foundIndex = i
	        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
	      } else {
	        if (foundIndex !== -1) i -= i - foundIndex
	        foundIndex = -1
	      }
	    }
	  } else {
	    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
	    for (i = byteOffset; i >= 0; i--) {
	      var found = true
	      for (var j = 0; j < valLength; j++) {
	        if (read(arr, i + j) !== read(val, j)) {
	          found = false
	          break
	        }
	      }
	      if (found) return i
	    }
	  }

	  return -1
	}

	Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
	  return this.indexOf(val, byteOffset, encoding) !== -1
	}

	Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
	  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
	}

	Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
	  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
	}

	function hexWrite (buf, string, offset, length) {
	  offset = Number(offset) || 0
	  var remaining = buf.length - offset
	  if (!length) {
	    length = remaining
	  } else {
	    length = Number(length)
	    if (length > remaining) {
	      length = remaining
	    }
	  }

	  // must be an even number of digits
	  var strLen = string.length
	  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

	  if (length > strLen / 2) {
	    length = strLen / 2
	  }
	  for (var i = 0; i < length; ++i) {
	    var parsed = parseInt(string.substr(i * 2, 2), 16)
	    if (isNaN(parsed)) return i
	    buf[offset + i] = parsed
	  }
	  return i
	}

	function utf8Write (buf, string, offset, length) {
	  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
	}

	function asciiWrite (buf, string, offset, length) {
	  return blitBuffer(asciiToBytes(string), buf, offset, length)
	}

	function latin1Write (buf, string, offset, length) {
	  return asciiWrite(buf, string, offset, length)
	}

	function base64Write (buf, string, offset, length) {
	  return blitBuffer(base64ToBytes(string), buf, offset, length)
	}

	function ucs2Write (buf, string, offset, length) {
	  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
	}

	Buffer.prototype.write = function write (string, offset, length, encoding) {
	  // Buffer#write(string)
	  if (offset === undefined) {
	    encoding = 'utf8'
	    length = this.length
	    offset = 0
	  // Buffer#write(string, encoding)
	  } else if (length === undefined && typeof offset === 'string') {
	    encoding = offset
	    length = this.length
	    offset = 0
	  // Buffer#write(string, offset[, length][, encoding])
	  } else if (isFinite(offset)) {
	    offset = offset | 0
	    if (isFinite(length)) {
	      length = length | 0
	      if (encoding === undefined) encoding = 'utf8'
	    } else {
	      encoding = length
	      length = undefined
	    }
	  // legacy write(string, encoding, offset, length) - remove in v0.13
	  } else {
	    throw new Error(
	      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
	    )
	  }

	  var remaining = this.length - offset
	  if (length === undefined || length > remaining) length = remaining

	  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
	    throw new RangeError('Attempt to write outside buffer bounds')
	  }

	  if (!encoding) encoding = 'utf8'

	  var loweredCase = false
	  for (;;) {
	    switch (encoding) {
	      case 'hex':
	        return hexWrite(this, string, offset, length)

	      case 'utf8':
	      case 'utf-8':
	        return utf8Write(this, string, offset, length)

	      case 'ascii':
	        return asciiWrite(this, string, offset, length)

	      case 'latin1':
	      case 'binary':
	        return latin1Write(this, string, offset, length)

	      case 'base64':
	        // Warning: maxLength not taken into account in base64Write
	        return base64Write(this, string, offset, length)

	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return ucs2Write(this, string, offset, length)

	      default:
	        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
	        encoding = ('' + encoding).toLowerCase()
	        loweredCase = true
	    }
	  }
	}

	Buffer.prototype.toJSON = function toJSON () {
	  return {
	    type: 'Buffer',
	    data: Array.prototype.slice.call(this._arr || this, 0)
	  }
	}

	function base64Slice (buf, start, end) {
	  if (start === 0 && end === buf.length) {
	    return base64.fromByteArray(buf)
	  } else {
	    return base64.fromByteArray(buf.slice(start, end))
	  }
	}

	function utf8Slice (buf, start, end) {
	  end = Math.min(buf.length, end)
	  var res = []

	  var i = start
	  while (i < end) {
	    var firstByte = buf[i]
	    var codePoint = null
	    var bytesPerSequence = (firstByte > 0xEF) ? 4
	      : (firstByte > 0xDF) ? 3
	      : (firstByte > 0xBF) ? 2
	      : 1

	    if (i + bytesPerSequence <= end) {
	      var secondByte, thirdByte, fourthByte, tempCodePoint

	      switch (bytesPerSequence) {
	        case 1:
	          if (firstByte < 0x80) {
	            codePoint = firstByte
	          }
	          break
	        case 2:
	          secondByte = buf[i + 1]
	          if ((secondByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
	            if (tempCodePoint > 0x7F) {
	              codePoint = tempCodePoint
	            }
	          }
	          break
	        case 3:
	          secondByte = buf[i + 1]
	          thirdByte = buf[i + 2]
	          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
	            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
	              codePoint = tempCodePoint
	            }
	          }
	          break
	        case 4:
	          secondByte = buf[i + 1]
	          thirdByte = buf[i + 2]
	          fourthByte = buf[i + 3]
	          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
	            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
	              codePoint = tempCodePoint
	            }
	          }
	      }
	    }

	    if (codePoint === null) {
	      // we did not generate a valid codePoint so insert a
	      // replacement char (U+FFFD) and advance only 1 byte
	      codePoint = 0xFFFD
	      bytesPerSequence = 1
	    } else if (codePoint > 0xFFFF) {
	      // encode to utf16 (surrogate pair dance)
	      codePoint -= 0x10000
	      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
	      codePoint = 0xDC00 | codePoint & 0x3FF
	    }

	    res.push(codePoint)
	    i += bytesPerSequence
	  }

	  return decodeCodePointsArray(res)
	}

	// Based on http://stackoverflow.com/a/22747272/680742, the browser with
	// the lowest limit is Chrome, with 0x10000 args.
	// We go 1 magnitude less, for safety
	var MAX_ARGUMENTS_LENGTH = 0x1000

	function decodeCodePointsArray (codePoints) {
	  var len = codePoints.length
	  if (len <= MAX_ARGUMENTS_LENGTH) {
	    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
	  }

	  // Decode in chunks to avoid "call stack size exceeded".
	  var res = ''
	  var i = 0
	  while (i < len) {
	    res += String.fromCharCode.apply(
	      String,
	      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
	    )
	  }
	  return res
	}

	function asciiSlice (buf, start, end) {
	  var ret = ''
	  end = Math.min(buf.length, end)

	  for (var i = start; i < end; ++i) {
	    ret += String.fromCharCode(buf[i] & 0x7F)
	  }
	  return ret
	}

	function latin1Slice (buf, start, end) {
	  var ret = ''
	  end = Math.min(buf.length, end)

	  for (var i = start; i < end; ++i) {
	    ret += String.fromCharCode(buf[i])
	  }
	  return ret
	}

	function hexSlice (buf, start, end) {
	  var len = buf.length

	  if (!start || start < 0) start = 0
	  if (!end || end < 0 || end > len) end = len

	  var out = ''
	  for (var i = start; i < end; ++i) {
	    out += toHex(buf[i])
	  }
	  return out
	}

	function utf16leSlice (buf, start, end) {
	  var bytes = buf.slice(start, end)
	  var res = ''
	  for (var i = 0; i < bytes.length; i += 2) {
	    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
	  }
	  return res
	}

	Buffer.prototype.slice = function slice (start, end) {
	  var len = this.length
	  start = ~~start
	  end = end === undefined ? len : ~~end

	  if (start < 0) {
	    start += len
	    if (start < 0) start = 0
	  } else if (start > len) {
	    start = len
	  }

	  if (end < 0) {
	    end += len
	    if (end < 0) end = 0
	  } else if (end > len) {
	    end = len
	  }

	  if (end < start) end = start

	  var newBuf
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    newBuf = this.subarray(start, end)
	    newBuf.__proto__ = Buffer.prototype
	  } else {
	    var sliceLen = end - start
	    newBuf = new Buffer(sliceLen, undefined)
	    for (var i = 0; i < sliceLen; ++i) {
	      newBuf[i] = this[i + start]
	    }
	  }

	  return newBuf
	}

	/*
	 * Need to make sure that buffer isn't trying to write out of bounds.
	 */
	function checkOffset (offset, ext, length) {
	  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
	  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
	}

	Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkOffset(offset, byteLength, this.length)

	  var val = this[offset]
	  var mul = 1
	  var i = 0
	  while (++i < byteLength && (mul *= 0x100)) {
	    val += this[offset + i] * mul
	  }

	  return val
	}

	Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) {
	    checkOffset(offset, byteLength, this.length)
	  }

	  var val = this[offset + --byteLength]
	  var mul = 1
	  while (byteLength > 0 && (mul *= 0x100)) {
	    val += this[offset + --byteLength] * mul
	  }

	  return val
	}

	Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 1, this.length)
	  return this[offset]
	}

	Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  return this[offset] | (this[offset + 1] << 8)
	}

	Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  return (this[offset] << 8) | this[offset + 1]
	}

	Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)

	  return ((this[offset]) |
	      (this[offset + 1] << 8) |
	      (this[offset + 2] << 16)) +
	      (this[offset + 3] * 0x1000000)
	}

	Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)

	  return (this[offset] * 0x1000000) +
	    ((this[offset + 1] << 16) |
	    (this[offset + 2] << 8) |
	    this[offset + 3])
	}

	Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkOffset(offset, byteLength, this.length)

	  var val = this[offset]
	  var mul = 1
	  var i = 0
	  while (++i < byteLength && (mul *= 0x100)) {
	    val += this[offset + i] * mul
	  }
	  mul *= 0x80

	  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

	  return val
	}

	Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkOffset(offset, byteLength, this.length)

	  var i = byteLength
	  var mul = 1
	  var val = this[offset + --i]
	  while (i > 0 && (mul *= 0x100)) {
	    val += this[offset + --i] * mul
	  }
	  mul *= 0x80

	  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

	  return val
	}

	Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 1, this.length)
	  if (!(this[offset] & 0x80)) return (this[offset])
	  return ((0xff - this[offset] + 1) * -1)
	}

	Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  var val = this[offset] | (this[offset + 1] << 8)
	  return (val & 0x8000) ? val | 0xFFFF0000 : val
	}

	Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  var val = this[offset + 1] | (this[offset] << 8)
	  return (val & 0x8000) ? val | 0xFFFF0000 : val
	}

	Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)

	  return (this[offset]) |
	    (this[offset + 1] << 8) |
	    (this[offset + 2] << 16) |
	    (this[offset + 3] << 24)
	}

	Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)

	  return (this[offset] << 24) |
	    (this[offset + 1] << 16) |
	    (this[offset + 2] << 8) |
	    (this[offset + 3])
	}

	Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)
	  return ieee754.read(this, offset, true, 23, 4)
	}

	Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)
	  return ieee754.read(this, offset, false, 23, 4)
	}

	Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 8, this.length)
	  return ieee754.read(this, offset, true, 52, 8)
	}

	Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 8, this.length)
	  return ieee754.read(this, offset, false, 52, 8)
	}

	function checkInt (buf, value, offset, ext, max, min) {
	  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
	  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
	  if (offset + ext > buf.length) throw new RangeError('Index out of range')
	}

	Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) {
	    var maxBytes = Math.pow(2, 8 * byteLength) - 1
	    checkInt(this, value, offset, byteLength, maxBytes, 0)
	  }

	  var mul = 1
	  var i = 0
	  this[offset] = value & 0xFF
	  while (++i < byteLength && (mul *= 0x100)) {
	    this[offset + i] = (value / mul) & 0xFF
	  }

	  return offset + byteLength
	}

	Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) {
	    var maxBytes = Math.pow(2, 8 * byteLength) - 1
	    checkInt(this, value, offset, byteLength, maxBytes, 0)
	  }

	  var i = byteLength - 1
	  var mul = 1
	  this[offset + i] = value & 0xFF
	  while (--i >= 0 && (mul *= 0x100)) {
	    this[offset + i] = (value / mul) & 0xFF
	  }

	  return offset + byteLength
	}

	Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
	  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
	  this[offset] = (value & 0xff)
	  return offset + 1
	}

	function objectWriteUInt16 (buf, value, offset, littleEndian) {
	  if (value < 0) value = 0xffff + value + 1
	  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
	    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
	      (littleEndian ? i : 1 - i) * 8
	  }
	}

	Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value & 0xff)
	    this[offset + 1] = (value >>> 8)
	  } else {
	    objectWriteUInt16(this, value, offset, true)
	  }
	  return offset + 2
	}

	Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 8)
	    this[offset + 1] = (value & 0xff)
	  } else {
	    objectWriteUInt16(this, value, offset, false)
	  }
	  return offset + 2
	}

	function objectWriteUInt32 (buf, value, offset, littleEndian) {
	  if (value < 0) value = 0xffffffff + value + 1
	  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
	    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
	  }
	}

	Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset + 3] = (value >>> 24)
	    this[offset + 2] = (value >>> 16)
	    this[offset + 1] = (value >>> 8)
	    this[offset] = (value & 0xff)
	  } else {
	    objectWriteUInt32(this, value, offset, true)
	  }
	  return offset + 4
	}

	Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 24)
	    this[offset + 1] = (value >>> 16)
	    this[offset + 2] = (value >>> 8)
	    this[offset + 3] = (value & 0xff)
	  } else {
	    objectWriteUInt32(this, value, offset, false)
	  }
	  return offset + 4
	}

	Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) {
	    var limit = Math.pow(2, 8 * byteLength - 1)

	    checkInt(this, value, offset, byteLength, limit - 1, -limit)
	  }

	  var i = 0
	  var mul = 1
	  var sub = 0
	  this[offset] = value & 0xFF
	  while (++i < byteLength && (mul *= 0x100)) {
	    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
	      sub = 1
	    }
	    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
	  }

	  return offset + byteLength
	}

	Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) {
	    var limit = Math.pow(2, 8 * byteLength - 1)

	    checkInt(this, value, offset, byteLength, limit - 1, -limit)
	  }

	  var i = byteLength - 1
	  var mul = 1
	  var sub = 0
	  this[offset + i] = value & 0xFF
	  while (--i >= 0 && (mul *= 0x100)) {
	    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
	      sub = 1
	    }
	    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
	  }

	  return offset + byteLength
	}

	Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
	  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
	  if (value < 0) value = 0xff + value + 1
	  this[offset] = (value & 0xff)
	  return offset + 1
	}

	Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value & 0xff)
	    this[offset + 1] = (value >>> 8)
	  } else {
	    objectWriteUInt16(this, value, offset, true)
	  }
	  return offset + 2
	}

	Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 8)
	    this[offset + 1] = (value & 0xff)
	  } else {
	    objectWriteUInt16(this, value, offset, false)
	  }
	  return offset + 2
	}

	Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value & 0xff)
	    this[offset + 1] = (value >>> 8)
	    this[offset + 2] = (value >>> 16)
	    this[offset + 3] = (value >>> 24)
	  } else {
	    objectWriteUInt32(this, value, offset, true)
	  }
	  return offset + 4
	}

	Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
	  if (value < 0) value = 0xffffffff + value + 1
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 24)
	    this[offset + 1] = (value >>> 16)
	    this[offset + 2] = (value >>> 8)
	    this[offset + 3] = (value & 0xff)
	  } else {
	    objectWriteUInt32(this, value, offset, false)
	  }
	  return offset + 4
	}

	function checkIEEE754 (buf, value, offset, ext, max, min) {
	  if (offset + ext > buf.length) throw new RangeError('Index out of range')
	  if (offset < 0) throw new RangeError('Index out of range')
	}

	function writeFloat (buf, value, offset, littleEndian, noAssert) {
	  if (!noAssert) {
	    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
	  }
	  ieee754.write(buf, value, offset, littleEndian, 23, 4)
	  return offset + 4
	}

	Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
	  return writeFloat(this, value, offset, true, noAssert)
	}

	Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
	  return writeFloat(this, value, offset, false, noAssert)
	}

	function writeDouble (buf, value, offset, littleEndian, noAssert) {
	  if (!noAssert) {
	    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
	  }
	  ieee754.write(buf, value, offset, littleEndian, 52, 8)
	  return offset + 8
	}

	Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
	  return writeDouble(this, value, offset, true, noAssert)
	}

	Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
	  return writeDouble(this, value, offset, false, noAssert)
	}

	// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
	Buffer.prototype.copy = function copy (target, targetStart, start, end) {
	  if (!start) start = 0
	  if (!end && end !== 0) end = this.length
	  if (targetStart >= target.length) targetStart = target.length
	  if (!targetStart) targetStart = 0
	  if (end > 0 && end < start) end = start

	  // Copy 0 bytes; we're done
	  if (end === start) return 0
	  if (target.length === 0 || this.length === 0) return 0

	  // Fatal error conditions
	  if (targetStart < 0) {
	    throw new RangeError('targetStart out of bounds')
	  }
	  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
	  if (end < 0) throw new RangeError('sourceEnd out of bounds')

	  // Are we oob?
	  if (end > this.length) end = this.length
	  if (target.length - targetStart < end - start) {
	    end = target.length - targetStart + start
	  }

	  var len = end - start
	  var i

	  if (this === target && start < targetStart && targetStart < end) {
	    // descending copy from end
	    for (i = len - 1; i >= 0; --i) {
	      target[i + targetStart] = this[i + start]
	    }
	  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
	    // ascending copy from start
	    for (i = 0; i < len; ++i) {
	      target[i + targetStart] = this[i + start]
	    }
	  } else {
	    Uint8Array.prototype.set.call(
	      target,
	      this.subarray(start, start + len),
	      targetStart
	    )
	  }

	  return len
	}

	// Usage:
	//    buffer.fill(number[, offset[, end]])
	//    buffer.fill(buffer[, offset[, end]])
	//    buffer.fill(string[, offset[, end]][, encoding])
	Buffer.prototype.fill = function fill (val, start, end, encoding) {
	  // Handle string cases:
	  if (typeof val === 'string') {
	    if (typeof start === 'string') {
	      encoding = start
	      start = 0
	      end = this.length
	    } else if (typeof end === 'string') {
	      encoding = end
	      end = this.length
	    }
	    if (val.length === 1) {
	      var code = val.charCodeAt(0)
	      if (code < 256) {
	        val = code
	      }
	    }
	    if (encoding !== undefined && typeof encoding !== 'string') {
	      throw new TypeError('encoding must be a string')
	    }
	    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
	      throw new TypeError('Unknown encoding: ' + encoding)
	    }
	  } else if (typeof val === 'number') {
	    val = val & 255
	  }

	  // Invalid ranges are not set to a default, so can range check early.
	  if (start < 0 || this.length < start || this.length < end) {
	    throw new RangeError('Out of range index')
	  }

	  if (end <= start) {
	    return this
	  }

	  start = start >>> 0
	  end = end === undefined ? this.length : end >>> 0

	  if (!val) val = 0

	  var i
	  if (typeof val === 'number') {
	    for (i = start; i < end; ++i) {
	      this[i] = val
	    }
	  } else {
	    var bytes = Buffer.isBuffer(val)
	      ? val
	      : utf8ToBytes(new Buffer(val, encoding).toString())
	    var len = bytes.length
	    for (i = 0; i < end - start; ++i) {
	      this[i + start] = bytes[i % len]
	    }
	  }

	  return this
	}

	// HELPER FUNCTIONS
	// ================

	var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g

	function base64clean (str) {
	  // Node strips out invalid characters like \n and \t from the string, base64-js does not
	  str = stringtrim(str).replace(INVALID_BASE64_RE, '')
	  // Node converts strings with length < 2 to ''
	  if (str.length < 2) return ''
	  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
	  while (str.length % 4 !== 0) {
	    str = str + '='
	  }
	  return str
	}

	function stringtrim (str) {
	  if (str.trim) return str.trim()
	  return str.replace(/^\s+|\s+$/g, '')
	}

	function toHex (n) {
	  if (n < 16) return '0' + n.toString(16)
	  return n.toString(16)
	}

	function utf8ToBytes (string, units) {
	  units = units || Infinity
	  var codePoint
	  var length = string.length
	  var leadSurrogate = null
	  var bytes = []

	  for (var i = 0; i < length; ++i) {
	    codePoint = string.charCodeAt(i)

	    // is surrogate component
	    if (codePoint > 0xD7FF && codePoint < 0xE000) {
	      // last char was a lead
	      if (!leadSurrogate) {
	        // no lead yet
	        if (codePoint > 0xDBFF) {
	          // unexpected trail
	          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	          continue
	        } else if (i + 1 === length) {
	          // unpaired lead
	          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	          continue
	        }

	        // valid lead
	        leadSurrogate = codePoint

	        continue
	      }

	      // 2 leads in a row
	      if (codePoint < 0xDC00) {
	        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	        leadSurrogate = codePoint
	        continue
	      }

	      // valid surrogate pair
	      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
	    } else if (leadSurrogate) {
	      // valid bmp char, but last char was a lead
	      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	    }

	    leadSurrogate = null

	    // encode utf8
	    if (codePoint < 0x80) {
	      if ((units -= 1) < 0) break
	      bytes.push(codePoint)
	    } else if (codePoint < 0x800) {
	      if ((units -= 2) < 0) break
	      bytes.push(
	        codePoint >> 0x6 | 0xC0,
	        codePoint & 0x3F | 0x80
	      )
	    } else if (codePoint < 0x10000) {
	      if ((units -= 3) < 0) break
	      bytes.push(
	        codePoint >> 0xC | 0xE0,
	        codePoint >> 0x6 & 0x3F | 0x80,
	        codePoint & 0x3F | 0x80
	      )
	    } else if (codePoint < 0x110000) {
	      if ((units -= 4) < 0) break
	      bytes.push(
	        codePoint >> 0x12 | 0xF0,
	        codePoint >> 0xC & 0x3F | 0x80,
	        codePoint >> 0x6 & 0x3F | 0x80,
	        codePoint & 0x3F | 0x80
	      )
	    } else {
	      throw new Error('Invalid code point')
	    }
	  }

	  return bytes
	}

	function asciiToBytes (str) {
	  var byteArray = []
	  for (var i = 0; i < str.length; ++i) {
	    // Node's code seems to be doing this and not & 0x7F..
	    byteArray.push(str.charCodeAt(i) & 0xFF)
	  }
	  return byteArray
	}

	function utf16leToBytes (str, units) {
	  var c, hi, lo
	  var byteArray = []
	  for (var i = 0; i < str.length; ++i) {
	    if ((units -= 2) < 0) break

	    c = str.charCodeAt(i)
	    hi = c >> 8
	    lo = c % 256
	    byteArray.push(lo)
	    byteArray.push(hi)
	  }

	  return byteArray
	}

	function base64ToBytes (str) {
	  return base64.toByteArray(base64clean(str))
	}

	function blitBuffer (src, dst, offset, length) {
	  for (var i = 0; i < length; ++i) {
	    if ((i + offset >= dst.length) || (i >= src.length)) break
	    dst[i + offset] = src[i]
	  }
	  return i
	}

	function isnan (val) {
	  return val !== val // eslint-disable-line no-self-compare
	}

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 260 */,
/* 261 */,
/* 262 */
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin
	module.exports = {"button":"on00wzC5-4Ywi89YEwS46","bg":"_2onHAORHB2Xaxb_QH6iIc-","marquee":"_70ofh0HaEQEUW5yG-oAUY","client":"eJ68-lPxjJSpNRfaC7uMG","icon":"nlEQcLDLCK5wyropdXfT9","red":"_3AfY91GR4zDfUySNIK-18f","green":"_1ActFUX21I7k60UM2b--zH","yellow":"LxY_a8jLfaXDmXHq-lpDo","blue":"QsbGfpPhraUh2YYD8hUHd","minWidth":"yeC-2n6y3zLikHyWW3PsK","small":"_2i6iqhaLOri_G1rsGqqrVT","translucent":"_2P2uaJKSBIsJouZ7gfxJYJ","transparent":"nRfsxhAEidRCONN89DlM7","pressed":"jNIWuK-r6pKb8lUfzlVsV","expand":"_3Ze-uEkEdivNY0N-iYUNkV","none":"_38GP7Yzbfgyd8xARBZ00Db","selected":"_1_6WQGZGnPivtiytqxx_LE","contract":"_3yjinx4gglxtRytEA0IWoA"};

/***/ },
/* 263 */
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin
	module.exports = {"icon":"db74zFeyyUK6UbD2gDK-k","small":"_2osWgm1eqdKl5SZAOGycSx","dingbat":"_1JTVAx1jIuQx18aRKaS523","moon-neutral":"_3DLoAiUNI1yW9mVZSfzfkL"};

/***/ },
/* 264 */
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin
	module.exports = {"iconButton":"_35ACjTbcu-faReoVCZ2SYI","small":"L0RHhQDZTpBrrrvE1XRw2","icon":"_4N7UuoYkVsk-LaEx1C-bg","red":"Mx-64w9Q4tSMB4eYxCD42","green":"_1VQJpoHEa67pRHHx6CRhvn","yellow":"_1UxZk8Ya2rTLfKHI61gUSd","blue":"_2WYoejmNtfz4JLF_TPz1Np"};

/***/ },
/* 265 */
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin
	module.exports = {"marquee":"_2eN8t545aJ2My_yvfJjyjz","text":"_2zw32_fYiR616qxyIbE28v","animate":"_30FyeL1RQuZo5huGbkZQC3"};

/***/ },
/* 266 */
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin
	module.exports = {"moon":"AMfPKOd6YpZT0R7dMrGCQ","bg":"_1sqQiGOf03yjTrJkVwg36K"};

/***/ },
/* 267 */
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin
	module.exports = {"applicationCloseButton":"_3O7px8hKagYccgQPPgIp7K"};

/***/ },
/* 268 */
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin
	module.exports = {"header":"C_tcSGCh6MbksChbObvSW","title":"_3Cr6Ogu9rJgk3GNyw65MPe","titleBelow":"Um_w7izrTdQNNifVhs91l","subTitleBelow":"_1sAtwJbQblGVkWuklSIRZb","moon-small-header":"_2aQ39Vs0wfqdhVVaxyo0Gi","headerComponents":"_934cCMmmXI7_GWoJfw669","compact":"_3SzipSESveDxUFceaAW9A3","headerRow":"_2TRyOp43igWXYHuMAPoiWt","standard":"_336TvLpDyFbZ2QP3UlA9uA","enyo-locale-non-latin":"_1Hvc1aHP2yBWu9tL_JySPK","headerCell":"anCTia5K1GxwSfAwuw35","fullBleed":"b5UqGsZ2GmTRjOznVmZlS"};

/***/ },
/* 269 */
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin
	module.exports = {"panel":"_1V2QsBB0TjwEpVJtOStdZ-","body":"_1W-Ed3tygzrI5Eerwys09U","visible":"_2DC9F7uQqUyi1fZxkLQ5E9"};

/***/ },
/* 270 */,
/* 271 */
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin
	module.exports = {"scrim":"_18_d-nDcw4Mn4oPO6FKcuS","translucent":"_1e2oReuEgll0SSrUHFCXdD"};

/***/ },
/* 272 */,
/* 273 */
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ },
/* 274 */
/***/ function(module, exports) {

	exports.read = function (buffer, offset, isLE, mLen, nBytes) {
	  var e, m
	  var eLen = nBytes * 8 - mLen - 1
	  var eMax = (1 << eLen) - 1
	  var eBias = eMax >> 1
	  var nBits = -7
	  var i = isLE ? (nBytes - 1) : 0
	  var d = isLE ? -1 : 1
	  var s = buffer[offset + i]

	  i += d

	  e = s & ((1 << (-nBits)) - 1)
	  s >>= (-nBits)
	  nBits += eLen
	  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

	  m = e & ((1 << (-nBits)) - 1)
	  e >>= (-nBits)
	  nBits += mLen
	  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

	  if (e === 0) {
	    e = 1 - eBias
	  } else if (e === eMax) {
	    return m ? NaN : ((s ? -1 : 1) * Infinity)
	  } else {
	    m = m + Math.pow(2, mLen)
	    e = e - eBias
	  }
	  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
	}

	exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
	  var e, m, c
	  var eLen = nBytes * 8 - mLen - 1
	  var eMax = (1 << eLen) - 1
	  var eBias = eMax >> 1
	  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
	  var i = isLE ? 0 : (nBytes - 1)
	  var d = isLE ? 1 : -1
	  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

	  value = Math.abs(value)

	  if (isNaN(value) || value === Infinity) {
	    m = isNaN(value) ? 1 : 0
	    e = eMax
	  } else {
	    e = Math.floor(Math.log(value) / Math.LN2)
	    if (value * (c = Math.pow(2, -e)) < 1) {
	      e--
	      c *= 2
	    }
	    if (e + eBias >= 1) {
	      value += rt / c
	    } else {
	      value += rt * Math.pow(2, 1 - eBias)
	    }
	    if (value * c >= 2) {
	      e++
	      c /= 2
	    }

	    if (e + eBias >= eMax) {
	      m = 0
	      e = eMax
	    } else if (e + eBias >= 1) {
	      m = (value * c - 1) * Math.pow(2, mLen)
	      e = e + eBias
	    } else {
	      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
	      e = 0
	    }
	  }

	  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

	  e = (e << mLen) | m
	  eLen += mLen
	  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

	  buffer[offset + i - d] |= s * 128
	}


/***/ },
/* 275 */
/***/ function(module, exports) {

	var toString = {}.toString;

	module.exports = Array.isArray || function (arr) {
	  return toString.call(arr) == '[object Array]';
	};


/***/ },
/* 276 */
/***/ function(module, exports) {

	module.exports = [
		{
			"name": "hd",
			"pxPerRem": 16,
			"width": 1280,
			"height": 720,
			"aspectRatioName": "hdtv"
		},
		{
			"name": "fhd",
			"pxPerRem": 24,
			"width": 1920,
			"height": 1080,
			"aspectRatioName": "hdtv",
			"base": true
		},
		{
			"name": "uw-uxga",
			"pxPerRem": 24,
			"width": 2560,
			"height": 1080,
			"aspectRatioName": "cinema"
		},
		{
			"name": "uhd",
			"pxPerRem": 48,
			"width": 3840,
			"height": 2160,
			"aspectRatioName": "hdtv"
		}
	];

/***/ },
/* 277 */,
/* 278 */,
/* 279 */,
/* 280 */,
/* 281 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	//This file contains the ES6 extensions to the core Promises/A+ API

	var Promise = __webpack_require__(144);

	module.exports = Promise;

	/* Static Functions */

	var TRUE = valuePromise(true);
	var FALSE = valuePromise(false);
	var NULL = valuePromise(null);
	var UNDEFINED = valuePromise(undefined);
	var ZERO = valuePromise(0);
	var EMPTYSTRING = valuePromise('');

	function valuePromise(value) {
	  var p = new Promise(Promise._61);
	  p._81 = 1;
	  p._65 = value;
	  return p;
	}
	Promise.resolve = function (value) {
	  if (value instanceof Promise) return value;

	  if (value === null) return NULL;
	  if (value === undefined) return UNDEFINED;
	  if (value === true) return TRUE;
	  if (value === false) return FALSE;
	  if (value === 0) return ZERO;
	  if (value === '') return EMPTYSTRING;

	  if (typeof value === 'object' || typeof value === 'function') {
	    try {
	      var then = value.then;
	      if (typeof then === 'function') {
	        return new Promise(then.bind(value));
	      }
	    } catch (ex) {
	      return new Promise(function (resolve, reject) {
	        reject(ex);
	      });
	    }
	  }
	  return valuePromise(value);
	};

	Promise.all = function (arr) {
	  var args = Array.prototype.slice.call(arr);

	  return new Promise(function (resolve, reject) {
	    if (args.length === 0) return resolve([]);
	    var remaining = args.length;
	    function res(i, val) {
	      if (val && (typeof val === 'object' || typeof val === 'function')) {
	        if (val instanceof Promise && val.then === Promise.prototype.then) {
	          while (val._81 === 3) {
	            val = val._65;
	          }
	          if (val._81 === 1) return res(i, val._65);
	          if (val._81 === 2) reject(val._65);
	          val.then(function (val) {
	            res(i, val);
	          }, reject);
	          return;
	        } else {
	          var then = val.then;
	          if (typeof then === 'function') {
	            var p = new Promise(then.bind(val));
	            p.then(function (val) {
	              res(i, val);
	            }, reject);
	            return;
	          }
	        }
	      }
	      args[i] = val;
	      if (--remaining === 0) {
	        resolve(args);
	      }
	    }
	    for (var i = 0; i < args.length; i++) {
	      res(i, args[i]);
	    }
	  });
	};

	Promise.reject = function (value) {
	  return new Promise(function (resolve, reject) {
	    reject(value);
	  });
	};

	Promise.race = function (values) {
	  return new Promise(function (resolve, reject) {
	    values.forEach(function(value){
	      Promise.resolve(value).then(resolve, reject);
	    });
	  });
	};

	/* Prototype Methods */

	Promise.prototype['catch'] = function (onRejected) {
	  return this.then(null, onRejected);
	};


/***/ },
/* 282 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var Promise = __webpack_require__(144);

	var DEFAULT_WHITELIST = [
	  ReferenceError,
	  TypeError,
	  RangeError
	];

	var enabled = false;
	exports.disable = disable;
	function disable() {
	  enabled = false;
	  Promise._10 = null;
	  Promise._97 = null;
	}

	exports.enable = enable;
	function enable(options) {
	  options = options || {};
	  if (enabled) disable();
	  enabled = true;
	  var id = 0;
	  var displayId = 0;
	  var rejections = {};
	  Promise._10 = function (promise) {
	    if (
	      promise._81 === 2 && // IS REJECTED
	      rejections[promise._72]
	    ) {
	      if (rejections[promise._72].logged) {
	        onHandled(promise._72);
	      } else {
	        clearTimeout(rejections[promise._72].timeout);
	      }
	      delete rejections[promise._72];
	    }
	  };
	  Promise._97 = function (promise, err) {
	    if (promise._45 === 0) { // not yet handled
	      promise._72 = id++;
	      rejections[promise._72] = {
	        displayId: null,
	        error: err,
	        timeout: setTimeout(
	          onUnhandled.bind(null, promise._72),
	          // For reference errors and type errors, this almost always
	          // means the programmer made a mistake, so log them after just
	          // 100ms
	          // otherwise, wait 2 seconds to see if they get handled
	          matchWhitelist(err, DEFAULT_WHITELIST)
	            ? 100
	            : 2000
	        ),
	        logged: false
	      };
	    }
	  };
	  function onUnhandled(id) {
	    if (
	      options.allRejections ||
	      matchWhitelist(
	        rejections[id].error,
	        options.whitelist || DEFAULT_WHITELIST
	      )
	    ) {
	      rejections[id].displayId = displayId++;
	      if (options.onUnhandled) {
	        rejections[id].logged = true;
	        options.onUnhandled(
	          rejections[id].displayId,
	          rejections[id].error
	        );
	      } else {
	        rejections[id].logged = true;
	        logError(
	          rejections[id].displayId,
	          rejections[id].error
	        );
	      }
	    }
	  }
	  function onHandled(id) {
	    if (rejections[id].logged) {
	      if (options.onHandled) {
	        options.onHandled(rejections[id].displayId, rejections[id].error);
	      } else if (!rejections[id].onUnhandled) {
	        console.warn(
	          'Promise Rejection Handled (id: ' + rejections[id].displayId + '):'
	        );
	        console.warn(
	          '  This means you can ignore any previous messages of the form "Possible Unhandled Promise Rejection" with id ' +
	          rejections[id].displayId + '.'
	        );
	      }
	    }
	  }
	}

	function logError(id, error) {
	  console.warn('Possible Unhandled Promise Rejection (id: ' + id + '):');
	  var errStr = (error && (error.stack || error)) + '';
	  errStr.split('\n').forEach(function (line) {
	    console.warn('  ' + line);
	  });
	}

	function matchWhitelist(error, list) {
	  return list.some(function (cls) {
	    return error instanceof cls;
	  });
	}

/***/ },
/* 283 */
/***/ function(module, exports) {

	/*! http://mths.be/fromcodepoint v0.2.1 by @mathias */
	if (!String.fromCodePoint) {
		(function() {
			var defineProperty = (function() {
				// IE 8 only supports `Object.defineProperty` on DOM elements
				try {
					var object = {};
					var $defineProperty = Object.defineProperty;
					var result = $defineProperty(object, object, object) && $defineProperty;
				} catch(error) {}
				return result;
			}());
			var stringFromCharCode = String.fromCharCode;
			var floor = Math.floor;
			var fromCodePoint = function(_) {
				var MAX_SIZE = 0x4000;
				var codeUnits = [];
				var highSurrogate;
				var lowSurrogate;
				var index = -1;
				var length = arguments.length;
				if (!length) {
					return '';
				}
				var result = '';
				while (++index < length) {
					var codePoint = Number(arguments[index]);
					if (
						!isFinite(codePoint) || // `NaN`, `+Infinity`, or `-Infinity`
						codePoint < 0 || // not a valid Unicode code point
						codePoint > 0x10FFFF || // not a valid Unicode code point
						floor(codePoint) != codePoint // not an integer
					) {
						throw RangeError('Invalid code point: ' + codePoint);
					}
					if (codePoint <= 0xFFFF) { // BMP code point
						codeUnits.push(codePoint);
					} else { // Astral code point; split in surrogate halves
						// http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
						codePoint -= 0x10000;
						highSurrogate = (codePoint >> 10) + 0xD800;
						lowSurrogate = (codePoint % 0x400) + 0xDC00;
						codeUnits.push(highSurrogate, lowSurrogate);
					}
					if (index + 1 == length || codeUnits.length > MAX_SIZE) {
						result += stringFromCharCode.apply(null, codeUnits);
						codeUnits.length = 0;
					}
				}
				return result;
			};
			if (defineProperty) {
				defineProperty(String, 'fromCodePoint', {
					'value': fromCodePoint,
					'configurable': true,
					'writable': true
				});
			} else {
				String.fromCodePoint = fromCodePoint;
			}
		}());
	}


/***/ },
/* 284 */
/***/ function(module, exports) {

	/*! http://mths.be/codepointat v0.2.0 by @mathias */
	if (!String.prototype.codePointAt) {
		(function() {
			'use strict'; // needed to support `apply`/`call` with `undefined`/`null`
			var defineProperty = (function() {
				// IE 8 only supports `Object.defineProperty` on DOM elements
				try {
					var object = {};
					var $defineProperty = Object.defineProperty;
					var result = $defineProperty(object, object, object) && $defineProperty;
				} catch(error) {}
				return result;
			}());
			var codePointAt = function(position) {
				if (this == null) {
					throw TypeError();
				}
				var string = String(this);
				var size = string.length;
				// `ToInteger`
				var index = position ? Number(position) : 0;
				if (index != index) { // better `isNaN`
					index = 0;
				}
				// Account for out-of-bounds indices:
				if (index < 0 || index >= size) {
					return undefined;
				}
				// Get the first code unit
				var first = string.charCodeAt(index);
				var second;
				if ( // check if itâs the start of a surrogate pair
					first >= 0xD800 && first <= 0xDBFF && // high surrogate
					size > index + 1 // there is a next code unit
				) {
					second = string.charCodeAt(index + 1);
					if (second >= 0xDC00 && second <= 0xDFFF) { // low surrogate
						// http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
						return (first - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;
					}
				}
				return first;
			};
			if (defineProperty) {
				defineProperty(String.prototype, 'codePointAt', {
					'value': codePointAt,
					'configurable': true,
					'writable': true
				});
			} else {
				String.prototype.codePointAt = codePointAt;
			}
		}());
	}


/***/ },
/* 285 */
/***/ function(module, exports) {

	
	/**
	 * When source maps are enabled, `style-loader` uses a link element with a data-uri to
	 * embed the css on the page. This breaks all relative urls because now they are relative to a
	 * bundle instead of the current page.
	 *
	 * One solution is to only use full urls, but that may be impossible.
	 *
	 * Instead, this function "fixes" the relative urls to be absolute according to the current page location.
	 *
	 * A rudimentary test suite is located at `test/fixUrls.js` and can be run via the `npm test` command.
	 *
	 */

	module.exports = function (css) {
	  // get current location
	  var location = typeof window !== "undefined" && window.location;

	  if (!location) {
	    throw new Error("fixUrls requires window.location");
	  }

		// blank or null?
		if (!css || typeof css !== "string") {
		  return css;
	  }

	  var baseUrl = location.protocol + "//" + location.host;
	  var currentDir = baseUrl + location.pathname.replace(/\/[^\/]*$/, "/");

		// convert each url(...)
		/*
		This regular expression is just a way to recursively match brackets within
		a string.

		 /url\s*\(  = Match on the word "url" with any whitespace after it and then a parens
		   (  = Start a capturing group
		     (?:  = Start a non-capturing group
		         [^)(]  = Match anything that isn't a parentheses
		         |  = OR
		         \(  = Match a start parentheses
		             (?:  = Start another non-capturing groups
		                 [^)(]+  = Match anything that isn't a parentheses
		                 |  = OR
		                 \(  = Match a start parentheses
		                     [^)(]*  = Match anything that isn't a parentheses
		                 \)  = Match a end parentheses
		             )  = End Group
	              *\) = Match anything and then a close parens
	          )  = Close non-capturing group
	          *  = Match anything
	       )  = Close capturing group
		 \)  = Match a close parens

		 /gi  = Get all matches, not the first.  Be case insensitive.
		 */
		var fixedCss = css.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi, function(fullMatch, origUrl) {
			// strip quotes (if they exist)
			var unquotedOrigUrl = origUrl
				.trim()
				.replace(/^"(.*)"$/, function(o, $1){ return $1; })
				.replace(/^'(.*)'$/, function(o, $1){ return $1; });

			// already a full url? no change
			if (/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/)/i.test(unquotedOrigUrl)) {
			  return fullMatch;
			}

			// convert the url to a full url
			var newUrl;

			if (unquotedOrigUrl.indexOf("//") === 0) {
			  	//TODO: should we add protocol?
				newUrl = unquotedOrigUrl;
			} else if (unquotedOrigUrl.indexOf("/") === 0) {
				// path should be relative to the base url
				newUrl = baseUrl + unquotedOrigUrl; // already starts with '/'
			} else {
				// path should be relative to current directory
				newUrl = currentDir + unquotedOrigUrl.replace(/^\.\//, ""); // Strip leading './'
			}

			// send back the fixed url(...)
			return "url(" + JSON.stringify(newUrl) + ")";
		});

		// send back the fixed css
		return fixedCss;
	};


/***/ },
/* 286 */
/***/ function(module, exports) {

	(function(self) {
	  'use strict';

	  if (self.fetch) {
	    return
	  }

	  var support = {
	    searchParams: 'URLSearchParams' in self,
	    iterable: 'Symbol' in self && 'iterator' in Symbol,
	    blob: 'FileReader' in self && 'Blob' in self && (function() {
	      try {
	        new Blob()
	        return true
	      } catch(e) {
	        return false
	      }
	    })(),
	    formData: 'FormData' in self,
	    arrayBuffer: 'ArrayBuffer' in self
	  }

	  if (support.arrayBuffer) {
	    var viewClasses = [
	      '[object Int8Array]',
	      '[object Uint8Array]',
	      '[object Uint8ClampedArray]',
	      '[object Int16Array]',
	      '[object Uint16Array]',
	      '[object Int32Array]',
	      '[object Uint32Array]',
	      '[object Float32Array]',
	      '[object Float64Array]'
	    ]

	    var isDataView = function(obj) {
	      return obj && DataView.prototype.isPrototypeOf(obj)
	    }

	    var isArrayBufferView = ArrayBuffer.isView || function(obj) {
	      return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1
	    }
	  }

	  function normalizeName(name) {
	    if (typeof name !== 'string') {
	      name = String(name)
	    }
	    if (/[^a-z0-9\-#$%&'*+.\^_`|~]/i.test(name)) {
	      throw new TypeError('Invalid character in header field name')
	    }
	    return name.toLowerCase()
	  }

	  function normalizeValue(value) {
	    if (typeof value !== 'string') {
	      value = String(value)
	    }
	    return value
	  }

	  // Build a destructive iterator for the value list
	  function iteratorFor(items) {
	    var iterator = {
	      next: function() {
	        var value = items.shift()
	        return {done: value === undefined, value: value}
	      }
	    }

	    if (support.iterable) {
	      iterator[Symbol.iterator] = function() {
	        return iterator
	      }
	    }

	    return iterator
	  }

	  function Headers(headers) {
	    this.map = {}

	    if (headers instanceof Headers) {
	      headers.forEach(function(value, name) {
	        this.append(name, value)
	      }, this)
	    } else if (Array.isArray(headers)) {
	      headers.forEach(function(header) {
	        this.append(header[0], header[1])
	      }, this)
	    } else if (headers) {
	      Object.getOwnPropertyNames(headers).forEach(function(name) {
	        this.append(name, headers[name])
	      }, this)
	    }
	  }

	  Headers.prototype.append = function(name, value) {
	    name = normalizeName(name)
	    value = normalizeValue(value)
	    var oldValue = this.map[name]
	    this.map[name] = oldValue ? oldValue+','+value : value
	  }

	  Headers.prototype['delete'] = function(name) {
	    delete this.map[normalizeName(name)]
	  }

	  Headers.prototype.get = function(name) {
	    name = normalizeName(name)
	    return this.has(name) ? this.map[name] : null
	  }

	  Headers.prototype.has = function(name) {
	    return this.map.hasOwnProperty(normalizeName(name))
	  }

	  Headers.prototype.set = function(name, value) {
	    this.map[normalizeName(name)] = normalizeValue(value)
	  }

	  Headers.prototype.forEach = function(callback, thisArg) {
	    for (var name in this.map) {
	      if (this.map.hasOwnProperty(name)) {
	        callback.call(thisArg, this.map[name], name, this)
	      }
	    }
	  }

	  Headers.prototype.keys = function() {
	    var items = []
	    this.forEach(function(value, name) { items.push(name) })
	    return iteratorFor(items)
	  }

	  Headers.prototype.values = function() {
	    var items = []
	    this.forEach(function(value) { items.push(value) })
	    return iteratorFor(items)
	  }

	  Headers.prototype.entries = function() {
	    var items = []
	    this.forEach(function(value, name) { items.push([name, value]) })
	    return iteratorFor(items)
	  }

	  if (support.iterable) {
	    Headers.prototype[Symbol.iterator] = Headers.prototype.entries
	  }

	  function consumed(body) {
	    if (body.bodyUsed) {
	      return Promise.reject(new TypeError('Already read'))
	    }
	    body.bodyUsed = true
	  }

	  function fileReaderReady(reader) {
	    return new Promise(function(resolve, reject) {
	      reader.onload = function() {
	        resolve(reader.result)
	      }
	      reader.onerror = function() {
	        reject(reader.error)
	      }
	    })
	  }

	  function readBlobAsArrayBuffer(blob) {
	    var reader = new FileReader()
	    var promise = fileReaderReady(reader)
	    reader.readAsArrayBuffer(blob)
	    return promise
	  }

	  function readBlobAsText(blob) {
	    var reader = new FileReader()
	    var promise = fileReaderReady(reader)
	    reader.readAsText(blob)
	    return promise
	  }

	  function readArrayBufferAsText(buf) {
	    var view = new Uint8Array(buf)
	    var chars = new Array(view.length)

	    for (var i = 0; i < view.length; i++) {
	      chars[i] = String.fromCharCode(view[i])
	    }
	    return chars.join('')
	  }

	  function bufferClone(buf) {
	    if (buf.slice) {
	      return buf.slice(0)
	    } else {
	      var view = new Uint8Array(buf.byteLength)
	      view.set(new Uint8Array(buf))
	      return view.buffer
	    }
	  }

	  function Body() {
	    this.bodyUsed = false

	    this._initBody = function(body) {
	      this._bodyInit = body
	      if (!body) {
	        this._bodyText = ''
	      } else if (typeof body === 'string') {
	        this._bodyText = body
	      } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {
	        this._bodyBlob = body
	      } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {
	        this._bodyFormData = body
	      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
	        this._bodyText = body.toString()
	      } else if (support.arrayBuffer && support.blob && isDataView(body)) {
	        this._bodyArrayBuffer = bufferClone(body.buffer)
	        // IE 10-11 can't handle a DataView body.
	        this._bodyInit = new Blob([this._bodyArrayBuffer])
	      } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {
	        this._bodyArrayBuffer = bufferClone(body)
	      } else {
	        throw new Error('unsupported BodyInit type')
	      }

	      if (!this.headers.get('content-type')) {
	        if (typeof body === 'string') {
	          this.headers.set('content-type', 'text/plain;charset=UTF-8')
	        } else if (this._bodyBlob && this._bodyBlob.type) {
	          this.headers.set('content-type', this._bodyBlob.type)
	        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
	          this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8')
	        }
	      }
	    }

	    if (support.blob) {
	      this.blob = function() {
	        var rejected = consumed(this)
	        if (rejected) {
	          return rejected
	        }

	        if (this._bodyBlob) {
	          return Promise.resolve(this._bodyBlob)
	        } else if (this._bodyArrayBuffer) {
	          return Promise.resolve(new Blob([this._bodyArrayBuffer]))
	        } else if (this._bodyFormData) {
	          throw new Error('could not read FormData body as blob')
	        } else {
	          return Promise.resolve(new Blob([this._bodyText]))
	        }
	      }

	      this.arrayBuffer = function() {
	        if (this._bodyArrayBuffer) {
	          return consumed(this) || Promise.resolve(this._bodyArrayBuffer)
	        } else {
	          return this.blob().then(readBlobAsArrayBuffer)
	        }
	      }
	    }

	    this.text = function() {
	      var rejected = consumed(this)
	      if (rejected) {
	        return rejected
	      }

	      if (this._bodyBlob) {
	        return readBlobAsText(this._bodyBlob)
	      } else if (this._bodyArrayBuffer) {
	        return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer))
	      } else if (this._bodyFormData) {
	        throw new Error('could not read FormData body as text')
	      } else {
	        return Promise.resolve(this._bodyText)
	      }
	    }

	    if (support.formData) {
	      this.formData = function() {
	        return this.text().then(decode)
	      }
	    }

	    this.json = function() {
	      return this.text().then(JSON.parse)
	    }

	    return this
	  }

	  // HTTP methods whose capitalization should be normalized
	  var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT']

	  function normalizeMethod(method) {
	    var upcased = method.toUpperCase()
	    return (methods.indexOf(upcased) > -1) ? upcased : method
	  }

	  function Request(input, options) {
	    options = options || {}
	    var body = options.body

	    if (input instanceof Request) {
	      if (input.bodyUsed) {
	        throw new TypeError('Already read')
	      }
	      this.url = input.url
	      this.credentials = input.credentials
	      if (!options.headers) {
	        this.headers = new Headers(input.headers)
	      }
	      this.method = input.method
	      this.mode = input.mode
	      if (!body && input._bodyInit != null) {
	        body = input._bodyInit
	        input.bodyUsed = true
	      }
	    } else {
	      this.url = String(input)
	    }

	    this.credentials = options.credentials || this.credentials || 'omit'
	    if (options.headers || !this.headers) {
	      this.headers = new Headers(options.headers)
	    }
	    this.method = normalizeMethod(options.method || this.method || 'GET')
	    this.mode = options.mode || this.mode || null
	    this.referrer = null

	    if ((this.method === 'GET' || this.method === 'HEAD') && body) {
	      throw new TypeError('Body not allowed for GET or HEAD requests')
	    }
	    this._initBody(body)
	  }

	  Request.prototype.clone = function() {
	    return new Request(this, { body: this._bodyInit })
	  }

	  function decode(body) {
	    var form = new FormData()
	    body.trim().split('&').forEach(function(bytes) {
	      if (bytes) {
	        var split = bytes.split('=')
	        var name = split.shift().replace(/\+/g, ' ')
	        var value = split.join('=').replace(/\+/g, ' ')
	        form.append(decodeURIComponent(name), decodeURIComponent(value))
	      }
	    })
	    return form
	  }

	  function parseHeaders(rawHeaders) {
	    var headers = new Headers()
	    rawHeaders.split(/\r?\n/).forEach(function(line) {
	      var parts = line.split(':')
	      var key = parts.shift().trim()
	      if (key) {
	        var value = parts.join(':').trim()
	        headers.append(key, value)
	      }
	    })
	    return headers
	  }

	  Body.call(Request.prototype)

	  function Response(bodyInit, options) {
	    if (!options) {
	      options = {}
	    }

	    this.type = 'default'
	    this.status = 'status' in options ? options.status : 200
	    this.ok = this.status >= 200 && this.status < 300
	    this.statusText = 'statusText' in options ? options.statusText : 'OK'
	    this.headers = new Headers(options.headers)
	    this.url = options.url || ''
	    this._initBody(bodyInit)
	  }

	  Body.call(Response.prototype)

	  Response.prototype.clone = function() {
	    return new Response(this._bodyInit, {
	      status: this.status,
	      statusText: this.statusText,
	      headers: new Headers(this.headers),
	      url: this.url
	    })
	  }

	  Response.error = function() {
	    var response = new Response(null, {status: 0, statusText: ''})
	    response.type = 'error'
	    return response
	  }

	  var redirectStatuses = [301, 302, 303, 307, 308]

	  Response.redirect = function(url, status) {
	    if (redirectStatuses.indexOf(status) === -1) {
	      throw new RangeError('Invalid status code')
	    }

	    return new Response(null, {status: status, headers: {location: url}})
	  }

	  self.Headers = Headers
	  self.Request = Request
	  self.Response = Response

	  self.fetch = function(input, init) {
	    return new Promise(function(resolve, reject) {
	      var request = new Request(input, init)
	      var xhr = new XMLHttpRequest()

	      xhr.onload = function() {
	        var options = {
	          status: xhr.status,
	          statusText: xhr.statusText,
	          headers: parseHeaders(xhr.getAllResponseHeaders() || '')
	        }
	        options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL')
	        var body = 'response' in xhr ? xhr.response : xhr.responseText
	        resolve(new Response(body, options))
	      }

	      xhr.onerror = function() {
	        reject(new TypeError('Network request failed'))
	      }

	      xhr.ontimeout = function() {
	        reject(new TypeError('Network request failed'))
	      }

	      xhr.open(request.method, request.url, true)

	      if (request.credentials === 'include') {
	        xhr.withCredentials = true
	      }

	      if ('responseType' in xhr && support.blob) {
	        xhr.responseType = 'blob'
	      }

	      request.headers.forEach(function(value, name) {
	        xhr.setRequestHeader(name, value)
	      })

	      xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit)
	    })
	  }
	  self.fetch.polyfill = true
	})(typeof self !== 'undefined' ? self : this);


/***/ },
/* 287 */
/***/ function(module, exports, __webpack_require__) {

	var map = {
		"./CopticCal.js": 74,
		"./EthiopicCal.js": 54,
		"./GregorianCal.js": 55,
		"./HanCal.js": 75,
		"./HebrewCal.js": 76,
		"./IslamicCal.js": 77,
		"./JulianCal.js": 78,
		"./PersianAlgoCal.js": 79,
		"./PersianCal.js": 117,
		"./ThaiSolarCal.js": 118
	};
	function webpackContext(req) {
		return __webpack_require__(webpackContextResolve(req));
	};
	function webpackContextResolve(req) {
		return map[req] || (function() { throw new Error("Cannot find module '" + req + "'.") }());
	};
	webpackContext.keys = function webpackContextKeys() {
		return Object.keys(map);
	};
	webpackContext.resolve = webpackContextResolve;
	module.exports = webpackContext;
	webpackContext.id = 287;


/***/ },
/* 288 */
/***/ function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {"use strict";

	// Use the fastest means possible to execute a task in its own turn, with
	// priority over other events including IO, animation, reflow, and redraw
	// events in browsers.
	//
	// An exception thrown by a task will permanently interrupt the processing of
	// subsequent tasks. The higher level `asap` function ensures that if an
	// exception is thrown by a task, that the task queue will continue flushing as
	// soon as possible, but if you use `rawAsap` directly, you are responsible to
	// either ensure that no exceptions are thrown from your task, or to manually
	// call `rawAsap.requestFlush` if an exception is thrown.
	module.exports = rawAsap;
	function rawAsap(task) {
	    if (!queue.length) {
	        requestFlush();
	        flushing = true;
	    }
	    // Equivalent to push, but avoids a function call.
	    queue[queue.length] = task;
	}

	var queue = [];
	// Once a flush has been requested, no further calls to `requestFlush` are
	// necessary until the next `flush` completes.
	var flushing = false;
	// `requestFlush` is an implementation-specific method that attempts to kick
	// off a `flush` event as quickly as possible. `flush` will attempt to exhaust
	// the event queue before yielding to the browser's own event loop.
	var requestFlush;
	// The position of the next task to execute in the task queue. This is
	// preserved between calls to `flush` so that it can be resumed if
	// a task throws an exception.
	var index = 0;
	// If a task schedules additional tasks recursively, the task queue can grow
	// unbounded. To prevent memory exhaustion, the task queue will periodically
	// truncate already-completed tasks.
	var capacity = 1024;

	// The flush function processes all tasks that have been scheduled with
	// `rawAsap` unless and until one of those tasks throws an exception.
	// If a task throws an exception, `flush` ensures that its state will remain
	// consistent and will resume where it left off when called again.
	// However, `flush` does not make any arrangements to be called again if an
	// exception is thrown.
	function flush() {
	    while (index < queue.length) {
	        var currentIndex = index;
	        // Advance the index before calling the task. This ensures that we will
	        // begin flushing on the next task the task throws an error.
	        index = index + 1;
	        queue[currentIndex].call();
	        // Prevent leaking memory for long chains of recursive calls to `asap`.
	        // If we call `asap` within tasks scheduled by `asap`, the queue will
	        // grow, but to avoid an O(n) walk for every task we execute, we don't
	        // shift tasks off the queue after they have been executed.
	        // Instead, we periodically shift 1024 tasks off the queue.
	        if (index > capacity) {
	            // Manually shift all values starting at the index back to the
	            // beginning of the queue.
	            for (var scan = 0, newLength = queue.length - index; scan < newLength; scan++) {
	                queue[scan] = queue[scan + index];
	            }
	            queue.length -= index;
	            index = 0;
	        }
	    }
	    queue.length = 0;
	    index = 0;
	    flushing = false;
	}

	// `requestFlush` is implemented using a strategy based on data collected from
	// every available SauceLabs Selenium web driver worker at time of writing.
	// https://docs.google.com/spreadsheets/d/1mG-5UYGup5qxGdEMWkhP6BWCz053NUb2E1QoUTU16uA/edit#gid=783724593

	// Safari 6 and 6.1 for desktop, iPad, and iPhone are the only browsers that
	// have WebKitMutationObserver but not un-prefixed MutationObserver.
	// Must use `global` or `self` instead of `window` to work in both frames and web
	// workers. `global` is a provision of Browserify, Mr, Mrs, or Mop.

	/* globals self */
	var scope = typeof global !== "undefined" ? global : self;
	var BrowserMutationObserver = scope.MutationObserver || scope.WebKitMutationObserver;

	// MutationObservers are desirable because they have high priority and work
	// reliably everywhere they are implemented.
	// They are implemented in all modern browsers.
	//
	// - Android 4-4.3
	// - Chrome 26-34
	// - Firefox 14-29
	// - Internet Explorer 11
	// - iPad Safari 6-7.1
	// - iPhone Safari 7-7.1
	// - Safari 6-7
	if (typeof BrowserMutationObserver === "function") {
	    requestFlush = makeRequestCallFromMutationObserver(flush);

	// MessageChannels are desirable because they give direct access to the HTML
	// task queue, are implemented in Internet Explorer 10, Safari 5.0-1, and Opera
	// 11-12, and in web workers in many engines.
	// Although message channels yield to any queued rendering and IO tasks, they
	// would be better than imposing the 4ms delay of timers.
	// However, they do not work reliably in Internet Explorer or Safari.

	// Internet Explorer 10 is the only browser that has setImmediate but does
	// not have MutationObservers.
	// Although setImmediate yields to the browser's renderer, it would be
	// preferrable to falling back to setTimeout since it does not have
	// the minimum 4ms penalty.
	// Unfortunately there appears to be a bug in Internet Explorer 10 Mobile (and
	// Desktop to a lesser extent) that renders both setImmediate and
	// MessageChannel useless for the purposes of ASAP.
	// https://github.com/kriskowal/q/issues/396

	// Timers are implemented universally.
	// We fall back to timers in workers in most engines, and in foreground
	// contexts in the following browsers.
	// However, note that even this simple case requires nuances to operate in a
	// broad spectrum of browsers.
	//
	// - Firefox 3-13
	// - Internet Explorer 6-9
	// - iPad Safari 4.3
	// - Lynx 2.8.7
	} else {
	    requestFlush = makeRequestCallFromTimer(flush);
	}

	// `requestFlush` requests that the high priority event queue be flushed as
	// soon as possible.
	// This is useful to prevent an error thrown in a task from stalling the event
	// queue if the exception handled by Node.jsâs
	// `process.on("uncaughtException")` or by a domain.
	rawAsap.requestFlush = requestFlush;

	// To request a high priority event, we induce a mutation observer by toggling
	// the text of a text node between "1" and "-1".
	function makeRequestCallFromMutationObserver(callback) {
	    var toggle = 1;
	    var observer = new BrowserMutationObserver(callback);
	    var node = document.createTextNode("");
	    observer.observe(node, {characterData: true});
	    return function requestCall() {
	        toggle = -toggle;
	        node.data = toggle;
	    };
	}

	// The message channel technique was discovered by Malte Ubl and was the
	// original foundation for this library.
	// http://www.nonblocking.io/2011/06/windownexttick.html

	// Safari 6.0.5 (at least) intermittently fails to create message ports on a
	// page's first load. Thankfully, this version of Safari supports
	// MutationObservers, so we don't need to fall back in that case.

	// function makeRequestCallFromMessageChannel(callback) {
	//     var channel = new MessageChannel();
	//     channel.port1.onmessage = callback;
	//     return function requestCall() {
	//         channel.port2.postMessage(0);
	//     };
	// }

	// For reasons explained above, we are also unable to use `setImmediate`
	// under any circumstances.
	// Even if we were, there is another bug in Internet Explorer 10.
	// It is not sufficient to assign `setImmediate` to `requestFlush` because
	// `setImmediate` must be called *by name* and therefore must be wrapped in a
	// closure.
	// Never forget.

	// function makeRequestCallFromSetImmediate(callback) {
	//     return function requestCall() {
	//         setImmediate(callback);
	//     };
	// }

	// Safari 6.0 has a problem where timers will get lost while the user is
	// scrolling. This problem does not impact ASAP because Safari 6.0 supports
	// mutation observers, so that implementation is used instead.
	// However, if we ever elect to use timers in Safari, the prevalent work-around
	// is to add a scroll event listener that calls for a flush.

	// `setTimeout` does not call the passed callback if the delay is less than
	// approximately 7 in web workers in Firefox 8 through 18, and sometimes not
	// even then.

	function makeRequestCallFromTimer(callback) {
	    return function requestCall() {
	        // We dispatch a timeout with a specified delay of 0 for engines that
	        // can reliably accommodate that request. This will usually be snapped
	        // to a 4 milisecond delay, but once we're flushing, there's no delay
	        // between events.
	        var timeoutHandle = setTimeout(handleTimer, 0);
	        // However, since this timer gets frequently dropped in Firefox
	        // workers, we enlist an interval handle that will try to fire
	        // an event 20 times per second until it succeeds.
	        var intervalHandle = setInterval(handleTimer, 50);

	        function handleTimer() {
	            // Whichever timer succeeds will cancel both timers and
	            // execute the callback.
	            clearTimeout(timeoutHandle);
	            clearInterval(intervalHandle);
	            callback();
	        }
	    };
	}

	// This is for `asap.js` only.
	// Its name will be periodically randomized to break any code that depends on
	// its existence.
	rawAsap.makeRequestCallFromTimer = makeRequestCallFromTimer;

	// ASAP was originally a nextTick shim included in Q. This was factored out
	// into this ASAP package. It was later adapted to RSVP which made further
	// amendments. These decisions, particularly to marginalize MessageChannel and
	// to capture the MutationObserver implementation in a closure, were integrated
	// back into ASAP proper.
	// https://github.com/tildeio/rsvp.js/blob/cddf7232546a9cf858524b75cde6f9edf72620a7/lib/rsvp/asap.js

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 289 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
	  Copyright (c) 2016 Jed Watson.
	  Licensed under the MIT License (MIT), see
	  http://jedwatson.github.io/classnames
	*/
	/* global define */

	(function () {
		'use strict';

		var hasOwn = {}.hasOwnProperty;

		function classNames () {
			var classes = [];

			for (var i = 0; i < arguments.length; i++) {
				var arg = arguments[i];
				if (!arg) continue;

				var argType = typeof arg;

				if (argType === 'string' || argType === 'number') {
					classes.push(arg);
				} else if (Array.isArray(arg)) {
					classes.push(classNames.apply(null, arg));
				} else if (argType === 'object') {
					for (var key in arg) {
						if (hasOwn.call(arg, key) && arg[key]) {
							classes.push(key);
						}
					}
				}
			}

			return classes.join(' ');
		}

		if (typeof module !== 'undefined' && module.exports) {
			module.exports = classNames;
		} else if (true) {
			// register as 'classnames', consistent with npm package name
			!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {
				return classNames;
			}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
		} else {
			window.classNames = classNames;
		}
	}());


/***/ },
/* 290 */
/***/ function(module, exports) {

	function cubicOut(t) {
	  var f = t - 1.0
	  return f * f * f + 1.0
	}

	module.exports = cubicOut

/***/ },
/* 291 */
/***/ function(module, exports) {

	function quadInOut(t) {
	    t /= 0.5
	    if (t < 1) return 0.5*t*t
	    t--
	    return -0.5 * (t*(t-2) - 1)
	}

	module.exports = quadInOut

/***/ },
/* 292 */
/***/ function(module, exports) {

	"use strict";

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */

	var _hyphenPattern = /-(.)/g;

	/**
	 * Camelcases a hyphenated string, for example:
	 *
	 *   > camelize('background-color')
	 *   < "backgroundColor"
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function camelize(string) {
	  return string.replace(_hyphenPattern, function (_, character) {
	    return character.toUpperCase();
	  });
	}

	module.exports = camelize;

/***/ },
/* 293 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */

	'use strict';

	var camelize = __webpack_require__(292);

	var msPattern = /^-ms-/;

	/**
	 * Camelcases a hyphenated CSS property name, for example:
	 *
	 *   > camelizeStyleName('background-color')
	 *   < "backgroundColor"
	 *   > camelizeStyleName('-moz-transition')
	 *   < "MozTransition"
	 *   > camelizeStyleName('-ms-transition')
	 *   < "msTransition"
	 *
	 * As Andi Smith suggests
	 * (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
	 * is converted to lowercase `ms`.
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function camelizeStyleName(string) {
	  return camelize(string.replace(msPattern, 'ms-'));
	}

	module.exports = camelizeStyleName;

/***/ },
/* 294 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	var isTextNode = __webpack_require__(302);

	/*eslint-disable no-bitwise */

	/**
	 * Checks if a given DOM node contains or is another DOM node.
	 */
	function containsNode(outerNode, innerNode) {
	  if (!outerNode || !innerNode) {
	    return false;
	  } else if (outerNode === innerNode) {
	    return true;
	  } else if (isTextNode(outerNode)) {
	    return false;
	  } else if (isTextNode(innerNode)) {
	    return containsNode(outerNode, innerNode.parentNode);
	  } else if ('contains' in outerNode) {
	    return outerNode.contains(innerNode);
	  } else if (outerNode.compareDocumentPosition) {
	    return !!(outerNode.compareDocumentPosition(innerNode) & 16);
	  } else {
	    return false;
	  }
	}

	module.exports = containsNode;

/***/ },
/* 295 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */

	var invariant = __webpack_require__(3);

	/**
	 * Convert array-like objects to arrays.
	 *
	 * This API assumes the caller knows the contents of the data type. For less
	 * well defined inputs use createArrayFromMixed.
	 *
	 * @param {object|function|filelist} obj
	 * @return {array}
	 */
	function toArray(obj) {
	  var length = obj.length;

	  // Some browsers builtin objects can report typeof 'function' (e.g. NodeList
	  // in old versions of Safari).
	  !(!Array.isArray(obj) && (typeof obj === 'object' || typeof obj === 'function')) ?  false ? invariant(false, 'toArray: Array-like object expected') : invariant(false) : void 0;

	  !(typeof length === 'number') ?  false ? invariant(false, 'toArray: Object needs a length property') : invariant(false) : void 0;

	  !(length === 0 || length - 1 in obj) ?  false ? invariant(false, 'toArray: Object should have keys for indices') : invariant(false) : void 0;

	  !(typeof obj.callee !== 'function') ?  false ? invariant(false, 'toArray: Object can\'t be `arguments`. Use rest params ' + '(function(...args) {}) or Array.from() instead.') : invariant(false) : void 0;

	  // Old IE doesn't give collections access to hasOwnProperty. Assume inputs
	  // without method will throw during the slice call and skip straight to the
	  // fallback.
	  if (obj.hasOwnProperty) {
	    try {
	      return Array.prototype.slice.call(obj);
	    } catch (e) {
	      // IE < 9 does not support Array#slice on collections objects
	    }
	  }

	  // Fall back to copying key by key. This assumes all keys have a value,
	  // so will not preserve sparsely populated inputs.
	  var ret = Array(length);
	  for (var ii = 0; ii < length; ii++) {
	    ret[ii] = obj[ii];
	  }
	  return ret;
	}

	/**
	 * Perform a heuristic test to determine if an object is "array-like".
	 *
	 *   A monk asked Joshu, a Zen master, "Has a dog Buddha nature?"
	 *   Joshu replied: "Mu."
	 *
	 * This function determines if its argument has "array nature": it returns
	 * true if the argument is an actual array, an `arguments' object, or an
	 * HTMLCollection (e.g. node.childNodes or node.getElementsByTagName()).
	 *
	 * It will return false for other array-like objects like Filelist.
	 *
	 * @param {*} obj
	 * @return {boolean}
	 */
	function hasArrayNature(obj) {
	  return (
	    // not null/false
	    !!obj && (
	    // arrays are objects, NodeLists are functions in Safari
	    typeof obj == 'object' || typeof obj == 'function') &&
	    // quacks like an array
	    'length' in obj &&
	    // not window
	    !('setInterval' in obj) &&
	    // no DOM node should be considered an array-like
	    // a 'select' element has 'length' and 'item' properties on IE8
	    typeof obj.nodeType != 'number' && (
	    // a real array
	    Array.isArray(obj) ||
	    // arguments
	    'callee' in obj ||
	    // HTMLCollection/NodeList
	    'item' in obj)
	  );
	}

	/**
	 * Ensure that the argument is an array by wrapping it in an array if it is not.
	 * Creates a copy of the argument if it is already an array.
	 *
	 * This is mostly useful idiomatically:
	 *
	 *   var createArrayFromMixed = require('createArrayFromMixed');
	 *
	 *   function takesOneOrMoreThings(things) {
	 *     things = createArrayFromMixed(things);
	 *     ...
	 *   }
	 *
	 * This allows you to treat `things' as an array, but accept scalars in the API.
	 *
	 * If you need to convert an array-like object, like `arguments`, into an array
	 * use toArray instead.
	 *
	 * @param {*} obj
	 * @return {array}
	 */
	function createArrayFromMixed(obj) {
	  if (!hasArrayNature(obj)) {
	    return [obj];
	  } else if (Array.isArray(obj)) {
	    return obj.slice();
	  } else {
	    return toArray(obj);
	  }
	}

	module.exports = createArrayFromMixed;

/***/ },
/* 296 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */

	/*eslint-disable fb-www/unsafe-html*/

	var ExecutionEnvironment = __webpack_require__(15);

	var createArrayFromMixed = __webpack_require__(295);
	var getMarkupWrap = __webpack_require__(297);
	var invariant = __webpack_require__(3);

	/**
	 * Dummy container used to render all markup.
	 */
	var dummyNode = ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;

	/**
	 * Pattern used by `getNodeName`.
	 */
	var nodeNamePattern = /^\s*<(\w+)/;

	/**
	 * Extracts the `nodeName` of the first element in a string of markup.
	 *
	 * @param {string} markup String of markup.
	 * @return {?string} Node name of the supplied markup.
	 */
	function getNodeName(markup) {
	  var nodeNameMatch = markup.match(nodeNamePattern);
	  return nodeNameMatch && nodeNameMatch[1].toLowerCase();
	}

	/**
	 * Creates an array containing the nodes rendered from the supplied markup. The
	 * optionally supplied `handleScript` function will be invoked once for each
	 * <script> element that is rendered. If no `handleScript` function is supplied,
	 * an exception is thrown if any <script> elements are rendered.
	 *
	 * @param {string} markup A string of valid HTML markup.
	 * @param {?function} handleScript Invoked once for each rendered <script>.
	 * @return {array<DOMElement|DOMTextNode>} An array of rendered nodes.
	 */
	function createNodesFromMarkup(markup, handleScript) {
	  var node = dummyNode;
	  !!!dummyNode ?  false ? invariant(false, 'createNodesFromMarkup dummy not initialized') : invariant(false) : void 0;
	  var nodeName = getNodeName(markup);

	  var wrap = nodeName && getMarkupWrap(nodeName);
	  if (wrap) {
	    node.innerHTML = wrap[1] + markup + wrap[2];

	    var wrapDepth = wrap[0];
	    while (wrapDepth--) {
	      node = node.lastChild;
	    }
	  } else {
	    node.innerHTML = markup;
	  }

	  var scripts = node.getElementsByTagName('script');
	  if (scripts.length) {
	    !handleScript ?  false ? invariant(false, 'createNodesFromMarkup(...): Unexpected <script> element rendered.') : invariant(false) : void 0;
	    createArrayFromMixed(scripts).forEach(handleScript);
	  }

	  var nodes = Array.from(node.childNodes);
	  while (node.lastChild) {
	    node.removeChild(node.lastChild);
	  }
	  return nodes;
	}

	module.exports = createNodesFromMarkup;

/***/ },
/* 297 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	/*eslint-disable fb-www/unsafe-html */

	var ExecutionEnvironment = __webpack_require__(15);

	var invariant = __webpack_require__(3);

	/**
	 * Dummy container used to detect which wraps are necessary.
	 */
	var dummyNode = ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;

	/**
	 * Some browsers cannot use `innerHTML` to render certain elements standalone,
	 * so we wrap them, render the wrapped nodes, then extract the desired node.
	 *
	 * In IE8, certain elements cannot render alone, so wrap all elements ('*').
	 */

	var shouldWrap = {};

	var selectWrap = [1, '<select multiple="true">', '</select>'];
	var tableWrap = [1, '<table>', '</table>'];
	var trWrap = [3, '<table><tbody><tr>', '</tr></tbody></table>'];

	var svgWrap = [1, '<svg xmlns="http://www.w3.org/2000/svg">', '</svg>'];

	var markupWrap = {
	  '*': [1, '?<div>', '</div>'],

	  'area': [1, '<map>', '</map>'],
	  'col': [2, '<table><tbody></tbody><colgroup>', '</colgroup></table>'],
	  'legend': [1, '<fieldset>', '</fieldset>'],
	  'param': [1, '<object>', '</object>'],
	  'tr': [2, '<table><tbody>', '</tbody></table>'],

	  'optgroup': selectWrap,
	  'option': selectWrap,

	  'caption': tableWrap,
	  'colgroup': tableWrap,
	  'tbody': tableWrap,
	  'tfoot': tableWrap,
	  'thead': tableWrap,

	  'td': trWrap,
	  'th': trWrap
	};

	// Initialize the SVG elements since we know they'll always need to be wrapped
	// consistently. If they are created inside a <div> they will be initialized in
	// the wrong namespace (and will not display).
	var svgElements = ['circle', 'clipPath', 'defs', 'ellipse', 'g', 'image', 'line', 'linearGradient', 'mask', 'path', 'pattern', 'polygon', 'polyline', 'radialGradient', 'rect', 'stop', 'text', 'tspan'];
	svgElements.forEach(function (nodeName) {
	  markupWrap[nodeName] = svgWrap;
	  shouldWrap[nodeName] = true;
	});

	/**
	 * Gets the markup wrap configuration for the supplied `nodeName`.
	 *
	 * NOTE: This lazily detects which wraps are necessary for the current browser.
	 *
	 * @param {string} nodeName Lowercase `nodeName`.
	 * @return {?array} Markup wrap configuration, if applicable.
	 */
	function getMarkupWrap(nodeName) {
	  !!!dummyNode ?  false ? invariant(false, 'Markup wrapping node not initialized') : invariant(false) : void 0;
	  if (!markupWrap.hasOwnProperty(nodeName)) {
	    nodeName = '*';
	  }
	  if (!shouldWrap.hasOwnProperty(nodeName)) {
	    if (nodeName === '*') {
	      dummyNode.innerHTML = '<link />';
	    } else {
	      dummyNode.innerHTML = '<' + nodeName + '></' + nodeName + '>';
	    }
	    shouldWrap[nodeName] = !dummyNode.firstChild;
	  }
	  return shouldWrap[nodeName] ? markupWrap[nodeName] : null;
	}

	module.exports = getMarkupWrap;

/***/ },
/* 298 */
/***/ function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */

	'use strict';

	/**
	 * Gets the scroll position of the supplied element or window.
	 *
	 * The return values are unbounded, unlike `getScrollPosition`. This means they
	 * may be negative or exceed the element boundaries (which is possible using
	 * inertial scrolling).
	 *
	 * @param {DOMWindow|DOMElement} scrollable
	 * @return {object} Map with `x` and `y` keys.
	 */

	function getUnboundedScrollPosition(scrollable) {
	  if (scrollable.Window && scrollable instanceof scrollable.Window) {
	    return {
	      x: scrollable.pageXOffset || scrollable.document.documentElement.scrollLeft,
	      y: scrollable.pageYOffset || scrollable.document.documentElement.scrollTop
	    };
	  }
	  return {
	    x: scrollable.scrollLeft,
	    y: scrollable.scrollTop
	  };
	}

	module.exports = getUnboundedScrollPosition;

/***/ },
/* 299 */
/***/ function(module, exports) {

	'use strict';

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */

	var _uppercasePattern = /([A-Z])/g;

	/**
	 * Hyphenates a camelcased string, for example:
	 *
	 *   > hyphenate('backgroundColor')
	 *   < "background-color"
	 *
	 * For CSS style names, use `hyphenateStyleName` instead which works properly
	 * with all vendor prefixes, including `ms`.
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function hyphenate(string) {
	  return string.replace(_uppercasePattern, '-$1').toLowerCase();
	}

	module.exports = hyphenate;

/***/ },
/* 300 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */

	'use strict';

	var hyphenate = __webpack_require__(299);

	var msPattern = /^ms-/;

	/**
	 * Hyphenates a camelcased CSS property name, for example:
	 *
	 *   > hyphenateStyleName('backgroundColor')
	 *   < "background-color"
	 *   > hyphenateStyleName('MozTransition')
	 *   < "-moz-transition"
	 *   > hyphenateStyleName('msTransition')
	 *   < "-ms-transition"
	 *
	 * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
	 * is converted to `-ms-`.
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function hyphenateStyleName(string) {
	  return hyphenate(string).replace(msPattern, '-ms-');
	}

	module.exports = hyphenateStyleName;

/***/ },
/* 301 */
/***/ function(module, exports) {

	'use strict';

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */

	/**
	 * @param {*} object The object to check.
	 * @return {boolean} Whether or not the object is a DOM node.
	 */
	function isNode(object) {
	  var doc = object ? object.ownerDocument || object : document;
	  var defaultView = doc.defaultView || window;
	  return !!(object && (typeof defaultView.Node === 'function' ? object instanceof defaultView.Node : typeof object === 'object' && typeof object.nodeType === 'number' && typeof object.nodeName === 'string'));
	}

	module.exports = isNode;

/***/ },
/* 302 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */

	var isNode = __webpack_require__(301);

	/**
	 * @param {*} object The object to check.
	 * @return {boolean} Whether or not the object is a DOM text node.
	 */
	function isTextNode(object) {
	  return isNode(object) && object.nodeType == 3;
	}

	module.exports = isTextNode;

/***/ },
/* 303 */
/***/ function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 * @typechecks static-only
	 */

	'use strict';

	/**
	 * Memoizes the return value of a function that accepts one string argument.
	 */

	function memoizeStringOnly(callback) {
	  var cache = {};
	  return function (string) {
	    if (!cache.hasOwnProperty(string)) {
	      cache[string] = callback.call(this, string);
	    }
	    return cache[string];
	  };
	}

	module.exports = memoizeStringOnly;

/***/ },
/* 304 */
/***/ function(module, exports, __webpack_require__) {

	var isFunction = __webpack_require__(149)

	module.exports = forEach

	var toString = Object.prototype.toString
	var hasOwnProperty = Object.prototype.hasOwnProperty

	function forEach(list, iterator, context) {
	    if (!isFunction(iterator)) {
	        throw new TypeError('iterator must be a function')
	    }

	    if (arguments.length < 3) {
	        context = this
	    }
	    
	    if (toString.call(list) === '[object Array]')
	        forEachArray(list, iterator, context)
	    else if (typeof list === 'string')
	        forEachString(list, iterator, context)
	    else
	        forEachObject(list, iterator, context)
	}

	function forEachArray(array, iterator, context) {
	    for (var i = 0, len = array.length; i < len; i++) {
	        if (hasOwnProperty.call(array, i)) {
	            iterator.call(context, array[i], i, array)
	        }
	    }
	}

	function forEachString(string, iterator, context) {
	    for (var i = 0, len = string.length; i < len; i++) {
	        // no such thing as a sparse string.
	        iterator.call(context, string.charAt(i), i, string)
	    }
	}

	function forEachObject(object, iterator, context) {
	    for (var k in object) {
	        if (hasOwnProperty.call(object, k)) {
	            iterator.call(context, object[k], k, object)
	        }
	    }
	}


/***/ },
/* 305 */
/***/ function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {if (typeof window !== "undefined") {
	    module.exports = window;
	} else if (typeof global !== "undefined") {
	    module.exports = global;
	} else if (typeof self !== "undefined"){
	    module.exports = self;
	} else {
	    module.exports = {};
	}

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 306 */
/***/ function(module, exports, __webpack_require__) {

	var trim = __webpack_require__(435)
	  , forEach = __webpack_require__(304)
	  , isArray = function(arg) {
	      return Object.prototype.toString.call(arg) === '[object Array]';
	    }

	module.exports = function (headers) {
	  if (!headers)
	    return {}

	  var result = {}

	  forEach(
	      trim(headers).split('\n')
	    , function (row) {
	        var index = row.indexOf(':')
	          , key = trim(row.slice(0, index)).toLowerCase()
	          , value = trim(row.slice(index + 1))

	        if (typeof(result[key]) === 'undefined') {
	          result[key] = value
	        } else if (isArray(result[key])) {
	          result[key].push(value)
	        } else {
	          result[key] = [ result[key], value ]
	        }
	      }
	  )

	  return result
	}

/***/ },
/* 307 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 */

	'use strict';

	if (false) {
	  var invariant = require('fbjs/lib/invariant');
	  var warning = require('fbjs/lib/warning');
	  var ReactPropTypesSecret = require('./lib/ReactPropTypesSecret');
	  var loggedTypeFailures = {};
	}

	/**
	 * Assert that the values match with the type specs.
	 * Error messages are memorized and will only be shown once.
	 *
	 * @param {object} typeSpecs Map of name to a ReactPropType
	 * @param {object} values Runtime values that need to be type-checked
	 * @param {string} location e.g. "prop", "context", "child context"
	 * @param {string} componentName Name of the component for error messages.
	 * @param {?Function} getStack Returns the component stack.
	 * @private
	 */
	function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
	  if (false) {
	    for (var typeSpecName in typeSpecs) {
	      if (typeSpecs.hasOwnProperty(typeSpecName)) {
	        var error;
	        // Prop type validation may throw. In case they do, we don't want to
	        // fail the render phase where it didn't fail before. So we log it.
	        // After these have been cleaned up, we'll let them throw.
	        try {
	          // This is intentionally an invariant that gets caught. It's the same
	          // behavior as without this statement except with a better message.
	          invariant(typeof typeSpecs[typeSpecName] === 'function', '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'React.PropTypes.', componentName || 'React class', location, typeSpecName);
	          error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
	        } catch (ex) {
	          error = ex;
	        }
	        warning(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', location, typeSpecName, typeof error);
	        if (error instanceof Error && !(error.message in loggedTypeFailures)) {
	          // Only monitor this failure once because there tends to be a lot of the
	          // same error.
	          loggedTypeFailures[error.message] = true;

	          var stack = getStack ? getStack() : '';

	          warning(false, 'Failed %s type: %s%s', location, error.message, stack != null ? stack : '');
	        }
	      }
	    }
	  }
	}

	module.exports = checkPropTypes;


/***/ },
/* 308 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 */

	'use strict';

	var emptyFunction = __webpack_require__(18);
	var invariant = __webpack_require__(3);
	var warning = __webpack_require__(4);

	var ReactPropTypesSecret = __webpack_require__(309);
	var checkPropTypes = __webpack_require__(307);

	module.exports = function(isValidElement, throwOnDirectAccess) {
	  /* global Symbol */
	  var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
	  var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

	  /**
	   * Returns the iterator method function contained on the iterable object.
	   *
	   * Be sure to invoke the function with the iterable as context:
	   *
	   *     var iteratorFn = getIteratorFn(myIterable);
	   *     if (iteratorFn) {
	   *       var iterator = iteratorFn.call(myIterable);
	   *       ...
	   *     }
	   *
	   * @param {?object} maybeIterable
	   * @return {?function}
	   */
	  function getIteratorFn(maybeIterable) {
	    var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
	    if (typeof iteratorFn === 'function') {
	      return iteratorFn;
	    }
	  }

	  /**
	   * Collection of methods that allow declaration and validation of props that are
	   * supplied to React components. Example usage:
	   *
	   *   var Props = require('ReactPropTypes');
	   *   var MyArticle = React.createClass({
	   *     propTypes: {
	   *       // An optional string prop named "description".
	   *       description: Props.string,
	   *
	   *       // A required enum prop named "category".
	   *       category: Props.oneOf(['News','Photos']).isRequired,
	   *
	   *       // A prop named "dialog" that requires an instance of Dialog.
	   *       dialog: Props.instanceOf(Dialog).isRequired
	   *     },
	   *     render: function() { ... }
	   *   });
	   *
	   * A more formal specification of how these methods are used:
	   *
	   *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
	   *   decl := ReactPropTypes.{type}(.isRequired)?
	   *
	   * Each and every declaration produces a function with the same signature. This
	   * allows the creation of custom validation functions. For example:
	   *
	   *  var MyLink = React.createClass({
	   *    propTypes: {
	   *      // An optional string or URI prop named "href".
	   *      href: function(props, propName, componentName) {
	   *        var propValue = props[propName];
	   *        if (propValue != null && typeof propValue !== 'string' &&
	   *            !(propValue instanceof URI)) {
	   *          return new Error(
	   *            'Expected a string or an URI for ' + propName + ' in ' +
	   *            componentName
	   *          );
	   *        }
	   *      }
	   *    },
	   *    render: function() {...}
	   *  });
	   *
	   * @internal
	   */

	  var ANONYMOUS = '<<anonymous>>';

	  // Important!
	  // Keep this list in sync with production version in `./factoryWithThrowingShims.js`.
	  var ReactPropTypes = {
	    array: createPrimitiveTypeChecker('array'),
	    bool: createPrimitiveTypeChecker('boolean'),
	    func: createPrimitiveTypeChecker('function'),
	    number: createPrimitiveTypeChecker('number'),
	    object: createPrimitiveTypeChecker('object'),
	    string: createPrimitiveTypeChecker('string'),
	    symbol: createPrimitiveTypeChecker('symbol'),

	    any: createAnyTypeChecker(),
	    arrayOf: createArrayOfTypeChecker,
	    element: createElementTypeChecker(),
	    instanceOf: createInstanceTypeChecker,
	    node: createNodeChecker(),
	    objectOf: createObjectOfTypeChecker,
	    oneOf: createEnumTypeChecker,
	    oneOfType: createUnionTypeChecker,
	    shape: createShapeTypeChecker
	  };

	  /**
	   * inlined Object.is polyfill to avoid requiring consumers ship their own
	   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
	   */
	  /*eslint-disable no-self-compare*/
	  function is(x, y) {
	    // SameValue algorithm
	    if (x === y) {
	      // Steps 1-5, 7-10
	      // Steps 6.b-6.e: +0 != -0
	      return x !== 0 || 1 / x === 1 / y;
	    } else {
	      // Step 6.a: NaN == NaN
	      return x !== x && y !== y;
	    }
	  }
	  /*eslint-enable no-self-compare*/

	  /**
	   * We use an Error-like object for backward compatibility as people may call
	   * PropTypes directly and inspect their output. However, we don't use real
	   * Errors anymore. We don't inspect their stack anyway, and creating them
	   * is prohibitively expensive if they are created too often, such as what
	   * happens in oneOfType() for any type before the one that matched.
	   */
	  function PropTypeError(message) {
	    this.message = message;
	    this.stack = '';
	  }
	  // Make `instanceof Error` still work for returned errors.
	  PropTypeError.prototype = Error.prototype;

	  function createChainableTypeChecker(validate) {
	    if (false) {
	      var manualPropTypeCallCache = {};
	      var manualPropTypeWarningCount = 0;
	    }
	    function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
	      componentName = componentName || ANONYMOUS;
	      propFullName = propFullName || propName;

	      if (secret !== ReactPropTypesSecret) {
	        if (throwOnDirectAccess) {
	          // New behavior only for users of `prop-types` package
	          invariant(
	            false,
	            'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +
	            'Use `PropTypes.checkPropTypes()` to call them. ' +
	            'Read more at http://fb.me/use-check-prop-types'
	          );
	        } else if (false) {
	          // Old behavior for people using React.PropTypes
	          var cacheKey = componentName + ':' + propName;
	          if (
	            !manualPropTypeCallCache[cacheKey] &&
	            // Avoid spamming the console because they are often not actionable except for lib authors
	            manualPropTypeWarningCount < 3
	          ) {
	            warning(
	              false,
	              'You are manually calling a React.PropTypes validation ' +
	              'function for the `%s` prop on `%s`. This is deprecated ' +
	              'and will throw in the standalone `prop-types` package. ' +
	              'You may be seeing this warning due to a third-party PropTypes ' +
	              'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.',
	              propFullName,
	              componentName
	            );
	            manualPropTypeCallCache[cacheKey] = true;
	            manualPropTypeWarningCount++;
	          }
	        }
	      }
	      if (props[propName] == null) {
	        if (isRequired) {
	          if (props[propName] === null) {
	            return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));
	          }
	          return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));
	        }
	        return null;
	      } else {
	        return validate(props, propName, componentName, location, propFullName);
	      }
	    }

	    var chainedCheckType = checkType.bind(null, false);
	    chainedCheckType.isRequired = checkType.bind(null, true);

	    return chainedCheckType;
	  }

	  function createPrimitiveTypeChecker(expectedType) {
	    function validate(props, propName, componentName, location, propFullName, secret) {
	      var propValue = props[propName];
	      var propType = getPropType(propValue);
	      if (propType !== expectedType) {
	        // `propValue` being instance of, say, date/regexp, pass the 'object'
	        // check, but we can offer a more precise error message here rather than
	        // 'of type `object`'.
	        var preciseType = getPreciseType(propValue);

	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createAnyTypeChecker() {
	    return createChainableTypeChecker(emptyFunction.thatReturnsNull);
	  }

	  function createArrayOfTypeChecker(typeChecker) {
	    function validate(props, propName, componentName, location, propFullName) {
	      if (typeof typeChecker !== 'function') {
	        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');
	      }
	      var propValue = props[propName];
	      if (!Array.isArray(propValue)) {
	        var propType = getPropType(propValue);
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
	      }
	      for (var i = 0; i < propValue.length; i++) {
	        var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret);
	        if (error instanceof Error) {
	          return error;
	        }
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createElementTypeChecker() {
	    function validate(props, propName, componentName, location, propFullName) {
	      var propValue = props[propName];
	      if (!isValidElement(propValue)) {
	        var propType = getPropType(propValue);
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createInstanceTypeChecker(expectedClass) {
	    function validate(props, propName, componentName, location, propFullName) {
	      if (!(props[propName] instanceof expectedClass)) {
	        var expectedClassName = expectedClass.name || ANONYMOUS;
	        var actualClassName = getClassName(props[propName]);
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createEnumTypeChecker(expectedValues) {
	    if (!Array.isArray(expectedValues)) {
	       false ? warning(false, 'Invalid argument supplied to oneOf, expected an instance of array.') : void 0;
	      return emptyFunction.thatReturnsNull;
	    }

	    function validate(props, propName, componentName, location, propFullName) {
	      var propValue = props[propName];
	      for (var i = 0; i < expectedValues.length; i++) {
	        if (is(propValue, expectedValues[i])) {
	          return null;
	        }
	      }

	      var valuesString = JSON.stringify(expectedValues);
	      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of value `' + propValue + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createObjectOfTypeChecker(typeChecker) {
	    function validate(props, propName, componentName, location, propFullName) {
	      if (typeof typeChecker !== 'function') {
	        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');
	      }
	      var propValue = props[propName];
	      var propType = getPropType(propValue);
	      if (propType !== 'object') {
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
	      }
	      for (var key in propValue) {
	        if (propValue.hasOwnProperty(key)) {
	          var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
	          if (error instanceof Error) {
	            return error;
	          }
	        }
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createUnionTypeChecker(arrayOfTypeCheckers) {
	    if (!Array.isArray(arrayOfTypeCheckers)) {
	       false ? warning(false, 'Invalid argument supplied to oneOfType, expected an instance of array.') : void 0;
	      return emptyFunction.thatReturnsNull;
	    }

	    function validate(props, propName, componentName, location, propFullName) {
	      for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
	        var checker = arrayOfTypeCheckers[i];
	        if (checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret) == null) {
	          return null;
	        }
	      }

	      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createNodeChecker() {
	    function validate(props, propName, componentName, location, propFullName) {
	      if (!isNode(props[propName])) {
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createShapeTypeChecker(shapeTypes) {
	    function validate(props, propName, componentName, location, propFullName) {
	      var propValue = props[propName];
	      var propType = getPropType(propValue);
	      if (propType !== 'object') {
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
	      }
	      for (var key in shapeTypes) {
	        var checker = shapeTypes[key];
	        if (!checker) {
	          continue;
	        }
	        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
	        if (error) {
	          return error;
	        }
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function isNode(propValue) {
	    switch (typeof propValue) {
	      case 'number':
	      case 'string':
	      case 'undefined':
	        return true;
	      case 'boolean':
	        return !propValue;
	      case 'object':
	        if (Array.isArray(propValue)) {
	          return propValue.every(isNode);
	        }
	        if (propValue === null || isValidElement(propValue)) {
	          return true;
	        }

	        var iteratorFn = getIteratorFn(propValue);
	        if (iteratorFn) {
	          var iterator = iteratorFn.call(propValue);
	          var step;
	          if (iteratorFn !== propValue.entries) {
	            while (!(step = iterator.next()).done) {
	              if (!isNode(step.value)) {
	                return false;
	              }
	            }
	          } else {
	            // Iterator will provide entry [k,v] tuples rather than values.
	            while (!(step = iterator.next()).done) {
	              var entry = step.value;
	              if (entry) {
	                if (!isNode(entry[1])) {
	                  return false;
	                }
	              }
	            }
	          }
	        } else {
	          return false;
	        }

	        return true;
	      default:
	        return false;
	    }
	  }

	  function isSymbol(propType, propValue) {
	    // Native Symbol.
	    if (propType === 'symbol') {
	      return true;
	    }

	    // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'
	    if (propValue['@@toStringTag'] === 'Symbol') {
	      return true;
	    }

	    // Fallback for non-spec compliant Symbols which are polyfilled.
	    if (typeof Symbol === 'function' && propValue instanceof Symbol) {
	      return true;
	    }

	    return false;
	  }

	  // Equivalent of `typeof` but with special handling for array and regexp.
	  function getPropType(propValue) {
	    var propType = typeof propValue;
	    if (Array.isArray(propValue)) {
	      return 'array';
	    }
	    if (propValue instanceof RegExp) {
	      // Old webkits (at least until Android 4.0) return 'function' rather than
	      // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
	      // passes PropTypes.object.
	      return 'object';
	    }
	    if (isSymbol(propType, propValue)) {
	      return 'symbol';
	    }
	    return propType;
	  }

	  // This handles more types than `getPropType`. Only used for error messages.
	  // See `createPrimitiveTypeChecker`.
	  function getPreciseType(propValue) {
	    var propType = getPropType(propValue);
	    if (propType === 'object') {
	      if (propValue instanceof Date) {
	        return 'date';
	      } else if (propValue instanceof RegExp) {
	        return 'regexp';
	      }
	    }
	    return propType;
	  }

	  // Returns class name of the object, if any.
	  function getClassName(propValue) {
	    if (!propValue.constructor || !propValue.constructor.name) {
	      return ANONYMOUS;
	    }
	    return propValue.constructor.name;
	  }

	  ReactPropTypes.checkPropTypes = checkPropTypes;
	  ReactPropTypes.PropTypes = ReactPropTypes;

	  return ReactPropTypes;
	};


/***/ },
/* 309 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 */

	'use strict';

	var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

	module.exports = ReactPropTypesSecret;


/***/ },
/* 310 */
/***/ function(module, exports, __webpack_require__) {

	var always = __webpack_require__(86);


	/**
	 * A function that always returns `true`. Any passed in parameters are ignored.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.9.0
	 * @category Function
	 * @sig * -> Boolean
	 * @param {*}
	 * @return {Boolean}
	 * @see R.always, R.F
	 * @example
	 *
	 *      R.T(); //=> true
	 */
	module.exports = always(true);


/***/ },
/* 311 */
/***/ function(module, exports, __webpack_require__) {

	var _curry1 = __webpack_require__(19);
	var curryN = __webpack_require__(48);
	var max = __webpack_require__(335);
	var pluck = __webpack_require__(339);
	var reduce = __webpack_require__(160);


	/**
	 * Takes a list of predicates and returns a predicate that returns true for a
	 * given list of arguments if every one of the provided predicates is satisfied
	 * by those arguments.
	 *
	 * The function returned is a curried function whose arity matches that of the
	 * highest-arity predicate.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.9.0
	 * @category Logic
	 * @sig [(*... -> Boolean)] -> (*... -> Boolean)
	 * @param {Array} preds
	 * @return {Function}
	 * @see R.anyPass
	 * @example
	 *
	 *      var isQueen = R.propEq('rank', 'Q');
	 *      var isSpade = R.propEq('suit', 'â ï¸');
	 *      var isQueenOfSpades = R.allPass([isQueen, isSpade]);
	 *
	 *      isQueenOfSpades({rank: 'Q', suit: 'â£ï¸'}); //=> false
	 *      isQueenOfSpades({rank: 'Q', suit: 'â ï¸'}); //=> true
	 */
	module.exports = _curry1(function allPass(preds) {
	  return curryN(reduce(max, 0, pluck('length', preds)), function() {
	    var idx = 0;
	    var len = preds.length;
	    while (idx < len) {
	      if (!preds[idx].apply(this, arguments)) {
	        return false;
	      }
	      idx += 1;
	    }
	    return true;
	  });
	});


/***/ },
/* 312 */
/***/ function(module, exports, __webpack_require__) {

	var _arity = __webpack_require__(63);
	var _curry2 = __webpack_require__(13);


	/**
	 * Creates a function that is bound to a context.
	 * Note: `R.bind` does not provide the additional argument-binding capabilities of
	 * [Function.prototype.bind](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind).
	 *
	 * @func
	 * @memberOf R
	 * @since v0.6.0
	 * @category Function
	 * @category Object
	 * @sig (* -> *) -> {*} -> (* -> *)
	 * @param {Function} fn The function to bind to context
	 * @param {Object} thisObj The context to bind `fn` to
	 * @return {Function} A function that will execute in the context of `thisObj`.
	 * @see R.partial
	 * @example
	 *
	 *      var log = R.bind(console.log, console);
	 *      R.pipe(R.assoc('a', 2), R.tap(log), R.assoc('a', 3))({a: 1}); //=> {a: 3}
	 *      // logs {a: 2}
	 */
	module.exports = _curry2(function bind(fn, thisObj) {
	  return _arity(fn.length, function() {
	    return fn.apply(thisObj, arguments);
	  });
	});


/***/ },
/* 313 */
/***/ function(module, exports, __webpack_require__) {

	var _curry3 = __webpack_require__(29);
	var equals = __webpack_require__(87);


	/**
	 * Takes a function and two values in its domain and returns `true` if the
	 * values map to the same value in the codomain; `false` otherwise.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.18.0
	 * @category Relation
	 * @sig (a -> b) -> a -> a -> Boolean
	 * @param {Function} f
	 * @param {*} x
	 * @param {*} y
	 * @return {Boolean}
	 * @example
	 *
	 *      R.eqBy(Math.abs, 5, -5); //=> true
	 */
	module.exports = _curry3(function eqBy(f, x, y) {
	  return equals(f(x), f(y));
	});


/***/ },
/* 314 */
/***/ function(module, exports, __webpack_require__) {

	var _curry2 = __webpack_require__(13);
	var _dispatchable = __webpack_require__(154);
	var _xfindIndex = __webpack_require__(330);


	/**
	 * Returns the index of the first element of the list which matches the
	 * predicate, or `-1` if no element matches.
	 *
	 * Dispatches to the `findIndex` method of the second argument, if present.
	 *
	 * Acts as a transducer if a transformer is given in list position.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.1.1
	 * @category List
	 * @sig (a -> Boolean) -> [a] -> Number
	 * @param {Function} fn The predicate function used to determine if the element is the
	 * desired one.
	 * @param {Array} list The array to consider.
	 * @return {Number} The index of the element found, or `-1`.
	 * @see R.transduce
	 * @example
	 *
	 *      var xs = [{a: 1}, {a: 2}, {a: 3}];
	 *      R.findIndex(R.propEq('a', 2))(xs); //=> 1
	 *      R.findIndex(R.propEq('a', 4))(xs); //=> -1
	 */
	module.exports = _curry2(_dispatchable('findIndex', _xfindIndex, function findIndex(fn, list) {
	  var idx = 0;
	  var len = list.length;
	  while (idx < len) {
	    if (fn(list[idx])) {
	      return idx;
	    }
	    idx += 1;
	  }
	  return -1;
	}));


/***/ },
/* 315 */
/***/ function(module, exports, __webpack_require__) {

	var _curry2 = __webpack_require__(13);


	/**
	 * Returns true if its arguments are identical, false otherwise. Values are
	 * identical if they reference the same memory. `NaN` is identical to `NaN`;
	 * `0` and `-0` are not identical.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.15.0
	 * @category Relation
	 * @sig a -> a -> Boolean
	 * @param {*} a
	 * @param {*} b
	 * @return {Boolean}
	 * @example
	 *
	 *      var o = {};
	 *      R.identical(o, o); //=> true
	 *      R.identical(1, 1); //=> true
	 *      R.identical(1, '1'); //=> false
	 *      R.identical([], []); //=> false
	 *      R.identical(0, -0); //=> false
	 *      R.identical(NaN, NaN); //=> true
	 */
	module.exports = _curry2(function identical(a, b) {
	  // SameValue algorithm
	  if (a === b) { // Steps 1-5, 7-10
	    // Steps 6.b-6.e: +0 != -0
	    return a !== 0 || 1 / a === 1 / b;
	  } else {
	    // Step 6.a: NaN == NaN
	    return a !== a && b !== b;
	  }
	});


/***/ },
/* 316 */
/***/ function(module, exports, __webpack_require__) {

	var _curry3 = __webpack_require__(29);
	var curryN = __webpack_require__(48);


	/**
	 * Creates a function that will process either the `onTrue` or the `onFalse`
	 * function depending upon the result of the `condition` predicate.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.8.0
	 * @category Logic
	 * @sig (*... -> Boolean) -> (*... -> *) -> (*... -> *) -> (*... -> *)
	 * @param {Function} condition A predicate function
	 * @param {Function} onTrue A function to invoke when the `condition` evaluates to a truthy value.
	 * @param {Function} onFalse A function to invoke when the `condition` evaluates to a falsy value.
	 * @return {Function} A new unary function that will process either the `onTrue` or the `onFalse`
	 *                    function depending upon the result of the `condition` predicate.
	 * @see R.unless, R.when
	 * @example
	 *
	 *      var incCount = R.ifElse(
	 *        R.has('count'),
	 *        R.over(R.lensProp('count'), R.inc),
	 *        R.assoc('count', 1)
	 *      );
	 *      incCount({});           //=> { count: 1 }
	 *      incCount({ count: 1 }); //=> { count: 2 }
	 */
	module.exports = _curry3(function ifElse(condition, onTrue, onFalse) {
	  return curryN(Math.max(condition.length, onTrue.length, onFalse.length),
	    function _ifElse() {
	      return condition.apply(this, arguments) ? onTrue.apply(this, arguments) : onFalse.apply(this, arguments);
	    }
	  );
	});


/***/ },
/* 317 */
/***/ function(module, exports) {

	module.exports = function _arrayFromIterator(iter) {
	  var list = [];
	  var next;
	  while (!(next = iter.next()).done) {
	    list.push(next.value);
	  }
	  return list;
	};


/***/ },
/* 318 */
/***/ function(module, exports, __webpack_require__) {

	var _objectAssign = __webpack_require__(327);

	module.exports =
	  typeof Object.assign === 'function' ? Object.assign : _objectAssign;


/***/ },
/* 319 */
/***/ function(module, exports) {

	module.exports = function _containsWith(pred, x, list) {
	  var idx = 0;
	  var len = list.length;

	  while (idx < len) {
	    if (pred(x, list[idx])) {
	      return true;
	    }
	    idx += 1;
	  }
	  return false;
	};


/***/ },
/* 320 */
/***/ function(module, exports, __webpack_require__) {

	var _arity = __webpack_require__(63);
	var _isPlaceholder = __webpack_require__(65);


	/**
	 * Internal curryN function.
	 *
	 * @private
	 * @category Function
	 * @param {Number} length The arity of the curried function.
	 * @param {Array} received An array of arguments received thus far.
	 * @param {Function} fn The function to curry.
	 * @return {Function} The curried function.
	 */
	module.exports = function _curryN(length, received, fn) {
	  return function() {
	    var combined = [];
	    var argsIdx = 0;
	    var left = length;
	    var combinedIdx = 0;
	    while (combinedIdx < received.length || argsIdx < arguments.length) {
	      var result;
	      if (combinedIdx < received.length &&
	          (!_isPlaceholder(received[combinedIdx]) ||
	           argsIdx >= arguments.length)) {
	        result = received[combinedIdx];
	      } else {
	        result = arguments[argsIdx];
	        argsIdx += 1;
	      }
	      combined[combinedIdx] = result;
	      if (!_isPlaceholder(result)) {
	        left -= 1;
	      }
	      combinedIdx += 1;
	    }
	    return left <= 0 ? fn.apply(this, combined)
	                     : _arity(left, _curryN(length, combined, fn));
	  };
	};


/***/ },
/* 321 */
/***/ function(module, exports, __webpack_require__) {

	var _arrayFromIterator = __webpack_require__(317);
	var _functionName = __webpack_require__(322);
	var _has = __webpack_require__(64);
	var identical = __webpack_require__(315);
	var keys = __webpack_require__(159);
	var type = __webpack_require__(346);


	module.exports = function _equals(a, b, stackA, stackB) {
	  if (identical(a, b)) {
	    return true;
	  }

	  if (type(a) !== type(b)) {
	    return false;
	  }

	  if (a == null || b == null) {
	    return false;
	  }

	  if (typeof a.equals === 'function' || typeof b.equals === 'function') {
	    return typeof a.equals === 'function' && a.equals(b) &&
	           typeof b.equals === 'function' && b.equals(a);
	  }

	  switch (type(a)) {
	    case 'Arguments':
	    case 'Array':
	    case 'Object':
	      if (typeof a.constructor === 'function' &&
	          _functionName(a.constructor) === 'Promise') {
	        return a === b;
	      }
	      break;
	    case 'Boolean':
	    case 'Number':
	    case 'String':
	      if (!(typeof a === typeof b && identical(a.valueOf(), b.valueOf()))) {
	        return false;
	      }
	      break;
	    case 'Date':
	      if (!identical(a.valueOf(), b.valueOf())) {
	        return false;
	      }
	      break;
	    case 'Error':
	      return a.name === b.name && a.message === b.message;
	    case 'RegExp':
	      if (!(a.source === b.source &&
	            a.global === b.global &&
	            a.ignoreCase === b.ignoreCase &&
	            a.multiline === b.multiline &&
	            a.sticky === b.sticky &&
	            a.unicode === b.unicode)) {
	        return false;
	      }
	      break;
	    case 'Map':
	    case 'Set':
	      if (!_equals(_arrayFromIterator(a.entries()), _arrayFromIterator(b.entries()), stackA, stackB)) {
	        return false;
	      }
	      break;
	    case 'Int8Array':
	    case 'Uint8Array':
	    case 'Uint8ClampedArray':
	    case 'Int16Array':
	    case 'Uint16Array':
	    case 'Int32Array':
	    case 'Uint32Array':
	    case 'Float32Array':
	    case 'Float64Array':
	      break;
	    case 'ArrayBuffer':
	      break;
	    default:
	      // Values of other types are only equal if identical.
	      return false;
	  }

	  var keysA = keys(a);
	  if (keysA.length !== keys(b).length) {
	    return false;
	  }

	  var idx = stackA.length - 1;
	  while (idx >= 0) {
	    if (stackA[idx] === a) {
	      return stackB[idx] === b;
	    }
	    idx -= 1;
	  }

	  stackA.push(a);
	  stackB.push(b);
	  idx = keysA.length - 1;
	  while (idx >= 0) {
	    var key = keysA[idx];
	    if (!(_has(key, b) && _equals(b[key], a[key], stackA, stackB))) {
	      return false;
	    }
	    idx -= 1;
	  }
	  stackA.pop();
	  stackB.pop();
	  return true;
	};


/***/ },
/* 322 */
/***/ function(module, exports) {

	module.exports = function _functionName(f) {
	  // String(x => x) evaluates to "x => x", so the pattern may not match.
	  var match = String(f).match(/^function (\w*)/);
	  return match == null ? '' : match[1];
	};


/***/ },
/* 323 */
/***/ function(module, exports) {

	module.exports = function _identity(x) { return x; };


/***/ },
/* 324 */
/***/ function(module, exports, __webpack_require__) {

	var _has = __webpack_require__(64);


	module.exports = (function() {
	  var toString = Object.prototype.toString;
	  return toString.call(arguments) === '[object Arguments]' ?
	    function _isArguments(x) { return toString.call(x) === '[object Arguments]'; } :
	    function _isArguments(x) { return _has('callee', x); };
	}());


/***/ },
/* 325 */
/***/ function(module, exports) {

	module.exports = function _isTransformer(obj) {
	  return typeof obj['@@transducer/step'] === 'function';
	};


/***/ },
/* 326 */
/***/ function(module, exports) {

	module.exports = function _map(fn, functor) {
	  var idx = 0;
	  var len = functor.length;
	  var result = Array(len);
	  while (idx < len) {
	    result[idx] = fn(functor[idx]);
	    idx += 1;
	  }
	  return result;
	};


/***/ },
/* 327 */
/***/ function(module, exports, __webpack_require__) {

	var _has = __webpack_require__(64);

	// Based on https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/assign
	module.exports = function _objectAssign(target) {
	  if (target == null) {
	    throw new TypeError('Cannot convert undefined or null to object');
	  }

	  var output = Object(target);
	  var idx = 1;
	  var length = arguments.length;
	  while (idx < length) {
	    var source = arguments[idx];
	    if (source != null) {
	      for (var nextKey in source) {
	        if (_has(nextKey, source)) {
	          output[nextKey] = source[nextKey];
	        }
	      }
	    }
	    idx += 1;
	  }
	  return output;
	};


/***/ },
/* 328 */
/***/ function(module, exports) {

	module.exports = function _pipe(f, g) {
	  return function() {
	    return g.call(this, f.apply(this, arguments));
	  };
	};


/***/ },
/* 329 */
/***/ function(module, exports) {

	module.exports = function _reduced(x) {
	  return x && x['@@transducer/reduced'] ? x :
	    {
	      '@@transducer/value': x,
	      '@@transducer/reduced': true
	    };
	};


/***/ },
/* 330 */
/***/ function(module, exports, __webpack_require__) {

	var _curry2 = __webpack_require__(13);
	var _reduced = __webpack_require__(329);
	var _xfBase = __webpack_require__(156);


	module.exports = (function() {
	  function XFindIndex(f, xf) {
	    this.xf = xf;
	    this.f = f;
	    this.idx = -1;
	    this.found = false;
	  }
	  XFindIndex.prototype['@@transducer/init'] = _xfBase.init;
	  XFindIndex.prototype['@@transducer/result'] = function(result) {
	    if (!this.found) {
	      result = this.xf['@@transducer/step'](result, -1);
	    }
	    return this.xf['@@transducer/result'](result);
	  };
	  XFindIndex.prototype['@@transducer/step'] = function(result, input) {
	    this.idx += 1;
	    if (this.f(input)) {
	      this.found = true;
	      result = _reduced(this.xf['@@transducer/step'](result, this.idx));
	    }
	    return result;
	  };

	  return _curry2(function _xfindIndex(f, xf) { return new XFindIndex(f, xf); });
	}());


/***/ },
/* 331 */
/***/ function(module, exports, __webpack_require__) {

	var _curry2 = __webpack_require__(13);
	var _xfBase = __webpack_require__(156);


	module.exports = (function() {
	  function XMap(f, xf) {
	    this.xf = xf;
	    this.f = f;
	  }
	  XMap.prototype['@@transducer/init'] = _xfBase.init;
	  XMap.prototype['@@transducer/result'] = _xfBase.result;
	  XMap.prototype['@@transducer/step'] = function(result, input) {
	    return this.xf['@@transducer/step'](result, this.f(input));
	  };

	  return _curry2(function _xmap(f, xf) { return new XMap(f, xf); });
	}());


/***/ },
/* 332 */
/***/ function(module, exports) {

	module.exports = (function() {
	  function XWrap(fn) {
	    this.f = fn;
	  }
	  XWrap.prototype['@@transducer/init'] = function() {
	    throw new Error('init not implemented on XWrap');
	  };
	  XWrap.prototype['@@transducer/result'] = function(acc) { return acc; };
	  XWrap.prototype['@@transducer/step'] = function(acc, x) {
	    return this.f(acc, x);
	  };

	  return function _xwrap(fn) { return new XWrap(fn); };
	}());


/***/ },
/* 333 */
/***/ function(module, exports, __webpack_require__) {

	var nth = __webpack_require__(337);


	/**
	 * Returns the last element of the given list or string.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.1.4
	 * @category List
	 * @sig [a] -> a | Undefined
	 * @sig String -> String
	 * @param {*} list
	 * @return {*}
	 * @see R.init, R.head, R.tail
	 * @example
	 *
	 *      R.last(['fi', 'fo', 'fum']); //=> 'fum'
	 *      R.last([]); //=> undefined
	 *
	 *      R.last('abc'); //=> 'c'
	 *      R.last(''); //=> ''
	 */
	module.exports = nth(-1);


/***/ },
/* 334 */
/***/ function(module, exports, __webpack_require__) {

	var _curry2 = __webpack_require__(13);


	/**
	 * Returns `true` if the first argument is less than or equal to the second;
	 * `false` otherwise.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.1.0
	 * @category Relation
	 * @sig Ord a => a -> a -> Boolean
	 * @param {Number} a
	 * @param {Number} b
	 * @return {Boolean}
	 * @see R.gte
	 * @example
	 *
	 *      R.lte(2, 1); //=> false
	 *      R.lte(2, 2); //=> true
	 *      R.lte(2, 3); //=> true
	 *      R.lte('a', 'z'); //=> true
	 *      R.lte('z', 'a'); //=> false
	 */
	module.exports = _curry2(function lte(a, b) { return a <= b; });


/***/ },
/* 335 */
/***/ function(module, exports, __webpack_require__) {

	var _curry2 = __webpack_require__(13);


	/**
	 * Returns the larger of its two arguments.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.1.0
	 * @category Relation
	 * @sig Ord a => a -> a -> a
	 * @param {*} a
	 * @param {*} b
	 * @return {*}
	 * @see R.maxBy, R.min
	 * @example
	 *
	 *      R.max(789, 123); //=> 789
	 *      R.max('a', 'b'); //=> 'b'
	 */
	module.exports = _curry2(function max(a, b) { return b > a ? b : a; });


/***/ },
/* 336 */
/***/ function(module, exports, __webpack_require__) {

	var _assign = __webpack_require__(318);
	var _curry2 = __webpack_require__(13);


	/**
	 * Create a new object with the own properties of the first object merged with
	 * the own properties of the second object. If a key exists in both objects,
	 * the value from the second object will be used.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.1.0
	 * @category Object
	 * @sig {k: v} -> {k: v} -> {k: v}
	 * @param {Object} l
	 * @param {Object} r
	 * @return {Object}
	 * @see R.mergeWith, R.mergeWithKey
	 * @example
	 *
	 *      R.merge({ 'name': 'fred', 'age': 10 }, { 'age': 40 });
	 *      //=> { 'name': 'fred', 'age': 40 }
	 *
	 *      var resetToDefault = R.merge(R.__, {x: 0});
	 *      resetToDefault({x: 5, y: 2}); //=> {x: 0, y: 2}
	 */
	module.exports = _curry2(function merge(l, r) {
	  return _assign({}, l, r);
	});


/***/ },
/* 337 */
/***/ function(module, exports, __webpack_require__) {

	var _curry2 = __webpack_require__(13);
	var _isString = __webpack_require__(89);


	/**
	 * Returns the nth element of the given list or string. If n is negative the
	 * element at index length + n is returned.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.1.0
	 * @category List
	 * @sig Number -> [a] -> a | Undefined
	 * @sig Number -> String -> String
	 * @param {Number} offset
	 * @param {*} list
	 * @return {*}
	 * @example
	 *
	 *      var list = ['foo', 'bar', 'baz', 'quux'];
	 *      R.nth(1, list); //=> 'bar'
	 *      R.nth(-1, list); //=> 'quux'
	 *      R.nth(-99, list); //=> undefined
	 *
	 *      R.nth(2, 'abc'); //=> 'c'
	 *      R.nth(3, 'abc'); //=> ''
	 */
	module.exports = _curry2(function nth(offset, list) {
	  var idx = offset < 0 ? list.length + offset : offset;
	  return _isString(list) ? list.charAt(idx) : list[idx];
	});


/***/ },
/* 338 */
/***/ function(module, exports, __webpack_require__) {

	var _arity = __webpack_require__(63);
	var _pipe = __webpack_require__(328);
	var reduce = __webpack_require__(160);
	var tail = __webpack_require__(345);


	/**
	 * Performs left-to-right function composition. The leftmost function may have
	 * any arity; the remaining functions must be unary.
	 *
	 * In some libraries this function is named `sequence`.
	 *
	 * **Note:** The result of pipe is not automatically curried.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.1.0
	 * @category Function
	 * @sig (((a, b, ..., n) -> o), (o -> p), ..., (x -> y), (y -> z)) -> ((a, b, ..., n) -> z)
	 * @param {...Function} functions
	 * @return {Function}
	 * @see R.compose
	 * @example
	 *
	 *      var f = R.pipe(Math.pow, R.negate, R.inc);
	 *
	 *      f(3, 4); // -(3^4) + 1
	 */
	module.exports = function pipe() {
	  if (arguments.length === 0) {
	    throw new Error('pipe requires at least one argument');
	  }
	  return _arity(arguments[0].length,
	                reduce(_pipe, arguments[0], tail(arguments)));
	};


/***/ },
/* 339 */
/***/ function(module, exports, __webpack_require__) {

	var _curry2 = __webpack_require__(13);
	var map = __webpack_require__(90);
	var prop = __webpack_require__(91);


	/**
	 * Returns a new list by plucking the same named property off all objects in
	 * the list supplied.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.1.0
	 * @category List
	 * @sig k -> [{k: v}] -> [v]
	 * @param {Number|String} key The key name to pluck off of each object.
	 * @param {Array} list The array to consider.
	 * @return {Array} The list of values for the given key.
	 * @see R.props
	 * @example
	 *
	 *      R.pluck('a')([{a: 1}, {a: 2}]); //=> [1, 2]
	 *      R.pluck(0)([[1, 2], [3, 4]]);   //=> [1, 3]
	 */
	module.exports = _curry2(function pluck(p, list) {
	  return map(prop(p), list);
	});


/***/ },
/* 340 */
/***/ function(module, exports, __webpack_require__) {

	var _curry3 = __webpack_require__(29);
	var equals = __webpack_require__(87);


	/**
	 * Returns `true` if the specified object property is equal, in `R.equals`
	 * terms, to the given value; `false` otherwise.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.1.0
	 * @category Relation
	 * @sig String -> a -> Object -> Boolean
	 * @param {String} name
	 * @param {*} val
	 * @param {*} obj
	 * @return {Boolean}
	 * @see R.equals, R.propSatisfies
	 * @example
	 *
	 *      var abby = {name: 'Abby', age: 7, hair: 'blond'};
	 *      var fred = {name: 'Fred', age: 12, hair: 'brown'};
	 *      var rusty = {name: 'Rusty', age: 10, hair: 'brown'};
	 *      var alois = {name: 'Alois', age: 15, disposition: 'surly'};
	 *      var kids = [abby, fred, rusty, alois];
	 *      var hasBrownHair = R.propEq('hair', 'brown');
	 *      R.filter(hasBrownHair, kids); //=> [fred, rusty]
	 */
	module.exports = _curry3(function propEq(name, val, obj) {
	  return equals(val, obj[name]);
	});


/***/ },
/* 341 */
/***/ function(module, exports, __webpack_require__) {

	var _concat = __webpack_require__(153);
	var _curry3 = __webpack_require__(29);
	var _slice = __webpack_require__(35);


	/**
	 * Removes the sub-list of `list` starting at index `start` and containing
	 * `count` elements. _Note that this is not destructive_: it returns a copy of
	 * the list with the changes.
	 * <small>No lists have been harmed in the application of this function.</small>
	 *
	 * @func
	 * @memberOf R
	 * @since v0.2.2
	 * @category List
	 * @sig Number -> Number -> [a] -> [a]
	 * @param {Number} start The position to start removing elements
	 * @param {Number} count The number of elements to remove
	 * @param {Array} list The list to remove from
	 * @return {Array} A new Array with `count` elements from `start` removed.
	 * @example
	 *
	 *      R.remove(2, 3, [1,2,3,4,5,6,7,8]); //=> [1,2,6,7,8]
	 */
	module.exports = _curry3(function remove(start, count, list) {
	  return _concat(_slice(list, 0, Math.min(start, list.length)),
	                 _slice(list, Math.min(list.length, start + count)));
	});


/***/ },
/* 342 */
/***/ function(module, exports, __webpack_require__) {

	var _curry1 = __webpack_require__(19);
	var _isString = __webpack_require__(89);
	var _slice = __webpack_require__(35);


	/**
	 * Returns a new list or string with the elements or characters in reverse
	 * order.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.1.0
	 * @category List
	 * @sig [a] -> [a]
	 * @sig String -> String
	 * @param {Array|String} list
	 * @return {Array|String}
	 * @example
	 *
	 *      R.reverse([1, 2, 3]);  //=> [3, 2, 1]
	 *      R.reverse([1, 2]);     //=> [2, 1]
	 *      R.reverse([1]);        //=> [1]
	 *      R.reverse([]);         //=> []
	 *
	 *      R.reverse('abc');      //=> 'cba'
	 *      R.reverse('ab');       //=> 'ba'
	 *      R.reverse('a');        //=> 'a'
	 *      R.reverse('');         //=> ''
	 */
	module.exports = _curry1(function reverse(list) {
	  return _isString(list) ? list.split('').reverse().join('') :
	                           _slice(list).reverse();
	});


/***/ },
/* 343 */
/***/ function(module, exports, __webpack_require__) {

	var _checkForMethod = __webpack_require__(152);
	var _curry3 = __webpack_require__(29);


	/**
	 * Returns the elements of the given list or string (or object with a `slice`
	 * method) from `fromIndex` (inclusive) to `toIndex` (exclusive).
	 *
	 * Dispatches to the `slice` method of the third argument, if present.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.1.4
	 * @category List
	 * @sig Number -> Number -> [a] -> [a]
	 * @sig Number -> Number -> String -> String
	 * @param {Number} fromIndex The start index (inclusive).
	 * @param {Number} toIndex The end index (exclusive).
	 * @param {*} list
	 * @return {*}
	 * @example
	 *
	 *      R.slice(1, 3, ['a', 'b', 'c', 'd']);        //=> ['b', 'c']
	 *      R.slice(1, Infinity, ['a', 'b', 'c', 'd']); //=> ['b', 'c', 'd']
	 *      R.slice(0, -1, ['a', 'b', 'c', 'd']);       //=> ['a', 'b', 'c']
	 *      R.slice(-3, -1, ['a', 'b', 'c', 'd']);      //=> ['b', 'c']
	 *      R.slice(0, 3, 'ramda');                     //=> 'ram'
	 */
	module.exports = _curry3(_checkForMethod('slice', function slice(fromIndex, toIndex, list) {
	  return Array.prototype.slice.call(list, fromIndex, toIndex);
	}));


/***/ },
/* 344 */
/***/ function(module, exports, __webpack_require__) {

	var _curry2 = __webpack_require__(13);
	var _slice = __webpack_require__(35);


	/**
	 * Returns a copy of the list, sorted according to the comparator function,
	 * which should accept two values at a time and return a negative number if the
	 * first value is smaller, a positive number if it's larger, and zero if they
	 * are equal. Please note that this is a **copy** of the list. It does not
	 * modify the original.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.1.0
	 * @category List
	 * @sig (a,a -> Number) -> [a] -> [a]
	 * @param {Function} comparator A sorting function :: a -> b -> Int
	 * @param {Array} list The list to sort
	 * @return {Array} a new array with its elements sorted by the comparator function.
	 * @example
	 *
	 *      var diff = function(a, b) { return a - b; };
	 *      R.sort(diff, [4,2,7,5]); //=> [2, 4, 5, 7]
	 */
	module.exports = _curry2(function sort(comparator, list) {
	  return _slice(list).sort(comparator);
	});


/***/ },
/* 345 */
/***/ function(module, exports, __webpack_require__) {

	var _checkForMethod = __webpack_require__(152);
	var slice = __webpack_require__(343);


	/**
	 * Returns all but the first element of the given list or string (or object
	 * with a `tail` method).
	 *
	 * Dispatches to the `slice` method of the first argument, if present.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.1.0
	 * @category List
	 * @sig [a] -> [a]
	 * @sig String -> String
	 * @param {*} list
	 * @return {*}
	 * @see R.head, R.init, R.last
	 * @example
	 *
	 *      R.tail([1, 2, 3]);  //=> [2, 3]
	 *      R.tail([1, 2]);     //=> [2]
	 *      R.tail([1]);        //=> []
	 *      R.tail([]);         //=> []
	 *
	 *      R.tail('abc');  //=> 'bc'
	 *      R.tail('ab');   //=> 'b'
	 *      R.tail('a');    //=> ''
	 *      R.tail('');     //=> ''
	 */
	module.exports = _checkForMethod('tail', slice(1, Infinity));


/***/ },
/* 346 */
/***/ function(module, exports, __webpack_require__) {

	var _curry1 = __webpack_require__(19);


	/**
	 * Gives a single-word string description of the (native) type of a value,
	 * returning such answers as 'Object', 'Number', 'Array', or 'Null'. Does not
	 * attempt to distinguish user Object types any further, reporting them all as
	 * 'Object'.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.8.0
	 * @category Type
	 * @sig (* -> {*}) -> String
	 * @param {*} val The value to test
	 * @return {String}
	 * @example
	 *
	 *      R.type({}); //=> "Object"
	 *      R.type(1); //=> "Number"
	 *      R.type(false); //=> "Boolean"
	 *      R.type('s'); //=> "String"
	 *      R.type(null); //=> "Null"
	 *      R.type([]); //=> "Array"
	 *      R.type(/[A-z]/); //=> "RegExp"
	 */
	module.exports = _curry1(function type(val) {
	  return val === null      ? 'Null'      :
	         val === undefined ? 'Undefined' :
	         Object.prototype.toString.call(val).slice(8, -1);
	});


/***/ },
/* 347 */
/***/ function(module, exports, __webpack_require__) {

	var _concat = __webpack_require__(153);
	var _curry3 = __webpack_require__(29);
	var uniqWith = __webpack_require__(348);


	/**
	 * Combines two lists into a set (i.e. no duplicates) composed of the elements
	 * of each list. Duplication is determined according to the value returned by
	 * applying the supplied predicate to two list elements.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.1.0
	 * @category Relation
	 * @sig (a -> a -> Boolean) -> [*] -> [*] -> [*]
	 * @param {Function} pred A predicate used to test whether two items are equal.
	 * @param {Array} list1 The first list.
	 * @param {Array} list2 The second list.
	 * @return {Array} The first and second lists concatenated, with
	 *         duplicates removed.
	 * @see R.union
	 * @example
	 *
	 *      var l1 = [{a: 1}, {a: 2}];
	 *      var l2 = [{a: 1}, {a: 4}];
	 *      R.unionWith(R.eqBy(R.prop('a')), l1, l2); //=> [{a: 1}, {a: 2}, {a: 4}]
	 */
	module.exports = _curry3(function unionWith(pred, list1, list2) {
	  return uniqWith(pred, _concat(list1, list2));
	});


/***/ },
/* 348 */
/***/ function(module, exports, __webpack_require__) {

	var _containsWith = __webpack_require__(319);
	var _curry2 = __webpack_require__(13);


	/**
	 * Returns a new list containing only one copy of each element in the original
	 * list, based upon the value returned by applying the supplied predicate to
	 * two list elements. Prefers the first item if two items compare equal based
	 * on the predicate.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.2.0
	 * @category List
	 * @sig (a, a -> Boolean) -> [a] -> [a]
	 * @param {Function} pred A predicate used to test whether two items are equal.
	 * @param {Array} list The array to consider.
	 * @return {Array} The list of unique items.
	 * @example
	 *
	 *      var strEq = R.eqBy(String);
	 *      R.uniqWith(strEq)([1, '1', 2, 1]); //=> [1, 2]
	 *      R.uniqWith(strEq)([{}, {}]);       //=> [{}]
	 *      R.uniqWith(strEq)([1, '1', 1]);    //=> [1]
	 *      R.uniqWith(strEq)(['1', 1, 1]);    //=> ['1']
	 */
	module.exports = _curry2(function uniqWith(pred, list) {
	  var idx = 0;
	  var len = list.length;
	  var result = [];
	  var item;
	  while (idx < len) {
	    item = list[idx];
	    if (!_containsWith(pred, item, result)) {
	      result[result.length] = item;
	    }
	    idx += 1;
	  }
	  return result;
	});


/***/ },
/* 349 */
/***/ function(module, exports, __webpack_require__) {

	var _curry3 = __webpack_require__(29);


	/**
	 * Tests the final argument by passing it to the given predicate function. If
	 * the predicate is not satisfied, the function will return the result of
	 * calling the `whenFalseFn` function with the same argument. If the predicate
	 * is satisfied, the argument is returned as is.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.18.0
	 * @category Logic
	 * @sig (a -> Boolean) -> (a -> a) -> a -> a
	 * @param {Function} pred        A predicate function
	 * @param {Function} whenFalseFn A function to invoke when the `pred` evaluates
	 *                               to a falsy value.
	 * @param {*}        x           An object to test with the `pred` function and
	 *                               pass to `whenFalseFn` if necessary.
	 * @return {*} Either `x` or the result of applying `x` to `whenFalseFn`.
	 * @see R.ifElse, R.when
	 * @example
	 *
	 *      // coerceArray :: (a|[a]) -> [a]
	 *      var coerceArray = R.unless(R.isArrayLike, R.of);
	 *      coerceArray([1, 2, 3]); //=> [1, 2, 3]
	 *      coerceArray(1);         //=> [1]
	 */
	module.exports = _curry3(function unless(pred, whenFalseFn, x) {
	  return pred(x) ? x : whenFalseFn(x);
	});


/***/ },
/* 350 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = __webpack_require__(364);


/***/ },
/* 351 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var ARIADOMPropertyConfig = {
	  Properties: {
	    // Global States and Properties
	    'aria-current': 0, // state
	    'aria-details': 0,
	    'aria-disabled': 0, // state
	    'aria-hidden': 0, // state
	    'aria-invalid': 0, // state
	    'aria-keyshortcuts': 0,
	    'aria-label': 0,
	    'aria-roledescription': 0,
	    // Widget Attributes
	    'aria-autocomplete': 0,
	    'aria-checked': 0,
	    'aria-expanded': 0,
	    'aria-haspopup': 0,
	    'aria-level': 0,
	    'aria-modal': 0,
	    'aria-multiline': 0,
	    'aria-multiselectable': 0,
	    'aria-orientation': 0,
	    'aria-placeholder': 0,
	    'aria-pressed': 0,
	    'aria-readonly': 0,
	    'aria-required': 0,
	    'aria-selected': 0,
	    'aria-sort': 0,
	    'aria-valuemax': 0,
	    'aria-valuemin': 0,
	    'aria-valuenow': 0,
	    'aria-valuetext': 0,
	    // Live Region Attributes
	    'aria-atomic': 0,
	    'aria-busy': 0,
	    'aria-live': 0,
	    'aria-relevant': 0,
	    // Drag-and-Drop Attributes
	    'aria-dropeffect': 0,
	    'aria-grabbed': 0,
	    // Relationship Attributes
	    'aria-activedescendant': 0,
	    'aria-colcount': 0,
	    'aria-colindex': 0,
	    'aria-colspan': 0,
	    'aria-controls': 0,
	    'aria-describedby': 0,
	    'aria-errormessage': 0,
	    'aria-flowto': 0,
	    'aria-labelledby': 0,
	    'aria-owns': 0,
	    'aria-posinset': 0,
	    'aria-rowcount': 0,
	    'aria-rowindex': 0,
	    'aria-rowspan': 0,
	    'aria-setsize': 0
	  },
	  DOMAttributeNames: {},
	  DOMPropertyNames: {}
	};

	module.exports = ARIADOMPropertyConfig;

/***/ },
/* 352 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var ReactDOMComponentTree = __webpack_require__(11);

	var focusNode = __webpack_require__(147);

	var AutoFocusUtils = {
	  focusDOMComponent: function () {
	    focusNode(ReactDOMComponentTree.getNodeFromInstance(this));
	  }
	};

	module.exports = AutoFocusUtils;

/***/ },
/* 353 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var EventPropagators = __webpack_require__(50);
	var ExecutionEnvironment = __webpack_require__(15);
	var FallbackCompositionState = __webpack_require__(359);
	var SyntheticCompositionEvent = __webpack_require__(396);
	var SyntheticInputEvent = __webpack_require__(399);

	var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space
	var START_KEYCODE = 229;

	var canUseCompositionEvent = ExecutionEnvironment.canUseDOM && 'CompositionEvent' in window;

	var documentMode = null;
	if (ExecutionEnvironment.canUseDOM && 'documentMode' in document) {
	  documentMode = document.documentMode;
	}

	// Webkit offers a very useful `textInput` event that can be used to
	// directly represent `beforeInput`. The IE `textinput` event is not as
	// useful, so we don't use it.
	var canUseTextInputEvent = ExecutionEnvironment.canUseDOM && 'TextEvent' in window && !documentMode && !isPresto();

	// In IE9+, we have access to composition events, but the data supplied
	// by the native compositionend event may be incorrect. Japanese ideographic
	// spaces, for instance (\u3000) are not recorded correctly.
	var useFallbackCompositionData = ExecutionEnvironment.canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);

	/**
	 * Opera <= 12 includes TextEvent in window, but does not fire
	 * text input events. Rely on keypress instead.
	 */
	function isPresto() {
	  var opera = window.opera;
	  return typeof opera === 'object' && typeof opera.version === 'function' && parseInt(opera.version(), 10) <= 12;
	}

	var SPACEBAR_CODE = 32;
	var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);

	// Events and their corresponding property names.
	var eventTypes = {
	  beforeInput: {
	    phasedRegistrationNames: {
	      bubbled: 'onBeforeInput',
	      captured: 'onBeforeInputCapture'
	    },
	    dependencies: ['topCompositionEnd', 'topKeyPress', 'topTextInput', 'topPaste']
	  },
	  compositionEnd: {
	    phasedRegistrationNames: {
	      bubbled: 'onCompositionEnd',
	      captured: 'onCompositionEndCapture'
	    },
	    dependencies: ['topBlur', 'topCompositionEnd', 'topKeyDown', 'topKeyPress', 'topKeyUp', 'topMouseDown']
	  },
	  compositionStart: {
	    phasedRegistrationNames: {
	      bubbled: 'onCompositionStart',
	      captured: 'onCompositionStartCapture'
	    },
	    dependencies: ['topBlur', 'topCompositionStart', 'topKeyDown', 'topKeyPress', 'topKeyUp', 'topMouseDown']
	  },
	  compositionUpdate: {
	    phasedRegistrationNames: {
	      bubbled: 'onCompositionUpdate',
	      captured: 'onCompositionUpdateCapture'
	    },
	    dependencies: ['topBlur', 'topCompositionUpdate', 'topKeyDown', 'topKeyPress', 'topKeyUp', 'topMouseDown']
	  }
	};

	// Track whether we've ever handled a keypress on the space key.
	var hasSpaceKeypress = false;

	/**
	 * Return whether a native keypress event is assumed to be a command.
	 * This is required because Firefox fires `keypress` events for key commands
	 * (cut, copy, select-all, etc.) even though no character is inserted.
	 */
	function isKeypressCommand(nativeEvent) {
	  return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) &&
	  // ctrlKey && altKey is equivalent to AltGr, and is not a command.
	  !(nativeEvent.ctrlKey && nativeEvent.altKey);
	}

	/**
	 * Translate native top level events into event types.
	 *
	 * @param {string} topLevelType
	 * @return {object}
	 */
	function getCompositionEventType(topLevelType) {
	  switch (topLevelType) {
	    case 'topCompositionStart':
	      return eventTypes.compositionStart;
	    case 'topCompositionEnd':
	      return eventTypes.compositionEnd;
	    case 'topCompositionUpdate':
	      return eventTypes.compositionUpdate;
	  }
	}

	/**
	 * Does our fallback best-guess model think this event signifies that
	 * composition has begun?
	 *
	 * @param {string} topLevelType
	 * @param {object} nativeEvent
	 * @return {boolean}
	 */
	function isFallbackCompositionStart(topLevelType, nativeEvent) {
	  return topLevelType === 'topKeyDown' && nativeEvent.keyCode === START_KEYCODE;
	}

	/**
	 * Does our fallback mode think that this event is the end of composition?
	 *
	 * @param {string} topLevelType
	 * @param {object} nativeEvent
	 * @return {boolean}
	 */
	function isFallbackCompositionEnd(topLevelType, nativeEvent) {
	  switch (topLevelType) {
	    case 'topKeyUp':
	      // Command keys insert or clear IME input.
	      return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
	    case 'topKeyDown':
	      // Expect IME keyCode on each keydown. If we get any other
	      // code we must have exited earlier.
	      return nativeEvent.keyCode !== START_KEYCODE;
	    case 'topKeyPress':
	    case 'topMouseDown':
	    case 'topBlur':
	      // Events are not possible without cancelling IME.
	      return true;
	    default:
	      return false;
	  }
	}

	/**
	 * Google Input Tools provides composition data via a CustomEvent,
	 * with the `data` property populated in the `detail` object. If this
	 * is available on the event object, use it. If not, this is a plain
	 * composition event and we have nothing special to extract.
	 *
	 * @param {object} nativeEvent
	 * @return {?string}
	 */
	function getDataFromCustomEvent(nativeEvent) {
	  var detail = nativeEvent.detail;
	  if (typeof detail === 'object' && 'data' in detail) {
	    return detail.data;
	  }
	  return null;
	}

	// Track the current IME composition fallback object, if any.
	var currentComposition = null;

	/**
	 * @return {?object} A SyntheticCompositionEvent.
	 */
	function extractCompositionEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	  var eventType;
	  var fallbackData;

	  if (canUseCompositionEvent) {
	    eventType = getCompositionEventType(topLevelType);
	  } else if (!currentComposition) {
	    if (isFallbackCompositionStart(topLevelType, nativeEvent)) {
	      eventType = eventTypes.compositionStart;
	    }
	  } else if (isFallbackCompositionEnd(topLevelType, nativeEvent)) {
	    eventType = eventTypes.compositionEnd;
	  }

	  if (!eventType) {
	    return null;
	  }

	  if (useFallbackCompositionData) {
	    // The current composition is stored statically and must not be
	    // overwritten while composition continues.
	    if (!currentComposition && eventType === eventTypes.compositionStart) {
	      currentComposition = FallbackCompositionState.getPooled(nativeEventTarget);
	    } else if (eventType === eventTypes.compositionEnd) {
	      if (currentComposition) {
	        fallbackData = currentComposition.getData();
	      }
	    }
	  }

	  var event = SyntheticCompositionEvent.getPooled(eventType, targetInst, nativeEvent, nativeEventTarget);

	  if (fallbackData) {
	    // Inject data generated from fallback path into the synthetic event.
	    // This matches the property of native CompositionEventInterface.
	    event.data = fallbackData;
	  } else {
	    var customData = getDataFromCustomEvent(nativeEvent);
	    if (customData !== null) {
	      event.data = customData;
	    }
	  }

	  EventPropagators.accumulateTwoPhaseDispatches(event);
	  return event;
	}

	/**
	 * @param {string} topLevelType Record from `EventConstants`.
	 * @param {object} nativeEvent Native browser event.
	 * @return {?string} The string corresponding to this `beforeInput` event.
	 */
	function getNativeBeforeInputChars(topLevelType, nativeEvent) {
	  switch (topLevelType) {
	    case 'topCompositionEnd':
	      return getDataFromCustomEvent(nativeEvent);
	    case 'topKeyPress':
	      /**
	       * If native `textInput` events are available, our goal is to make
	       * use of them. However, there is a special case: the spacebar key.
	       * In Webkit, preventing default on a spacebar `textInput` event
	       * cancels character insertion, but it *also* causes the browser
	       * to fall back to its default spacebar behavior of scrolling the
	       * page.
	       *
	       * Tracking at:
	       * https://code.google.com/p/chromium/issues/detail?id=355103
	       *
	       * To avoid this issue, use the keypress event as if no `textInput`
	       * event is available.
	       */
	      var which = nativeEvent.which;
	      if (which !== SPACEBAR_CODE) {
	        return null;
	      }

	      hasSpaceKeypress = true;
	      return SPACEBAR_CHAR;

	    case 'topTextInput':
	      // Record the characters to be added to the DOM.
	      var chars = nativeEvent.data;

	      // If it's a spacebar character, assume that we have already handled
	      // it at the keypress level and bail immediately. Android Chrome
	      // doesn't give us keycodes, so we need to blacklist it.
	      if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
	        return null;
	      }

	      return chars;

	    default:
	      // For other native event types, do nothing.
	      return null;
	  }
	}

	/**
	 * For browsers that do not provide the `textInput` event, extract the
	 * appropriate string to use for SyntheticInputEvent.
	 *
	 * @param {string} topLevelType Record from `EventConstants`.
	 * @param {object} nativeEvent Native browser event.
	 * @return {?string} The fallback string for this `beforeInput` event.
	 */
	function getFallbackBeforeInputChars(topLevelType, nativeEvent) {
	  // If we are currently composing (IME) and using a fallback to do so,
	  // try to extract the composed characters from the fallback object.
	  // If composition event is available, we extract a string only at
	  // compositionevent, otherwise extract it at fallback events.
	  if (currentComposition) {
	    if (topLevelType === 'topCompositionEnd' || !canUseCompositionEvent && isFallbackCompositionEnd(topLevelType, nativeEvent)) {
	      var chars = currentComposition.getData();
	      FallbackCompositionState.release(currentComposition);
	      currentComposition = null;
	      return chars;
	    }
	    return null;
	  }

	  switch (topLevelType) {
	    case 'topPaste':
	      // If a paste event occurs after a keypress, throw out the input
	      // chars. Paste events should not lead to BeforeInput events.
	      return null;
	    case 'topKeyPress':
	      /**
	       * As of v27, Firefox may fire keypress events even when no character
	       * will be inserted. A few possibilities:
	       *
	       * - `which` is `0`. Arrow keys, Esc key, etc.
	       *
	       * - `which` is the pressed key code, but no char is available.
	       *   Ex: 'AltGr + d` in Polish. There is no modified character for
	       *   this key combination and no character is inserted into the
	       *   document, but FF fires the keypress for char code `100` anyway.
	       *   No `input` event will occur.
	       *
	       * - `which` is the pressed key code, but a command combination is
	       *   being used. Ex: `Cmd+C`. No character is inserted, and no
	       *   `input` event will occur.
	       */
	      if (nativeEvent.which && !isKeypressCommand(nativeEvent)) {
	        return String.fromCharCode(nativeEvent.which);
	      }
	      return null;
	    case 'topCompositionEnd':
	      return useFallbackCompositionData ? null : nativeEvent.data;
	    default:
	      return null;
	  }
	}

	/**
	 * Extract a SyntheticInputEvent for `beforeInput`, based on either native
	 * `textInput` or fallback behavior.
	 *
	 * @return {?object} A SyntheticInputEvent.
	 */
	function extractBeforeInputEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	  var chars;

	  if (canUseTextInputEvent) {
	    chars = getNativeBeforeInputChars(topLevelType, nativeEvent);
	  } else {
	    chars = getFallbackBeforeInputChars(topLevelType, nativeEvent);
	  }

	  // If no characters are being inserted, no BeforeInput event should
	  // be fired.
	  if (!chars) {
	    return null;
	  }

	  var event = SyntheticInputEvent.getPooled(eventTypes.beforeInput, targetInst, nativeEvent, nativeEventTarget);

	  event.data = chars;
	  EventPropagators.accumulateTwoPhaseDispatches(event);
	  return event;
	}

	/**
	 * Create an `onBeforeInput` event to match
	 * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.
	 *
	 * This event plugin is based on the native `textInput` event
	 * available in Chrome, Safari, Opera, and IE. This event fires after
	 * `onKeyPress` and `onCompositionEnd`, but before `onInput`.
	 *
	 * `beforeInput` is spec'd but not implemented in any browsers, and
	 * the `input` event does not provide any useful information about what has
	 * actually been added, contrary to the spec. Thus, `textInput` is the best
	 * available event to identify the characters that have actually been inserted
	 * into the target node.
	 *
	 * This plugin is also responsible for emitting `composition` events, thus
	 * allowing us to share composition fallback code for both `beforeInput` and
	 * `composition` event types.
	 */
	var BeforeInputEventPlugin = {

	  eventTypes: eventTypes,

	  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	    return [extractCompositionEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget), extractBeforeInputEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget)];
	  }
	};

	module.exports = BeforeInputEventPlugin;

/***/ },
/* 354 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var CSSProperty = __webpack_require__(162);
	var ExecutionEnvironment = __webpack_require__(15);
	var ReactInstrumentation = __webpack_require__(20);

	var camelizeStyleName = __webpack_require__(293);
	var dangerousStyleValue = __webpack_require__(405);
	var hyphenateStyleName = __webpack_require__(300);
	var memoizeStringOnly = __webpack_require__(303);
	var warning = __webpack_require__(4);

	var processStyleName = memoizeStringOnly(function (styleName) {
	  return hyphenateStyleName(styleName);
	});

	var hasShorthandPropertyBug = false;
	var styleFloatAccessor = 'cssFloat';
	if (ExecutionEnvironment.canUseDOM) {
	  var tempStyle = document.createElement('div').style;
	  try {
	    // IE8 throws "Invalid argument." if resetting shorthand style properties.
	    tempStyle.font = '';
	  } catch (e) {
	    hasShorthandPropertyBug = true;
	  }
	  // IE8 only supports accessing cssFloat (standard) as styleFloat
	  if (document.documentElement.style.cssFloat === undefined) {
	    styleFloatAccessor = 'styleFloat';
	  }
	}

	if (false) {
	  // 'msTransform' is correct, but the other prefixes should be capitalized
	  var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;

	  // style values shouldn't contain a semicolon
	  var badStyleValueWithSemicolonPattern = /;\s*$/;

	  var warnedStyleNames = {};
	  var warnedStyleValues = {};
	  var warnedForNaNValue = false;

	  var warnHyphenatedStyleName = function (name, owner) {
	    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
	      return;
	    }

	    warnedStyleNames[name] = true;
	    process.env.NODE_ENV !== 'production' ? warning(false, 'Unsupported style property %s. Did you mean %s?%s', name, camelizeStyleName(name), checkRenderMessage(owner)) : void 0;
	  };

	  var warnBadVendoredStyleName = function (name, owner) {
	    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
	      return;
	    }

	    warnedStyleNames[name] = true;
	    process.env.NODE_ENV !== 'production' ? warning(false, 'Unsupported vendor-prefixed style property %s. Did you mean %s?%s', name, name.charAt(0).toUpperCase() + name.slice(1), checkRenderMessage(owner)) : void 0;
	  };

	  var warnStyleValueWithSemicolon = function (name, value, owner) {
	    if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
	      return;
	    }

	    warnedStyleValues[value] = true;
	    process.env.NODE_ENV !== 'production' ? warning(false, 'Style property values shouldn\'t contain a semicolon.%s ' + 'Try "%s: %s" instead.', checkRenderMessage(owner), name, value.replace(badStyleValueWithSemicolonPattern, '')) : void 0;
	  };

	  var warnStyleValueIsNaN = function (name, value, owner) {
	    if (warnedForNaNValue) {
	      return;
	    }

	    warnedForNaNValue = true;
	    process.env.NODE_ENV !== 'production' ? warning(false, '`NaN` is an invalid value for the `%s` css style property.%s', name, checkRenderMessage(owner)) : void 0;
	  };

	  var checkRenderMessage = function (owner) {
	    if (owner) {
	      var name = owner.getName();
	      if (name) {
	        return ' Check the render method of `' + name + '`.';
	      }
	    }
	    return '';
	  };

	  /**
	   * @param {string} name
	   * @param {*} value
	   * @param {ReactDOMComponent} component
	   */
	  var warnValidStyle = function (name, value, component) {
	    var owner;
	    if (component) {
	      owner = component._currentElement._owner;
	    }
	    if (name.indexOf('-') > -1) {
	      warnHyphenatedStyleName(name, owner);
	    } else if (badVendoredStyleNamePattern.test(name)) {
	      warnBadVendoredStyleName(name, owner);
	    } else if (badStyleValueWithSemicolonPattern.test(value)) {
	      warnStyleValueWithSemicolon(name, value, owner);
	    }

	    if (typeof value === 'number' && isNaN(value)) {
	      warnStyleValueIsNaN(name, value, owner);
	    }
	  };
	}

	/**
	 * Operations for dealing with CSS properties.
	 */
	var CSSPropertyOperations = {

	  /**
	   * Serializes a mapping of style properties for use as inline styles:
	   *
	   *   > createMarkupForStyles({width: '200px', height: 0})
	   *   "width:200px;height:0;"
	   *
	   * Undefined values are ignored so that declarative programming is easier.
	   * The result should be HTML-escaped before insertion into the DOM.
	   *
	   * @param {object} styles
	   * @param {ReactDOMComponent} component
	   * @return {?string}
	   */
	  createMarkupForStyles: function (styles, component) {
	    var serialized = '';
	    for (var styleName in styles) {
	      if (!styles.hasOwnProperty(styleName)) {
	        continue;
	      }
	      var styleValue = styles[styleName];
	      if (false) {
	        warnValidStyle(styleName, styleValue, component);
	      }
	      if (styleValue != null) {
	        serialized += processStyleName(styleName) + ':';
	        serialized += dangerousStyleValue(styleName, styleValue, component) + ';';
	      }
	    }
	    return serialized || null;
	  },

	  /**
	   * Sets the value for multiple styles on a node.  If a value is specified as
	   * '' (empty string), the corresponding style property will be unset.
	   *
	   * @param {DOMElement} node
	   * @param {object} styles
	   * @param {ReactDOMComponent} component
	   */
	  setValueForStyles: function (node, styles, component) {
	    if (false) {
	      ReactInstrumentation.debugTool.onHostOperation({
	        instanceID: component._debugID,
	        type: 'update styles',
	        payload: styles
	      });
	    }

	    var style = node.style;
	    for (var styleName in styles) {
	      if (!styles.hasOwnProperty(styleName)) {
	        continue;
	      }
	      if (false) {
	        warnValidStyle(styleName, styles[styleName], component);
	      }
	      var styleValue = dangerousStyleValue(styleName, styles[styleName], component);
	      if (styleName === 'float' || styleName === 'cssFloat') {
	        styleName = styleFloatAccessor;
	      }
	      if (styleValue) {
	        style[styleName] = styleValue;
	      } else {
	        var expansion = hasShorthandPropertyBug && CSSProperty.shorthandPropertyExpansions[styleName];
	        if (expansion) {
	          // Shorthand property that IE8 won't like unsetting, so unset each
	          // component to placate it
	          for (var individualStyleName in expansion) {
	            style[individualStyleName] = '';
	          }
	        } else {
	          style[styleName] = '';
	        }
	      }
	    }
	  }

	};

	module.exports = CSSPropertyOperations;

/***/ },
/* 355 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var EventPluginHub = __webpack_require__(49);
	var EventPropagators = __webpack_require__(50);
	var ExecutionEnvironment = __webpack_require__(15);
	var ReactDOMComponentTree = __webpack_require__(11);
	var ReactUpdates = __webpack_require__(22);
	var SyntheticEvent = __webpack_require__(26);

	var getEventTarget = __webpack_require__(104);
	var isEventSupported = __webpack_require__(105);
	var isTextInputElement = __webpack_require__(179);

	var eventTypes = {
	  change: {
	    phasedRegistrationNames: {
	      bubbled: 'onChange',
	      captured: 'onChangeCapture'
	    },
	    dependencies: ['topBlur', 'topChange', 'topClick', 'topFocus', 'topInput', 'topKeyDown', 'topKeyUp', 'topSelectionChange']
	  }
	};

	/**
	 * For IE shims
	 */
	var activeElement = null;
	var activeElementInst = null;
	var activeElementValue = null;
	var activeElementValueProp = null;

	/**
	 * SECTION: handle `change` event
	 */
	function shouldUseChangeEvent(elem) {
	  var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
	  return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';
	}

	var doesChangeEventBubble = false;
	if (ExecutionEnvironment.canUseDOM) {
	  // See `handleChange` comment below
	  doesChangeEventBubble = isEventSupported('change') && (!document.documentMode || document.documentMode > 8);
	}

	function manualDispatchChangeEvent(nativeEvent) {
	  var event = SyntheticEvent.getPooled(eventTypes.change, activeElementInst, nativeEvent, getEventTarget(nativeEvent));
	  EventPropagators.accumulateTwoPhaseDispatches(event);

	  // If change and propertychange bubbled, we'd just bind to it like all the
	  // other events and have it go through ReactBrowserEventEmitter. Since it
	  // doesn't, we manually listen for the events and so we have to enqueue and
	  // process the abstract event manually.
	  //
	  // Batching is necessary here in order to ensure that all event handlers run
	  // before the next rerender (including event handlers attached to ancestor
	  // elements instead of directly on the input). Without this, controlled
	  // components don't work properly in conjunction with event bubbling because
	  // the component is rerendered and the value reverted before all the event
	  // handlers can run. See https://github.com/facebook/react/issues/708.
	  ReactUpdates.batchedUpdates(runEventInBatch, event);
	}

	function runEventInBatch(event) {
	  EventPluginHub.enqueueEvents(event);
	  EventPluginHub.processEventQueue(false);
	}

	function startWatchingForChangeEventIE8(target, targetInst) {
	  activeElement = target;
	  activeElementInst = targetInst;
	  activeElement.attachEvent('onchange', manualDispatchChangeEvent);
	}

	function stopWatchingForChangeEventIE8() {
	  if (!activeElement) {
	    return;
	  }
	  activeElement.detachEvent('onchange', manualDispatchChangeEvent);
	  activeElement = null;
	  activeElementInst = null;
	}

	function getTargetInstForChangeEvent(topLevelType, targetInst) {
	  if (topLevelType === 'topChange') {
	    return targetInst;
	  }
	}
	function handleEventsForChangeEventIE8(topLevelType, target, targetInst) {
	  if (topLevelType === 'topFocus') {
	    // stopWatching() should be a noop here but we call it just in case we
	    // missed a blur event somehow.
	    stopWatchingForChangeEventIE8();
	    startWatchingForChangeEventIE8(target, targetInst);
	  } else if (topLevelType === 'topBlur') {
	    stopWatchingForChangeEventIE8();
	  }
	}

	/**
	 * SECTION: handle `input` event
	 */
	var isInputEventSupported = false;
	if (ExecutionEnvironment.canUseDOM) {
	  // IE9 claims to support the input event but fails to trigger it when
	  // deleting text, so we ignore its input events.
	  // IE10+ fire input events to often, such when a placeholder
	  // changes or when an input with a placeholder is focused.
	  isInputEventSupported = isEventSupported('input') && (!document.documentMode || document.documentMode > 11);
	}

	/**
	 * (For IE <=11) Replacement getter/setter for the `value` property that gets
	 * set on the active element.
	 */
	var newValueProp = {
	  get: function () {
	    return activeElementValueProp.get.call(this);
	  },
	  set: function (val) {
	    // Cast to a string so we can do equality checks.
	    activeElementValue = '' + val;
	    activeElementValueProp.set.call(this, val);
	  }
	};

	/**
	 * (For IE <=11) Starts tracking propertychange events on the passed-in element
	 * and override the value property so that we can distinguish user events from
	 * value changes in JS.
	 */
	function startWatchingForValueChange(target, targetInst) {
	  activeElement = target;
	  activeElementInst = targetInst;
	  activeElementValue = target.value;
	  activeElementValueProp = Object.getOwnPropertyDescriptor(target.constructor.prototype, 'value');

	  // Not guarded in a canDefineProperty check: IE8 supports defineProperty only
	  // on DOM elements
	  Object.defineProperty(activeElement, 'value', newValueProp);
	  if (activeElement.attachEvent) {
	    activeElement.attachEvent('onpropertychange', handlePropertyChange);
	  } else {
	    activeElement.addEventListener('propertychange', handlePropertyChange, false);
	  }
	}

	/**
	 * (For IE <=11) Removes the event listeners from the currently-tracked element,
	 * if any exists.
	 */
	function stopWatchingForValueChange() {
	  if (!activeElement) {
	    return;
	  }

	  // delete restores the original property definition
	  delete activeElement.value;

	  if (activeElement.detachEvent) {
	    activeElement.detachEvent('onpropertychange', handlePropertyChange);
	  } else {
	    activeElement.removeEventListener('propertychange', handlePropertyChange, false);
	  }

	  activeElement = null;
	  activeElementInst = null;
	  activeElementValue = null;
	  activeElementValueProp = null;
	}

	/**
	 * (For IE <=11) Handles a propertychange event, sending a `change` event if
	 * the value of the active element has changed.
	 */
	function handlePropertyChange(nativeEvent) {
	  if (nativeEvent.propertyName !== 'value') {
	    return;
	  }
	  var value = nativeEvent.srcElement.value;
	  if (value === activeElementValue) {
	    return;
	  }
	  activeElementValue = value;

	  manualDispatchChangeEvent(nativeEvent);
	}

	/**
	 * If a `change` event should be fired, returns the target's ID.
	 */
	function getTargetInstForInputEvent(topLevelType, targetInst) {
	  if (topLevelType === 'topInput') {
	    // In modern browsers (i.e., not IE8 or IE9), the input event is exactly
	    // what we want so fall through here and trigger an abstract event
	    return targetInst;
	  }
	}

	function handleEventsForInputEventIE(topLevelType, target, targetInst) {
	  if (topLevelType === 'topFocus') {
	    // In IE8, we can capture almost all .value changes by adding a
	    // propertychange handler and looking for events with propertyName
	    // equal to 'value'
	    // In IE9-11, propertychange fires for most input events but is buggy and
	    // doesn't fire when text is deleted, but conveniently, selectionchange
	    // appears to fire in all of the remaining cases so we catch those and
	    // forward the event if the value has changed
	    // In either case, we don't want to call the event handler if the value
	    // is changed from JS so we redefine a setter for `.value` that updates
	    // our activeElementValue variable, allowing us to ignore those changes
	    //
	    // stopWatching() should be a noop here but we call it just in case we
	    // missed a blur event somehow.
	    stopWatchingForValueChange();
	    startWatchingForValueChange(target, targetInst);
	  } else if (topLevelType === 'topBlur') {
	    stopWatchingForValueChange();
	  }
	}

	// For IE8 and IE9.
	function getTargetInstForInputEventIE(topLevelType, targetInst) {
	  if (topLevelType === 'topSelectionChange' || topLevelType === 'topKeyUp' || topLevelType === 'topKeyDown') {
	    // On the selectionchange event, the target is just document which isn't
	    // helpful for us so just check activeElement instead.
	    //
	    // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire
	    // propertychange on the first input event after setting `value` from a
	    // script and fires only keydown, keypress, keyup. Catching keyup usually
	    // gets it and catching keydown lets us fire an event for the first
	    // keystroke if user does a key repeat (it'll be a little delayed: right
	    // before the second keystroke). Other input methods (e.g., paste) seem to
	    // fire selectionchange normally.
	    if (activeElement && activeElement.value !== activeElementValue) {
	      activeElementValue = activeElement.value;
	      return activeElementInst;
	    }
	  }
	}

	/**
	 * SECTION: handle `click` event
	 */
	function shouldUseClickEvent(elem) {
	  // Use the `click` event to detect changes to checkbox and radio inputs.
	  // This approach works across all browsers, whereas `change` does not fire
	  // until `blur` in IE8.
	  return elem.nodeName && elem.nodeName.toLowerCase() === 'input' && (elem.type === 'checkbox' || elem.type === 'radio');
	}

	function getTargetInstForClickEvent(topLevelType, targetInst) {
	  if (topLevelType === 'topClick') {
	    return targetInst;
	  }
	}

	function handleControlledInputBlur(inst, node) {
	  // TODO: In IE, inst is occasionally null. Why?
	  if (inst == null) {
	    return;
	  }

	  // Fiber and ReactDOM keep wrapper state in separate places
	  var state = inst._wrapperState || node._wrapperState;

	  if (!state || !state.controlled || node.type !== 'number') {
	    return;
	  }

	  // If controlled, assign the value attribute to the current value on blur
	  var value = '' + node.value;
	  if (node.getAttribute('value') !== value) {
	    node.setAttribute('value', value);
	  }
	}

	/**
	 * This plugin creates an `onChange` event that normalizes change events
	 * across form elements. This event fires at a time when it's possible to
	 * change the element's value without seeing a flicker.
	 *
	 * Supported elements are:
	 * - input (see `isTextInputElement`)
	 * - textarea
	 * - select
	 */
	var ChangeEventPlugin = {

	  eventTypes: eventTypes,

	  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	    var targetNode = targetInst ? ReactDOMComponentTree.getNodeFromInstance(targetInst) : window;

	    var getTargetInstFunc, handleEventFunc;
	    if (shouldUseChangeEvent(targetNode)) {
	      if (doesChangeEventBubble) {
	        getTargetInstFunc = getTargetInstForChangeEvent;
	      } else {
	        handleEventFunc = handleEventsForChangeEventIE8;
	      }
	    } else if (isTextInputElement(targetNode)) {
	      if (isInputEventSupported) {
	        getTargetInstFunc = getTargetInstForInputEvent;
	      } else {
	        getTargetInstFunc = getTargetInstForInputEventIE;
	        handleEventFunc = handleEventsForInputEventIE;
	      }
	    } else if (shouldUseClickEvent(targetNode)) {
	      getTargetInstFunc = getTargetInstForClickEvent;
	    }

	    if (getTargetInstFunc) {
	      var inst = getTargetInstFunc(topLevelType, targetInst);
	      if (inst) {
	        var event = SyntheticEvent.getPooled(eventTypes.change, inst, nativeEvent, nativeEventTarget);
	        event.type = 'change';
	        EventPropagators.accumulateTwoPhaseDispatches(event);
	        return event;
	      }
	    }

	    if (handleEventFunc) {
	      handleEventFunc(topLevelType, targetNode, targetInst);
	    }

	    // When blurring, set the value attribute for number inputs
	    if (topLevelType === 'topBlur') {
	      handleControlledInputBlur(targetInst, targetNode);
	    }
	  }

	};

	module.exports = ChangeEventPlugin;

/***/ },
/* 356 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(5);

	var DOMLazyTree = __webpack_require__(36);
	var ExecutionEnvironment = __webpack_require__(15);

	var createNodesFromMarkup = __webpack_require__(296);
	var emptyFunction = __webpack_require__(18);
	var invariant = __webpack_require__(3);

	var Danger = {

	  /**
	   * Replaces a node with a string of markup at its current position within its
	   * parent. The markup must render into a single root node.
	   *
	   * @param {DOMElement} oldChild Child node to replace.
	   * @param {string} markup Markup to render in place of the child node.
	   * @internal
	   */
	  dangerouslyReplaceNodeWithMarkup: function (oldChild, markup) {
	    !ExecutionEnvironment.canUseDOM ?  false ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Cannot render markup in a worker thread. Make sure `window` and `document` are available globally before requiring React when unit testing or use ReactDOMServer.renderToString() for server rendering.') : _prodInvariant('56') : void 0;
	    !markup ?  false ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Missing markup.') : _prodInvariant('57') : void 0;
	    !(oldChild.nodeName !== 'HTML') ?  false ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Cannot replace markup of the <html> node. This is because browser quirks make this unreliable and/or slow. If you want to render to the root you must use server rendering. See ReactDOMServer.renderToString().') : _prodInvariant('58') : void 0;

	    if (typeof markup === 'string') {
	      var newChild = createNodesFromMarkup(markup, emptyFunction)[0];
	      oldChild.parentNode.replaceChild(newChild, oldChild);
	    } else {
	      DOMLazyTree.replaceChildWithTree(oldChild, markup);
	    }
	  }

	};

	module.exports = Danger;

/***/ },
/* 357 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	/**
	 * Module that is injectable into `EventPluginHub`, that specifies a
	 * deterministic ordering of `EventPlugin`s. A convenient way to reason about
	 * plugins, without having to package every one of them. This is better than
	 * having plugins be ordered in the same order that they are injected because
	 * that ordering would be influenced by the packaging order.
	 * `ResponderEventPlugin` must occur before `SimpleEventPlugin` so that
	 * preventing default on events is convenient in `SimpleEventPlugin` handlers.
	 */

	var DefaultEventPluginOrder = ['ResponderEventPlugin', 'SimpleEventPlugin', 'TapEventPlugin', 'EnterLeaveEventPlugin', 'ChangeEventPlugin', 'SelectEventPlugin', 'BeforeInputEventPlugin'];

	module.exports = DefaultEventPluginOrder;

/***/ },
/* 358 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var EventPropagators = __webpack_require__(50);
	var ReactDOMComponentTree = __webpack_require__(11);
	var SyntheticMouseEvent = __webpack_require__(67);

	var eventTypes = {
	  mouseEnter: {
	    registrationName: 'onMouseEnter',
	    dependencies: ['topMouseOut', 'topMouseOver']
	  },
	  mouseLeave: {
	    registrationName: 'onMouseLeave',
	    dependencies: ['topMouseOut', 'topMouseOver']
	  }
	};

	var EnterLeaveEventPlugin = {

	  eventTypes: eventTypes,

	  /**
	   * For almost every interaction we care about, there will be both a top-level
	   * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that
	   * we do not extract duplicate events. However, moving the mouse into the
	   * browser from outside will not fire a `mouseout` event. In this case, we use
	   * the `mouseover` top-level event.
	   */
	  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	    if (topLevelType === 'topMouseOver' && (nativeEvent.relatedTarget || nativeEvent.fromElement)) {
	      return null;
	    }
	    if (topLevelType !== 'topMouseOut' && topLevelType !== 'topMouseOver') {
	      // Must not be a mouse in or mouse out - ignoring.
	      return null;
	    }

	    var win;
	    if (nativeEventTarget.window === nativeEventTarget) {
	      // `nativeEventTarget` is probably a window object.
	      win = nativeEventTarget;
	    } else {
	      // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
	      var doc = nativeEventTarget.ownerDocument;
	      if (doc) {
	        win = doc.defaultView || doc.parentWindow;
	      } else {
	        win = window;
	      }
	    }

	    var from;
	    var to;
	    if (topLevelType === 'topMouseOut') {
	      from = targetInst;
	      var related = nativeEvent.relatedTarget || nativeEvent.toElement;
	      to = related ? ReactDOMComponentTree.getClosestInstanceFromNode(related) : null;
	    } else {
	      // Moving to a node from outside the window.
	      from = null;
	      to = targetInst;
	    }

	    if (from === to) {
	      // Nothing pertains to our managed components.
	      return null;
	    }

	    var fromNode = from == null ? win : ReactDOMComponentTree.getNodeFromInstance(from);
	    var toNode = to == null ? win : ReactDOMComponentTree.getNodeFromInstance(to);

	    var leave = SyntheticMouseEvent.getPooled(eventTypes.mouseLeave, from, nativeEvent, nativeEventTarget);
	    leave.type = 'mouseleave';
	    leave.target = fromNode;
	    leave.relatedTarget = toNode;

	    var enter = SyntheticMouseEvent.getPooled(eventTypes.mouseEnter, to, nativeEvent, nativeEventTarget);
	    enter.type = 'mouseenter';
	    enter.target = toNode;
	    enter.relatedTarget = fromNode;

	    EventPropagators.accumulateEnterLeaveDispatches(leave, enter, from, to);

	    return [leave, enter];
	  }

	};

	module.exports = EnterLeaveEventPlugin;

/***/ },
/* 359 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _assign = __webpack_require__(7);

	var PooledClass = __webpack_require__(32);

	var getTextContentAccessor = __webpack_require__(177);

	/**
	 * This helper class stores information about text content of a target node,
	 * allowing comparison of content before and after a given event.
	 *
	 * Identify the node where selection currently begins, then observe
	 * both its text content and its current position in the DOM. Since the
	 * browser may natively replace the target node during composition, we can
	 * use its position to find its replacement.
	 *
	 * @param {DOMEventTarget} root
	 */
	function FallbackCompositionState(root) {
	  this._root = root;
	  this._startText = this.getText();
	  this._fallbackText = null;
	}

	_assign(FallbackCompositionState.prototype, {
	  destructor: function () {
	    this._root = null;
	    this._startText = null;
	    this._fallbackText = null;
	  },

	  /**
	   * Get current text of input.
	   *
	   * @return {string}
	   */
	  getText: function () {
	    if ('value' in this._root) {
	      return this._root.value;
	    }
	    return this._root[getTextContentAccessor()];
	  },

	  /**
	   * Determine the differing substring between the initially stored
	   * text content and the current content.
	   *
	   * @return {string}
	   */
	  getData: function () {
	    if (this._fallbackText) {
	      return this._fallbackText;
	    }

	    var start;
	    var startValue = this._startText;
	    var startLength = startValue.length;
	    var end;
	    var endValue = this.getText();
	    var endLength = endValue.length;

	    for (start = 0; start < startLength; start++) {
	      if (startValue[start] !== endValue[start]) {
	        break;
	      }
	    }

	    var minEnd = startLength - start;
	    for (end = 1; end <= minEnd; end++) {
	      if (startValue[startLength - end] !== endValue[endLength - end]) {
	        break;
	      }
	    }

	    var sliceTail = end > 1 ? 1 - end : undefined;
	    this._fallbackText = endValue.slice(start, sliceTail);
	    return this._fallbackText;
	  }
	});

	PooledClass.addPoolingTo(FallbackCompositionState);

	module.exports = FallbackCompositionState;

/***/ },
/* 360 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var DOMProperty = __webpack_require__(37);

	var MUST_USE_PROPERTY = DOMProperty.injection.MUST_USE_PROPERTY;
	var HAS_BOOLEAN_VALUE = DOMProperty.injection.HAS_BOOLEAN_VALUE;
	var HAS_NUMERIC_VALUE = DOMProperty.injection.HAS_NUMERIC_VALUE;
	var HAS_POSITIVE_NUMERIC_VALUE = DOMProperty.injection.HAS_POSITIVE_NUMERIC_VALUE;
	var HAS_OVERLOADED_BOOLEAN_VALUE = DOMProperty.injection.HAS_OVERLOADED_BOOLEAN_VALUE;

	var HTMLDOMPropertyConfig = {
	  isCustomAttribute: RegExp.prototype.test.bind(new RegExp('^(data|aria)-[' + DOMProperty.ATTRIBUTE_NAME_CHAR + ']*$')),
	  Properties: {
	    /**
	     * Standard Properties
	     */
	    accept: 0,
	    acceptCharset: 0,
	    accessKey: 0,
	    action: 0,
	    allowFullScreen: HAS_BOOLEAN_VALUE,
	    allowTransparency: 0,
	    alt: 0,
	    // specifies target context for links with `preload` type
	    as: 0,
	    async: HAS_BOOLEAN_VALUE,
	    autoComplete: 0,
	    // autoFocus is polyfilled/normalized by AutoFocusUtils
	    // autoFocus: HAS_BOOLEAN_VALUE,
	    autoPlay: HAS_BOOLEAN_VALUE,
	    capture: HAS_BOOLEAN_VALUE,
	    cellPadding: 0,
	    cellSpacing: 0,
	    charSet: 0,
	    challenge: 0,
	    checked: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    cite: 0,
	    classID: 0,
	    className: 0,
	    cols: HAS_POSITIVE_NUMERIC_VALUE,
	    colSpan: 0,
	    content: 0,
	    contentEditable: 0,
	    contextMenu: 0,
	    controls: HAS_BOOLEAN_VALUE,
	    coords: 0,
	    crossOrigin: 0,
	    data: 0, // For `<object />` acts as `src`.
	    dateTime: 0,
	    'default': HAS_BOOLEAN_VALUE,
	    defer: HAS_BOOLEAN_VALUE,
	    dir: 0,
	    disabled: HAS_BOOLEAN_VALUE,
	    download: HAS_OVERLOADED_BOOLEAN_VALUE,
	    draggable: 0,
	    encType: 0,
	    form: 0,
	    formAction: 0,
	    formEncType: 0,
	    formMethod: 0,
	    formNoValidate: HAS_BOOLEAN_VALUE,
	    formTarget: 0,
	    frameBorder: 0,
	    headers: 0,
	    height: 0,
	    hidden: HAS_BOOLEAN_VALUE,
	    high: 0,
	    href: 0,
	    hrefLang: 0,
	    htmlFor: 0,
	    httpEquiv: 0,
	    icon: 0,
	    id: 0,
	    inputMode: 0,
	    integrity: 0,
	    is: 0,
	    keyParams: 0,
	    keyType: 0,
	    kind: 0,
	    label: 0,
	    lang: 0,
	    list: 0,
	    loop: HAS_BOOLEAN_VALUE,
	    low: 0,
	    manifest: 0,
	    marginHeight: 0,
	    marginWidth: 0,
	    max: 0,
	    maxLength: 0,
	    media: 0,
	    mediaGroup: 0,
	    method: 0,
	    min: 0,
	    minLength: 0,
	    // Caution; `option.selected` is not updated if `select.multiple` is
	    // disabled with `removeAttribute`.
	    multiple: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    muted: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    name: 0,
	    nonce: 0,
	    noValidate: HAS_BOOLEAN_VALUE,
	    open: HAS_BOOLEAN_VALUE,
	    optimum: 0,
	    pattern: 0,
	    placeholder: 0,
	    playsInline: HAS_BOOLEAN_VALUE,
	    poster: 0,
	    preload: 0,
	    profile: 0,
	    radioGroup: 0,
	    readOnly: HAS_BOOLEAN_VALUE,
	    referrerPolicy: 0,
	    rel: 0,
	    required: HAS_BOOLEAN_VALUE,
	    reversed: HAS_BOOLEAN_VALUE,
	    role: 0,
	    rows: HAS_POSITIVE_NUMERIC_VALUE,
	    rowSpan: HAS_NUMERIC_VALUE,
	    sandbox: 0,
	    scope: 0,
	    scoped: HAS_BOOLEAN_VALUE,
	    scrolling: 0,
	    seamless: HAS_BOOLEAN_VALUE,
	    selected: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    shape: 0,
	    size: HAS_POSITIVE_NUMERIC_VALUE,
	    sizes: 0,
	    span: HAS_POSITIVE_NUMERIC_VALUE,
	    spellCheck: 0,
	    src: 0,
	    srcDoc: 0,
	    srcLang: 0,
	    srcSet: 0,
	    start: HAS_NUMERIC_VALUE,
	    step: 0,
	    style: 0,
	    summary: 0,
	    tabIndex: 0,
	    target: 0,
	    title: 0,
	    // Setting .type throws on non-<input> tags
	    type: 0,
	    useMap: 0,
	    value: 0,
	    width: 0,
	    wmode: 0,
	    wrap: 0,

	    /**
	     * RDFa Properties
	     */
	    about: 0,
	    datatype: 0,
	    inlist: 0,
	    prefix: 0,
	    // property is also supported for OpenGraph in meta tags.
	    property: 0,
	    resource: 0,
	    'typeof': 0,
	    vocab: 0,

	    /**
	     * Non-standard Properties
	     */
	    // autoCapitalize and autoCorrect are supported in Mobile Safari for
	    // keyboard hints.
	    autoCapitalize: 0,
	    autoCorrect: 0,
	    // autoSave allows WebKit/Blink to persist values of input fields on page reloads
	    autoSave: 0,
	    // color is for Safari mask-icon link
	    color: 0,
	    // itemProp, itemScope, itemType are for
	    // Microdata support. See http://schema.org/docs/gs.html
	    itemProp: 0,
	    itemScope: HAS_BOOLEAN_VALUE,
	    itemType: 0,
	    // itemID and itemRef are for Microdata support as well but
	    // only specified in the WHATWG spec document. See
	    // https://html.spec.whatwg.org/multipage/microdata.html#microdata-dom-api
	    itemID: 0,
	    itemRef: 0,
	    // results show looking glass icon and recent searches on input
	    // search fields in WebKit/Blink
	    results: 0,
	    // IE-only attribute that specifies security restrictions on an iframe
	    // as an alternative to the sandbox attribute on IE<10
	    security: 0,
	    // IE-only attribute that controls focus behavior
	    unselectable: 0
	  },
	  DOMAttributeNames: {
	    acceptCharset: 'accept-charset',
	    className: 'class',
	    htmlFor: 'for',
	    httpEquiv: 'http-equiv'
	  },
	  DOMPropertyNames: {},
	  DOMMutationMethods: {
	    value: function (node, value) {
	      if (value == null) {
	        return node.removeAttribute('value');
	      }

	      // Number inputs get special treatment due to some edge cases in
	      // Chrome. Let everything else assign the value attribute as normal.
	      // https://github.com/facebook/react/issues/7253#issuecomment-236074326
	      if (node.type !== 'number' || node.hasAttribute('value') === false) {
	        node.setAttribute('value', '' + value);
	      } else if (node.validity && !node.validity.badInput && node.ownerDocument.activeElement !== node) {
	        // Don't assign an attribute if validation reports bad
	        // input. Chrome will clear the value. Additionally, don't
	        // operate on inputs that have focus, otherwise Chrome might
	        // strip off trailing decimal places and cause the user's
	        // cursor position to jump to the beginning of the input.
	        //
	        // In ReactDOMInput, we have an onBlur event that will trigger
	        // this function again when focus is lost.
	        node.setAttribute('value', '' + value);
	      }
	    }
	  }
	};

	module.exports = HTMLDOMPropertyConfig;

/***/ },
/* 361 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var ReactReconciler = __webpack_require__(38);

	var instantiateReactComponent = __webpack_require__(178);
	var KeyEscapeUtils = __webpack_require__(96);
	var shouldUpdateReactComponent = __webpack_require__(106);
	var traverseAllChildren = __webpack_require__(181);
	var warning = __webpack_require__(4);

	var ReactComponentTreeHook;

	if (typeof process !== 'undefined' && ({"NODE_ENV":"production"}) && ("production") === 'test') {
	  // Temporary hack.
	  // Inline requires don't work well with Jest:
	  // https://github.com/facebook/react/issues/7240
	  // Remove the inline requires when we don't need them anymore:
	  // https://github.com/facebook/react/pull/7178
	  ReactComponentTreeHook = __webpack_require__(182);
	}

	function instantiateChild(childInstances, child, name, selfDebugID) {
	  // We found a component instance.
	  var keyUnique = childInstances[name] === undefined;
	  if (false) {
	    if (!ReactComponentTreeHook) {
	      ReactComponentTreeHook = require('react/lib/ReactComponentTreeHook');
	    }
	    if (!keyUnique) {
	      process.env.NODE_ENV !== 'production' ? warning(false, 'flattenChildren(...): Encountered two children with the same key, ' + '`%s`. Child keys must be unique; when two children share a key, only ' + 'the first child will be used.%s', KeyEscapeUtils.unescape(name), ReactComponentTreeHook.getStackAddendumByID(selfDebugID)) : void 0;
	    }
	  }
	  if (child != null && keyUnique) {
	    childInstances[name] = instantiateReactComponent(child, true);
	  }
	}

	/**
	 * ReactChildReconciler provides helpers for initializing or updating a set of
	 * children. Its output is suitable for passing it onto ReactMultiChild which
	 * does diffed reordering and insertion.
	 */
	var ReactChildReconciler = {
	  /**
	   * Generates a "mount image" for each of the supplied children. In the case
	   * of `ReactDOMComponent`, a mount image is a string of markup.
	   *
	   * @param {?object} nestedChildNodes Nested child maps.
	   * @return {?object} A set of child instances.
	   * @internal
	   */
	  instantiateChildren: function (nestedChildNodes, transaction, context, selfDebugID // 0 in production and for roots
	  ) {
	    if (nestedChildNodes == null) {
	      return null;
	    }
	    var childInstances = {};

	    if (false) {
	      traverseAllChildren(nestedChildNodes, function (childInsts, child, name) {
	        return instantiateChild(childInsts, child, name, selfDebugID);
	      }, childInstances);
	    } else {
	      traverseAllChildren(nestedChildNodes, instantiateChild, childInstances);
	    }
	    return childInstances;
	  },

	  /**
	   * Updates the rendered children and returns a new set of children.
	   *
	   * @param {?object} prevChildren Previously initialized set of children.
	   * @param {?object} nextChildren Flat child element maps.
	   * @param {ReactReconcileTransaction} transaction
	   * @param {object} context
	   * @return {?object} A new set of child instances.
	   * @internal
	   */
	  updateChildren: function (prevChildren, nextChildren, mountImages, removedNodes, transaction, hostParent, hostContainerInfo, context, selfDebugID // 0 in production and for roots
	  ) {
	    // We currently don't have a way to track moves here but if we use iterators
	    // instead of for..in we can zip the iterators and check if an item has
	    // moved.
	    // TODO: If nothing has changed, return the prevChildren object so that we
	    // can quickly bailout if nothing has changed.
	    if (!nextChildren && !prevChildren) {
	      return;
	    }
	    var name;
	    var prevChild;
	    for (name in nextChildren) {
	      if (!nextChildren.hasOwnProperty(name)) {
	        continue;
	      }
	      prevChild = prevChildren && prevChildren[name];
	      var prevElement = prevChild && prevChild._currentElement;
	      var nextElement = nextChildren[name];
	      if (prevChild != null && shouldUpdateReactComponent(prevElement, nextElement)) {
	        ReactReconciler.receiveComponent(prevChild, nextElement, transaction, context);
	        nextChildren[name] = prevChild;
	      } else {
	        if (prevChild) {
	          removedNodes[name] = ReactReconciler.getHostNode(prevChild);
	          ReactReconciler.unmountComponent(prevChild, false);
	        }
	        // The child must be instantiated before it's mounted.
	        var nextChildInstance = instantiateReactComponent(nextElement, true);
	        nextChildren[name] = nextChildInstance;
	        // Creating mount image now ensures refs are resolved in right order
	        // (see https://github.com/facebook/react/pull/7101 for explanation).
	        var nextChildMountImage = ReactReconciler.mountComponent(nextChildInstance, transaction, hostParent, hostContainerInfo, context, selfDebugID);
	        mountImages.push(nextChildMountImage);
	      }
	    }
	    // Unmount children that are no longer present.
	    for (name in prevChildren) {
	      if (prevChildren.hasOwnProperty(name) && !(nextChildren && nextChildren.hasOwnProperty(name))) {
	        prevChild = prevChildren[name];
	        removedNodes[name] = ReactReconciler.getHostNode(prevChild);
	        ReactReconciler.unmountComponent(prevChild, false);
	      }
	    }
	  },

	  /**
	   * Unmounts all rendered children. This should be used to clean up children
	   * when this component is unmounted.
	   *
	   * @param {?object} renderedChildren Previously initialized set of children.
	   * @internal
	   */
	  unmountChildren: function (renderedChildren, safely) {
	    for (var name in renderedChildren) {
	      if (renderedChildren.hasOwnProperty(name)) {
	        var renderedChild = renderedChildren[name];
	        ReactReconciler.unmountComponent(renderedChild, safely);
	      }
	    }
	  }

	};

	module.exports = ReactChildReconciler;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(85)))

/***/ },
/* 362 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var DOMChildrenOperations = __webpack_require__(92);
	var ReactDOMIDOperations = __webpack_require__(369);

	/**
	 * Abstracts away all functionality of the reconciler that requires knowledge of
	 * the browser context. TODO: These callers should be refactored to avoid the
	 * need for this injection.
	 */
	var ReactComponentBrowserEnvironment = {

	  processChildrenUpdates: ReactDOMIDOperations.dangerouslyProcessChildrenUpdates,

	  replaceNodeWithMarkup: DOMChildrenOperations.dangerouslyReplaceNodeWithMarkup

	};

	module.exports = ReactComponentBrowserEnvironment;

/***/ },
/* 363 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(5),
	    _assign = __webpack_require__(7);

	var React = __webpack_require__(39);
	var ReactComponentEnvironment = __webpack_require__(98);
	var ReactCurrentOwner = __webpack_require__(27);
	var ReactErrorUtils = __webpack_require__(99);
	var ReactInstanceMap = __webpack_require__(51);
	var ReactInstrumentation = __webpack_require__(20);
	var ReactNodeTypes = __webpack_require__(172);
	var ReactReconciler = __webpack_require__(38);

	if (false) {
	  var checkReactTypeSpec = require('./checkReactTypeSpec');
	}

	var emptyObject = __webpack_require__(46);
	var invariant = __webpack_require__(3);
	var shallowEqual = __webpack_require__(60);
	var shouldUpdateReactComponent = __webpack_require__(106);
	var warning = __webpack_require__(4);

	var CompositeTypes = {
	  ImpureClass: 0,
	  PureClass: 1,
	  StatelessFunctional: 2
	};

	function StatelessComponent(Component) {}
	StatelessComponent.prototype.render = function () {
	  var Component = ReactInstanceMap.get(this)._currentElement.type;
	  var element = Component(this.props, this.context, this.updater);
	  warnIfInvalidElement(Component, element);
	  return element;
	};

	function warnIfInvalidElement(Component, element) {
	  if (false) {
	    process.env.NODE_ENV !== 'production' ? warning(element === null || element === false || React.isValidElement(element), '%s(...): A valid React element (or null) must be returned. You may have ' + 'returned undefined, an array or some other invalid object.', Component.displayName || Component.name || 'Component') : void 0;
	    process.env.NODE_ENV !== 'production' ? warning(!Component.childContextTypes, '%s(...): childContextTypes cannot be defined on a functional component.', Component.displayName || Component.name || 'Component') : void 0;
	  }
	}

	function shouldConstruct(Component) {
	  return !!(Component.prototype && Component.prototype.isReactComponent);
	}

	function isPureComponent(Component) {
	  return !!(Component.prototype && Component.prototype.isPureReactComponent);
	}

	// Separated into a function to contain deoptimizations caused by try/finally.
	function measureLifeCyclePerf(fn, debugID, timerType) {
	  if (debugID === 0) {
	    // Top-level wrappers (see ReactMount) and empty components (see
	    // ReactDOMEmptyComponent) are invisible to hooks and devtools.
	    // Both are implementation details that should go away in the future.
	    return fn();
	  }

	  ReactInstrumentation.debugTool.onBeginLifeCycleTimer(debugID, timerType);
	  try {
	    return fn();
	  } finally {
	    ReactInstrumentation.debugTool.onEndLifeCycleTimer(debugID, timerType);
	  }
	}

	/**
	 * ------------------ The Life-Cycle of a Composite Component ------------------
	 *
	 * - constructor: Initialization of state. The instance is now retained.
	 *   - componentWillMount
	 *   - render
	 *   - [children's constructors]
	 *     - [children's componentWillMount and render]
	 *     - [children's componentDidMount]
	 *     - componentDidMount
	 *
	 *       Update Phases:
	 *       - componentWillReceiveProps (only called if parent updated)
	 *       - shouldComponentUpdate
	 *         - componentWillUpdate
	 *           - render
	 *           - [children's constructors or receive props phases]
	 *         - componentDidUpdate
	 *
	 *     - componentWillUnmount
	 *     - [children's componentWillUnmount]
	 *   - [children destroyed]
	 * - (destroyed): The instance is now blank, released by React and ready for GC.
	 *
	 * -----------------------------------------------------------------------------
	 */

	/**
	 * An incrementing ID assigned to each component when it is mounted. This is
	 * used to enforce the order in which `ReactUpdates` updates dirty components.
	 *
	 * @private
	 */
	var nextMountID = 1;

	/**
	 * @lends {ReactCompositeComponent.prototype}
	 */
	var ReactCompositeComponent = {

	  /**
	   * Base constructor for all composite component.
	   *
	   * @param {ReactElement} element
	   * @final
	   * @internal
	   */
	  construct: function (element) {
	    this._currentElement = element;
	    this._rootNodeID = 0;
	    this._compositeType = null;
	    this._instance = null;
	    this._hostParent = null;
	    this._hostContainerInfo = null;

	    // See ReactUpdateQueue
	    this._updateBatchNumber = null;
	    this._pendingElement = null;
	    this._pendingStateQueue = null;
	    this._pendingReplaceState = false;
	    this._pendingForceUpdate = false;

	    this._renderedNodeType = null;
	    this._renderedComponent = null;
	    this._context = null;
	    this._mountOrder = 0;
	    this._topLevelWrapper = null;

	    // See ReactUpdates and ReactUpdateQueue.
	    this._pendingCallbacks = null;

	    // ComponentWillUnmount shall only be called once
	    this._calledComponentWillUnmount = false;

	    if (false) {
	      this._warnedAboutRefsInRender = false;
	    }
	  },

	  /**
	   * Initializes the component, renders markup, and registers event listeners.
	   *
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {?object} hostParent
	   * @param {?object} hostContainerInfo
	   * @param {?object} context
	   * @return {?string} Rendered markup to be inserted into the DOM.
	   * @final
	   * @internal
	   */
	  mountComponent: function (transaction, hostParent, hostContainerInfo, context) {
	    var _this = this;

	    this._context = context;
	    this._mountOrder = nextMountID++;
	    this._hostParent = hostParent;
	    this._hostContainerInfo = hostContainerInfo;

	    var publicProps = this._currentElement.props;
	    var publicContext = this._processContext(context);

	    var Component = this._currentElement.type;

	    var updateQueue = transaction.getUpdateQueue();

	    // Initialize the public class
	    var doConstruct = shouldConstruct(Component);
	    var inst = this._constructComponent(doConstruct, publicProps, publicContext, updateQueue);
	    var renderedElement;

	    // Support functional components
	    if (!doConstruct && (inst == null || inst.render == null)) {
	      renderedElement = inst;
	      warnIfInvalidElement(Component, renderedElement);
	      !(inst === null || inst === false || React.isValidElement(inst)) ?  false ? invariant(false, '%s(...): A valid React element (or null) must be returned. You may have returned undefined, an array or some other invalid object.', Component.displayName || Component.name || 'Component') : _prodInvariant('105', Component.displayName || Component.name || 'Component') : void 0;
	      inst = new StatelessComponent(Component);
	      this._compositeType = CompositeTypes.StatelessFunctional;
	    } else {
	      if (isPureComponent(Component)) {
	        this._compositeType = CompositeTypes.PureClass;
	      } else {
	        this._compositeType = CompositeTypes.ImpureClass;
	      }
	    }

	    if (false) {
	      // This will throw later in _renderValidatedComponent, but add an early
	      // warning now to help debugging
	      if (inst.render == null) {
	        process.env.NODE_ENV !== 'production' ? warning(false, '%s(...): No `render` method found on the returned component ' + 'instance: you may have forgotten to define `render`.', Component.displayName || Component.name || 'Component') : void 0;
	      }

	      var propsMutated = inst.props !== publicProps;
	      var componentName = Component.displayName || Component.name || 'Component';

	      process.env.NODE_ENV !== 'production' ? warning(inst.props === undefined || !propsMutated, '%s(...): When calling super() in `%s`, make sure to pass ' + 'up the same props that your component\'s constructor was passed.', componentName, componentName) : void 0;
	    }

	    // These should be set up in the constructor, but as a convenience for
	    // simpler class abstractions, we set them up after the fact.
	    inst.props = publicProps;
	    inst.context = publicContext;
	    inst.refs = emptyObject;
	    inst.updater = updateQueue;

	    this._instance = inst;

	    // Store a reference from the instance back to the internal representation
	    ReactInstanceMap.set(inst, this);

	    if (false) {
	      // Since plain JS classes are defined without any special initialization
	      // logic, we can not catch common errors early. Therefore, we have to
	      // catch them here, at initialization time, instead.
	      process.env.NODE_ENV !== 'production' ? warning(!inst.getInitialState || inst.getInitialState.isReactClassApproved || inst.state, 'getInitialState was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Did you mean to define a state property instead?', this.getName() || 'a component') : void 0;
	      process.env.NODE_ENV !== 'production' ? warning(!inst.getDefaultProps || inst.getDefaultProps.isReactClassApproved, 'getDefaultProps was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Use a static property to define defaultProps instead.', this.getName() || 'a component') : void 0;
	      process.env.NODE_ENV !== 'production' ? warning(!inst.propTypes, 'propTypes was defined as an instance property on %s. Use a static ' + 'property to define propTypes instead.', this.getName() || 'a component') : void 0;
	      process.env.NODE_ENV !== 'production' ? warning(!inst.contextTypes, 'contextTypes was defined as an instance property on %s. Use a ' + 'static property to define contextTypes instead.', this.getName() || 'a component') : void 0;
	      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentShouldUpdate !== 'function', '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', this.getName() || 'A component') : void 0;
	      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentDidUnmount !== 'function', '%s has a method called ' + 'componentDidUnmount(). But there is no such lifecycle method. ' + 'Did you mean componentWillUnmount()?', this.getName() || 'A component') : void 0;
	      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentWillRecieveProps !== 'function', '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', this.getName() || 'A component') : void 0;
	    }

	    var initialState = inst.state;
	    if (initialState === undefined) {
	      inst.state = initialState = null;
	    }
	    !(typeof initialState === 'object' && !Array.isArray(initialState)) ?  false ? invariant(false, '%s.state: must be set to an object or null', this.getName() || 'ReactCompositeComponent') : _prodInvariant('106', this.getName() || 'ReactCompositeComponent') : void 0;

	    this._pendingStateQueue = null;
	    this._pendingReplaceState = false;
	    this._pendingForceUpdate = false;

	    var markup;
	    if (inst.unstable_handleError) {
	      markup = this.performInitialMountWithErrorHandling(renderedElement, hostParent, hostContainerInfo, transaction, context);
	    } else {
	      markup = this.performInitialMount(renderedElement, hostParent, hostContainerInfo, transaction, context);
	    }

	    if (inst.componentDidMount) {
	      if (false) {
	        transaction.getReactMountReady().enqueue(function () {
	          measureLifeCyclePerf(function () {
	            return inst.componentDidMount();
	          }, _this._debugID, 'componentDidMount');
	        });
	      } else {
	        transaction.getReactMountReady().enqueue(inst.componentDidMount, inst);
	      }
	    }

	    return markup;
	  },

	  _constructComponent: function (doConstruct, publicProps, publicContext, updateQueue) {
	    if (false) {
	      ReactCurrentOwner.current = this;
	      try {
	        return this._constructComponentWithoutOwner(doConstruct, publicProps, publicContext, updateQueue);
	      } finally {
	        ReactCurrentOwner.current = null;
	      }
	    } else {
	      return this._constructComponentWithoutOwner(doConstruct, publicProps, publicContext, updateQueue);
	    }
	  },

	  _constructComponentWithoutOwner: function (doConstruct, publicProps, publicContext, updateQueue) {
	    var Component = this._currentElement.type;

	    if (doConstruct) {
	      if (false) {
	        return measureLifeCyclePerf(function () {
	          return new Component(publicProps, publicContext, updateQueue);
	        }, this._debugID, 'ctor');
	      } else {
	        return new Component(publicProps, publicContext, updateQueue);
	      }
	    }

	    // This can still be an instance in case of factory components
	    // but we'll count this as time spent rendering as the more common case.
	    if (false) {
	      return measureLifeCyclePerf(function () {
	        return Component(publicProps, publicContext, updateQueue);
	      }, this._debugID, 'render');
	    } else {
	      return Component(publicProps, publicContext, updateQueue);
	    }
	  },

	  performInitialMountWithErrorHandling: function (renderedElement, hostParent, hostContainerInfo, transaction, context) {
	    var markup;
	    var checkpoint = transaction.checkpoint();
	    try {
	      markup = this.performInitialMount(renderedElement, hostParent, hostContainerInfo, transaction, context);
	    } catch (e) {
	      // Roll back to checkpoint, handle error (which may add items to the transaction), and take a new checkpoint
	      transaction.rollback(checkpoint);
	      this._instance.unstable_handleError(e);
	      if (this._pendingStateQueue) {
	        this._instance.state = this._processPendingState(this._instance.props, this._instance.context);
	      }
	      checkpoint = transaction.checkpoint();

	      this._renderedComponent.unmountComponent(true);
	      transaction.rollback(checkpoint);

	      // Try again - we've informed the component about the error, so they can render an error message this time.
	      // If this throws again, the error will bubble up (and can be caught by a higher error boundary).
	      markup = this.performInitialMount(renderedElement, hostParent, hostContainerInfo, transaction, context);
	    }
	    return markup;
	  },

	  performInitialMount: function (renderedElement, hostParent, hostContainerInfo, transaction, context) {
	    var inst = this._instance;

	    var debugID = 0;
	    if (false) {
	      debugID = this._debugID;
	    }

	    if (inst.componentWillMount) {
	      if (false) {
	        measureLifeCyclePerf(function () {
	          return inst.componentWillMount();
	        }, debugID, 'componentWillMount');
	      } else {
	        inst.componentWillMount();
	      }
	      // When mounting, calls to `setState` by `componentWillMount` will set
	      // `this._pendingStateQueue` without triggering a re-render.
	      if (this._pendingStateQueue) {
	        inst.state = this._processPendingState(inst.props, inst.context);
	      }
	    }

	    // If not a stateless component, we now render
	    if (renderedElement === undefined) {
	      renderedElement = this._renderValidatedComponent();
	    }

	    var nodeType = ReactNodeTypes.getType(renderedElement);
	    this._renderedNodeType = nodeType;
	    var child = this._instantiateReactComponent(renderedElement, nodeType !== ReactNodeTypes.EMPTY /* shouldHaveDebugID */
	    );
	    this._renderedComponent = child;

	    var markup = ReactReconciler.mountComponent(child, transaction, hostParent, hostContainerInfo, this._processChildContext(context), debugID);

	    if (false) {
	      if (debugID !== 0) {
	        var childDebugIDs = child._debugID !== 0 ? [child._debugID] : [];
	        ReactInstrumentation.debugTool.onSetChildren(debugID, childDebugIDs);
	      }
	    }

	    return markup;
	  },

	  getHostNode: function () {
	    return ReactReconciler.getHostNode(this._renderedComponent);
	  },

	  /**
	   * Releases any resources allocated by `mountComponent`.
	   *
	   * @final
	   * @internal
	   */
	  unmountComponent: function (safely) {
	    if (!this._renderedComponent) {
	      return;
	    }

	    var inst = this._instance;

	    if (inst.componentWillUnmount && !inst._calledComponentWillUnmount) {
	      inst._calledComponentWillUnmount = true;

	      if (safely) {
	        var name = this.getName() + '.componentWillUnmount()';
	        ReactErrorUtils.invokeGuardedCallback(name, inst.componentWillUnmount.bind(inst));
	      } else {
	        if (false) {
	          measureLifeCyclePerf(function () {
	            return inst.componentWillUnmount();
	          }, this._debugID, 'componentWillUnmount');
	        } else {
	          inst.componentWillUnmount();
	        }
	      }
	    }

	    if (this._renderedComponent) {
	      ReactReconciler.unmountComponent(this._renderedComponent, safely);
	      this._renderedNodeType = null;
	      this._renderedComponent = null;
	      this._instance = null;
	    }

	    // Reset pending fields
	    // Even if this component is scheduled for another update in ReactUpdates,
	    // it would still be ignored because these fields are reset.
	    this._pendingStateQueue = null;
	    this._pendingReplaceState = false;
	    this._pendingForceUpdate = false;
	    this._pendingCallbacks = null;
	    this._pendingElement = null;

	    // These fields do not really need to be reset since this object is no
	    // longer accessible.
	    this._context = null;
	    this._rootNodeID = 0;
	    this._topLevelWrapper = null;

	    // Delete the reference from the instance to this internal representation
	    // which allow the internals to be properly cleaned up even if the user
	    // leaks a reference to the public instance.
	    ReactInstanceMap.remove(inst);

	    // Some existing components rely on inst.props even after they've been
	    // destroyed (in event handlers).
	    // TODO: inst.props = null;
	    // TODO: inst.state = null;
	    // TODO: inst.context = null;
	  },

	  /**
	   * Filters the context object to only contain keys specified in
	   * `contextTypes`
	   *
	   * @param {object} context
	   * @return {?object}
	   * @private
	   */
	  _maskContext: function (context) {
	    var Component = this._currentElement.type;
	    var contextTypes = Component.contextTypes;
	    if (!contextTypes) {
	      return emptyObject;
	    }
	    var maskedContext = {};
	    for (var contextName in contextTypes) {
	      maskedContext[contextName] = context[contextName];
	    }
	    return maskedContext;
	  },

	  /**
	   * Filters the context object to only contain keys specified in
	   * `contextTypes`, and asserts that they are valid.
	   *
	   * @param {object} context
	   * @return {?object}
	   * @private
	   */
	  _processContext: function (context) {
	    var maskedContext = this._maskContext(context);
	    if (false) {
	      var Component = this._currentElement.type;
	      if (Component.contextTypes) {
	        this._checkContextTypes(Component.contextTypes, maskedContext, 'context');
	      }
	    }
	    return maskedContext;
	  },

	  /**
	   * @param {object} currentContext
	   * @return {object}
	   * @private
	   */
	  _processChildContext: function (currentContext) {
	    var Component = this._currentElement.type;
	    var inst = this._instance;
	    var childContext;

	    if (inst.getChildContext) {
	      if (false) {
	        ReactInstrumentation.debugTool.onBeginProcessingChildContext();
	        try {
	          childContext = inst.getChildContext();
	        } finally {
	          ReactInstrumentation.debugTool.onEndProcessingChildContext();
	        }
	      } else {
	        childContext = inst.getChildContext();
	      }
	    }

	    if (childContext) {
	      !(typeof Component.childContextTypes === 'object') ?  false ? invariant(false, '%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().', this.getName() || 'ReactCompositeComponent') : _prodInvariant('107', this.getName() || 'ReactCompositeComponent') : void 0;
	      if (false) {
	        this._checkContextTypes(Component.childContextTypes, childContext, 'child context');
	      }
	      for (var name in childContext) {
	        !(name in Component.childContextTypes) ?  false ? invariant(false, '%s.getChildContext(): key "%s" is not defined in childContextTypes.', this.getName() || 'ReactCompositeComponent', name) : _prodInvariant('108', this.getName() || 'ReactCompositeComponent', name) : void 0;
	      }
	      return _assign({}, currentContext, childContext);
	    }
	    return currentContext;
	  },

	  /**
	   * Assert that the context types are valid
	   *
	   * @param {object} typeSpecs Map of context field to a ReactPropType
	   * @param {object} values Runtime values that need to be type-checked
	   * @param {string} location e.g. "prop", "context", "child context"
	   * @private
	   */
	  _checkContextTypes: function (typeSpecs, values, location) {
	    if (false) {
	      checkReactTypeSpec(typeSpecs, values, location, this.getName(), null, this._debugID);
	    }
	  },

	  receiveComponent: function (nextElement, transaction, nextContext) {
	    var prevElement = this._currentElement;
	    var prevContext = this._context;

	    this._pendingElement = null;

	    this.updateComponent(transaction, prevElement, nextElement, prevContext, nextContext);
	  },

	  /**
	   * If any of `_pendingElement`, `_pendingStateQueue`, or `_pendingForceUpdate`
	   * is set, update the component.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  performUpdateIfNecessary: function (transaction) {
	    if (this._pendingElement != null) {
	      ReactReconciler.receiveComponent(this, this._pendingElement, transaction, this._context);
	    } else if (this._pendingStateQueue !== null || this._pendingForceUpdate) {
	      this.updateComponent(transaction, this._currentElement, this._currentElement, this._context, this._context);
	    } else {
	      this._updateBatchNumber = null;
	    }
	  },

	  /**
	   * Perform an update to a mounted component. The componentWillReceiveProps and
	   * shouldComponentUpdate methods are called, then (assuming the update isn't
	   * skipped) the remaining update lifecycle methods are called and the DOM
	   * representation is updated.
	   *
	   * By default, this implements React's rendering and reconciliation algorithm.
	   * Sophisticated clients may wish to override this.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @param {ReactElement} prevParentElement
	   * @param {ReactElement} nextParentElement
	   * @internal
	   * @overridable
	   */
	  updateComponent: function (transaction, prevParentElement, nextParentElement, prevUnmaskedContext, nextUnmaskedContext) {
	    var inst = this._instance;
	    !(inst != null) ?  false ? invariant(false, 'Attempted to update component `%s` that has already been unmounted (or failed to mount).', this.getName() || 'ReactCompositeComponent') : _prodInvariant('136', this.getName() || 'ReactCompositeComponent') : void 0;

	    var willReceive = false;
	    var nextContext;

	    // Determine if the context has changed or not
	    if (this._context === nextUnmaskedContext) {
	      nextContext = inst.context;
	    } else {
	      nextContext = this._processContext(nextUnmaskedContext);
	      willReceive = true;
	    }

	    var prevProps = prevParentElement.props;
	    var nextProps = nextParentElement.props;

	    // Not a simple state update but a props update
	    if (prevParentElement !== nextParentElement) {
	      willReceive = true;
	    }

	    // An update here will schedule an update but immediately set
	    // _pendingStateQueue which will ensure that any state updates gets
	    // immediately reconciled instead of waiting for the next batch.
	    if (willReceive && inst.componentWillReceiveProps) {
	      if (false) {
	        measureLifeCyclePerf(function () {
	          return inst.componentWillReceiveProps(nextProps, nextContext);
	        }, this._debugID, 'componentWillReceiveProps');
	      } else {
	        inst.componentWillReceiveProps(nextProps, nextContext);
	      }
	    }

	    var nextState = this._processPendingState(nextProps, nextContext);
	    var shouldUpdate = true;

	    if (!this._pendingForceUpdate) {
	      if (inst.shouldComponentUpdate) {
	        if (false) {
	          shouldUpdate = measureLifeCyclePerf(function () {
	            return inst.shouldComponentUpdate(nextProps, nextState, nextContext);
	          }, this._debugID, 'shouldComponentUpdate');
	        } else {
	          shouldUpdate = inst.shouldComponentUpdate(nextProps, nextState, nextContext);
	        }
	      } else {
	        if (this._compositeType === CompositeTypes.PureClass) {
	          shouldUpdate = !shallowEqual(prevProps, nextProps) || !shallowEqual(inst.state, nextState);
	        }
	      }
	    }

	    if (false) {
	      process.env.NODE_ENV !== 'production' ? warning(shouldUpdate !== undefined, '%s.shouldComponentUpdate(): Returned undefined instead of a ' + 'boolean value. Make sure to return true or false.', this.getName() || 'ReactCompositeComponent') : void 0;
	    }

	    this._updateBatchNumber = null;
	    if (shouldUpdate) {
	      this._pendingForceUpdate = false;
	      // Will set `this.props`, `this.state` and `this.context`.
	      this._performComponentUpdate(nextParentElement, nextProps, nextState, nextContext, transaction, nextUnmaskedContext);
	    } else {
	      // If it's determined that a component should not update, we still want
	      // to set props and state but we shortcut the rest of the update.
	      this._currentElement = nextParentElement;
	      this._context = nextUnmaskedContext;
	      inst.props = nextProps;
	      inst.state = nextState;
	      inst.context = nextContext;
	    }
	  },

	  _processPendingState: function (props, context) {
	    var inst = this._instance;
	    var queue = this._pendingStateQueue;
	    var replace = this._pendingReplaceState;
	    this._pendingReplaceState = false;
	    this._pendingStateQueue = null;

	    if (!queue) {
	      return inst.state;
	    }

	    if (replace && queue.length === 1) {
	      return queue[0];
	    }

	    var nextState = _assign({}, replace ? queue[0] : inst.state);
	    for (var i = replace ? 1 : 0; i < queue.length; i++) {
	      var partial = queue[i];
	      _assign(nextState, typeof partial === 'function' ? partial.call(inst, nextState, props, context) : partial);
	    }

	    return nextState;
	  },

	  /**
	   * Merges new props and state, notifies delegate methods of update and
	   * performs update.
	   *
	   * @param {ReactElement} nextElement Next element
	   * @param {object} nextProps Next public object to set as properties.
	   * @param {?object} nextState Next object to set as state.
	   * @param {?object} nextContext Next public object to set as context.
	   * @param {ReactReconcileTransaction} transaction
	   * @param {?object} unmaskedContext
	   * @private
	   */
	  _performComponentUpdate: function (nextElement, nextProps, nextState, nextContext, transaction, unmaskedContext) {
	    var _this2 = this;

	    var inst = this._instance;

	    var hasComponentDidUpdate = Boolean(inst.componentDidUpdate);
	    var prevProps;
	    var prevState;
	    var prevContext;
	    if (hasComponentDidUpdate) {
	      prevProps = inst.props;
	      prevState = inst.state;
	      prevContext = inst.context;
	    }

	    if (inst.componentWillUpdate) {
	      if (false) {
	        measureLifeCyclePerf(function () {
	          return inst.componentWillUpdate(nextProps, nextState, nextContext);
	        }, this._debugID, 'componentWillUpdate');
	      } else {
	        inst.componentWillUpdate(nextProps, nextState, nextContext);
	      }
	    }

	    this._currentElement = nextElement;
	    this._context = unmaskedContext;
	    inst.props = nextProps;
	    inst.state = nextState;
	    inst.context = nextContext;

	    this._updateRenderedComponent(transaction, unmaskedContext);

	    if (hasComponentDidUpdate) {
	      if (false) {
	        transaction.getReactMountReady().enqueue(function () {
	          measureLifeCyclePerf(inst.componentDidUpdate.bind(inst, prevProps, prevState, prevContext), _this2._debugID, 'componentDidUpdate');
	        });
	      } else {
	        transaction.getReactMountReady().enqueue(inst.componentDidUpdate.bind(inst, prevProps, prevState, prevContext), inst);
	      }
	    }
	  },

	  /**
	   * Call the component's `render` method and update the DOM accordingly.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  _updateRenderedComponent: function (transaction, context) {
	    var prevComponentInstance = this._renderedComponent;
	    var prevRenderedElement = prevComponentInstance._currentElement;
	    var nextRenderedElement = this._renderValidatedComponent();

	    var debugID = 0;
	    if (false) {
	      debugID = this._debugID;
	    }

	    if (shouldUpdateReactComponent(prevRenderedElement, nextRenderedElement)) {
	      ReactReconciler.receiveComponent(prevComponentInstance, nextRenderedElement, transaction, this._processChildContext(context));
	    } else {
	      var oldHostNode = ReactReconciler.getHostNode(prevComponentInstance);
	      ReactReconciler.unmountComponent(prevComponentInstance, false);

	      var nodeType = ReactNodeTypes.getType(nextRenderedElement);
	      this._renderedNodeType = nodeType;
	      var child = this._instantiateReactComponent(nextRenderedElement, nodeType !== ReactNodeTypes.EMPTY /* shouldHaveDebugID */
	      );
	      this._renderedComponent = child;

	      var nextMarkup = ReactReconciler.mountComponent(child, transaction, this._hostParent, this._hostContainerInfo, this._processChildContext(context), debugID);

	      if (false) {
	        if (debugID !== 0) {
	          var childDebugIDs = child._debugID !== 0 ? [child._debugID] : [];
	          ReactInstrumentation.debugTool.onSetChildren(debugID, childDebugIDs);
	        }
	      }

	      this._replaceNodeWithMarkup(oldHostNode, nextMarkup, prevComponentInstance);
	    }
	  },

	  /**
	   * Overridden in shallow rendering.
	   *
	   * @protected
	   */
	  _replaceNodeWithMarkup: function (oldHostNode, nextMarkup, prevInstance) {
	    ReactComponentEnvironment.replaceNodeWithMarkup(oldHostNode, nextMarkup, prevInstance);
	  },

	  /**
	   * @protected
	   */
	  _renderValidatedComponentWithoutOwnerOrContext: function () {
	    var inst = this._instance;
	    var renderedElement;

	    if (false) {
	      renderedElement = measureLifeCyclePerf(function () {
	        return inst.render();
	      }, this._debugID, 'render');
	    } else {
	      renderedElement = inst.render();
	    }

	    if (false) {
	      // We allow auto-mocks to proceed as if they're returning null.
	      if (renderedElement === undefined && inst.render._isMockFunction) {
	        // This is probably bad practice. Consider warning here and
	        // deprecating this convenience.
	        renderedElement = null;
	      }
	    }

	    return renderedElement;
	  },

	  /**
	   * @private
	   */
	  _renderValidatedComponent: function () {
	    var renderedElement;
	    if (("production") !== 'production' || this._compositeType !== CompositeTypes.StatelessFunctional) {
	      ReactCurrentOwner.current = this;
	      try {
	        renderedElement = this._renderValidatedComponentWithoutOwnerOrContext();
	      } finally {
	        ReactCurrentOwner.current = null;
	      }
	    } else {
	      renderedElement = this._renderValidatedComponentWithoutOwnerOrContext();
	    }
	    !(
	    // TODO: An `isValidNode` function would probably be more appropriate
	    renderedElement === null || renderedElement === false || React.isValidElement(renderedElement)) ?  false ? invariant(false, '%s.render(): A valid React element (or null) must be returned. You may have returned undefined, an array or some other invalid object.', this.getName() || 'ReactCompositeComponent') : _prodInvariant('109', this.getName() || 'ReactCompositeComponent') : void 0;

	    return renderedElement;
	  },

	  /**
	   * Lazily allocates the refs object and stores `component` as `ref`.
	   *
	   * @param {string} ref Reference name.
	   * @param {component} component Component to store as `ref`.
	   * @final
	   * @private
	   */
	  attachRef: function (ref, component) {
	    var inst = this.getPublicInstance();
	    !(inst != null) ?  false ? invariant(false, 'Stateless function components cannot have refs.') : _prodInvariant('110') : void 0;
	    var publicComponentInstance = component.getPublicInstance();
	    if (false) {
	      var componentName = component && component.getName ? component.getName() : 'a component';
	      process.env.NODE_ENV !== 'production' ? warning(publicComponentInstance != null || component._compositeType !== CompositeTypes.StatelessFunctional, 'Stateless function components cannot be given refs ' + '(See ref "%s" in %s created by %s). ' + 'Attempts to access this ref will fail.', ref, componentName, this.getName()) : void 0;
	    }
	    var refs = inst.refs === emptyObject ? inst.refs = {} : inst.refs;
	    refs[ref] = publicComponentInstance;
	  },

	  /**
	   * Detaches a reference name.
	   *
	   * @param {string} ref Name to dereference.
	   * @final
	   * @private
	   */
	  detachRef: function (ref) {
	    var refs = this.getPublicInstance().refs;
	    delete refs[ref];
	  },

	  /**
	   * Get a text description of the component that can be used to identify it
	   * in error messages.
	   * @return {string} The name or null.
	   * @internal
	   */
	  getName: function () {
	    var type = this._currentElement.type;
	    var constructor = this._instance && this._instance.constructor;
	    return type.displayName || constructor && constructor.displayName || type.name || constructor && constructor.name || null;
	  },

	  /**
	   * Get the publicly accessible representation of this component - i.e. what
	   * is exposed by refs and returned by render. Can be null for stateless
	   * components.
	   *
	   * @return {ReactComponent} the public component instance.
	   * @internal
	   */
	  getPublicInstance: function () {
	    var inst = this._instance;
	    if (this._compositeType === CompositeTypes.StatelessFunctional) {
	      return null;
	    }
	    return inst;
	  },

	  // Stub
	  _instantiateReactComponent: null

	};

	module.exports = ReactCompositeComponent;

/***/ },
/* 364 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	/* globals __REACT_DEVTOOLS_GLOBAL_HOOK__*/

	'use strict';

	var ReactDOMComponentTree = __webpack_require__(11);
	var ReactDefaultInjection = __webpack_require__(377);
	var ReactMount = __webpack_require__(171);
	var ReactReconciler = __webpack_require__(38);
	var ReactUpdates = __webpack_require__(22);
	var ReactVersion = __webpack_require__(390);

	var findDOMNode = __webpack_require__(406);
	var getHostComponentFromComposite = __webpack_require__(176);
	var renderSubtreeIntoContainer = __webpack_require__(413);
	var warning = __webpack_require__(4);

	ReactDefaultInjection.inject();

	var ReactDOM = {
	  findDOMNode: findDOMNode,
	  render: ReactMount.render,
	  unmountComponentAtNode: ReactMount.unmountComponentAtNode,
	  version: ReactVersion,

	  /* eslint-disable camelcase */
	  unstable_batchedUpdates: ReactUpdates.batchedUpdates,
	  unstable_renderSubtreeIntoContainer: renderSubtreeIntoContainer
	};

	// Inject the runtime into a devtools global hook regardless of browser.
	// Allows for debugging when the hook is injected on the page.
	if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.inject === 'function') {
	  __REACT_DEVTOOLS_GLOBAL_HOOK__.inject({
	    ComponentTree: {
	      getClosestInstanceFromNode: ReactDOMComponentTree.getClosestInstanceFromNode,
	      getNodeFromInstance: function (inst) {
	        // inst is an internal instance (but could be a composite)
	        if (inst._renderedComponent) {
	          inst = getHostComponentFromComposite(inst);
	        }
	        if (inst) {
	          return ReactDOMComponentTree.getNodeFromInstance(inst);
	        } else {
	          return null;
	        }
	      }
	    },
	    Mount: ReactMount,
	    Reconciler: ReactReconciler
	  });
	}

	if (false) {
	  var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');
	  if (ExecutionEnvironment.canUseDOM && window.top === window.self) {

	    // First check if devtools is not installed
	    if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {
	      // If we're in Chrome or Firefox, provide a download link if not installed.
	      if (navigator.userAgent.indexOf('Chrome') > -1 && navigator.userAgent.indexOf('Edge') === -1 || navigator.userAgent.indexOf('Firefox') > -1) {
	        // Firefox does not have the issue with devtools loaded over file://
	        var showFileUrlMessage = window.location.protocol.indexOf('http') === -1 && navigator.userAgent.indexOf('Firefox') === -1;
	        console.debug('Download the React DevTools ' + (showFileUrlMessage ? 'and use an HTTP server (instead of a file: URL) ' : '') + 'for a better development experience: ' + 'https://fb.me/react-devtools');
	      }
	    }

	    var testFunc = function testFn() {};
	    process.env.NODE_ENV !== 'production' ? warning((testFunc.name || testFunc.toString()).indexOf('testFn') !== -1, 'It looks like you\'re using a minified copy of the development build ' + 'of React. When deploying React apps to production, make sure to use ' + 'the production build which skips development warnings and is faster. ' + 'See https://fb.me/react-minification for more details.') : void 0;

	    // If we're in IE8, check to see if we are in compatibility mode and provide
	    // information on preventing compatibility mode
	    var ieCompatibilityMode = document.documentMode && document.documentMode < 8;

	    process.env.NODE_ENV !== 'production' ? warning(!ieCompatibilityMode, 'Internet Explorer is running in compatibility mode; please add the ' + 'following tag to your HTML to prevent this from happening: ' + '<meta http-equiv="X-UA-Compatible" content="IE=edge" />') : void 0;

	    var expectedFeatures = [
	    // shims
	    Array.isArray, Array.prototype.every, Array.prototype.forEach, Array.prototype.indexOf, Array.prototype.map, Date.now, Function.prototype.bind, Object.keys, String.prototype.trim];

	    for (var i = 0; i < expectedFeatures.length; i++) {
	      if (!expectedFeatures[i]) {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'One or more ES5 shims expected by React are not available: ' + 'https://fb.me/react-warning-polyfills') : void 0;
	        break;
	      }
	    }
	  }
	}

	if (false) {
	  var ReactInstrumentation = require('./ReactInstrumentation');
	  var ReactDOMUnknownPropertyHook = require('./ReactDOMUnknownPropertyHook');
	  var ReactDOMNullInputValuePropHook = require('./ReactDOMNullInputValuePropHook');
	  var ReactDOMInvalidARIAHook = require('./ReactDOMInvalidARIAHook');

	  ReactInstrumentation.debugTool.addHook(ReactDOMUnknownPropertyHook);
	  ReactInstrumentation.debugTool.addHook(ReactDOMNullInputValuePropHook);
	  ReactInstrumentation.debugTool.addHook(ReactDOMInvalidARIAHook);
	}

	module.exports = ReactDOM;

/***/ },
/* 365 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	/* global hasOwnProperty:true */

	'use strict';

	var _prodInvariant = __webpack_require__(5),
	    _assign = __webpack_require__(7);

	var AutoFocusUtils = __webpack_require__(352);
	var CSSPropertyOperations = __webpack_require__(354);
	var DOMLazyTree = __webpack_require__(36);
	var DOMNamespaces = __webpack_require__(93);
	var DOMProperty = __webpack_require__(37);
	var DOMPropertyOperations = __webpack_require__(164);
	var EventPluginHub = __webpack_require__(49);
	var EventPluginRegistry = __webpack_require__(94);
	var ReactBrowserEventEmitter = __webpack_require__(66);
	var ReactDOMComponentFlags = __webpack_require__(165);
	var ReactDOMComponentTree = __webpack_require__(11);
	var ReactDOMInput = __webpack_require__(370);
	var ReactDOMOption = __webpack_require__(371);
	var ReactDOMSelect = __webpack_require__(166);
	var ReactDOMTextarea = __webpack_require__(374);
	var ReactInstrumentation = __webpack_require__(20);
	var ReactMultiChild = __webpack_require__(383);
	var ReactServerRenderingTransaction = __webpack_require__(388);

	var emptyFunction = __webpack_require__(18);
	var escapeTextContentForBrowser = __webpack_require__(69);
	var invariant = __webpack_require__(3);
	var isEventSupported = __webpack_require__(105);
	var shallowEqual = __webpack_require__(60);
	var validateDOMNesting = __webpack_require__(107);
	var warning = __webpack_require__(4);

	var Flags = ReactDOMComponentFlags;
	var deleteListener = EventPluginHub.deleteListener;
	var getNode = ReactDOMComponentTree.getNodeFromInstance;
	var listenTo = ReactBrowserEventEmitter.listenTo;
	var registrationNameModules = EventPluginRegistry.registrationNameModules;

	// For quickly matching children type, to test if can be treated as content.
	var CONTENT_TYPES = { 'string': true, 'number': true };

	var STYLE = 'style';
	var HTML = '__html';
	var RESERVED_PROPS = {
	  children: null,
	  dangerouslySetInnerHTML: null,
	  suppressContentEditableWarning: null
	};

	// Node type for document fragments (Node.DOCUMENT_FRAGMENT_NODE).
	var DOC_FRAGMENT_TYPE = 11;

	function getDeclarationErrorAddendum(internalInstance) {
	  if (internalInstance) {
	    var owner = internalInstance._currentElement._owner || null;
	    if (owner) {
	      var name = owner.getName();
	      if (name) {
	        return ' This DOM node was rendered by `' + name + '`.';
	      }
	    }
	  }
	  return '';
	}

	function friendlyStringify(obj) {
	  if (typeof obj === 'object') {
	    if (Array.isArray(obj)) {
	      return '[' + obj.map(friendlyStringify).join(', ') + ']';
	    } else {
	      var pairs = [];
	      for (var key in obj) {
	        if (Object.prototype.hasOwnProperty.call(obj, key)) {
	          var keyEscaped = /^[a-z$_][\w$_]*$/i.test(key) ? key : JSON.stringify(key);
	          pairs.push(keyEscaped + ': ' + friendlyStringify(obj[key]));
	        }
	      }
	      return '{' + pairs.join(', ') + '}';
	    }
	  } else if (typeof obj === 'string') {
	    return JSON.stringify(obj);
	  } else if (typeof obj === 'function') {
	    return '[function object]';
	  }
	  // Differs from JSON.stringify in that undefined because undefined and that
	  // inf and nan don't become null
	  return String(obj);
	}

	var styleMutationWarning = {};

	function checkAndWarnForMutatedStyle(style1, style2, component) {
	  if (style1 == null || style2 == null) {
	    return;
	  }
	  if (shallowEqual(style1, style2)) {
	    return;
	  }

	  var componentName = component._tag;
	  var owner = component._currentElement._owner;
	  var ownerName;
	  if (owner) {
	    ownerName = owner.getName();
	  }

	  var hash = ownerName + '|' + componentName;

	  if (styleMutationWarning.hasOwnProperty(hash)) {
	    return;
	  }

	  styleMutationWarning[hash] = true;

	   false ? warning(false, '`%s` was passed a style object that has previously been mutated. ' + 'Mutating `style` is deprecated. Consider cloning it beforehand. Check ' + 'the `render` %s. Previous style: %s. Mutated style: %s.', componentName, owner ? 'of `' + ownerName + '`' : 'using <' + componentName + '>', friendlyStringify(style1), friendlyStringify(style2)) : void 0;
	}

	/**
	 * @param {object} component
	 * @param {?object} props
	 */
	function assertValidProps(component, props) {
	  if (!props) {
	    return;
	  }
	  // Note the use of `==` which checks for null or undefined.
	  if (voidElementTags[component._tag]) {
	    !(props.children == null && props.dangerouslySetInnerHTML == null) ?  false ? invariant(false, '%s is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.%s', component._tag, component._currentElement._owner ? ' Check the render method of ' + component._currentElement._owner.getName() + '.' : '') : _prodInvariant('137', component._tag, component._currentElement._owner ? ' Check the render method of ' + component._currentElement._owner.getName() + '.' : '') : void 0;
	  }
	  if (props.dangerouslySetInnerHTML != null) {
	    !(props.children == null) ?  false ? invariant(false, 'Can only set one of `children` or `props.dangerouslySetInnerHTML`.') : _prodInvariant('60') : void 0;
	    !(typeof props.dangerouslySetInnerHTML === 'object' && HTML in props.dangerouslySetInnerHTML) ?  false ? invariant(false, '`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://fb.me/react-invariant-dangerously-set-inner-html for more information.') : _prodInvariant('61') : void 0;
	  }
	  if (false) {
	    process.env.NODE_ENV !== 'production' ? warning(props.innerHTML == null, 'Directly setting property `innerHTML` is not permitted. ' + 'For more information, lookup documentation on `dangerouslySetInnerHTML`.') : void 0;
	    process.env.NODE_ENV !== 'production' ? warning(props.suppressContentEditableWarning || !props.contentEditable || props.children == null, 'A component is `contentEditable` and contains `children` managed by ' + 'React. It is now your responsibility to guarantee that none of ' + 'those nodes are unexpectedly modified or duplicated. This is ' + 'probably not intentional.') : void 0;
	    process.env.NODE_ENV !== 'production' ? warning(props.onFocusIn == null && props.onFocusOut == null, 'React uses onFocus and onBlur instead of onFocusIn and onFocusOut. ' + 'All React events are normalized to bubble, so onFocusIn and onFocusOut ' + 'are not needed/supported by React.') : void 0;
	  }
	  !(props.style == null || typeof props.style === 'object') ?  false ? invariant(false, 'The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + \'em\'}} when using JSX.%s', getDeclarationErrorAddendum(component)) : _prodInvariant('62', getDeclarationErrorAddendum(component)) : void 0;
	}

	function enqueuePutListener(inst, registrationName, listener, transaction) {
	  if (transaction instanceof ReactServerRenderingTransaction) {
	    return;
	  }
	  if (false) {
	    // IE8 has no API for event capturing and the `onScroll` event doesn't
	    // bubble.
	    process.env.NODE_ENV !== 'production' ? warning(registrationName !== 'onScroll' || isEventSupported('scroll', true), 'This browser doesn\'t support the `onScroll` event') : void 0;
	  }
	  var containerInfo = inst._hostContainerInfo;
	  var isDocumentFragment = containerInfo._node && containerInfo._node.nodeType === DOC_FRAGMENT_TYPE;
	  var doc = isDocumentFragment ? containerInfo._node : containerInfo._ownerDocument;
	  listenTo(registrationName, doc);
	  transaction.getReactMountReady().enqueue(putListener, {
	    inst: inst,
	    registrationName: registrationName,
	    listener: listener
	  });
	}

	function putListener() {
	  var listenerToPut = this;
	  EventPluginHub.putListener(listenerToPut.inst, listenerToPut.registrationName, listenerToPut.listener);
	}

	function inputPostMount() {
	  var inst = this;
	  ReactDOMInput.postMountWrapper(inst);
	}

	function textareaPostMount() {
	  var inst = this;
	  ReactDOMTextarea.postMountWrapper(inst);
	}

	function optionPostMount() {
	  var inst = this;
	  ReactDOMOption.postMountWrapper(inst);
	}

	var setAndValidateContentChildDev = emptyFunction;
	if (false) {
	  setAndValidateContentChildDev = function (content) {
	    var hasExistingContent = this._contentDebugID != null;
	    var debugID = this._debugID;
	    // This ID represents the inlined child that has no backing instance:
	    var contentDebugID = -debugID;

	    if (content == null) {
	      if (hasExistingContent) {
	        ReactInstrumentation.debugTool.onUnmountComponent(this._contentDebugID);
	      }
	      this._contentDebugID = null;
	      return;
	    }

	    validateDOMNesting(null, String(content), this, this._ancestorInfo);
	    this._contentDebugID = contentDebugID;
	    if (hasExistingContent) {
	      ReactInstrumentation.debugTool.onBeforeUpdateComponent(contentDebugID, content);
	      ReactInstrumentation.debugTool.onUpdateComponent(contentDebugID);
	    } else {
	      ReactInstrumentation.debugTool.onBeforeMountComponent(contentDebugID, content, debugID);
	      ReactInstrumentation.debugTool.onMountComponent(contentDebugID);
	      ReactInstrumentation.debugTool.onSetChildren(debugID, [contentDebugID]);
	    }
	  };
	}

	// There are so many media events, it makes sense to just
	// maintain a list rather than create a `trapBubbledEvent` for each
	var mediaEvents = {
	  topAbort: 'abort',
	  topCanPlay: 'canplay',
	  topCanPlayThrough: 'canplaythrough',
	  topDurationChange: 'durationchange',
	  topEmptied: 'emptied',
	  topEncrypted: 'encrypted',
	  topEnded: 'ended',
	  topError: 'error',
	  topLoadedData: 'loadeddata',
	  topLoadedMetadata: 'loadedmetadata',
	  topLoadStart: 'loadstart',
	  topPause: 'pause',
	  topPlay: 'play',
	  topPlaying: 'playing',
	  topProgress: 'progress',
	  topRateChange: 'ratechange',
	  topSeeked: 'seeked',
	  topSeeking: 'seeking',
	  topStalled: 'stalled',
	  topSuspend: 'suspend',
	  topTimeUpdate: 'timeupdate',
	  topVolumeChange: 'volumechange',
	  topWaiting: 'waiting'
	};

	function trapBubbledEventsLocal() {
	  var inst = this;
	  // If a component renders to null or if another component fatals and causes
	  // the state of the tree to be corrupted, `node` here can be null.
	  !inst._rootNodeID ?  false ? invariant(false, 'Must be mounted to trap events') : _prodInvariant('63') : void 0;
	  var node = getNode(inst);
	  !node ?  false ? invariant(false, 'trapBubbledEvent(...): Requires node to be rendered.') : _prodInvariant('64') : void 0;

	  switch (inst._tag) {
	    case 'iframe':
	    case 'object':
	      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent('topLoad', 'load', node)];
	      break;
	    case 'video':
	    case 'audio':

	      inst._wrapperState.listeners = [];
	      // Create listener for each media event
	      for (var event in mediaEvents) {
	        if (mediaEvents.hasOwnProperty(event)) {
	          inst._wrapperState.listeners.push(ReactBrowserEventEmitter.trapBubbledEvent(event, mediaEvents[event], node));
	        }
	      }
	      break;
	    case 'source':
	      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent('topError', 'error', node)];
	      break;
	    case 'img':
	      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent('topError', 'error', node), ReactBrowserEventEmitter.trapBubbledEvent('topLoad', 'load', node)];
	      break;
	    case 'form':
	      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent('topReset', 'reset', node), ReactBrowserEventEmitter.trapBubbledEvent('topSubmit', 'submit', node)];
	      break;
	    case 'input':
	    case 'select':
	    case 'textarea':
	      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent('topInvalid', 'invalid', node)];
	      break;
	  }
	}

	function postUpdateSelectWrapper() {
	  ReactDOMSelect.postUpdateWrapper(this);
	}

	// For HTML, certain tags should omit their close tag. We keep a whitelist for
	// those special-case tags.

	var omittedCloseTags = {
	  'area': true,
	  'base': true,
	  'br': true,
	  'col': true,
	  'embed': true,
	  'hr': true,
	  'img': true,
	  'input': true,
	  'keygen': true,
	  'link': true,
	  'meta': true,
	  'param': true,
	  'source': true,
	  'track': true,
	  'wbr': true
	};

	var newlineEatingTags = {
	  'listing': true,
	  'pre': true,
	  'textarea': true
	};

	// For HTML, certain tags cannot have children. This has the same purpose as
	// `omittedCloseTags` except that `menuitem` should still have its closing tag.

	var voidElementTags = _assign({
	  'menuitem': true
	}, omittedCloseTags);

	// We accept any tag to be rendered but since this gets injected into arbitrary
	// HTML, we want to make sure that it's a safe tag.
	// http://www.w3.org/TR/REC-xml/#NT-Name

	var VALID_TAG_REGEX = /^[a-zA-Z][a-zA-Z:_\.\-\d]*$/; // Simplified subset
	var validatedTagCache = {};
	var hasOwnProperty = {}.hasOwnProperty;

	function validateDangerousTag(tag) {
	  if (!hasOwnProperty.call(validatedTagCache, tag)) {
	    !VALID_TAG_REGEX.test(tag) ?  false ? invariant(false, 'Invalid tag: %s', tag) : _prodInvariant('65', tag) : void 0;
	    validatedTagCache[tag] = true;
	  }
	}

	function isCustomComponent(tagName, props) {
	  return tagName.indexOf('-') >= 0 || props.is != null;
	}

	var globalIdCounter = 1;

	/**
	 * Creates a new React class that is idempotent and capable of containing other
	 * React components. It accepts event listeners and DOM properties that are
	 * valid according to `DOMProperty`.
	 *
	 *  - Event listeners: `onClick`, `onMouseDown`, etc.
	 *  - DOM properties: `className`, `name`, `title`, etc.
	 *
	 * The `style` property functions differently from the DOM API. It accepts an
	 * object mapping of style properties to values.
	 *
	 * @constructor ReactDOMComponent
	 * @extends ReactMultiChild
	 */
	function ReactDOMComponent(element) {
	  var tag = element.type;
	  validateDangerousTag(tag);
	  this._currentElement = element;
	  this._tag = tag.toLowerCase();
	  this._namespaceURI = null;
	  this._renderedChildren = null;
	  this._previousStyle = null;
	  this._previousStyleCopy = null;
	  this._hostNode = null;
	  this._hostParent = null;
	  this._rootNodeID = 0;
	  this._domID = 0;
	  this._hostContainerInfo = null;
	  this._wrapperState = null;
	  this._topLevelWrapper = null;
	  this._flags = 0;
	  if (false) {
	    this._ancestorInfo = null;
	    setAndValidateContentChildDev.call(this, null);
	  }
	}

	ReactDOMComponent.displayName = 'ReactDOMComponent';

	ReactDOMComponent.Mixin = {

	  /**
	   * Generates root tag markup then recurses. This method has side effects and
	   * is not idempotent.
	   *
	   * @internal
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {?ReactDOMComponent} the parent component instance
	   * @param {?object} info about the host container
	   * @param {object} context
	   * @return {string} The computed markup.
	   */
	  mountComponent: function (transaction, hostParent, hostContainerInfo, context) {
	    this._rootNodeID = globalIdCounter++;
	    this._domID = hostContainerInfo._idCounter++;
	    this._hostParent = hostParent;
	    this._hostContainerInfo = hostContainerInfo;

	    var props = this._currentElement.props;

	    switch (this._tag) {
	      case 'audio':
	      case 'form':
	      case 'iframe':
	      case 'img':
	      case 'link':
	      case 'object':
	      case 'source':
	      case 'video':
	        this._wrapperState = {
	          listeners: null
	        };
	        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
	        break;
	      case 'input':
	        ReactDOMInput.mountWrapper(this, props, hostParent);
	        props = ReactDOMInput.getHostProps(this, props);
	        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
	        break;
	      case 'option':
	        ReactDOMOption.mountWrapper(this, props, hostParent);
	        props = ReactDOMOption.getHostProps(this, props);
	        break;
	      case 'select':
	        ReactDOMSelect.mountWrapper(this, props, hostParent);
	        props = ReactDOMSelect.getHostProps(this, props);
	        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
	        break;
	      case 'textarea':
	        ReactDOMTextarea.mountWrapper(this, props, hostParent);
	        props = ReactDOMTextarea.getHostProps(this, props);
	        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
	        break;
	    }

	    assertValidProps(this, props);

	    // We create tags in the namespace of their parent container, except HTML
	    // tags get no namespace.
	    var namespaceURI;
	    var parentTag;
	    if (hostParent != null) {
	      namespaceURI = hostParent._namespaceURI;
	      parentTag = hostParent._tag;
	    } else if (hostContainerInfo._tag) {
	      namespaceURI = hostContainerInfo._namespaceURI;
	      parentTag = hostContainerInfo._tag;
	    }
	    if (namespaceURI == null || namespaceURI === DOMNamespaces.svg && parentTag === 'foreignobject') {
	      namespaceURI = DOMNamespaces.html;
	    }
	    if (namespaceURI === DOMNamespaces.html) {
	      if (this._tag === 'svg') {
	        namespaceURI = DOMNamespaces.svg;
	      } else if (this._tag === 'math') {
	        namespaceURI = DOMNamespaces.mathml;
	      }
	    }
	    this._namespaceURI = namespaceURI;

	    if (false) {
	      var parentInfo;
	      if (hostParent != null) {
	        parentInfo = hostParent._ancestorInfo;
	      } else if (hostContainerInfo._tag) {
	        parentInfo = hostContainerInfo._ancestorInfo;
	      }
	      if (parentInfo) {
	        // parentInfo should always be present except for the top-level
	        // component when server rendering
	        validateDOMNesting(this._tag, null, this, parentInfo);
	      }
	      this._ancestorInfo = validateDOMNesting.updatedAncestorInfo(parentInfo, this._tag, this);
	    }

	    var mountImage;
	    if (transaction.useCreateElement) {
	      var ownerDocument = hostContainerInfo._ownerDocument;
	      var el;
	      if (namespaceURI === DOMNamespaces.html) {
	        if (this._tag === 'script') {
	          // Create the script via .innerHTML so its "parser-inserted" flag is
	          // set to true and it does not execute
	          var div = ownerDocument.createElement('div');
	          var type = this._currentElement.type;
	          div.innerHTML = '<' + type + '></' + type + '>';
	          el = div.removeChild(div.firstChild);
	        } else if (props.is) {
	          el = ownerDocument.createElement(this._currentElement.type, props.is);
	        } else {
	          // Separate else branch instead of using `props.is || undefined` above becuase of a Firefox bug.
	          // See discussion in https://github.com/facebook/react/pull/6896
	          // and discussion in https://bugzilla.mozilla.org/show_bug.cgi?id=1276240
	          el = ownerDocument.createElement(this._currentElement.type);
	        }
	      } else {
	        el = ownerDocument.createElementNS(namespaceURI, this._currentElement.type);
	      }
	      ReactDOMComponentTree.precacheNode(this, el);
	      this._flags |= Flags.hasCachedChildNodes;
	      if (!this._hostParent) {
	        DOMPropertyOperations.setAttributeForRoot(el);
	      }
	      this._updateDOMProperties(null, props, transaction);
	      var lazyTree = DOMLazyTree(el);
	      this._createInitialChildren(transaction, props, context, lazyTree);
	      mountImage = lazyTree;
	    } else {
	      var tagOpen = this._createOpenTagMarkupAndPutListeners(transaction, props);
	      var tagContent = this._createContentMarkup(transaction, props, context);
	      if (!tagContent && omittedCloseTags[this._tag]) {
	        mountImage = tagOpen + '/>';
	      } else {
	        mountImage = tagOpen + '>' + tagContent + '</' + this._currentElement.type + '>';
	      }
	    }

	    switch (this._tag) {
	      case 'input':
	        transaction.getReactMountReady().enqueue(inputPostMount, this);
	        if (props.autoFocus) {
	          transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);
	        }
	        break;
	      case 'textarea':
	        transaction.getReactMountReady().enqueue(textareaPostMount, this);
	        if (props.autoFocus) {
	          transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);
	        }
	        break;
	      case 'select':
	        if (props.autoFocus) {
	          transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);
	        }
	        break;
	      case 'button':
	        if (props.autoFocus) {
	          transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);
	        }
	        break;
	      case 'option':
	        transaction.getReactMountReady().enqueue(optionPostMount, this);
	        break;
	    }

	    return mountImage;
	  },

	  /**
	   * Creates markup for the open tag and all attributes.
	   *
	   * This method has side effects because events get registered.
	   *
	   * Iterating over object properties is faster than iterating over arrays.
	   * @see http://jsperf.com/obj-vs-arr-iteration
	   *
	   * @private
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {object} props
	   * @return {string} Markup of opening tag.
	   */
	  _createOpenTagMarkupAndPutListeners: function (transaction, props) {
	    var ret = '<' + this._currentElement.type;

	    for (var propKey in props) {
	      if (!props.hasOwnProperty(propKey)) {
	        continue;
	      }
	      var propValue = props[propKey];
	      if (propValue == null) {
	        continue;
	      }
	      if (registrationNameModules.hasOwnProperty(propKey)) {
	        if (propValue) {
	          enqueuePutListener(this, propKey, propValue, transaction);
	        }
	      } else {
	        if (propKey === STYLE) {
	          if (propValue) {
	            if (false) {
	              // See `_updateDOMProperties`. style block
	              this._previousStyle = propValue;
	            }
	            propValue = this._previousStyleCopy = _assign({}, props.style);
	          }
	          propValue = CSSPropertyOperations.createMarkupForStyles(propValue, this);
	        }
	        var markup = null;
	        if (this._tag != null && isCustomComponent(this._tag, props)) {
	          if (!RESERVED_PROPS.hasOwnProperty(propKey)) {
	            markup = DOMPropertyOperations.createMarkupForCustomAttribute(propKey, propValue);
	          }
	        } else {
	          markup = DOMPropertyOperations.createMarkupForProperty(propKey, propValue);
	        }
	        if (markup) {
	          ret += ' ' + markup;
	        }
	      }
	    }

	    // For static pages, no need to put React ID and checksum. Saves lots of
	    // bytes.
	    if (transaction.renderToStaticMarkup) {
	      return ret;
	    }

	    if (!this._hostParent) {
	      ret += ' ' + DOMPropertyOperations.createMarkupForRoot();
	    }
	    ret += ' ' + DOMPropertyOperations.createMarkupForID(this._domID);
	    return ret;
	  },

	  /**
	   * Creates markup for the content between the tags.
	   *
	   * @private
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {object} props
	   * @param {object} context
	   * @return {string} Content markup.
	   */
	  _createContentMarkup: function (transaction, props, context) {
	    var ret = '';

	    // Intentional use of != to avoid catching zero/false.
	    var innerHTML = props.dangerouslySetInnerHTML;
	    if (innerHTML != null) {
	      if (innerHTML.__html != null) {
	        ret = innerHTML.__html;
	      }
	    } else {
	      var contentToUse = CONTENT_TYPES[typeof props.children] ? props.children : null;
	      var childrenToUse = contentToUse != null ? null : props.children;
	      if (contentToUse != null) {
	        // TODO: Validate that text is allowed as a child of this node
	        ret = escapeTextContentForBrowser(contentToUse);
	        if (false) {
	          setAndValidateContentChildDev.call(this, contentToUse);
	        }
	      } else if (childrenToUse != null) {
	        var mountImages = this.mountChildren(childrenToUse, transaction, context);
	        ret = mountImages.join('');
	      }
	    }
	    if (newlineEatingTags[this._tag] && ret.charAt(0) === '\n') {
	      // text/html ignores the first character in these tags if it's a newline
	      // Prefer to break application/xml over text/html (for now) by adding
	      // a newline specifically to get eaten by the parser. (Alternately for
	      // textareas, replacing "^\n" with "\r\n" doesn't get eaten, and the first
	      // \r is normalized out by HTMLTextAreaElement#value.)
	      // See: <http://www.w3.org/TR/html-polyglot/#newlines-in-textarea-and-pre>
	      // See: <http://www.w3.org/TR/html5/syntax.html#element-restrictions>
	      // See: <http://www.w3.org/TR/html5/syntax.html#newlines>
	      // See: Parsing of "textarea" "listing" and "pre" elements
	      //  from <http://www.w3.org/TR/html5/syntax.html#parsing-main-inbody>
	      return '\n' + ret;
	    } else {
	      return ret;
	    }
	  },

	  _createInitialChildren: function (transaction, props, context, lazyTree) {
	    // Intentional use of != to avoid catching zero/false.
	    var innerHTML = props.dangerouslySetInnerHTML;
	    if (innerHTML != null) {
	      if (innerHTML.__html != null) {
	        DOMLazyTree.queueHTML(lazyTree, innerHTML.__html);
	      }
	    } else {
	      var contentToUse = CONTENT_TYPES[typeof props.children] ? props.children : null;
	      var childrenToUse = contentToUse != null ? null : props.children;
	      // TODO: Validate that text is allowed as a child of this node
	      if (contentToUse != null) {
	        // Avoid setting textContent when the text is empty. In IE11 setting
	        // textContent on a text area will cause the placeholder to not
	        // show within the textarea until it has been focused and blurred again.
	        // https://github.com/facebook/react/issues/6731#issuecomment-254874553
	        if (contentToUse !== '') {
	          if (false) {
	            setAndValidateContentChildDev.call(this, contentToUse);
	          }
	          DOMLazyTree.queueText(lazyTree, contentToUse);
	        }
	      } else if (childrenToUse != null) {
	        var mountImages = this.mountChildren(childrenToUse, transaction, context);
	        for (var i = 0; i < mountImages.length; i++) {
	          DOMLazyTree.queueChild(lazyTree, mountImages[i]);
	        }
	      }
	    }
	  },

	  /**
	   * Receives a next element and updates the component.
	   *
	   * @internal
	   * @param {ReactElement} nextElement
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {object} context
	   */
	  receiveComponent: function (nextElement, transaction, context) {
	    var prevElement = this._currentElement;
	    this._currentElement = nextElement;
	    this.updateComponent(transaction, prevElement, nextElement, context);
	  },

	  /**
	   * Updates a DOM component after it has already been allocated and
	   * attached to the DOM. Reconciles the root DOM node, then recurses.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @param {ReactElement} prevElement
	   * @param {ReactElement} nextElement
	   * @internal
	   * @overridable
	   */
	  updateComponent: function (transaction, prevElement, nextElement, context) {
	    var lastProps = prevElement.props;
	    var nextProps = this._currentElement.props;

	    switch (this._tag) {
	      case 'input':
	        lastProps = ReactDOMInput.getHostProps(this, lastProps);
	        nextProps = ReactDOMInput.getHostProps(this, nextProps);
	        break;
	      case 'option':
	        lastProps = ReactDOMOption.getHostProps(this, lastProps);
	        nextProps = ReactDOMOption.getHostProps(this, nextProps);
	        break;
	      case 'select':
	        lastProps = ReactDOMSelect.getHostProps(this, lastProps);
	        nextProps = ReactDOMSelect.getHostProps(this, nextProps);
	        break;
	      case 'textarea':
	        lastProps = ReactDOMTextarea.getHostProps(this, lastProps);
	        nextProps = ReactDOMTextarea.getHostProps(this, nextProps);
	        break;
	    }

	    assertValidProps(this, nextProps);
	    this._updateDOMProperties(lastProps, nextProps, transaction);
	    this._updateDOMChildren(lastProps, nextProps, transaction, context);

	    switch (this._tag) {
	      case 'input':
	        // Update the wrapper around inputs *after* updating props. This has to
	        // happen after `_updateDOMProperties`. Otherwise HTML5 input validations
	        // raise warnings and prevent the new value from being assigned.
	        ReactDOMInput.updateWrapper(this);
	        break;
	      case 'textarea':
	        ReactDOMTextarea.updateWrapper(this);
	        break;
	      case 'select':
	        // <select> value update needs to occur after <option> children
	        // reconciliation
	        transaction.getReactMountReady().enqueue(postUpdateSelectWrapper, this);
	        break;
	    }
	  },

	  /**
	   * Reconciles the properties by detecting differences in property values and
	   * updating the DOM as necessary. This function is probably the single most
	   * critical path for performance optimization.
	   *
	   * TODO: Benchmark whether checking for changed values in memory actually
	   *       improves performance (especially statically positioned elements).
	   * TODO: Benchmark the effects of putting this at the top since 99% of props
	   *       do not change for a given reconciliation.
	   * TODO: Benchmark areas that can be improved with caching.
	   *
	   * @private
	   * @param {object} lastProps
	   * @param {object} nextProps
	   * @param {?DOMElement} node
	   */
	  _updateDOMProperties: function (lastProps, nextProps, transaction) {
	    var propKey;
	    var styleName;
	    var styleUpdates;
	    for (propKey in lastProps) {
	      if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {
	        continue;
	      }
	      if (propKey === STYLE) {
	        var lastStyle = this._previousStyleCopy;
	        for (styleName in lastStyle) {
	          if (lastStyle.hasOwnProperty(styleName)) {
	            styleUpdates = styleUpdates || {};
	            styleUpdates[styleName] = '';
	          }
	        }
	        this._previousStyleCopy = null;
	      } else if (registrationNameModules.hasOwnProperty(propKey)) {
	        if (lastProps[propKey]) {
	          // Only call deleteListener if there was a listener previously or
	          // else willDeleteListener gets called when there wasn't actually a
	          // listener (e.g., onClick={null})
	          deleteListener(this, propKey);
	        }
	      } else if (isCustomComponent(this._tag, lastProps)) {
	        if (!RESERVED_PROPS.hasOwnProperty(propKey)) {
	          DOMPropertyOperations.deleteValueForAttribute(getNode(this), propKey);
	        }
	      } else if (DOMProperty.properties[propKey] || DOMProperty.isCustomAttribute(propKey)) {
	        DOMPropertyOperations.deleteValueForProperty(getNode(this), propKey);
	      }
	    }
	    for (propKey in nextProps) {
	      var nextProp = nextProps[propKey];
	      var lastProp = propKey === STYLE ? this._previousStyleCopy : lastProps != null ? lastProps[propKey] : undefined;
	      if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {
	        continue;
	      }
	      if (propKey === STYLE) {
	        if (nextProp) {
	          if (false) {
	            checkAndWarnForMutatedStyle(this._previousStyleCopy, this._previousStyle, this);
	            this._previousStyle = nextProp;
	          }
	          nextProp = this._previousStyleCopy = _assign({}, nextProp);
	        } else {
	          this._previousStyleCopy = null;
	        }
	        if (lastProp) {
	          // Unset styles on `lastProp` but not on `nextProp`.
	          for (styleName in lastProp) {
	            if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
	              styleUpdates = styleUpdates || {};
	              styleUpdates[styleName] = '';
	            }
	          }
	          // Update styles that changed since `lastProp`.
	          for (styleName in nextProp) {
	            if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
	              styleUpdates = styleUpdates || {};
	              styleUpdates[styleName] = nextProp[styleName];
	            }
	          }
	        } else {
	          // Relies on `updateStylesByID` not mutating `styleUpdates`.
	          styleUpdates = nextProp;
	        }
	      } else if (registrationNameModules.hasOwnProperty(propKey)) {
	        if (nextProp) {
	          enqueuePutListener(this, propKey, nextProp, transaction);
	        } else if (lastProp) {
	          deleteListener(this, propKey);
	        }
	      } else if (isCustomComponent(this._tag, nextProps)) {
	        if (!RESERVED_PROPS.hasOwnProperty(propKey)) {
	          DOMPropertyOperations.setValueForAttribute(getNode(this), propKey, nextProp);
	        }
	      } else if (DOMProperty.properties[propKey] || DOMProperty.isCustomAttribute(propKey)) {
	        var node = getNode(this);
	        // If we're updating to null or undefined, we should remove the property
	        // from the DOM node instead of inadvertently setting to a string. This
	        // brings us in line with the same behavior we have on initial render.
	        if (nextProp != null) {
	          DOMPropertyOperations.setValueForProperty(node, propKey, nextProp);
	        } else {
	          DOMPropertyOperations.deleteValueForProperty(node, propKey);
	        }
	      }
	    }
	    if (styleUpdates) {
	      CSSPropertyOperations.setValueForStyles(getNode(this), styleUpdates, this);
	    }
	  },

	  /**
	   * Reconciles the children with the various properties that affect the
	   * children content.
	   *
	   * @param {object} lastProps
	   * @param {object} nextProps
	   * @param {ReactReconcileTransaction} transaction
	   * @param {object} context
	   */
	  _updateDOMChildren: function (lastProps, nextProps, transaction, context) {
	    var lastContent = CONTENT_TYPES[typeof lastProps.children] ? lastProps.children : null;
	    var nextContent = CONTENT_TYPES[typeof nextProps.children] ? nextProps.children : null;

	    var lastHtml = lastProps.dangerouslySetInnerHTML && lastProps.dangerouslySetInnerHTML.__html;
	    var nextHtml = nextProps.dangerouslySetInnerHTML && nextProps.dangerouslySetInnerHTML.__html;

	    // Note the use of `!=` which checks for null or undefined.
	    var lastChildren = lastContent != null ? null : lastProps.children;
	    var nextChildren = nextContent != null ? null : nextProps.children;

	    // If we're switching from children to content/html or vice versa, remove
	    // the old content
	    var lastHasContentOrHtml = lastContent != null || lastHtml != null;
	    var nextHasContentOrHtml = nextContent != null || nextHtml != null;
	    if (lastChildren != null && nextChildren == null) {
	      this.updateChildren(null, transaction, context);
	    } else if (lastHasContentOrHtml && !nextHasContentOrHtml) {
	      this.updateTextContent('');
	      if (false) {
	        ReactInstrumentation.debugTool.onSetChildren(this._debugID, []);
	      }
	    }

	    if (nextContent != null) {
	      if (lastContent !== nextContent) {
	        this.updateTextContent('' + nextContent);
	        if (false) {
	          setAndValidateContentChildDev.call(this, nextContent);
	        }
	      }
	    } else if (nextHtml != null) {
	      if (lastHtml !== nextHtml) {
	        this.updateMarkup('' + nextHtml);
	      }
	      if (false) {
	        ReactInstrumentation.debugTool.onSetChildren(this._debugID, []);
	      }
	    } else if (nextChildren != null) {
	      if (false) {
	        setAndValidateContentChildDev.call(this, null);
	      }

	      this.updateChildren(nextChildren, transaction, context);
	    }
	  },

	  getHostNode: function () {
	    return getNode(this);
	  },

	  /**
	   * Destroys all event registrations for this instance. Does not remove from
	   * the DOM. That must be done by the parent.
	   *
	   * @internal
	   */
	  unmountComponent: function (safely) {
	    switch (this._tag) {
	      case 'audio':
	      case 'form':
	      case 'iframe':
	      case 'img':
	      case 'link':
	      case 'object':
	      case 'source':
	      case 'video':
	        var listeners = this._wrapperState.listeners;
	        if (listeners) {
	          for (var i = 0; i < listeners.length; i++) {
	            listeners[i].remove();
	          }
	        }
	        break;
	      case 'html':
	      case 'head':
	      case 'body':
	        /**
	         * Components like <html> <head> and <body> can't be removed or added
	         * easily in a cross-browser way, however it's valuable to be able to
	         * take advantage of React's reconciliation for styling and <title>
	         * management. So we just document it and throw in dangerous cases.
	         */
	         true ?  false ? invariant(false, '<%s> tried to unmount. Because of cross-browser quirks it is impossible to unmount some top-level components (eg <html>, <head>, and <body>) reliably and efficiently. To fix this, have a single top-level component that never unmounts render these elements.', this._tag) : _prodInvariant('66', this._tag) : void 0;
	        break;
	    }

	    this.unmountChildren(safely);
	    ReactDOMComponentTree.uncacheNode(this);
	    EventPluginHub.deleteAllListeners(this);
	    this._rootNodeID = 0;
	    this._domID = 0;
	    this._wrapperState = null;

	    if (false) {
	      setAndValidateContentChildDev.call(this, null);
	    }
	  },

	  getPublicInstance: function () {
	    return getNode(this);
	  }

	};

	_assign(ReactDOMComponent.prototype, ReactDOMComponent.Mixin, ReactMultiChild.Mixin);

	module.exports = ReactDOMComponent;

/***/ },
/* 366 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var validateDOMNesting = __webpack_require__(107);

	var DOC_NODE_TYPE = 9;

	function ReactDOMContainerInfo(topLevelWrapper, node) {
	  var info = {
	    _topLevelWrapper: topLevelWrapper,
	    _idCounter: 1,
	    _ownerDocument: node ? node.nodeType === DOC_NODE_TYPE ? node : node.ownerDocument : null,
	    _node: node,
	    _tag: node ? node.nodeName.toLowerCase() : null,
	    _namespaceURI: node ? node.namespaceURI : null
	  };
	  if (false) {
	    info._ancestorInfo = node ? validateDOMNesting.updatedAncestorInfo(null, info._tag, null) : null;
	  }
	  return info;
	}

	module.exports = ReactDOMContainerInfo;

/***/ },
/* 367 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _assign = __webpack_require__(7);

	var DOMLazyTree = __webpack_require__(36);
	var ReactDOMComponentTree = __webpack_require__(11);

	var ReactDOMEmptyComponent = function (instantiate) {
	  // ReactCompositeComponent uses this:
	  this._currentElement = null;
	  // ReactDOMComponentTree uses these:
	  this._hostNode = null;
	  this._hostParent = null;
	  this._hostContainerInfo = null;
	  this._domID = 0;
	};
	_assign(ReactDOMEmptyComponent.prototype, {
	  mountComponent: function (transaction, hostParent, hostContainerInfo, context) {
	    var domID = hostContainerInfo._idCounter++;
	    this._domID = domID;
	    this._hostParent = hostParent;
	    this._hostContainerInfo = hostContainerInfo;

	    var nodeValue = ' react-empty: ' + this._domID + ' ';
	    if (transaction.useCreateElement) {
	      var ownerDocument = hostContainerInfo._ownerDocument;
	      var node = ownerDocument.createComment(nodeValue);
	      ReactDOMComponentTree.precacheNode(this, node);
	      return DOMLazyTree(node);
	    } else {
	      if (transaction.renderToStaticMarkup) {
	        // Normally we'd insert a comment node, but since this is a situation
	        // where React won't take over (static pages), we can simply return
	        // nothing.
	        return '';
	      }
	      return '<!--' + nodeValue + '-->';
	    }
	  },
	  receiveComponent: function () {},
	  getHostNode: function () {
	    return ReactDOMComponentTree.getNodeFromInstance(this);
	  },
	  unmountComponent: function () {
	    ReactDOMComponentTree.uncacheNode(this);
	  }
	});

	module.exports = ReactDOMEmptyComponent;

/***/ },
/* 368 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var ReactDOMFeatureFlags = {
	  useCreateElement: true,
	  useFiber: false
	};

	module.exports = ReactDOMFeatureFlags;

/***/ },
/* 369 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var DOMChildrenOperations = __webpack_require__(92);
	var ReactDOMComponentTree = __webpack_require__(11);

	/**
	 * Operations used to process updates to DOM nodes.
	 */
	var ReactDOMIDOperations = {

	  /**
	   * Updates a component's children by processing a series of updates.
	   *
	   * @param {array<object>} updates List of update configurations.
	   * @internal
	   */
	  dangerouslyProcessChildrenUpdates: function (parentInst, updates) {
	    var node = ReactDOMComponentTree.getNodeFromInstance(parentInst);
	    DOMChildrenOperations.processUpdates(node, updates);
	  }
	};

	module.exports = ReactDOMIDOperations;

/***/ },
/* 370 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(5),
	    _assign = __webpack_require__(7);

	var DOMPropertyOperations = __webpack_require__(164);
	var LinkedValueUtils = __webpack_require__(97);
	var ReactDOMComponentTree = __webpack_require__(11);
	var ReactUpdates = __webpack_require__(22);

	var invariant = __webpack_require__(3);
	var warning = __webpack_require__(4);

	var didWarnValueLink = false;
	var didWarnCheckedLink = false;
	var didWarnValueDefaultValue = false;
	var didWarnCheckedDefaultChecked = false;
	var didWarnControlledToUncontrolled = false;
	var didWarnUncontrolledToControlled = false;

	function forceUpdateIfMounted() {
	  if (this._rootNodeID) {
	    // DOM component is still mounted; update
	    ReactDOMInput.updateWrapper(this);
	  }
	}

	function isControlled(props) {
	  var usesChecked = props.type === 'checkbox' || props.type === 'radio';
	  return usesChecked ? props.checked != null : props.value != null;
	}

	/**
	 * Implements an <input> host component that allows setting these optional
	 * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.
	 *
	 * If `checked` or `value` are not supplied (or null/undefined), user actions
	 * that affect the checked state or value will trigger updates to the element.
	 *
	 * If they are supplied (and not null/undefined), the rendered element will not
	 * trigger updates to the element. Instead, the props must change in order for
	 * the rendered element to be updated.
	 *
	 * The rendered element will be initialized as unchecked (or `defaultChecked`)
	 * with an empty value (or `defaultValue`).
	 *
	 * @see http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html
	 */
	var ReactDOMInput = {
	  getHostProps: function (inst, props) {
	    var value = LinkedValueUtils.getValue(props);
	    var checked = LinkedValueUtils.getChecked(props);

	    var hostProps = _assign({
	      // Make sure we set .type before any other properties (setting .value
	      // before .type means .value is lost in IE11 and below)
	      type: undefined,
	      // Make sure we set .step before .value (setting .value before .step
	      // means .value is rounded on mount, based upon step precision)
	      step: undefined,
	      // Make sure we set .min & .max before .value (to ensure proper order
	      // in corner cases such as min or max deriving from value, e.g. Issue #7170)
	      min: undefined,
	      max: undefined
	    }, props, {
	      defaultChecked: undefined,
	      defaultValue: undefined,
	      value: value != null ? value : inst._wrapperState.initialValue,
	      checked: checked != null ? checked : inst._wrapperState.initialChecked,
	      onChange: inst._wrapperState.onChange
	    });

	    return hostProps;
	  },

	  mountWrapper: function (inst, props) {
	    if (false) {
	      LinkedValueUtils.checkPropTypes('input', props, inst._currentElement._owner);

	      var owner = inst._currentElement._owner;

	      if (props.valueLink !== undefined && !didWarnValueLink) {
	        process.env.NODE_ENV !== 'production' ? warning(false, '`valueLink` prop on `input` is deprecated; set `value` and `onChange` instead.') : void 0;
	        didWarnValueLink = true;
	      }
	      if (props.checkedLink !== undefined && !didWarnCheckedLink) {
	        process.env.NODE_ENV !== 'production' ? warning(false, '`checkedLink` prop on `input` is deprecated; set `value` and `onChange` instead.') : void 0;
	        didWarnCheckedLink = true;
	      }
	      if (props.checked !== undefined && props.defaultChecked !== undefined && !didWarnCheckedDefaultChecked) {
	        process.env.NODE_ENV !== 'production' ? warning(false, '%s contains an input of type %s with both checked and defaultChecked props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the checked prop, or the defaultChecked prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components', owner && owner.getName() || 'A component', props.type) : void 0;
	        didWarnCheckedDefaultChecked = true;
	      }
	      if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue) {
	        process.env.NODE_ENV !== 'production' ? warning(false, '%s contains an input of type %s with both value and defaultValue props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components', owner && owner.getName() || 'A component', props.type) : void 0;
	        didWarnValueDefaultValue = true;
	      }
	    }

	    var defaultValue = props.defaultValue;
	    inst._wrapperState = {
	      initialChecked: props.checked != null ? props.checked : props.defaultChecked,
	      initialValue: props.value != null ? props.value : defaultValue,
	      listeners: null,
	      onChange: _handleChange.bind(inst),
	      controlled: isControlled(props)
	    };
	  },

	  updateWrapper: function (inst) {
	    var props = inst._currentElement.props;

	    if (false) {
	      var controlled = isControlled(props);
	      var owner = inst._currentElement._owner;

	      if (!inst._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {
	        process.env.NODE_ENV !== 'production' ? warning(false, '%s is changing an uncontrolled input of type %s to be controlled. ' + 'Input elements should not switch from uncontrolled to controlled (or vice versa). ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://fb.me/react-controlled-components', owner && owner.getName() || 'A component', props.type) : void 0;
	        didWarnUncontrolledToControlled = true;
	      }
	      if (inst._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {
	        process.env.NODE_ENV !== 'production' ? warning(false, '%s is changing a controlled input of type %s to be uncontrolled. ' + 'Input elements should not switch from controlled to uncontrolled (or vice versa). ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://fb.me/react-controlled-components', owner && owner.getName() || 'A component', props.type) : void 0;
	        didWarnControlledToUncontrolled = true;
	      }
	    }

	    // TODO: Shouldn't this be getChecked(props)?
	    var checked = props.checked;
	    if (checked != null) {
	      DOMPropertyOperations.setValueForProperty(ReactDOMComponentTree.getNodeFromInstance(inst), 'checked', checked || false);
	    }

	    var node = ReactDOMComponentTree.getNodeFromInstance(inst);
	    var value = LinkedValueUtils.getValue(props);
	    if (value != null) {
	      if (value === 0 && node.value === '') {
	        node.value = '0';
	        // Note: IE9 reports a number inputs as 'text', so check props instead.
	      } else if (props.type === 'number') {
	        // Simulate `input.valueAsNumber`. IE9 does not support it
	        var valueAsNumber = parseFloat(node.value, 10) || 0;

	        // eslint-disable-next-line
	        if (value != valueAsNumber) {
	          // Cast `value` to a string to ensure the value is set correctly. While
	          // browsers typically do this as necessary, jsdom doesn't.
	          node.value = '' + value;
	        }
	        // eslint-disable-next-line
	      } else if (value != node.value) {
	        // Cast `value` to a string to ensure the value is set correctly. While
	        // browsers typically do this as necessary, jsdom doesn't.
	        node.value = '' + value;
	      }
	    } else {
	      if (props.value == null && props.defaultValue != null) {
	        // In Chrome, assigning defaultValue to certain input types triggers input validation.
	        // For number inputs, the display value loses trailing decimal points. For email inputs,
	        // Chrome raises "The specified value <x> is not a valid email address".
	        //
	        // Here we check to see if the defaultValue has actually changed, avoiding these problems
	        // when the user is inputting text
	        //
	        // https://github.com/facebook/react/issues/7253
	        if (node.defaultValue !== '' + props.defaultValue) {
	          node.defaultValue = '' + props.defaultValue;
	        }
	      }
	      if (props.checked == null && props.defaultChecked != null) {
	        node.defaultChecked = !!props.defaultChecked;
	      }
	    }
	  },

	  postMountWrapper: function (inst) {
	    var props = inst._currentElement.props;

	    // This is in postMount because we need access to the DOM node, which is not
	    // available until after the component has mounted.
	    var node = ReactDOMComponentTree.getNodeFromInstance(inst);

	    // Detach value from defaultValue. We won't do anything if we're working on
	    // submit or reset inputs as those values & defaultValues are linked. They
	    // are not resetable nodes so this operation doesn't matter and actually
	    // removes browser-default values (eg "Submit Query") when no value is
	    // provided.

	    switch (props.type) {
	      case 'submit':
	      case 'reset':
	        break;
	      case 'color':
	      case 'date':
	      case 'datetime':
	      case 'datetime-local':
	      case 'month':
	      case 'time':
	      case 'week':
	        // This fixes the no-show issue on iOS Safari and Android Chrome:
	        // https://github.com/facebook/react/issues/7233
	        node.value = '';
	        node.value = node.defaultValue;
	        break;
	      default:
	        node.value = node.value;
	        break;
	    }

	    // Normally, we'd just do `node.checked = node.checked` upon initial mount, less this bug
	    // this is needed to work around a chrome bug where setting defaultChecked
	    // will sometimes influence the value of checked (even after detachment).
	    // Reference: https://bugs.chromium.org/p/chromium/issues/detail?id=608416
	    // We need to temporarily unset name to avoid disrupting radio button groups.
	    var name = node.name;
	    if (name !== '') {
	      node.name = '';
	    }
	    node.defaultChecked = !node.defaultChecked;
	    node.defaultChecked = !node.defaultChecked;
	    if (name !== '') {
	      node.name = name;
	    }
	  }
	};

	function _handleChange(event) {
	  var props = this._currentElement.props;

	  var returnValue = LinkedValueUtils.executeOnChange(props, event);

	  // Here we use asap to wait until all updates have propagated, which
	  // is important when using controlled components within layers:
	  // https://github.com/facebook/react/issues/1698
	  ReactUpdates.asap(forceUpdateIfMounted, this);

	  var name = props.name;
	  if (props.type === 'radio' && name != null) {
	    var rootNode = ReactDOMComponentTree.getNodeFromInstance(this);
	    var queryRoot = rootNode;

	    while (queryRoot.parentNode) {
	      queryRoot = queryRoot.parentNode;
	    }

	    // If `rootNode.form` was non-null, then we could try `form.elements`,
	    // but that sometimes behaves strangely in IE8. We could also try using
	    // `form.getElementsByName`, but that will only return direct children
	    // and won't include inputs that use the HTML5 `form=` attribute. Since
	    // the input might not even be in a form, let's just use the global
	    // `querySelectorAll` to ensure we don't miss anything.
	    var group = queryRoot.querySelectorAll('input[name=' + JSON.stringify('' + name) + '][type="radio"]');

	    for (var i = 0; i < group.length; i++) {
	      var otherNode = group[i];
	      if (otherNode === rootNode || otherNode.form !== rootNode.form) {
	        continue;
	      }
	      // This will throw if radio buttons rendered by different copies of React
	      // and the same name are rendered into the same form (same as #1939).
	      // That's probably okay; we don't support it just as we don't support
	      // mixing React radio buttons with non-React ones.
	      var otherInstance = ReactDOMComponentTree.getInstanceFromNode(otherNode);
	      !otherInstance ?  false ? invariant(false, 'ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.') : _prodInvariant('90') : void 0;
	      // If this is a controlled radio button group, forcing the input that
	      // was previously checked to update will cause it to be come re-checked
	      // as appropriate.
	      ReactUpdates.asap(forceUpdateIfMounted, otherInstance);
	    }
	  }

	  return returnValue;
	}

	module.exports = ReactDOMInput;

/***/ },
/* 371 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _assign = __webpack_require__(7);

	var React = __webpack_require__(39);
	var ReactDOMComponentTree = __webpack_require__(11);
	var ReactDOMSelect = __webpack_require__(166);

	var warning = __webpack_require__(4);
	var didWarnInvalidOptionChildren = false;

	function flattenChildren(children) {
	  var content = '';

	  // Flatten children and warn if they aren't strings or numbers;
	  // invalid types are ignored.
	  React.Children.forEach(children, function (child) {
	    if (child == null) {
	      return;
	    }
	    if (typeof child === 'string' || typeof child === 'number') {
	      content += child;
	    } else if (!didWarnInvalidOptionChildren) {
	      didWarnInvalidOptionChildren = true;
	       false ? warning(false, 'Only strings and numbers are supported as <option> children.') : void 0;
	    }
	  });

	  return content;
	}

	/**
	 * Implements an <option> host component that warns when `selected` is set.
	 */
	var ReactDOMOption = {
	  mountWrapper: function (inst, props, hostParent) {
	    // TODO (yungsters): Remove support for `selected` in <option>.
	    if (false) {
	      process.env.NODE_ENV !== 'production' ? warning(props.selected == null, 'Use the `defaultValue` or `value` props on <select> instead of ' + 'setting `selected` on <option>.') : void 0;
	    }

	    // Look up whether this option is 'selected'
	    var selectValue = null;
	    if (hostParent != null) {
	      var selectParent = hostParent;

	      if (selectParent._tag === 'optgroup') {
	        selectParent = selectParent._hostParent;
	      }

	      if (selectParent != null && selectParent._tag === 'select') {
	        selectValue = ReactDOMSelect.getSelectValueContext(selectParent);
	      }
	    }

	    // If the value is null (e.g., no specified value or after initial mount)
	    // or missing (e.g., for <datalist>), we don't change props.selected
	    var selected = null;
	    if (selectValue != null) {
	      var value;
	      if (props.value != null) {
	        value = props.value + '';
	      } else {
	        value = flattenChildren(props.children);
	      }
	      selected = false;
	      if (Array.isArray(selectValue)) {
	        // multiple
	        for (var i = 0; i < selectValue.length; i++) {
	          if ('' + selectValue[i] === value) {
	            selected = true;
	            break;
	          }
	        }
	      } else {
	        selected = '' + selectValue === value;
	      }
	    }

	    inst._wrapperState = { selected: selected };
	  },

	  postMountWrapper: function (inst) {
	    // value="" should make a value attribute (#6219)
	    var props = inst._currentElement.props;
	    if (props.value != null) {
	      var node = ReactDOMComponentTree.getNodeFromInstance(inst);
	      node.setAttribute('value', props.value);
	    }
	  },

	  getHostProps: function (inst, props) {
	    var hostProps = _assign({ selected: undefined, children: undefined }, props);

	    // Read state only from initial mount because <select> updates value
	    // manually; we need the initial state only for server rendering
	    if (inst._wrapperState.selected != null) {
	      hostProps.selected = inst._wrapperState.selected;
	    }

	    var content = flattenChildren(props.children);

	    if (content) {
	      hostProps.children = content;
	    }

	    return hostProps;
	  }

	};

	module.exports = ReactDOMOption;

/***/ },
/* 372 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(15);

	var getNodeForCharacterOffset = __webpack_require__(410);
	var getTextContentAccessor = __webpack_require__(177);

	/**
	 * While `isCollapsed` is available on the Selection object and `collapsed`
	 * is available on the Range object, IE11 sometimes gets them wrong.
	 * If the anchor/focus nodes and offsets are the same, the range is collapsed.
	 */
	function isCollapsed(anchorNode, anchorOffset, focusNode, focusOffset) {
	  return anchorNode === focusNode && anchorOffset === focusOffset;
	}

	/**
	 * Get the appropriate anchor and focus node/offset pairs for IE.
	 *
	 * The catch here is that IE's selection API doesn't provide information
	 * about whether the selection is forward or backward, so we have to
	 * behave as though it's always forward.
	 *
	 * IE text differs from modern selection in that it behaves as though
	 * block elements end with a new line. This means character offsets will
	 * differ between the two APIs.
	 *
	 * @param {DOMElement} node
	 * @return {object}
	 */
	function getIEOffsets(node) {
	  var selection = document.selection;
	  var selectedRange = selection.createRange();
	  var selectedLength = selectedRange.text.length;

	  // Duplicate selection so we can move range without breaking user selection.
	  var fromStart = selectedRange.duplicate();
	  fromStart.moveToElementText(node);
	  fromStart.setEndPoint('EndToStart', selectedRange);

	  var startOffset = fromStart.text.length;
	  var endOffset = startOffset + selectedLength;

	  return {
	    start: startOffset,
	    end: endOffset
	  };
	}

	/**
	 * @param {DOMElement} node
	 * @return {?object}
	 */
	function getModernOffsets(node) {
	  var selection = window.getSelection && window.getSelection();

	  if (!selection || selection.rangeCount === 0) {
	    return null;
	  }

	  var anchorNode = selection.anchorNode;
	  var anchorOffset = selection.anchorOffset;
	  var focusNode = selection.focusNode;
	  var focusOffset = selection.focusOffset;

	  var currentRange = selection.getRangeAt(0);

	  // In Firefox, range.startContainer and range.endContainer can be "anonymous
	  // divs", e.g. the up/down buttons on an <input type="number">. Anonymous
	  // divs do not seem to expose properties, triggering a "Permission denied
	  // error" if any of its properties are accessed. The only seemingly possible
	  // way to avoid erroring is to access a property that typically works for
	  // non-anonymous divs and catch any error that may otherwise arise. See
	  // https://bugzilla.mozilla.org/show_bug.cgi?id=208427
	  try {
	    /* eslint-disable no-unused-expressions */
	    currentRange.startContainer.nodeType;
	    currentRange.endContainer.nodeType;
	    /* eslint-enable no-unused-expressions */
	  } catch (e) {
	    return null;
	  }

	  // If the node and offset values are the same, the selection is collapsed.
	  // `Selection.isCollapsed` is available natively, but IE sometimes gets
	  // this value wrong.
	  var isSelectionCollapsed = isCollapsed(selection.anchorNode, selection.anchorOffset, selection.focusNode, selection.focusOffset);

	  var rangeLength = isSelectionCollapsed ? 0 : currentRange.toString().length;

	  var tempRange = currentRange.cloneRange();
	  tempRange.selectNodeContents(node);
	  tempRange.setEnd(currentRange.startContainer, currentRange.startOffset);

	  var isTempRangeCollapsed = isCollapsed(tempRange.startContainer, tempRange.startOffset, tempRange.endContainer, tempRange.endOffset);

	  var start = isTempRangeCollapsed ? 0 : tempRange.toString().length;
	  var end = start + rangeLength;

	  // Detect whether the selection is backward.
	  var detectionRange = document.createRange();
	  detectionRange.setStart(anchorNode, anchorOffset);
	  detectionRange.setEnd(focusNode, focusOffset);
	  var isBackward = detectionRange.collapsed;

	  return {
	    start: isBackward ? end : start,
	    end: isBackward ? start : end
	  };
	}

	/**
	 * @param {DOMElement|DOMTextNode} node
	 * @param {object} offsets
	 */
	function setIEOffsets(node, offsets) {
	  var range = document.selection.createRange().duplicate();
	  var start, end;

	  if (offsets.end === undefined) {
	    start = offsets.start;
	    end = start;
	  } else if (offsets.start > offsets.end) {
	    start = offsets.end;
	    end = offsets.start;
	  } else {
	    start = offsets.start;
	    end = offsets.end;
	  }

	  range.moveToElementText(node);
	  range.moveStart('character', start);
	  range.setEndPoint('EndToStart', range);
	  range.moveEnd('character', end - start);
	  range.select();
	}

	/**
	 * In modern non-IE browsers, we can support both forward and backward
	 * selections.
	 *
	 * Note: IE10+ supports the Selection object, but it does not support
	 * the `extend` method, which means that even in modern IE, it's not possible
	 * to programmatically create a backward selection. Thus, for all IE
	 * versions, we use the old IE API to create our selections.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @param {object} offsets
	 */
	function setModernOffsets(node, offsets) {
	  if (!window.getSelection) {
	    return;
	  }

	  var selection = window.getSelection();
	  var length = node[getTextContentAccessor()].length;
	  var start = Math.min(offsets.start, length);
	  var end = offsets.end === undefined ? start : Math.min(offsets.end, length);

	  // IE 11 uses modern selection, but doesn't support the extend method.
	  // Flip backward selections, so we can set with a single range.
	  if (!selection.extend && start > end) {
	    var temp = end;
	    end = start;
	    start = temp;
	  }

	  var startMarker = getNodeForCharacterOffset(node, start);
	  var endMarker = getNodeForCharacterOffset(node, end);

	  if (startMarker && endMarker) {
	    var range = document.createRange();
	    range.setStart(startMarker.node, startMarker.offset);
	    selection.removeAllRanges();

	    if (start > end) {
	      selection.addRange(range);
	      selection.extend(endMarker.node, endMarker.offset);
	    } else {
	      range.setEnd(endMarker.node, endMarker.offset);
	      selection.addRange(range);
	    }
	  }
	}

	var useIEOffsets = ExecutionEnvironment.canUseDOM && 'selection' in document && !('getSelection' in window);

	var ReactDOMSelection = {
	  /**
	   * @param {DOMElement} node
	   */
	  getOffsets: useIEOffsets ? getIEOffsets : getModernOffsets,

	  /**
	   * @param {DOMElement|DOMTextNode} node
	   * @param {object} offsets
	   */
	  setOffsets: useIEOffsets ? setIEOffsets : setModernOffsets
	};

	module.exports = ReactDOMSelection;

/***/ },
/* 373 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(5),
	    _assign = __webpack_require__(7);

	var DOMChildrenOperations = __webpack_require__(92);
	var DOMLazyTree = __webpack_require__(36);
	var ReactDOMComponentTree = __webpack_require__(11);

	var escapeTextContentForBrowser = __webpack_require__(69);
	var invariant = __webpack_require__(3);
	var validateDOMNesting = __webpack_require__(107);

	/**
	 * Text nodes violate a couple assumptions that React makes about components:
	 *
	 *  - When mounting text into the DOM, adjacent text nodes are merged.
	 *  - Text nodes cannot be assigned a React root ID.
	 *
	 * This component is used to wrap strings between comment nodes so that they
	 * can undergo the same reconciliation that is applied to elements.
	 *
	 * TODO: Investigate representing React components in the DOM with text nodes.
	 *
	 * @class ReactDOMTextComponent
	 * @extends ReactComponent
	 * @internal
	 */
	var ReactDOMTextComponent = function (text) {
	  // TODO: This is really a ReactText (ReactNode), not a ReactElement
	  this._currentElement = text;
	  this._stringText = '' + text;
	  // ReactDOMComponentTree uses these:
	  this._hostNode = null;
	  this._hostParent = null;

	  // Properties
	  this._domID = 0;
	  this._mountIndex = 0;
	  this._closingComment = null;
	  this._commentNodes = null;
	};

	_assign(ReactDOMTextComponent.prototype, {

	  /**
	   * Creates the markup for this text node. This node is not intended to have
	   * any features besides containing text content.
	   *
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @return {string} Markup for this text node.
	   * @internal
	   */
	  mountComponent: function (transaction, hostParent, hostContainerInfo, context) {
	    if (false) {
	      var parentInfo;
	      if (hostParent != null) {
	        parentInfo = hostParent._ancestorInfo;
	      } else if (hostContainerInfo != null) {
	        parentInfo = hostContainerInfo._ancestorInfo;
	      }
	      if (parentInfo) {
	        // parentInfo should always be present except for the top-level
	        // component when server rendering
	        validateDOMNesting(null, this._stringText, this, parentInfo);
	      }
	    }

	    var domID = hostContainerInfo._idCounter++;
	    var openingValue = ' react-text: ' + domID + ' ';
	    var closingValue = ' /react-text ';
	    this._domID = domID;
	    this._hostParent = hostParent;
	    if (transaction.useCreateElement) {
	      var ownerDocument = hostContainerInfo._ownerDocument;
	      var openingComment = ownerDocument.createComment(openingValue);
	      var closingComment = ownerDocument.createComment(closingValue);
	      var lazyTree = DOMLazyTree(ownerDocument.createDocumentFragment());
	      DOMLazyTree.queueChild(lazyTree, DOMLazyTree(openingComment));
	      if (this._stringText) {
	        DOMLazyTree.queueChild(lazyTree, DOMLazyTree(ownerDocument.createTextNode(this._stringText)));
	      }
	      DOMLazyTree.queueChild(lazyTree, DOMLazyTree(closingComment));
	      ReactDOMComponentTree.precacheNode(this, openingComment);
	      this._closingComment = closingComment;
	      return lazyTree;
	    } else {
	      var escapedText = escapeTextContentForBrowser(this._stringText);

	      if (transaction.renderToStaticMarkup) {
	        // Normally we'd wrap this between comment nodes for the reasons stated
	        // above, but since this is a situation where React won't take over
	        // (static pages), we can simply return the text as it is.
	        return escapedText;
	      }

	      return '<!--' + openingValue + '-->' + escapedText + '<!--' + closingValue + '-->';
	    }
	  },

	  /**
	   * Updates this component by updating the text content.
	   *
	   * @param {ReactText} nextText The next text content
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  receiveComponent: function (nextText, transaction) {
	    if (nextText !== this._currentElement) {
	      this._currentElement = nextText;
	      var nextStringText = '' + nextText;
	      if (nextStringText !== this._stringText) {
	        // TODO: Save this as pending props and use performUpdateIfNecessary
	        // and/or updateComponent to do the actual update for consistency with
	        // other component types?
	        this._stringText = nextStringText;
	        var commentNodes = this.getHostNode();
	        DOMChildrenOperations.replaceDelimitedText(commentNodes[0], commentNodes[1], nextStringText);
	      }
	    }
	  },

	  getHostNode: function () {
	    var hostNode = this._commentNodes;
	    if (hostNode) {
	      return hostNode;
	    }
	    if (!this._closingComment) {
	      var openingComment = ReactDOMComponentTree.getNodeFromInstance(this);
	      var node = openingComment.nextSibling;
	      while (true) {
	        !(node != null) ?  false ? invariant(false, 'Missing closing comment for text component %s', this._domID) : _prodInvariant('67', this._domID) : void 0;
	        if (node.nodeType === 8 && node.nodeValue === ' /react-text ') {
	          this._closingComment = node;
	          break;
	        }
	        node = node.nextSibling;
	      }
	    }
	    hostNode = [this._hostNode, this._closingComment];
	    this._commentNodes = hostNode;
	    return hostNode;
	  },

	  unmountComponent: function () {
	    this._closingComment = null;
	    this._commentNodes = null;
	    ReactDOMComponentTree.uncacheNode(this);
	  }

	});

	module.exports = ReactDOMTextComponent;

/***/ },
/* 374 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(5),
	    _assign = __webpack_require__(7);

	var LinkedValueUtils = __webpack_require__(97);
	var ReactDOMComponentTree = __webpack_require__(11);
	var ReactUpdates = __webpack_require__(22);

	var invariant = __webpack_require__(3);
	var warning = __webpack_require__(4);

	var didWarnValueLink = false;
	var didWarnValDefaultVal = false;

	function forceUpdateIfMounted() {
	  if (this._rootNodeID) {
	    // DOM component is still mounted; update
	    ReactDOMTextarea.updateWrapper(this);
	  }
	}

	/**
	 * Implements a <textarea> host component that allows setting `value`, and
	 * `defaultValue`. This differs from the traditional DOM API because value is
	 * usually set as PCDATA children.
	 *
	 * If `value` is not supplied (or null/undefined), user actions that affect the
	 * value will trigger updates to the element.
	 *
	 * If `value` is supplied (and not null/undefined), the rendered element will
	 * not trigger updates to the element. Instead, the `value` prop must change in
	 * order for the rendered element to be updated.
	 *
	 * The rendered element will be initialized with an empty value, the prop
	 * `defaultValue` if specified, or the children content (deprecated).
	 */
	var ReactDOMTextarea = {
	  getHostProps: function (inst, props) {
	    !(props.dangerouslySetInnerHTML == null) ?  false ? invariant(false, '`dangerouslySetInnerHTML` does not make sense on <textarea>.') : _prodInvariant('91') : void 0;

	    // Always set children to the same thing. In IE9, the selection range will
	    // get reset if `textContent` is mutated.  We could add a check in setTextContent
	    // to only set the value if/when the value differs from the node value (which would
	    // completely solve this IE9 bug), but Sebastian+Ben seemed to like this solution.
	    // The value can be a boolean or object so that's why it's forced to be a string.
	    var hostProps = _assign({}, props, {
	      value: undefined,
	      defaultValue: undefined,
	      children: '' + inst._wrapperState.initialValue,
	      onChange: inst._wrapperState.onChange
	    });

	    return hostProps;
	  },

	  mountWrapper: function (inst, props) {
	    if (false) {
	      LinkedValueUtils.checkPropTypes('textarea', props, inst._currentElement._owner);
	      if (props.valueLink !== undefined && !didWarnValueLink) {
	        process.env.NODE_ENV !== 'production' ? warning(false, '`valueLink` prop on `textarea` is deprecated; set `value` and `onChange` instead.') : void 0;
	        didWarnValueLink = true;
	      }
	      if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValDefaultVal) {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'Textarea elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled textarea ' + 'and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components') : void 0;
	        didWarnValDefaultVal = true;
	      }
	    }

	    var value = LinkedValueUtils.getValue(props);
	    var initialValue = value;

	    // Only bother fetching default value if we're going to use it
	    if (value == null) {
	      var defaultValue = props.defaultValue;
	      // TODO (yungsters): Remove support for children content in <textarea>.
	      var children = props.children;
	      if (children != null) {
	        if (false) {
	          process.env.NODE_ENV !== 'production' ? warning(false, 'Use the `defaultValue` or `value` props instead of setting ' + 'children on <textarea>.') : void 0;
	        }
	        !(defaultValue == null) ?  false ? invariant(false, 'If you supply `defaultValue` on a <textarea>, do not pass children.') : _prodInvariant('92') : void 0;
	        if (Array.isArray(children)) {
	          !(children.length <= 1) ?  false ? invariant(false, '<textarea> can only have at most one child.') : _prodInvariant('93') : void 0;
	          children = children[0];
	        }

	        defaultValue = '' + children;
	      }
	      if (defaultValue == null) {
	        defaultValue = '';
	      }
	      initialValue = defaultValue;
	    }

	    inst._wrapperState = {
	      initialValue: '' + initialValue,
	      listeners: null,
	      onChange: _handleChange.bind(inst)
	    };
	  },

	  updateWrapper: function (inst) {
	    var props = inst._currentElement.props;

	    var node = ReactDOMComponentTree.getNodeFromInstance(inst);
	    var value = LinkedValueUtils.getValue(props);
	    if (value != null) {
	      // Cast `value` to a string to ensure the value is set correctly. While
	      // browsers typically do this as necessary, jsdom doesn't.
	      var newValue = '' + value;

	      // To avoid side effects (such as losing text selection), only set value if changed
	      if (newValue !== node.value) {
	        node.value = newValue;
	      }
	      if (props.defaultValue == null) {
	        node.defaultValue = newValue;
	      }
	    }
	    if (props.defaultValue != null) {
	      node.defaultValue = props.defaultValue;
	    }
	  },

	  postMountWrapper: function (inst) {
	    // This is in postMount because we need access to the DOM node, which is not
	    // available until after the component has mounted.
	    var node = ReactDOMComponentTree.getNodeFromInstance(inst);
	    var textContent = node.textContent;

	    // Only set node.value if textContent is equal to the expected
	    // initial value. In IE10/IE11 there is a bug where the placeholder attribute
	    // will populate textContent as well.
	    // https://developer.microsoft.com/microsoft-edge/platform/issues/101525/
	    if (textContent === inst._wrapperState.initialValue) {
	      node.value = textContent;
	    }
	  }
	};

	function _handleChange(event) {
	  var props = this._currentElement.props;
	  var returnValue = LinkedValueUtils.executeOnChange(props, event);
	  ReactUpdates.asap(forceUpdateIfMounted, this);
	  return returnValue;
	}

	module.exports = ReactDOMTextarea;

/***/ },
/* 375 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2015-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(5);

	var invariant = __webpack_require__(3);

	/**
	 * Return the lowest common ancestor of A and B, or null if they are in
	 * different trees.
	 */
	function getLowestCommonAncestor(instA, instB) {
	  !('_hostNode' in instA) ?  false ? invariant(false, 'getNodeFromInstance: Invalid argument.') : _prodInvariant('33') : void 0;
	  !('_hostNode' in instB) ?  false ? invariant(false, 'getNodeFromInstance: Invalid argument.') : _prodInvariant('33') : void 0;

	  var depthA = 0;
	  for (var tempA = instA; tempA; tempA = tempA._hostParent) {
	    depthA++;
	  }
	  var depthB = 0;
	  for (var tempB = instB; tempB; tempB = tempB._hostParent) {
	    depthB++;
	  }

	  // If A is deeper, crawl up.
	  while (depthA - depthB > 0) {
	    instA = instA._hostParent;
	    depthA--;
	  }

	  // If B is deeper, crawl up.
	  while (depthB - depthA > 0) {
	    instB = instB._hostParent;
	    depthB--;
	  }

	  // Walk in lockstep until we find a match.
	  var depth = depthA;
	  while (depth--) {
	    if (instA === instB) {
	      return instA;
	    }
	    instA = instA._hostParent;
	    instB = instB._hostParent;
	  }
	  return null;
	}

	/**
	 * Return if A is an ancestor of B.
	 */
	function isAncestor(instA, instB) {
	  !('_hostNode' in instA) ?  false ? invariant(false, 'isAncestor: Invalid argument.') : _prodInvariant('35') : void 0;
	  !('_hostNode' in instB) ?  false ? invariant(false, 'isAncestor: Invalid argument.') : _prodInvariant('35') : void 0;

	  while (instB) {
	    if (instB === instA) {
	      return true;
	    }
	    instB = instB._hostParent;
	  }
	  return false;
	}

	/**
	 * Return the parent instance of the passed-in instance.
	 */
	function getParentInstance(inst) {
	  !('_hostNode' in inst) ?  false ? invariant(false, 'getParentInstance: Invalid argument.') : _prodInvariant('36') : void 0;

	  return inst._hostParent;
	}

	/**
	 * Simulates the traversal of a two-phase, capture/bubble event dispatch.
	 */
	function traverseTwoPhase(inst, fn, arg) {
	  var path = [];
	  while (inst) {
	    path.push(inst);
	    inst = inst._hostParent;
	  }
	  var i;
	  for (i = path.length; i-- > 0;) {
	    fn(path[i], 'captured', arg);
	  }
	  for (i = 0; i < path.length; i++) {
	    fn(path[i], 'bubbled', arg);
	  }
	}

	/**
	 * Traverses the ID hierarchy and invokes the supplied `cb` on any IDs that
	 * should would receive a `mouseEnter` or `mouseLeave` event.
	 *
	 * Does not invoke the callback on the nearest common ancestor because nothing
	 * "entered" or "left" that element.
	 */
	function traverseEnterLeave(from, to, fn, argFrom, argTo) {
	  var common = from && to ? getLowestCommonAncestor(from, to) : null;
	  var pathFrom = [];
	  while (from && from !== common) {
	    pathFrom.push(from);
	    from = from._hostParent;
	  }
	  var pathTo = [];
	  while (to && to !== common) {
	    pathTo.push(to);
	    to = to._hostParent;
	  }
	  var i;
	  for (i = 0; i < pathFrom.length; i++) {
	    fn(pathFrom[i], 'bubbled', argFrom);
	  }
	  for (i = pathTo.length; i-- > 0;) {
	    fn(pathTo[i], 'captured', argTo);
	  }
	}

	module.exports = {
	  isAncestor: isAncestor,
	  getLowestCommonAncestor: getLowestCommonAncestor,
	  getParentInstance: getParentInstance,
	  traverseTwoPhase: traverseTwoPhase,
	  traverseEnterLeave: traverseEnterLeave
	};

/***/ },
/* 376 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _assign = __webpack_require__(7);

	var ReactUpdates = __webpack_require__(22);
	var Transaction = __webpack_require__(68);

	var emptyFunction = __webpack_require__(18);

	var RESET_BATCHED_UPDATES = {
	  initialize: emptyFunction,
	  close: function () {
	    ReactDefaultBatchingStrategy.isBatchingUpdates = false;
	  }
	};

	var FLUSH_BATCHED_UPDATES = {
	  initialize: emptyFunction,
	  close: ReactUpdates.flushBatchedUpdates.bind(ReactUpdates)
	};

	var TRANSACTION_WRAPPERS = [FLUSH_BATCHED_UPDATES, RESET_BATCHED_UPDATES];

	function ReactDefaultBatchingStrategyTransaction() {
	  this.reinitializeTransaction();
	}

	_assign(ReactDefaultBatchingStrategyTransaction.prototype, Transaction, {
	  getTransactionWrappers: function () {
	    return TRANSACTION_WRAPPERS;
	  }
	});

	var transaction = new ReactDefaultBatchingStrategyTransaction();

	var ReactDefaultBatchingStrategy = {
	  isBatchingUpdates: false,

	  /**
	   * Call the provided function in a context within which calls to `setState`
	   * and friends are batched such that components aren't updated unnecessarily.
	   */
	  batchedUpdates: function (callback, a, b, c, d, e) {
	    var alreadyBatchingUpdates = ReactDefaultBatchingStrategy.isBatchingUpdates;

	    ReactDefaultBatchingStrategy.isBatchingUpdates = true;

	    // The code is written this way to avoid extra allocations
	    if (alreadyBatchingUpdates) {
	      return callback(a, b, c, d, e);
	    } else {
	      return transaction.perform(callback, null, a, b, c, d, e);
	    }
	  }
	};

	module.exports = ReactDefaultBatchingStrategy;

/***/ },
/* 377 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var ARIADOMPropertyConfig = __webpack_require__(351);
	var BeforeInputEventPlugin = __webpack_require__(353);
	var ChangeEventPlugin = __webpack_require__(355);
	var DefaultEventPluginOrder = __webpack_require__(357);
	var EnterLeaveEventPlugin = __webpack_require__(358);
	var HTMLDOMPropertyConfig = __webpack_require__(360);
	var ReactComponentBrowserEnvironment = __webpack_require__(362);
	var ReactDOMComponent = __webpack_require__(365);
	var ReactDOMComponentTree = __webpack_require__(11);
	var ReactDOMEmptyComponent = __webpack_require__(367);
	var ReactDOMTreeTraversal = __webpack_require__(375);
	var ReactDOMTextComponent = __webpack_require__(373);
	var ReactDefaultBatchingStrategy = __webpack_require__(376);
	var ReactEventListener = __webpack_require__(380);
	var ReactInjection = __webpack_require__(381);
	var ReactReconcileTransaction = __webpack_require__(386);
	var SVGDOMPropertyConfig = __webpack_require__(391);
	var SelectEventPlugin = __webpack_require__(392);
	var SimpleEventPlugin = __webpack_require__(393);

	var alreadyInjected = false;

	function inject() {
	  if (alreadyInjected) {
	    // TODO: This is currently true because these injections are shared between
	    // the client and the server package. They should be built independently
	    // and not share any injection state. Then this problem will be solved.
	    return;
	  }
	  alreadyInjected = true;

	  ReactInjection.EventEmitter.injectReactEventListener(ReactEventListener);

	  /**
	   * Inject modules for resolving DOM hierarchy and plugin ordering.
	   */
	  ReactInjection.EventPluginHub.injectEventPluginOrder(DefaultEventPluginOrder);
	  ReactInjection.EventPluginUtils.injectComponentTree(ReactDOMComponentTree);
	  ReactInjection.EventPluginUtils.injectTreeTraversal(ReactDOMTreeTraversal);

	  /**
	   * Some important event plugins included by default (without having to require
	   * them).
	   */
	  ReactInjection.EventPluginHub.injectEventPluginsByName({
	    SimpleEventPlugin: SimpleEventPlugin,
	    EnterLeaveEventPlugin: EnterLeaveEventPlugin,
	    ChangeEventPlugin: ChangeEventPlugin,
	    SelectEventPlugin: SelectEventPlugin,
	    BeforeInputEventPlugin: BeforeInputEventPlugin
	  });

	  ReactInjection.HostComponent.injectGenericComponentClass(ReactDOMComponent);

	  ReactInjection.HostComponent.injectTextComponentClass(ReactDOMTextComponent);

	  ReactInjection.DOMProperty.injectDOMPropertyConfig(ARIADOMPropertyConfig);
	  ReactInjection.DOMProperty.injectDOMPropertyConfig(HTMLDOMPropertyConfig);
	  ReactInjection.DOMProperty.injectDOMPropertyConfig(SVGDOMPropertyConfig);

	  ReactInjection.EmptyComponent.injectEmptyComponentFactory(function (instantiate) {
	    return new ReactDOMEmptyComponent(instantiate);
	  });

	  ReactInjection.Updates.injectReconcileTransaction(ReactReconcileTransaction);
	  ReactInjection.Updates.injectBatchingStrategy(ReactDefaultBatchingStrategy);

	  ReactInjection.Component.injectEnvironment(ReactComponentBrowserEnvironment);
	}

	module.exports = {
	  inject: inject
	};

/***/ },
/* 378 */
183,
/* 379 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var EventPluginHub = __webpack_require__(49);

	function runEventQueueInBatch(events) {
	  EventPluginHub.enqueueEvents(events);
	  EventPluginHub.processEventQueue(false);
	}

	var ReactEventEmitterMixin = {

	  /**
	   * Streams a fired top-level event to `EventPluginHub` where plugins have the
	   * opportunity to create `ReactEvent`s to be dispatched.
	   */
	  handleTopLevel: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	    var events = EventPluginHub.extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget);
	    runEventQueueInBatch(events);
	  }
	};

	module.exports = ReactEventEmitterMixin;

/***/ },
/* 380 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _assign = __webpack_require__(7);

	var EventListener = __webpack_require__(146);
	var ExecutionEnvironment = __webpack_require__(15);
	var PooledClass = __webpack_require__(32);
	var ReactDOMComponentTree = __webpack_require__(11);
	var ReactUpdates = __webpack_require__(22);

	var getEventTarget = __webpack_require__(104);
	var getUnboundedScrollPosition = __webpack_require__(298);

	/**
	 * Find the deepest React component completely containing the root of the
	 * passed-in instance (for use when entire React trees are nested within each
	 * other). If React trees are not nested, returns null.
	 */
	function findParent(inst) {
	  // TODO: It may be a good idea to cache this to prevent unnecessary DOM
	  // traversal, but caching is difficult to do correctly without using a
	  // mutation observer to listen for all DOM changes.
	  while (inst._hostParent) {
	    inst = inst._hostParent;
	  }
	  var rootNode = ReactDOMComponentTree.getNodeFromInstance(inst);
	  var container = rootNode.parentNode;
	  return ReactDOMComponentTree.getClosestInstanceFromNode(container);
	}

	// Used to store ancestor hierarchy in top level callback
	function TopLevelCallbackBookKeeping(topLevelType, nativeEvent) {
	  this.topLevelType = topLevelType;
	  this.nativeEvent = nativeEvent;
	  this.ancestors = [];
	}
	_assign(TopLevelCallbackBookKeeping.prototype, {
	  destructor: function () {
	    this.topLevelType = null;
	    this.nativeEvent = null;
	    this.ancestors.length = 0;
	  }
	});
	PooledClass.addPoolingTo(TopLevelCallbackBookKeeping, PooledClass.twoArgumentPooler);

	function handleTopLevelImpl(bookKeeping) {
	  var nativeEventTarget = getEventTarget(bookKeeping.nativeEvent);
	  var targetInst = ReactDOMComponentTree.getClosestInstanceFromNode(nativeEventTarget);

	  // Loop through the hierarchy, in case there's any nested components.
	  // It's important that we build the array of ancestors before calling any
	  // event handlers, because event handlers can modify the DOM, leading to
	  // inconsistencies with ReactMount's node cache. See #1105.
	  var ancestor = targetInst;
	  do {
	    bookKeeping.ancestors.push(ancestor);
	    ancestor = ancestor && findParent(ancestor);
	  } while (ancestor);

	  for (var i = 0; i < bookKeeping.ancestors.length; i++) {
	    targetInst = bookKeeping.ancestors[i];
	    ReactEventListener._handleTopLevel(bookKeeping.topLevelType, targetInst, bookKeeping.nativeEvent, getEventTarget(bookKeeping.nativeEvent));
	  }
	}

	function scrollValueMonitor(cb) {
	  var scrollPosition = getUnboundedScrollPosition(window);
	  cb(scrollPosition);
	}

	var ReactEventListener = {
	  _enabled: true,
	  _handleTopLevel: null,

	  WINDOW_HANDLE: ExecutionEnvironment.canUseDOM ? window : null,

	  setHandleTopLevel: function (handleTopLevel) {
	    ReactEventListener._handleTopLevel = handleTopLevel;
	  },

	  setEnabled: function (enabled) {
	    ReactEventListener._enabled = !!enabled;
	  },

	  isEnabled: function () {
	    return ReactEventListener._enabled;
	  },

	  /**
	   * Traps top-level events by using event bubbling.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {string} handlerBaseName Event name (e.g. "click").
	   * @param {object} element Element on which to attach listener.
	   * @return {?object} An object with a remove function which will forcefully
	   *                  remove the listener.
	   * @internal
	   */
	  trapBubbledEvent: function (topLevelType, handlerBaseName, element) {
	    if (!element) {
	      return null;
	    }
	    return EventListener.listen(element, handlerBaseName, ReactEventListener.dispatchEvent.bind(null, topLevelType));
	  },

	  /**
	   * Traps a top-level event by using event capturing.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {string} handlerBaseName Event name (e.g. "click").
	   * @param {object} element Element on which to attach listener.
	   * @return {?object} An object with a remove function which will forcefully
	   *                  remove the listener.
	   * @internal
	   */
	  trapCapturedEvent: function (topLevelType, handlerBaseName, element) {
	    if (!element) {
	      return null;
	    }
	    return EventListener.capture(element, handlerBaseName, ReactEventListener.dispatchEvent.bind(null, topLevelType));
	  },

	  monitorScrollValue: function (refresh) {
	    var callback = scrollValueMonitor.bind(null, refresh);
	    EventListener.listen(window, 'scroll', callback);
	  },

	  dispatchEvent: function (topLevelType, nativeEvent) {
	    if (!ReactEventListener._enabled) {
	      return;
	    }

	    var bookKeeping = TopLevelCallbackBookKeeping.getPooled(topLevelType, nativeEvent);
	    try {
	      // Event queue being processed in the same cycle allows
	      // `preventDefault`.
	      ReactUpdates.batchedUpdates(handleTopLevelImpl, bookKeeping);
	    } finally {
	      TopLevelCallbackBookKeeping.release(bookKeeping);
	    }
	  }
	};

	module.exports = ReactEventListener;

/***/ },
/* 381 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var DOMProperty = __webpack_require__(37);
	var EventPluginHub = __webpack_require__(49);
	var EventPluginUtils = __webpack_require__(95);
	var ReactComponentEnvironment = __webpack_require__(98);
	var ReactEmptyComponent = __webpack_require__(167);
	var ReactBrowserEventEmitter = __webpack_require__(66);
	var ReactHostComponent = __webpack_require__(169);
	var ReactUpdates = __webpack_require__(22);

	var ReactInjection = {
	  Component: ReactComponentEnvironment.injection,
	  DOMProperty: DOMProperty.injection,
	  EmptyComponent: ReactEmptyComponent.injection,
	  EventPluginHub: EventPluginHub.injection,
	  EventPluginUtils: EventPluginUtils.injection,
	  EventEmitter: ReactBrowserEventEmitter.injection,
	  HostComponent: ReactHostComponent.injection,
	  Updates: ReactUpdates.injection
	};

	module.exports = ReactInjection;

/***/ },
/* 382 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var adler32 = __webpack_require__(404);

	var TAG_END = /\/?>/;
	var COMMENT_START = /^<\!\-\-/;

	var ReactMarkupChecksum = {
	  CHECKSUM_ATTR_NAME: 'data-react-checksum',

	  /**
	   * @param {string} markup Markup string
	   * @return {string} Markup string with checksum attribute attached
	   */
	  addChecksumToMarkup: function (markup) {
	    var checksum = adler32(markup);

	    // Add checksum (handle both parent tags, comments and self-closing tags)
	    if (COMMENT_START.test(markup)) {
	      return markup;
	    } else {
	      return markup.replace(TAG_END, ' ' + ReactMarkupChecksum.CHECKSUM_ATTR_NAME + '="' + checksum + '"$&');
	    }
	  },

	  /**
	   * @param {string} markup to use
	   * @param {DOMElement} element root React element
	   * @returns {boolean} whether or not the markup is the same
	   */
	  canReuseMarkup: function (markup, element) {
	    var existingChecksum = element.getAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);
	    existingChecksum = existingChecksum && parseInt(existingChecksum, 10);
	    var markupChecksum = adler32(markup);
	    return markupChecksum === existingChecksum;
	  }
	};

	module.exports = ReactMarkupChecksum;

/***/ },
/* 383 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(5);

	var ReactComponentEnvironment = __webpack_require__(98);
	var ReactInstanceMap = __webpack_require__(51);
	var ReactInstrumentation = __webpack_require__(20);

	var ReactCurrentOwner = __webpack_require__(27);
	var ReactReconciler = __webpack_require__(38);
	var ReactChildReconciler = __webpack_require__(361);

	var emptyFunction = __webpack_require__(18);
	var flattenChildren = __webpack_require__(407);
	var invariant = __webpack_require__(3);

	/**
	 * Make an update for markup to be rendered and inserted at a supplied index.
	 *
	 * @param {string} markup Markup that renders into an element.
	 * @param {number} toIndex Destination index.
	 * @private
	 */
	function makeInsertMarkup(markup, afterNode, toIndex) {
	  // NOTE: Null values reduce hidden classes.
	  return {
	    type: 'INSERT_MARKUP',
	    content: markup,
	    fromIndex: null,
	    fromNode: null,
	    toIndex: toIndex,
	    afterNode: afterNode
	  };
	}

	/**
	 * Make an update for moving an existing element to another index.
	 *
	 * @param {number} fromIndex Source index of the existing element.
	 * @param {number} toIndex Destination index of the element.
	 * @private
	 */
	function makeMove(child, afterNode, toIndex) {
	  // NOTE: Null values reduce hidden classes.
	  return {
	    type: 'MOVE_EXISTING',
	    content: null,
	    fromIndex: child._mountIndex,
	    fromNode: ReactReconciler.getHostNode(child),
	    toIndex: toIndex,
	    afterNode: afterNode
	  };
	}

	/**
	 * Make an update for removing an element at an index.
	 *
	 * @param {number} fromIndex Index of the element to remove.
	 * @private
	 */
	function makeRemove(child, node) {
	  // NOTE: Null values reduce hidden classes.
	  return {
	    type: 'REMOVE_NODE',
	    content: null,
	    fromIndex: child._mountIndex,
	    fromNode: node,
	    toIndex: null,
	    afterNode: null
	  };
	}

	/**
	 * Make an update for setting the markup of a node.
	 *
	 * @param {string} markup Markup that renders into an element.
	 * @private
	 */
	function makeSetMarkup(markup) {
	  // NOTE: Null values reduce hidden classes.
	  return {
	    type: 'SET_MARKUP',
	    content: markup,
	    fromIndex: null,
	    fromNode: null,
	    toIndex: null,
	    afterNode: null
	  };
	}

	/**
	 * Make an update for setting the text content.
	 *
	 * @param {string} textContent Text content to set.
	 * @private
	 */
	function makeTextContent(textContent) {
	  // NOTE: Null values reduce hidden classes.
	  return {
	    type: 'TEXT_CONTENT',
	    content: textContent,
	    fromIndex: null,
	    fromNode: null,
	    toIndex: null,
	    afterNode: null
	  };
	}

	/**
	 * Push an update, if any, onto the queue. Creates a new queue if none is
	 * passed and always returns the queue. Mutative.
	 */
	function enqueue(queue, update) {
	  if (update) {
	    queue = queue || [];
	    queue.push(update);
	  }
	  return queue;
	}

	/**
	 * Processes any enqueued updates.
	 *
	 * @private
	 */
	function processQueue(inst, updateQueue) {
	  ReactComponentEnvironment.processChildrenUpdates(inst, updateQueue);
	}

	var setChildrenForInstrumentation = emptyFunction;
	if (false) {
	  var getDebugID = function (inst) {
	    if (!inst._debugID) {
	      // Check for ART-like instances. TODO: This is silly/gross.
	      var internal;
	      if (internal = ReactInstanceMap.get(inst)) {
	        inst = internal;
	      }
	    }
	    return inst._debugID;
	  };
	  setChildrenForInstrumentation = function (children) {
	    var debugID = getDebugID(this);
	    // TODO: React Native empty components are also multichild.
	    // This means they still get into this method but don't have _debugID.
	    if (debugID !== 0) {
	      ReactInstrumentation.debugTool.onSetChildren(debugID, children ? Object.keys(children).map(function (key) {
	        return children[key]._debugID;
	      }) : []);
	    }
	  };
	}

	/**
	 * ReactMultiChild are capable of reconciling multiple children.
	 *
	 * @class ReactMultiChild
	 * @internal
	 */
	var ReactMultiChild = {

	  /**
	   * Provides common functionality for components that must reconcile multiple
	   * children. This is used by `ReactDOMComponent` to mount, update, and
	   * unmount child components.
	   *
	   * @lends {ReactMultiChild.prototype}
	   */
	  Mixin: {

	    _reconcilerInstantiateChildren: function (nestedChildren, transaction, context) {
	      if (false) {
	        var selfDebugID = getDebugID(this);
	        if (this._currentElement) {
	          try {
	            ReactCurrentOwner.current = this._currentElement._owner;
	            return ReactChildReconciler.instantiateChildren(nestedChildren, transaction, context, selfDebugID);
	          } finally {
	            ReactCurrentOwner.current = null;
	          }
	        }
	      }
	      return ReactChildReconciler.instantiateChildren(nestedChildren, transaction, context);
	    },

	    _reconcilerUpdateChildren: function (prevChildren, nextNestedChildrenElements, mountImages, removedNodes, transaction, context) {
	      var nextChildren;
	      var selfDebugID = 0;
	      if (false) {
	        selfDebugID = getDebugID(this);
	        if (this._currentElement) {
	          try {
	            ReactCurrentOwner.current = this._currentElement._owner;
	            nextChildren = flattenChildren(nextNestedChildrenElements, selfDebugID);
	          } finally {
	            ReactCurrentOwner.current = null;
	          }
	          ReactChildReconciler.updateChildren(prevChildren, nextChildren, mountImages, removedNodes, transaction, this, this._hostContainerInfo, context, selfDebugID);
	          return nextChildren;
	        }
	      }
	      nextChildren = flattenChildren(nextNestedChildrenElements, selfDebugID);
	      ReactChildReconciler.updateChildren(prevChildren, nextChildren, mountImages, removedNodes, transaction, this, this._hostContainerInfo, context, selfDebugID);
	      return nextChildren;
	    },

	    /**
	     * Generates a "mount image" for each of the supplied children. In the case
	     * of `ReactDOMComponent`, a mount image is a string of markup.
	     *
	     * @param {?object} nestedChildren Nested child maps.
	     * @return {array} An array of mounted representations.
	     * @internal
	     */
	    mountChildren: function (nestedChildren, transaction, context) {
	      var children = this._reconcilerInstantiateChildren(nestedChildren, transaction, context);
	      this._renderedChildren = children;

	      var mountImages = [];
	      var index = 0;
	      for (var name in children) {
	        if (children.hasOwnProperty(name)) {
	          var child = children[name];
	          var selfDebugID = 0;
	          if (false) {
	            selfDebugID = getDebugID(this);
	          }
	          var mountImage = ReactReconciler.mountComponent(child, transaction, this, this._hostContainerInfo, context, selfDebugID);
	          child._mountIndex = index++;
	          mountImages.push(mountImage);
	        }
	      }

	      if (false) {
	        setChildrenForInstrumentation.call(this, children);
	      }

	      return mountImages;
	    },

	    /**
	     * Replaces any rendered children with a text content string.
	     *
	     * @param {string} nextContent String of content.
	     * @internal
	     */
	    updateTextContent: function (nextContent) {
	      var prevChildren = this._renderedChildren;
	      // Remove any rendered children.
	      ReactChildReconciler.unmountChildren(prevChildren, false);
	      for (var name in prevChildren) {
	        if (prevChildren.hasOwnProperty(name)) {
	           true ?  false ? invariant(false, 'updateTextContent called on non-empty component.') : _prodInvariant('118') : void 0;
	        }
	      }
	      // Set new text content.
	      var updates = [makeTextContent(nextContent)];
	      processQueue(this, updates);
	    },

	    /**
	     * Replaces any rendered children with a markup string.
	     *
	     * @param {string} nextMarkup String of markup.
	     * @internal
	     */
	    updateMarkup: function (nextMarkup) {
	      var prevChildren = this._renderedChildren;
	      // Remove any rendered children.
	      ReactChildReconciler.unmountChildren(prevChildren, false);
	      for (var name in prevChildren) {
	        if (prevChildren.hasOwnProperty(name)) {
	           true ?  false ? invariant(false, 'updateTextContent called on non-empty component.') : _prodInvariant('118') : void 0;
	        }
	      }
	      var updates = [makeSetMarkup(nextMarkup)];
	      processQueue(this, updates);
	    },

	    /**
	     * Updates the rendered children with new children.
	     *
	     * @param {?object} nextNestedChildrenElements Nested child element maps.
	     * @param {ReactReconcileTransaction} transaction
	     * @internal
	     */
	    updateChildren: function (nextNestedChildrenElements, transaction, context) {
	      // Hook used by React ART
	      this._updateChildren(nextNestedChildrenElements, transaction, context);
	    },

	    /**
	     * @param {?object} nextNestedChildrenElements Nested child element maps.
	     * @param {ReactReconcileTransaction} transaction
	     * @final
	     * @protected
	     */
	    _updateChildren: function (nextNestedChildrenElements, transaction, context) {
	      var prevChildren = this._renderedChildren;
	      var removedNodes = {};
	      var mountImages = [];
	      var nextChildren = this._reconcilerUpdateChildren(prevChildren, nextNestedChildrenElements, mountImages, removedNodes, transaction, context);
	      if (!nextChildren && !prevChildren) {
	        return;
	      }
	      var updates = null;
	      var name;
	      // `nextIndex` will increment for each child in `nextChildren`, but
	      // `lastIndex` will be the last index visited in `prevChildren`.
	      var nextIndex = 0;
	      var lastIndex = 0;
	      // `nextMountIndex` will increment for each newly mounted child.
	      var nextMountIndex = 0;
	      var lastPlacedNode = null;
	      for (name in nextChildren) {
	        if (!nextChildren.hasOwnProperty(name)) {
	          continue;
	        }
	        var prevChild = prevChildren && prevChildren[name];
	        var nextChild = nextChildren[name];
	        if (prevChild === nextChild) {
	          updates = enqueue(updates, this.moveChild(prevChild, lastPlacedNode, nextIndex, lastIndex));
	          lastIndex = Math.max(prevChild._mountIndex, lastIndex);
	          prevChild._mountIndex = nextIndex;
	        } else {
	          if (prevChild) {
	            // Update `lastIndex` before `_mountIndex` gets unset by unmounting.
	            lastIndex = Math.max(prevChild._mountIndex, lastIndex);
	            // The `removedNodes` loop below will actually remove the child.
	          }
	          // The child must be instantiated before it's mounted.
	          updates = enqueue(updates, this._mountChildAtIndex(nextChild, mountImages[nextMountIndex], lastPlacedNode, nextIndex, transaction, context));
	          nextMountIndex++;
	        }
	        nextIndex++;
	        lastPlacedNode = ReactReconciler.getHostNode(nextChild);
	      }
	      // Remove children that are no longer present.
	      for (name in removedNodes) {
	        if (removedNodes.hasOwnProperty(name)) {
	          updates = enqueue(updates, this._unmountChild(prevChildren[name], removedNodes[name]));
	        }
	      }
	      if (updates) {
	        processQueue(this, updates);
	      }
	      this._renderedChildren = nextChildren;

	      if (false) {
	        setChildrenForInstrumentation.call(this, nextChildren);
	      }
	    },

	    /**
	     * Unmounts all rendered children. This should be used to clean up children
	     * when this component is unmounted. It does not actually perform any
	     * backend operations.
	     *
	     * @internal
	     */
	    unmountChildren: function (safely) {
	      var renderedChildren = this._renderedChildren;
	      ReactChildReconciler.unmountChildren(renderedChildren, safely);
	      this._renderedChildren = null;
	    },

	    /**
	     * Moves a child component to the supplied index.
	     *
	     * @param {ReactComponent} child Component to move.
	     * @param {number} toIndex Destination index of the element.
	     * @param {number} lastIndex Last index visited of the siblings of `child`.
	     * @protected
	     */
	    moveChild: function (child, afterNode, toIndex, lastIndex) {
	      // If the index of `child` is less than `lastIndex`, then it needs to
	      // be moved. Otherwise, we do not need to move it because a child will be
	      // inserted or moved before `child`.
	      if (child._mountIndex < lastIndex) {
	        return makeMove(child, afterNode, toIndex);
	      }
	    },

	    /**
	     * Creates a child component.
	     *
	     * @param {ReactComponent} child Component to create.
	     * @param {string} mountImage Markup to insert.
	     * @protected
	     */
	    createChild: function (child, afterNode, mountImage) {
	      return makeInsertMarkup(mountImage, afterNode, child._mountIndex);
	    },

	    /**
	     * Removes a child component.
	     *
	     * @param {ReactComponent} child Child to remove.
	     * @protected
	     */
	    removeChild: function (child, node) {
	      return makeRemove(child, node);
	    },

	    /**
	     * Mounts a child with the supplied name.
	     *
	     * NOTE: This is part of `updateChildren` and is here for readability.
	     *
	     * @param {ReactComponent} child Component to mount.
	     * @param {string} name Name of the child.
	     * @param {number} index Index at which to insert the child.
	     * @param {ReactReconcileTransaction} transaction
	     * @private
	     */
	    _mountChildAtIndex: function (child, mountImage, afterNode, index, transaction, context) {
	      child._mountIndex = index;
	      return this.createChild(child, afterNode, mountImage);
	    },

	    /**
	     * Unmounts a rendered child.
	     *
	     * NOTE: This is part of `updateChildren` and is here for readability.
	     *
	     * @param {ReactComponent} child Component to unmount.
	     * @private
	     */
	    _unmountChild: function (child, node) {
	      var update = this.removeChild(child, node);
	      child._mountIndex = null;
	      return update;
	    }

	  }

	};

	module.exports = ReactMultiChild;

/***/ },
/* 384 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(5);

	var invariant = __webpack_require__(3);

	/**
	 * @param {?object} object
	 * @return {boolean} True if `object` is a valid owner.
	 * @final
	 */
	function isValidOwner(object) {
	  return !!(object && typeof object.attachRef === 'function' && typeof object.detachRef === 'function');
	}

	/**
	 * ReactOwners are capable of storing references to owned components.
	 *
	 * All components are capable of //being// referenced by owner components, but
	 * only ReactOwner components are capable of //referencing// owned components.
	 * The named reference is known as a "ref".
	 *
	 * Refs are available when mounted and updated during reconciliation.
	 *
	 *   var MyComponent = React.createClass({
	 *     render: function() {
	 *       return (
	 *         <div onClick={this.handleClick}>
	 *           <CustomComponent ref="custom" />
	 *         </div>
	 *       );
	 *     },
	 *     handleClick: function() {
	 *       this.refs.custom.handleClick();
	 *     },
	 *     componentDidMount: function() {
	 *       this.refs.custom.initialize();
	 *     }
	 *   });
	 *
	 * Refs should rarely be used. When refs are used, they should only be done to
	 * control data that is not handled by React's data flow.
	 *
	 * @class ReactOwner
	 */
	var ReactOwner = {
	  /**
	   * Adds a component by ref to an owner component.
	   *
	   * @param {ReactComponent} component Component to reference.
	   * @param {string} ref Name by which to refer to the component.
	   * @param {ReactOwner} owner Component on which to record the ref.
	   * @final
	   * @internal
	   */
	  addComponentAsRefTo: function (component, ref, owner) {
	    !isValidOwner(owner) ?  false ? invariant(false, 'addComponentAsRefTo(...): Only a ReactOwner can have refs. You might be adding a ref to a component that was not created inside a component\'s `render` method, or you have multiple copies of React loaded (details: https://fb.me/react-refs-must-have-owner).') : _prodInvariant('119') : void 0;
	    owner.attachRef(ref, component);
	  },

	  /**
	   * Removes a component by ref from an owner component.
	   *
	   * @param {ReactComponent} component Component to dereference.
	   * @param {string} ref Name of the ref to remove.
	   * @param {ReactOwner} owner Component on which the ref is recorded.
	   * @final
	   * @internal
	   */
	  removeComponentAsRefFrom: function (component, ref, owner) {
	    !isValidOwner(owner) ?  false ? invariant(false, 'removeComponentAsRefFrom(...): Only a ReactOwner can have refs. You might be removing a ref to a component that was not created inside a component\'s `render` method, or you have multiple copies of React loaded (details: https://fb.me/react-refs-must-have-owner).') : _prodInvariant('120') : void 0;
	    var ownerPublicInstance = owner.getPublicInstance();
	    // Check that `component`'s owner is still alive and that `component` is still the current ref
	    // because we do not want to detach the ref if another component stole it.
	    if (ownerPublicInstance && ownerPublicInstance.refs[ref] === component.getPublicInstance()) {
	      owner.detachRef(ref);
	    }
	  }

	};

	module.exports = ReactOwner;

/***/ },
/* 385 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

	module.exports = ReactPropTypesSecret;

/***/ },
/* 386 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _assign = __webpack_require__(7);

	var CallbackQueue = __webpack_require__(163);
	var PooledClass = __webpack_require__(32);
	var ReactBrowserEventEmitter = __webpack_require__(66);
	var ReactInputSelection = __webpack_require__(170);
	var ReactInstrumentation = __webpack_require__(20);
	var Transaction = __webpack_require__(68);
	var ReactUpdateQueue = __webpack_require__(100);

	/**
	 * Ensures that, when possible, the selection range (currently selected text
	 * input) is not disturbed by performing the transaction.
	 */
	var SELECTION_RESTORATION = {
	  /**
	   * @return {Selection} Selection information.
	   */
	  initialize: ReactInputSelection.getSelectionInformation,
	  /**
	   * @param {Selection} sel Selection information returned from `initialize`.
	   */
	  close: ReactInputSelection.restoreSelection
	};

	/**
	 * Suppresses events (blur/focus) that could be inadvertently dispatched due to
	 * high level DOM manipulations (like temporarily removing a text input from the
	 * DOM).
	 */
	var EVENT_SUPPRESSION = {
	  /**
	   * @return {boolean} The enabled status of `ReactBrowserEventEmitter` before
	   * the reconciliation.
	   */
	  initialize: function () {
	    var currentlyEnabled = ReactBrowserEventEmitter.isEnabled();
	    ReactBrowserEventEmitter.setEnabled(false);
	    return currentlyEnabled;
	  },

	  /**
	   * @param {boolean} previouslyEnabled Enabled status of
	   *   `ReactBrowserEventEmitter` before the reconciliation occurred. `close`
	   *   restores the previous value.
	   */
	  close: function (previouslyEnabled) {
	    ReactBrowserEventEmitter.setEnabled(previouslyEnabled);
	  }
	};

	/**
	 * Provides a queue for collecting `componentDidMount` and
	 * `componentDidUpdate` callbacks during the transaction.
	 */
	var ON_DOM_READY_QUEUEING = {
	  /**
	   * Initializes the internal `onDOMReady` queue.
	   */
	  initialize: function () {
	    this.reactMountReady.reset();
	  },

	  /**
	   * After DOM is flushed, invoke all registered `onDOMReady` callbacks.
	   */
	  close: function () {
	    this.reactMountReady.notifyAll();
	  }
	};

	/**
	 * Executed within the scope of the `Transaction` instance. Consider these as
	 * being member methods, but with an implied ordering while being isolated from
	 * each other.
	 */
	var TRANSACTION_WRAPPERS = [SELECTION_RESTORATION, EVENT_SUPPRESSION, ON_DOM_READY_QUEUEING];

	if (false) {
	  TRANSACTION_WRAPPERS.push({
	    initialize: ReactInstrumentation.debugTool.onBeginFlush,
	    close: ReactInstrumentation.debugTool.onEndFlush
	  });
	}

	/**
	 * Currently:
	 * - The order that these are listed in the transaction is critical:
	 * - Suppresses events.
	 * - Restores selection range.
	 *
	 * Future:
	 * - Restore document/overflow scroll positions that were unintentionally
	 *   modified via DOM insertions above the top viewport boundary.
	 * - Implement/integrate with customized constraint based layout system and keep
	 *   track of which dimensions must be remeasured.
	 *
	 * @class ReactReconcileTransaction
	 */
	function ReactReconcileTransaction(useCreateElement) {
	  this.reinitializeTransaction();
	  // Only server-side rendering really needs this option (see
	  // `ReactServerRendering`), but server-side uses
	  // `ReactServerRenderingTransaction` instead. This option is here so that it's
	  // accessible and defaults to false when `ReactDOMComponent` and
	  // `ReactDOMTextComponent` checks it in `mountComponent`.`
	  this.renderToStaticMarkup = false;
	  this.reactMountReady = CallbackQueue.getPooled(null);
	  this.useCreateElement = useCreateElement;
	}

	var Mixin = {
	  /**
	   * @see Transaction
	   * @abstract
	   * @final
	   * @return {array<object>} List of operation wrap procedures.
	   *   TODO: convert to array<TransactionWrapper>
	   */
	  getTransactionWrappers: function () {
	    return TRANSACTION_WRAPPERS;
	  },

	  /**
	   * @return {object} The queue to collect `onDOMReady` callbacks with.
	   */
	  getReactMountReady: function () {
	    return this.reactMountReady;
	  },

	  /**
	   * @return {object} The queue to collect React async events.
	   */
	  getUpdateQueue: function () {
	    return ReactUpdateQueue;
	  },

	  /**
	   * Save current transaction state -- if the return value from this method is
	   * passed to `rollback`, the transaction will be reset to that state.
	   */
	  checkpoint: function () {
	    // reactMountReady is the our only stateful wrapper
	    return this.reactMountReady.checkpoint();
	  },

	  rollback: function (checkpoint) {
	    this.reactMountReady.rollback(checkpoint);
	  },

	  /**
	   * `PooledClass` looks for this, and will invoke this before allowing this
	   * instance to be reused.
	   */
	  destructor: function () {
	    CallbackQueue.release(this.reactMountReady);
	    this.reactMountReady = null;
	  }
	};

	_assign(ReactReconcileTransaction.prototype, Transaction, Mixin);

	PooledClass.addPoolingTo(ReactReconcileTransaction);

	module.exports = ReactReconcileTransaction;

/***/ },
/* 387 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var ReactOwner = __webpack_require__(384);

	var ReactRef = {};

	function attachRef(ref, component, owner) {
	  if (typeof ref === 'function') {
	    ref(component.getPublicInstance());
	  } else {
	    // Legacy ref
	    ReactOwner.addComponentAsRefTo(component, ref, owner);
	  }
	}

	function detachRef(ref, component, owner) {
	  if (typeof ref === 'function') {
	    ref(null);
	  } else {
	    // Legacy ref
	    ReactOwner.removeComponentAsRefFrom(component, ref, owner);
	  }
	}

	ReactRef.attachRefs = function (instance, element) {
	  if (element === null || typeof element !== 'object') {
	    return;
	  }
	  var ref = element.ref;
	  if (ref != null) {
	    attachRef(ref, instance, element._owner);
	  }
	};

	ReactRef.shouldUpdateRefs = function (prevElement, nextElement) {
	  // If either the owner or a `ref` has changed, make sure the newest owner
	  // has stored a reference to `this`, and the previous owner (if different)
	  // has forgotten the reference to `this`. We use the element instead
	  // of the public this.props because the post processing cannot determine
	  // a ref. The ref conceptually lives on the element.

	  // TODO: Should this even be possible? The owner cannot change because
	  // it's forbidden by shouldUpdateReactComponent. The ref can change
	  // if you swap the keys of but not the refs. Reconsider where this check
	  // is made. It probably belongs where the key checking and
	  // instantiateReactComponent is done.

	  var prevRef = null;
	  var prevOwner = null;
	  if (prevElement !== null && typeof prevElement === 'object') {
	    prevRef = prevElement.ref;
	    prevOwner = prevElement._owner;
	  }

	  var nextRef = null;
	  var nextOwner = null;
	  if (nextElement !== null && typeof nextElement === 'object') {
	    nextRef = nextElement.ref;
	    nextOwner = nextElement._owner;
	  }

	  return prevRef !== nextRef ||
	  // If owner changes but we have an unchanged function ref, don't update refs
	  typeof nextRef === 'string' && nextOwner !== prevOwner;
	};

	ReactRef.detachRefs = function (instance, element) {
	  if (element === null || typeof element !== 'object') {
	    return;
	  }
	  var ref = element.ref;
	  if (ref != null) {
	    detachRef(ref, instance, element._owner);
	  }
	};

	module.exports = ReactRef;

/***/ },
/* 388 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _assign = __webpack_require__(7);

	var PooledClass = __webpack_require__(32);
	var Transaction = __webpack_require__(68);
	var ReactInstrumentation = __webpack_require__(20);
	var ReactServerUpdateQueue = __webpack_require__(389);

	/**
	 * Executed within the scope of the `Transaction` instance. Consider these as
	 * being member methods, but with an implied ordering while being isolated from
	 * each other.
	 */
	var TRANSACTION_WRAPPERS = [];

	if (false) {
	  TRANSACTION_WRAPPERS.push({
	    initialize: ReactInstrumentation.debugTool.onBeginFlush,
	    close: ReactInstrumentation.debugTool.onEndFlush
	  });
	}

	var noopCallbackQueue = {
	  enqueue: function () {}
	};

	/**
	 * @class ReactServerRenderingTransaction
	 * @param {boolean} renderToStaticMarkup
	 */
	function ReactServerRenderingTransaction(renderToStaticMarkup) {
	  this.reinitializeTransaction();
	  this.renderToStaticMarkup = renderToStaticMarkup;
	  this.useCreateElement = false;
	  this.updateQueue = new ReactServerUpdateQueue(this);
	}

	var Mixin = {
	  /**
	   * @see Transaction
	   * @abstract
	   * @final
	   * @return {array} Empty list of operation wrap procedures.
	   */
	  getTransactionWrappers: function () {
	    return TRANSACTION_WRAPPERS;
	  },

	  /**
	   * @return {object} The queue to collect `onDOMReady` callbacks with.
	   */
	  getReactMountReady: function () {
	    return noopCallbackQueue;
	  },

	  /**
	   * @return {object} The queue to collect React async events.
	   */
	  getUpdateQueue: function () {
	    return this.updateQueue;
	  },

	  /**
	   * `PooledClass` looks for this, and will invoke this before allowing this
	   * instance to be reused.
	   */
	  destructor: function () {},

	  checkpoint: function () {},

	  rollback: function () {}
	};

	_assign(ReactServerRenderingTransaction.prototype, Transaction, Mixin);

	PooledClass.addPoolingTo(ReactServerRenderingTransaction);

	module.exports = ReactServerRenderingTransaction;

/***/ },
/* 389 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2015-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var ReactUpdateQueue = __webpack_require__(100);

	var warning = __webpack_require__(4);

	function warnNoop(publicInstance, callerName) {
	  if (false) {
	    var constructor = publicInstance.constructor;
	    process.env.NODE_ENV !== 'production' ? warning(false, '%s(...): Can only update a mounting component. ' + 'This usually means you called %s() outside componentWillMount() on the server. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, constructor && (constructor.displayName || constructor.name) || 'ReactClass') : void 0;
	  }
	}

	/**
	 * This is the update queue used for server rendering.
	 * It delegates to ReactUpdateQueue while server rendering is in progress and
	 * switches to ReactNoopUpdateQueue after the transaction has completed.
	 * @class ReactServerUpdateQueue
	 * @param {Transaction} transaction
	 */

	var ReactServerUpdateQueue = function () {
	  function ReactServerUpdateQueue(transaction) {
	    _classCallCheck(this, ReactServerUpdateQueue);

	    this.transaction = transaction;
	  }

	  /**
	   * Checks whether or not this composite component is mounted.
	   * @param {ReactClass} publicInstance The instance we want to test.
	   * @return {boolean} True if mounted, false otherwise.
	   * @protected
	   * @final
	   */


	  ReactServerUpdateQueue.prototype.isMounted = function isMounted(publicInstance) {
	    return false;
	  };

	  /**
	   * Enqueue a callback that will be executed after all the pending updates
	   * have processed.
	   *
	   * @param {ReactClass} publicInstance The instance to use as `this` context.
	   * @param {?function} callback Called after state is updated.
	   * @internal
	   */


	  ReactServerUpdateQueue.prototype.enqueueCallback = function enqueueCallback(publicInstance, callback, callerName) {
	    if (this.transaction.isInTransaction()) {
	      ReactUpdateQueue.enqueueCallback(publicInstance, callback, callerName);
	    }
	  };

	  /**
	   * Forces an update. This should only be invoked when it is known with
	   * certainty that we are **not** in a DOM transaction.
	   *
	   * You may want to call this when you know that some deeper aspect of the
	   * component's state has changed but `setState` was not called.
	   *
	   * This will not invoke `shouldComponentUpdate`, but it will invoke
	   * `componentWillUpdate` and `componentDidUpdate`.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @internal
	   */


	  ReactServerUpdateQueue.prototype.enqueueForceUpdate = function enqueueForceUpdate(publicInstance) {
	    if (this.transaction.isInTransaction()) {
	      ReactUpdateQueue.enqueueForceUpdate(publicInstance);
	    } else {
	      warnNoop(publicInstance, 'forceUpdate');
	    }
	  };

	  /**
	   * Replaces all of the state. Always use this or `setState` to mutate state.
	   * You should treat `this.state` as immutable.
	   *
	   * There is no guarantee that `this.state` will be immediately updated, so
	   * accessing `this.state` after calling this method may return the old value.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object|function} completeState Next state.
	   * @internal
	   */


	  ReactServerUpdateQueue.prototype.enqueueReplaceState = function enqueueReplaceState(publicInstance, completeState) {
	    if (this.transaction.isInTransaction()) {
	      ReactUpdateQueue.enqueueReplaceState(publicInstance, completeState);
	    } else {
	      warnNoop(publicInstance, 'replaceState');
	    }
	  };

	  /**
	   * Sets a subset of the state. This only exists because _pendingState is
	   * internal. This provides a merging strategy that is not available to deep
	   * properties which is confusing. TODO: Expose pendingState or don't use it
	   * during the merge.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object|function} partialState Next partial state to be merged with state.
	   * @internal
	   */


	  ReactServerUpdateQueue.prototype.enqueueSetState = function enqueueSetState(publicInstance, partialState) {
	    if (this.transaction.isInTransaction()) {
	      ReactUpdateQueue.enqueueSetState(publicInstance, partialState);
	    } else {
	      warnNoop(publicInstance, 'setState');
	    }
	  };

	  return ReactServerUpdateQueue;
	}();

	module.exports = ReactServerUpdateQueue;

/***/ },
/* 390 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	module.exports = '15.5.4';

/***/ },
/* 391 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var NS = {
	  xlink: 'http://www.w3.org/1999/xlink',
	  xml: 'http://www.w3.org/XML/1998/namespace'
	};

	// We use attributes for everything SVG so let's avoid some duplication and run
	// code instead.
	// The following are all specified in the HTML config already so we exclude here.
	// - class (as className)
	// - color
	// - height
	// - id
	// - lang
	// - max
	// - media
	// - method
	// - min
	// - name
	// - style
	// - target
	// - type
	// - width
	var ATTRS = {
	  accentHeight: 'accent-height',
	  accumulate: 0,
	  additive: 0,
	  alignmentBaseline: 'alignment-baseline',
	  allowReorder: 'allowReorder',
	  alphabetic: 0,
	  amplitude: 0,
	  arabicForm: 'arabic-form',
	  ascent: 0,
	  attributeName: 'attributeName',
	  attributeType: 'attributeType',
	  autoReverse: 'autoReverse',
	  azimuth: 0,
	  baseFrequency: 'baseFrequency',
	  baseProfile: 'baseProfile',
	  baselineShift: 'baseline-shift',
	  bbox: 0,
	  begin: 0,
	  bias: 0,
	  by: 0,
	  calcMode: 'calcMode',
	  capHeight: 'cap-height',
	  clip: 0,
	  clipPath: 'clip-path',
	  clipRule: 'clip-rule',
	  clipPathUnits: 'clipPathUnits',
	  colorInterpolation: 'color-interpolation',
	  colorInterpolationFilters: 'color-interpolation-filters',
	  colorProfile: 'color-profile',
	  colorRendering: 'color-rendering',
	  contentScriptType: 'contentScriptType',
	  contentStyleType: 'contentStyleType',
	  cursor: 0,
	  cx: 0,
	  cy: 0,
	  d: 0,
	  decelerate: 0,
	  descent: 0,
	  diffuseConstant: 'diffuseConstant',
	  direction: 0,
	  display: 0,
	  divisor: 0,
	  dominantBaseline: 'dominant-baseline',
	  dur: 0,
	  dx: 0,
	  dy: 0,
	  edgeMode: 'edgeMode',
	  elevation: 0,
	  enableBackground: 'enable-background',
	  end: 0,
	  exponent: 0,
	  externalResourcesRequired: 'externalResourcesRequired',
	  fill: 0,
	  fillOpacity: 'fill-opacity',
	  fillRule: 'fill-rule',
	  filter: 0,
	  filterRes: 'filterRes',
	  filterUnits: 'filterUnits',
	  floodColor: 'flood-color',
	  floodOpacity: 'flood-opacity',
	  focusable: 0,
	  fontFamily: 'font-family',
	  fontSize: 'font-size',
	  fontSizeAdjust: 'font-size-adjust',
	  fontStretch: 'font-stretch',
	  fontStyle: 'font-style',
	  fontVariant: 'font-variant',
	  fontWeight: 'font-weight',
	  format: 0,
	  from: 0,
	  fx: 0,
	  fy: 0,
	  g1: 0,
	  g2: 0,
	  glyphName: 'glyph-name',
	  glyphOrientationHorizontal: 'glyph-orientation-horizontal',
	  glyphOrientationVertical: 'glyph-orientation-vertical',
	  glyphRef: 'glyphRef',
	  gradientTransform: 'gradientTransform',
	  gradientUnits: 'gradientUnits',
	  hanging: 0,
	  horizAdvX: 'horiz-adv-x',
	  horizOriginX: 'horiz-origin-x',
	  ideographic: 0,
	  imageRendering: 'image-rendering',
	  'in': 0,
	  in2: 0,
	  intercept: 0,
	  k: 0,
	  k1: 0,
	  k2: 0,
	  k3: 0,
	  k4: 0,
	  kernelMatrix: 'kernelMatrix',
	  kernelUnitLength: 'kernelUnitLength',
	  kerning: 0,
	  keyPoints: 'keyPoints',
	  keySplines: 'keySplines',
	  keyTimes: 'keyTimes',
	  lengthAdjust: 'lengthAdjust',
	  letterSpacing: 'letter-spacing',
	  lightingColor: 'lighting-color',
	  limitingConeAngle: 'limitingConeAngle',
	  local: 0,
	  markerEnd: 'marker-end',
	  markerMid: 'marker-mid',
	  markerStart: 'marker-start',
	  markerHeight: 'markerHeight',
	  markerUnits: 'markerUnits',
	  markerWidth: 'markerWidth',
	  mask: 0,
	  maskContentUnits: 'maskContentUnits',
	  maskUnits: 'maskUnits',
	  mathematical: 0,
	  mode: 0,
	  numOctaves: 'numOctaves',
	  offset: 0,
	  opacity: 0,
	  operator: 0,
	  order: 0,
	  orient: 0,
	  orientation: 0,
	  origin: 0,
	  overflow: 0,
	  overlinePosition: 'overline-position',
	  overlineThickness: 'overline-thickness',
	  paintOrder: 'paint-order',
	  panose1: 'panose-1',
	  pathLength: 'pathLength',
	  patternContentUnits: 'patternContentUnits',
	  patternTransform: 'patternTransform',
	  patternUnits: 'patternUnits',
	  pointerEvents: 'pointer-events',
	  points: 0,
	  pointsAtX: 'pointsAtX',
	  pointsAtY: 'pointsAtY',
	  pointsAtZ: 'pointsAtZ',
	  preserveAlpha: 'preserveAlpha',
	  preserveAspectRatio: 'preserveAspectRatio',
	  primitiveUnits: 'primitiveUnits',
	  r: 0,
	  radius: 0,
	  refX: 'refX',
	  refY: 'refY',
	  renderingIntent: 'rendering-intent',
	  repeatCount: 'repeatCount',
	  repeatDur: 'repeatDur',
	  requiredExtensions: 'requiredExtensions',
	  requiredFeatures: 'requiredFeatures',
	  restart: 0,
	  result: 0,
	  rotate: 0,
	  rx: 0,
	  ry: 0,
	  scale: 0,
	  seed: 0,
	  shapeRendering: 'shape-rendering',
	  slope: 0,
	  spacing: 0,
	  specularConstant: 'specularConstant',
	  specularExponent: 'specularExponent',
	  speed: 0,
	  spreadMethod: 'spreadMethod',
	  startOffset: 'startOffset',
	  stdDeviation: 'stdDeviation',
	  stemh: 0,
	  stemv: 0,
	  stitchTiles: 'stitchTiles',
	  stopColor: 'stop-color',
	  stopOpacity: 'stop-opacity',
	  strikethroughPosition: 'strikethrough-position',
	  strikethroughThickness: 'strikethrough-thickness',
	  string: 0,
	  stroke: 0,
	  strokeDasharray: 'stroke-dasharray',
	  strokeDashoffset: 'stroke-dashoffset',
	  strokeLinecap: 'stroke-linecap',
	  strokeLinejoin: 'stroke-linejoin',
	  strokeMiterlimit: 'stroke-miterlimit',
	  strokeOpacity: 'stroke-opacity',
	  strokeWidth: 'stroke-width',
	  surfaceScale: 'surfaceScale',
	  systemLanguage: 'systemLanguage',
	  tableValues: 'tableValues',
	  targetX: 'targetX',
	  targetY: 'targetY',
	  textAnchor: 'text-anchor',
	  textDecoration: 'text-decoration',
	  textRendering: 'text-rendering',
	  textLength: 'textLength',
	  to: 0,
	  transform: 0,
	  u1: 0,
	  u2: 0,
	  underlinePosition: 'underline-position',
	  underlineThickness: 'underline-thickness',
	  unicode: 0,
	  unicodeBidi: 'unicode-bidi',
	  unicodeRange: 'unicode-range',
	  unitsPerEm: 'units-per-em',
	  vAlphabetic: 'v-alphabetic',
	  vHanging: 'v-hanging',
	  vIdeographic: 'v-ideographic',
	  vMathematical: 'v-mathematical',
	  values: 0,
	  vectorEffect: 'vector-effect',
	  version: 0,
	  vertAdvY: 'vert-adv-y',
	  vertOriginX: 'vert-origin-x',
	  vertOriginY: 'vert-origin-y',
	  viewBox: 'viewBox',
	  viewTarget: 'viewTarget',
	  visibility: 0,
	  widths: 0,
	  wordSpacing: 'word-spacing',
	  writingMode: 'writing-mode',
	  x: 0,
	  xHeight: 'x-height',
	  x1: 0,
	  x2: 0,
	  xChannelSelector: 'xChannelSelector',
	  xlinkActuate: 'xlink:actuate',
	  xlinkArcrole: 'xlink:arcrole',
	  xlinkHref: 'xlink:href',
	  xlinkRole: 'xlink:role',
	  xlinkShow: 'xlink:show',
	  xlinkTitle: 'xlink:title',
	  xlinkType: 'xlink:type',
	  xmlBase: 'xml:base',
	  xmlns: 0,
	  xmlnsXlink: 'xmlns:xlink',
	  xmlLang: 'xml:lang',
	  xmlSpace: 'xml:space',
	  y: 0,
	  y1: 0,
	  y2: 0,
	  yChannelSelector: 'yChannelSelector',
	  z: 0,
	  zoomAndPan: 'zoomAndPan'
	};

	var SVGDOMPropertyConfig = {
	  Properties: {},
	  DOMAttributeNamespaces: {
	    xlinkActuate: NS.xlink,
	    xlinkArcrole: NS.xlink,
	    xlinkHref: NS.xlink,
	    xlinkRole: NS.xlink,
	    xlinkShow: NS.xlink,
	    xlinkTitle: NS.xlink,
	    xlinkType: NS.xlink,
	    xmlBase: NS.xml,
	    xmlLang: NS.xml,
	    xmlSpace: NS.xml
	  },
	  DOMAttributeNames: {}
	};

	Object.keys(ATTRS).forEach(function (key) {
	  SVGDOMPropertyConfig.Properties[key] = 0;
	  if (ATTRS[key]) {
	    SVGDOMPropertyConfig.DOMAttributeNames[key] = ATTRS[key];
	  }
	});

	module.exports = SVGDOMPropertyConfig;

/***/ },
/* 392 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var EventPropagators = __webpack_require__(50);
	var ExecutionEnvironment = __webpack_require__(15);
	var ReactDOMComponentTree = __webpack_require__(11);
	var ReactInputSelection = __webpack_require__(170);
	var SyntheticEvent = __webpack_require__(26);

	var getActiveElement = __webpack_require__(148);
	var isTextInputElement = __webpack_require__(179);
	var shallowEqual = __webpack_require__(60);

	var skipSelectionChangeEvent = ExecutionEnvironment.canUseDOM && 'documentMode' in document && document.documentMode <= 11;

	var eventTypes = {
	  select: {
	    phasedRegistrationNames: {
	      bubbled: 'onSelect',
	      captured: 'onSelectCapture'
	    },
	    dependencies: ['topBlur', 'topContextMenu', 'topFocus', 'topKeyDown', 'topKeyUp', 'topMouseDown', 'topMouseUp', 'topSelectionChange']
	  }
	};

	var activeElement = null;
	var activeElementInst = null;
	var lastSelection = null;
	var mouseDown = false;

	// Track whether a listener exists for this plugin. If none exist, we do
	// not extract events. See #3639.
	var hasListener = false;

	/**
	 * Get an object which is a unique representation of the current selection.
	 *
	 * The return value will not be consistent across nodes or browsers, but
	 * two identical selections on the same node will return identical objects.
	 *
	 * @param {DOMElement} node
	 * @return {object}
	 */
	function getSelection(node) {
	  if ('selectionStart' in node && ReactInputSelection.hasSelectionCapabilities(node)) {
	    return {
	      start: node.selectionStart,
	      end: node.selectionEnd
	    };
	  } else if (window.getSelection) {
	    var selection = window.getSelection();
	    return {
	      anchorNode: selection.anchorNode,
	      anchorOffset: selection.anchorOffset,
	      focusNode: selection.focusNode,
	      focusOffset: selection.focusOffset
	    };
	  } else if (document.selection) {
	    var range = document.selection.createRange();
	    return {
	      parentElement: range.parentElement(),
	      text: range.text,
	      top: range.boundingTop,
	      left: range.boundingLeft
	    };
	  }
	}

	/**
	 * Poll selection to see whether it's changed.
	 *
	 * @param {object} nativeEvent
	 * @return {?SyntheticEvent}
	 */
	function constructSelectEvent(nativeEvent, nativeEventTarget) {
	  // Ensure we have the right element, and that the user is not dragging a
	  // selection (this matches native `select` event behavior). In HTML5, select
	  // fires only on input and textarea thus if there's no focused element we
	  // won't dispatch.
	  if (mouseDown || activeElement == null || activeElement !== getActiveElement()) {
	    return null;
	  }

	  // Only fire when selection has actually changed.
	  var currentSelection = getSelection(activeElement);
	  if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
	    lastSelection = currentSelection;

	    var syntheticEvent = SyntheticEvent.getPooled(eventTypes.select, activeElementInst, nativeEvent, nativeEventTarget);

	    syntheticEvent.type = 'select';
	    syntheticEvent.target = activeElement;

	    EventPropagators.accumulateTwoPhaseDispatches(syntheticEvent);

	    return syntheticEvent;
	  }

	  return null;
	}

	/**
	 * This plugin creates an `onSelect` event that normalizes select events
	 * across form elements.
	 *
	 * Supported elements are:
	 * - input (see `isTextInputElement`)
	 * - textarea
	 * - contentEditable
	 *
	 * This differs from native browser implementations in the following ways:
	 * - Fires on contentEditable fields as well as inputs.
	 * - Fires for collapsed selection.
	 * - Fires after user input.
	 */
	var SelectEventPlugin = {

	  eventTypes: eventTypes,

	  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	    if (!hasListener) {
	      return null;
	    }

	    var targetNode = targetInst ? ReactDOMComponentTree.getNodeFromInstance(targetInst) : window;

	    switch (topLevelType) {
	      // Track the input node that has focus.
	      case 'topFocus':
	        if (isTextInputElement(targetNode) || targetNode.contentEditable === 'true') {
	          activeElement = targetNode;
	          activeElementInst = targetInst;
	          lastSelection = null;
	        }
	        break;
	      case 'topBlur':
	        activeElement = null;
	        activeElementInst = null;
	        lastSelection = null;
	        break;

	      // Don't fire the event while the user is dragging. This matches the
	      // semantics of the native select event.
	      case 'topMouseDown':
	        mouseDown = true;
	        break;
	      case 'topContextMenu':
	      case 'topMouseUp':
	        mouseDown = false;
	        return constructSelectEvent(nativeEvent, nativeEventTarget);

	      // Chrome and IE fire non-standard event when selection is changed (and
	      // sometimes when it hasn't). IE's event fires out of order with respect
	      // to key and input events on deletion, so we discard it.
	      //
	      // Firefox doesn't support selectionchange, so check selection status
	      // after each key entry. The selection changes after keydown and before
	      // keyup, but we check on keydown as well in the case of holding down a
	      // key, when multiple keydown events are fired but only one keyup is.
	      // This is also our approach for IE handling, for the reason above.
	      case 'topSelectionChange':
	        if (skipSelectionChangeEvent) {
	          break;
	        }
	      // falls through
	      case 'topKeyDown':
	      case 'topKeyUp':
	        return constructSelectEvent(nativeEvent, nativeEventTarget);
	    }

	    return null;
	  },

	  didPutListener: function (inst, registrationName, listener) {
	    if (registrationName === 'onSelect') {
	      hasListener = true;
	    }
	  }
	};

	module.exports = SelectEventPlugin;

/***/ },
/* 393 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(5);

	var EventListener = __webpack_require__(146);
	var EventPropagators = __webpack_require__(50);
	var ReactDOMComponentTree = __webpack_require__(11);
	var SyntheticAnimationEvent = __webpack_require__(394);
	var SyntheticClipboardEvent = __webpack_require__(395);
	var SyntheticEvent = __webpack_require__(26);
	var SyntheticFocusEvent = __webpack_require__(398);
	var SyntheticKeyboardEvent = __webpack_require__(400);
	var SyntheticMouseEvent = __webpack_require__(67);
	var SyntheticDragEvent = __webpack_require__(397);
	var SyntheticTouchEvent = __webpack_require__(401);
	var SyntheticTransitionEvent = __webpack_require__(402);
	var SyntheticUIEvent = __webpack_require__(52);
	var SyntheticWheelEvent = __webpack_require__(403);

	var emptyFunction = __webpack_require__(18);
	var getEventCharCode = __webpack_require__(102);
	var invariant = __webpack_require__(3);

	/**
	 * Turns
	 * ['abort', ...]
	 * into
	 * eventTypes = {
	 *   'abort': {
	 *     phasedRegistrationNames: {
	 *       bubbled: 'onAbort',
	 *       captured: 'onAbortCapture',
	 *     },
	 *     dependencies: ['topAbort'],
	 *   },
	 *   ...
	 * };
	 * topLevelEventsToDispatchConfig = {
	 *   'topAbort': { sameConfig }
	 * };
	 */
	var eventTypes = {};
	var topLevelEventsToDispatchConfig = {};
	['abort', 'animationEnd', 'animationIteration', 'animationStart', 'blur', 'canPlay', 'canPlayThrough', 'click', 'contextMenu', 'copy', 'cut', 'doubleClick', 'drag', 'dragEnd', 'dragEnter', 'dragExit', 'dragLeave', 'dragOver', 'dragStart', 'drop', 'durationChange', 'emptied', 'encrypted', 'ended', 'error', 'focus', 'input', 'invalid', 'keyDown', 'keyPress', 'keyUp', 'load', 'loadedData', 'loadedMetadata', 'loadStart', 'mouseDown', 'mouseMove', 'mouseOut', 'mouseOver', 'mouseUp', 'paste', 'pause', 'play', 'playing', 'progress', 'rateChange', 'reset', 'scroll', 'seeked', 'seeking', 'stalled', 'submit', 'suspend', 'timeUpdate', 'touchCancel', 'touchEnd', 'touchMove', 'touchStart', 'transitionEnd', 'volumeChange', 'waiting', 'wheel'].forEach(function (event) {
	  var capitalizedEvent = event[0].toUpperCase() + event.slice(1);
	  var onEvent = 'on' + capitalizedEvent;
	  var topEvent = 'top' + capitalizedEvent;

	  var type = {
	    phasedRegistrationNames: {
	      bubbled: onEvent,
	      captured: onEvent + 'Capture'
	    },
	    dependencies: [topEvent]
	  };
	  eventTypes[event] = type;
	  topLevelEventsToDispatchConfig[topEvent] = type;
	});

	var onClickListeners = {};

	function getDictionaryKey(inst) {
	  // Prevents V8 performance issue:
	  // https://github.com/facebook/react/pull/7232
	  return '.' + inst._rootNodeID;
	}

	function isInteractive(tag) {
	  return tag === 'button' || tag === 'input' || tag === 'select' || tag === 'textarea';
	}

	var SimpleEventPlugin = {

	  eventTypes: eventTypes,

	  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	    var dispatchConfig = topLevelEventsToDispatchConfig[topLevelType];
	    if (!dispatchConfig) {
	      return null;
	    }
	    var EventConstructor;
	    switch (topLevelType) {
	      case 'topAbort':
	      case 'topCanPlay':
	      case 'topCanPlayThrough':
	      case 'topDurationChange':
	      case 'topEmptied':
	      case 'topEncrypted':
	      case 'topEnded':
	      case 'topError':
	      case 'topInput':
	      case 'topInvalid':
	      case 'topLoad':
	      case 'topLoadedData':
	      case 'topLoadedMetadata':
	      case 'topLoadStart':
	      case 'topPause':
	      case 'topPlay':
	      case 'topPlaying':
	      case 'topProgress':
	      case 'topRateChange':
	      case 'topReset':
	      case 'topSeeked':
	      case 'topSeeking':
	      case 'topStalled':
	      case 'topSubmit':
	      case 'topSuspend':
	      case 'topTimeUpdate':
	      case 'topVolumeChange':
	      case 'topWaiting':
	        // HTML Events
	        // @see http://www.w3.org/TR/html5/index.html#events-0
	        EventConstructor = SyntheticEvent;
	        break;
	      case 'topKeyPress':
	        // Firefox creates a keypress event for function keys too. This removes
	        // the unwanted keypress events. Enter is however both printable and
	        // non-printable. One would expect Tab to be as well (but it isn't).
	        if (getEventCharCode(nativeEvent) === 0) {
	          return null;
	        }
	      /* falls through */
	      case 'topKeyDown':
	      case 'topKeyUp':
	        EventConstructor = SyntheticKeyboardEvent;
	        break;
	      case 'topBlur':
	      case 'topFocus':
	        EventConstructor = SyntheticFocusEvent;
	        break;
	      case 'topClick':
	        // Firefox creates a click event on right mouse clicks. This removes the
	        // unwanted click events.
	        if (nativeEvent.button === 2) {
	          return null;
	        }
	      /* falls through */
	      case 'topDoubleClick':
	      case 'topMouseDown':
	      case 'topMouseMove':
	      case 'topMouseUp':
	      // TODO: Disabled elements should not respond to mouse events
	      /* falls through */
	      case 'topMouseOut':
	      case 'topMouseOver':
	      case 'topContextMenu':
	        EventConstructor = SyntheticMouseEvent;
	        break;
	      case 'topDrag':
	      case 'topDragEnd':
	      case 'topDragEnter':
	      case 'topDragExit':
	      case 'topDragLeave':
	      case 'topDragOver':
	      case 'topDragStart':
	      case 'topDrop':
	        EventConstructor = SyntheticDragEvent;
	        break;
	      case 'topTouchCancel':
	      case 'topTouchEnd':
	      case 'topTouchMove':
	      case 'topTouchStart':
	        EventConstructor = SyntheticTouchEvent;
	        break;
	      case 'topAnimationEnd':
	      case 'topAnimationIteration':
	      case 'topAnimationStart':
	        EventConstructor = SyntheticAnimationEvent;
	        break;
	      case 'topTransitionEnd':
	        EventConstructor = SyntheticTransitionEvent;
	        break;
	      case 'topScroll':
	        EventConstructor = SyntheticUIEvent;
	        break;
	      case 'topWheel':
	        EventConstructor = SyntheticWheelEvent;
	        break;
	      case 'topCopy':
	      case 'topCut':
	      case 'topPaste':
	        EventConstructor = SyntheticClipboardEvent;
	        break;
	    }
	    !EventConstructor ?  false ? invariant(false, 'SimpleEventPlugin: Unhandled event type, `%s`.', topLevelType) : _prodInvariant('86', topLevelType) : void 0;
	    var event = EventConstructor.getPooled(dispatchConfig, targetInst, nativeEvent, nativeEventTarget);
	    EventPropagators.accumulateTwoPhaseDispatches(event);
	    return event;
	  },

	  didPutListener: function (inst, registrationName, listener) {
	    // Mobile Safari does not fire properly bubble click events on
	    // non-interactive elements, which means delegated click listeners do not
	    // fire. The workaround for this bug involves attaching an empty click
	    // listener on the target node.
	    // http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
	    if (registrationName === 'onClick' && !isInteractive(inst._tag)) {
	      var key = getDictionaryKey(inst);
	      var node = ReactDOMComponentTree.getNodeFromInstance(inst);
	      if (!onClickListeners[key]) {
	        onClickListeners[key] = EventListener.listen(node, 'click', emptyFunction);
	      }
	    }
	  },

	  willDeleteListener: function (inst, registrationName) {
	    if (registrationName === 'onClick' && !isInteractive(inst._tag)) {
	      var key = getDictionaryKey(inst);
	      onClickListeners[key].remove();
	      delete onClickListeners[key];
	    }
	  }

	};

	module.exports = SimpleEventPlugin;

/***/ },
/* 394 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var SyntheticEvent = __webpack_require__(26);

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/css3-animations/#AnimationEvent-interface
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/AnimationEvent
	 */
	var AnimationEventInterface = {
	  animationName: null,
	  elapsedTime: null,
	  pseudoElement: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticEvent}
	 */
	function SyntheticAnimationEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticEvent.augmentClass(SyntheticAnimationEvent, AnimationEventInterface);

	module.exports = SyntheticAnimationEvent;

/***/ },
/* 395 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var SyntheticEvent = __webpack_require__(26);

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/clipboard-apis/
	 */
	var ClipboardEventInterface = {
	  clipboardData: function (event) {
	    return 'clipboardData' in event ? event.clipboardData : window.clipboardData;
	  }
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticClipboardEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticEvent.augmentClass(SyntheticClipboardEvent, ClipboardEventInterface);

	module.exports = SyntheticClipboardEvent;

/***/ },
/* 396 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var SyntheticEvent = __webpack_require__(26);

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents
	 */
	var CompositionEventInterface = {
	  data: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticCompositionEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticEvent.augmentClass(SyntheticCompositionEvent, CompositionEventInterface);

	module.exports = SyntheticCompositionEvent;

/***/ },
/* 397 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var SyntheticMouseEvent = __webpack_require__(67);

	/**
	 * @interface DragEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var DragEventInterface = {
	  dataTransfer: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticDragEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticMouseEvent.augmentClass(SyntheticDragEvent, DragEventInterface);

	module.exports = SyntheticDragEvent;

/***/ },
/* 398 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var SyntheticUIEvent = __webpack_require__(52);

	/**
	 * @interface FocusEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var FocusEventInterface = {
	  relatedTarget: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticFocusEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticUIEvent.augmentClass(SyntheticFocusEvent, FocusEventInterface);

	module.exports = SyntheticFocusEvent;

/***/ },
/* 399 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var SyntheticEvent = __webpack_require__(26);

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105
	 *      /#events-inputevents
	 */
	var InputEventInterface = {
	  data: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticInputEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticEvent.augmentClass(SyntheticInputEvent, InputEventInterface);

	module.exports = SyntheticInputEvent;

/***/ },
/* 400 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var SyntheticUIEvent = __webpack_require__(52);

	var getEventCharCode = __webpack_require__(102);
	var getEventKey = __webpack_require__(408);
	var getEventModifierState = __webpack_require__(103);

	/**
	 * @interface KeyboardEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var KeyboardEventInterface = {
	  key: getEventKey,
	  location: null,
	  ctrlKey: null,
	  shiftKey: null,
	  altKey: null,
	  metaKey: null,
	  repeat: null,
	  locale: null,
	  getModifierState: getEventModifierState,
	  // Legacy Interface
	  charCode: function (event) {
	    // `charCode` is the result of a KeyPress event and represents the value of
	    // the actual printable character.

	    // KeyPress is deprecated, but its replacement is not yet final and not
	    // implemented in any major browser. Only KeyPress has charCode.
	    if (event.type === 'keypress') {
	      return getEventCharCode(event);
	    }
	    return 0;
	  },
	  keyCode: function (event) {
	    // `keyCode` is the result of a KeyDown/Up event and represents the value of
	    // physical keyboard key.

	    // The actual meaning of the value depends on the users' keyboard layout
	    // which cannot be detected. Assuming that it is a US keyboard layout
	    // provides a surprisingly accurate mapping for US and European users.
	    // Due to this, it is left to the user to implement at this time.
	    if (event.type === 'keydown' || event.type === 'keyup') {
	      return event.keyCode;
	    }
	    return 0;
	  },
	  which: function (event) {
	    // `which` is an alias for either `keyCode` or `charCode` depending on the
	    // type of the event.
	    if (event.type === 'keypress') {
	      return getEventCharCode(event);
	    }
	    if (event.type === 'keydown' || event.type === 'keyup') {
	      return event.keyCode;
	    }
	    return 0;
	  }
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticKeyboardEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticUIEvent.augmentClass(SyntheticKeyboardEvent, KeyboardEventInterface);

	module.exports = SyntheticKeyboardEvent;

/***/ },
/* 401 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var SyntheticUIEvent = __webpack_require__(52);

	var getEventModifierState = __webpack_require__(103);

	/**
	 * @interface TouchEvent
	 * @see http://www.w3.org/TR/touch-events/
	 */
	var TouchEventInterface = {
	  touches: null,
	  targetTouches: null,
	  changedTouches: null,
	  altKey: null,
	  metaKey: null,
	  ctrlKey: null,
	  shiftKey: null,
	  getModifierState: getEventModifierState
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticTouchEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticUIEvent.augmentClass(SyntheticTouchEvent, TouchEventInterface);

	module.exports = SyntheticTouchEvent;

/***/ },
/* 402 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var SyntheticEvent = __webpack_require__(26);

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/2009/WD-css3-transitions-20090320/#transition-events-
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/TransitionEvent
	 */
	var TransitionEventInterface = {
	  propertyName: null,
	  elapsedTime: null,
	  pseudoElement: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticEvent}
	 */
	function SyntheticTransitionEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticEvent.augmentClass(SyntheticTransitionEvent, TransitionEventInterface);

	module.exports = SyntheticTransitionEvent;

/***/ },
/* 403 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var SyntheticMouseEvent = __webpack_require__(67);

	/**
	 * @interface WheelEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var WheelEventInterface = {
	  deltaX: function (event) {
	    return 'deltaX' in event ? event.deltaX :
	    // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
	    'wheelDeltaX' in event ? -event.wheelDeltaX : 0;
	  },
	  deltaY: function (event) {
	    return 'deltaY' in event ? event.deltaY :
	    // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
	    'wheelDeltaY' in event ? -event.wheelDeltaY :
	    // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
	    'wheelDelta' in event ? -event.wheelDelta : 0;
	  },
	  deltaZ: null,

	  // Browsers without "deltaMode" is reporting in raw wheel delta where one
	  // notch on the scroll is always +/- 120, roughly equivalent to pixels.
	  // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
	  // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
	  deltaMode: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticMouseEvent}
	 */
	function SyntheticWheelEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticMouseEvent.augmentClass(SyntheticWheelEvent, WheelEventInterface);

	module.exports = SyntheticWheelEvent;

/***/ },
/* 404 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var MOD = 65521;

	// adler32 is not cryptographically strong, and is only used to sanity check that
	// markup generated on the server matches the markup generated on the client.
	// This implementation (a modified version of the SheetJS version) has been optimized
	// for our use case, at the expense of conforming to the adler32 specification
	// for non-ascii inputs.
	function adler32(data) {
	  var a = 1;
	  var b = 0;
	  var i = 0;
	  var l = data.length;
	  var m = l & ~0x3;
	  while (i < m) {
	    var n = Math.min(i + 4096, m);
	    for (; i < n; i += 4) {
	      b += (a += data.charCodeAt(i)) + (a += data.charCodeAt(i + 1)) + (a += data.charCodeAt(i + 2)) + (a += data.charCodeAt(i + 3));
	    }
	    a %= MOD;
	    b %= MOD;
	  }
	  for (; i < l; i++) {
	    b += a += data.charCodeAt(i);
	  }
	  a %= MOD;
	  b %= MOD;
	  return a | b << 16;
	}

	module.exports = adler32;

/***/ },
/* 405 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var CSSProperty = __webpack_require__(162);
	var warning = __webpack_require__(4);

	var isUnitlessNumber = CSSProperty.isUnitlessNumber;
	var styleWarnings = {};

	/**
	 * Convert a value into the proper css writable value. The style name `name`
	 * should be logical (no hyphens), as specified
	 * in `CSSProperty.isUnitlessNumber`.
	 *
	 * @param {string} name CSS property name such as `topMargin`.
	 * @param {*} value CSS property value such as `10px`.
	 * @param {ReactDOMComponent} component
	 * @return {string} Normalized style value with dimensions applied.
	 */
	function dangerousStyleValue(name, value, component) {
	  // Note that we've removed escapeTextForBrowser() calls here since the
	  // whole string will be escaped when the attribute is injected into
	  // the markup. If you provide unsafe user data here they can inject
	  // arbitrary CSS which may be problematic (I couldn't repro this):
	  // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
	  // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/
	  // This is not an XSS hole but instead a potential CSS injection issue
	  // which has lead to a greater discussion about how we're going to
	  // trust URLs moving forward. See #2115901

	  var isEmpty = value == null || typeof value === 'boolean' || value === '';
	  if (isEmpty) {
	    return '';
	  }

	  var isNonNumeric = isNaN(value);
	  if (isNonNumeric || value === 0 || isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name]) {
	    return '' + value; // cast to string
	  }

	  if (typeof value === 'string') {
	    if (false) {
	      // Allow '0' to pass through without warning. 0 is already special and
	      // doesn't require units, so we don't need to warn about it.
	      if (component && value !== '0') {
	        var owner = component._currentElement._owner;
	        var ownerName = owner ? owner.getName() : null;
	        if (ownerName && !styleWarnings[ownerName]) {
	          styleWarnings[ownerName] = {};
	        }
	        var warned = false;
	        if (ownerName) {
	          var warnings = styleWarnings[ownerName];
	          warned = warnings[name];
	          if (!warned) {
	            warnings[name] = true;
	          }
	        }
	        if (!warned) {
	          process.env.NODE_ENV !== 'production' ? warning(false, 'a `%s` tag (owner: `%s`) was passed a numeric string value ' + 'for CSS property `%s` (value: `%s`) which will be treated ' + 'as a unitless number in a future version of React.', component._currentElement.type, ownerName || 'unknown', name, value) : void 0;
	        }
	      }
	    }
	    value = value.trim();
	  }
	  return value + 'px';
	}

	module.exports = dangerousStyleValue;

/***/ },
/* 406 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(5);

	var ReactCurrentOwner = __webpack_require__(27);
	var ReactDOMComponentTree = __webpack_require__(11);
	var ReactInstanceMap = __webpack_require__(51);

	var getHostComponentFromComposite = __webpack_require__(176);
	var invariant = __webpack_require__(3);
	var warning = __webpack_require__(4);

	/**
	 * Returns the DOM node rendered by this element.
	 *
	 * See https://facebook.github.io/react/docs/top-level-api.html#reactdom.finddomnode
	 *
	 * @param {ReactComponent|DOMElement} componentOrElement
	 * @return {?DOMElement} The root node of this element.
	 */
	function findDOMNode(componentOrElement) {
	  if (false) {
	    var owner = ReactCurrentOwner.current;
	    if (owner !== null) {
	      process.env.NODE_ENV !== 'production' ? warning(owner._warnedAboutRefsInRender, '%s is accessing findDOMNode inside its render(). ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', owner.getName() || 'A component') : void 0;
	      owner._warnedAboutRefsInRender = true;
	    }
	  }
	  if (componentOrElement == null) {
	    return null;
	  }
	  if (componentOrElement.nodeType === 1) {
	    return componentOrElement;
	  }

	  var inst = ReactInstanceMap.get(componentOrElement);
	  if (inst) {
	    inst = getHostComponentFromComposite(inst);
	    return inst ? ReactDOMComponentTree.getNodeFromInstance(inst) : null;
	  }

	  if (typeof componentOrElement.render === 'function') {
	     true ?  false ? invariant(false, 'findDOMNode was called on an unmounted component.') : _prodInvariant('44') : void 0;
	  } else {
	     true ?  false ? invariant(false, 'Element appears to be neither ReactComponent nor DOMNode (keys: %s)', Object.keys(componentOrElement)) : _prodInvariant('45', Object.keys(componentOrElement)) : void 0;
	  }
	}

	module.exports = findDOMNode;

/***/ },
/* 407 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var KeyEscapeUtils = __webpack_require__(96);
	var traverseAllChildren = __webpack_require__(181);
	var warning = __webpack_require__(4);

	var ReactComponentTreeHook;

	if (typeof process !== 'undefined' && ({"NODE_ENV":"production"}) && ("production") === 'test') {
	  // Temporary hack.
	  // Inline requires don't work well with Jest:
	  // https://github.com/facebook/react/issues/7240
	  // Remove the inline requires when we don't need them anymore:
	  // https://github.com/facebook/react/pull/7178
	  ReactComponentTreeHook = __webpack_require__(182);
	}

	/**
	 * @param {function} traverseContext Context passed through traversal.
	 * @param {?ReactComponent} child React child component.
	 * @param {!string} name String name of key path to child.
	 * @param {number=} selfDebugID Optional debugID of the current internal instance.
	 */
	function flattenSingleChildIntoContext(traverseContext, child, name, selfDebugID) {
	  // We found a component instance.
	  if (traverseContext && typeof traverseContext === 'object') {
	    var result = traverseContext;
	    var keyUnique = result[name] === undefined;
	    if (false) {
	      if (!ReactComponentTreeHook) {
	        ReactComponentTreeHook = require('react/lib/ReactComponentTreeHook');
	      }
	      if (!keyUnique) {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'flattenChildren(...): Encountered two children with the same key, ' + '`%s`. Child keys must be unique; when two children share a key, only ' + 'the first child will be used.%s', KeyEscapeUtils.unescape(name), ReactComponentTreeHook.getStackAddendumByID(selfDebugID)) : void 0;
	      }
	    }
	    if (keyUnique && child != null) {
	      result[name] = child;
	    }
	  }
	}

	/**
	 * Flattens children that are typically specified as `props.children`. Any null
	 * children will not be included in the resulting object.
	 * @return {!object} flattened children keyed by name.
	 */
	function flattenChildren(children, selfDebugID) {
	  if (children == null) {
	    return children;
	  }
	  var result = {};

	  if (false) {
	    traverseAllChildren(children, function (traverseContext, child, name) {
	      return flattenSingleChildIntoContext(traverseContext, child, name, selfDebugID);
	    }, result);
	  } else {
	    traverseAllChildren(children, flattenSingleChildIntoContext, result);
	  }
	  return result;
	}

	module.exports = flattenChildren;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(85)))

/***/ },
/* 408 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var getEventCharCode = __webpack_require__(102);

	/**
	 * Normalization of deprecated HTML5 `key` values
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
	 */
	var normalizeKey = {
	  'Esc': 'Escape',
	  'Spacebar': ' ',
	  'Left': 'ArrowLeft',
	  'Up': 'ArrowUp',
	  'Right': 'ArrowRight',
	  'Down': 'ArrowDown',
	  'Del': 'Delete',
	  'Win': 'OS',
	  'Menu': 'ContextMenu',
	  'Apps': 'ContextMenu',
	  'Scroll': 'ScrollLock',
	  'MozPrintableKey': 'Unidentified'
	};

	/**
	 * Translation from legacy `keyCode` to HTML5 `key`
	 * Only special keys supported, all others depend on keyboard layout or browser
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
	 */
	var translateToKey = {
	  8: 'Backspace',
	  9: 'Tab',
	  12: 'Clear',
	  13: 'Enter',
	  16: 'Shift',
	  17: 'Control',
	  18: 'Alt',
	  19: 'Pause',
	  20: 'CapsLock',
	  27: 'Escape',
	  32: ' ',
	  33: 'PageUp',
	  34: 'PageDown',
	  35: 'End',
	  36: 'Home',
	  37: 'ArrowLeft',
	  38: 'ArrowUp',
	  39: 'ArrowRight',
	  40: 'ArrowDown',
	  45: 'Insert',
	  46: 'Delete',
	  112: 'F1', 113: 'F2', 114: 'F3', 115: 'F4', 116: 'F5', 117: 'F6',
	  118: 'F7', 119: 'F8', 120: 'F9', 121: 'F10', 122: 'F11', 123: 'F12',
	  144: 'NumLock',
	  145: 'ScrollLock',
	  224: 'Meta'
	};

	/**
	 * @param {object} nativeEvent Native browser event.
	 * @return {string} Normalized `key` property.
	 */
	function getEventKey(nativeEvent) {
	  if (nativeEvent.key) {
	    // Normalize inconsistent values reported by browsers due to
	    // implementations of a working draft specification.

	    // FireFox implements `key` but returns `MozPrintableKey` for all
	    // printable characters (normalized to `Unidentified`), ignore it.
	    var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
	    if (key !== 'Unidentified') {
	      return key;
	    }
	  }

	  // Browser does not implement `key`, polyfill as much of it as we can.
	  if (nativeEvent.type === 'keypress') {
	    var charCode = getEventCharCode(nativeEvent);

	    // The enter-key is technically both printable and non-printable and can
	    // thus be captured by `keypress`, no other non-printable key should.
	    return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);
	  }
	  if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') {
	    // While user keyboard layout determines the actual meaning of each
	    // `keyCode` value, almost all function keys have a universal value.
	    return translateToKey[nativeEvent.keyCode] || 'Unidentified';
	  }
	  return '';
	}

	module.exports = getEventKey;

/***/ },
/* 409 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	/* global Symbol */

	var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
	var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

	/**
	 * Returns the iterator method function contained on the iterable object.
	 *
	 * Be sure to invoke the function with the iterable as context:
	 *
	 *     var iteratorFn = getIteratorFn(myIterable);
	 *     if (iteratorFn) {
	 *       var iterator = iteratorFn.call(myIterable);
	 *       ...
	 *     }
	 *
	 * @param {?object} maybeIterable
	 * @return {?function}
	 */
	function getIteratorFn(maybeIterable) {
	  var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
	  if (typeof iteratorFn === 'function') {
	    return iteratorFn;
	  }
	}

	module.exports = getIteratorFn;

/***/ },
/* 410 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	/**
	 * Given any node return the first leaf node without children.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @return {DOMElement|DOMTextNode}
	 */

	function getLeafNode(node) {
	  while (node && node.firstChild) {
	    node = node.firstChild;
	  }
	  return node;
	}

	/**
	 * Get the next sibling within a container. This will walk up the
	 * DOM if a node's siblings have been exhausted.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @return {?DOMElement|DOMTextNode}
	 */
	function getSiblingNode(node) {
	  while (node) {
	    if (node.nextSibling) {
	      return node.nextSibling;
	    }
	    node = node.parentNode;
	  }
	}

	/**
	 * Get object describing the nodes which contain characters at offset.
	 *
	 * @param {DOMElement|DOMTextNode} root
	 * @param {number} offset
	 * @return {?object}
	 */
	function getNodeForCharacterOffset(root, offset) {
	  var node = getLeafNode(root);
	  var nodeStart = 0;
	  var nodeEnd = 0;

	  while (node) {
	    if (node.nodeType === 3) {
	      nodeEnd = nodeStart + node.textContent.length;

	      if (nodeStart <= offset && nodeEnd >= offset) {
	        return {
	          node: node,
	          offset: offset - nodeStart
	        };
	      }

	      nodeStart = nodeEnd;
	    }

	    node = getLeafNode(getSiblingNode(node));
	  }
	}

	module.exports = getNodeForCharacterOffset;

/***/ },
/* 411 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(15);

	/**
	 * Generate a mapping of standard vendor prefixes using the defined style property and event name.
	 *
	 * @param {string} styleProp
	 * @param {string} eventName
	 * @returns {object}
	 */
	function makePrefixMap(styleProp, eventName) {
	  var prefixes = {};

	  prefixes[styleProp.toLowerCase()] = eventName.toLowerCase();
	  prefixes['Webkit' + styleProp] = 'webkit' + eventName;
	  prefixes['Moz' + styleProp] = 'moz' + eventName;
	  prefixes['ms' + styleProp] = 'MS' + eventName;
	  prefixes['O' + styleProp] = 'o' + eventName.toLowerCase();

	  return prefixes;
	}

	/**
	 * A list of event names to a configurable list of vendor prefixes.
	 */
	var vendorPrefixes = {
	  animationend: makePrefixMap('Animation', 'AnimationEnd'),
	  animationiteration: makePrefixMap('Animation', 'AnimationIteration'),
	  animationstart: makePrefixMap('Animation', 'AnimationStart'),
	  transitionend: makePrefixMap('Transition', 'TransitionEnd')
	};

	/**
	 * Event names that have already been detected and prefixed (if applicable).
	 */
	var prefixedEventNames = {};

	/**
	 * Element to check for prefixes on.
	 */
	var style = {};

	/**
	 * Bootstrap if a DOM exists.
	 */
	if (ExecutionEnvironment.canUseDOM) {
	  style = document.createElement('div').style;

	  // On some platforms, in particular some releases of Android 4.x,
	  // the un-prefixed "animation" and "transition" properties are defined on the
	  // style object but the events that fire will still be prefixed, so we need
	  // to check if the un-prefixed events are usable, and if not remove them from the map.
	  if (!('AnimationEvent' in window)) {
	    delete vendorPrefixes.animationend.animation;
	    delete vendorPrefixes.animationiteration.animation;
	    delete vendorPrefixes.animationstart.animation;
	  }

	  // Same as above
	  if (!('TransitionEvent' in window)) {
	    delete vendorPrefixes.transitionend.transition;
	  }
	}

	/**
	 * Attempts to determine the correct vendor prefixed event name.
	 *
	 * @param {string} eventName
	 * @returns {string}
	 */
	function getVendorPrefixedEventName(eventName) {
	  if (prefixedEventNames[eventName]) {
	    return prefixedEventNames[eventName];
	  } else if (!vendorPrefixes[eventName]) {
	    return eventName;
	  }

	  var prefixMap = vendorPrefixes[eventName];

	  for (var styleProp in prefixMap) {
	    if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) {
	      return prefixedEventNames[eventName] = prefixMap[styleProp];
	    }
	  }

	  return '';
	}

	module.exports = getVendorPrefixedEventName;

/***/ },
/* 412 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var escapeTextContentForBrowser = __webpack_require__(69);

	/**
	 * Escapes attribute value to prevent scripting attacks.
	 *
	 * @param {*} value Value to escape.
	 * @return {string} An escaped string.
	 */
	function quoteAttributeValueForBrowser(value) {
	  return '"' + escapeTextContentForBrowser(value) + '"';
	}

	module.exports = quoteAttributeValueForBrowser;

/***/ },
/* 413 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var ReactMount = __webpack_require__(171);

	module.exports = ReactMount.renderSubtreeIntoContainer;

/***/ },
/* 414 */
96,
/* 415 */
[439, 41],
/* 416 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var PooledClass = __webpack_require__(415);
	var ReactElement = __webpack_require__(40);

	var emptyFunction = __webpack_require__(18);
	var traverseAllChildren = __webpack_require__(426);

	var twoArgumentPooler = PooledClass.twoArgumentPooler;
	var fourArgumentPooler = PooledClass.fourArgumentPooler;

	var userProvidedKeyEscapeRegex = /\/+/g;
	function escapeUserProvidedKey(text) {
	  return ('' + text).replace(userProvidedKeyEscapeRegex, '$&/');
	}

	/**
	 * PooledClass representing the bookkeeping associated with performing a child
	 * traversal. Allows avoiding binding callbacks.
	 *
	 * @constructor ForEachBookKeeping
	 * @param {!function} forEachFunction Function to perform traversal with.
	 * @param {?*} forEachContext Context to perform context with.
	 */
	function ForEachBookKeeping(forEachFunction, forEachContext) {
	  this.func = forEachFunction;
	  this.context = forEachContext;
	  this.count = 0;
	}
	ForEachBookKeeping.prototype.destructor = function () {
	  this.func = null;
	  this.context = null;
	  this.count = 0;
	};
	PooledClass.addPoolingTo(ForEachBookKeeping, twoArgumentPooler);

	function forEachSingleChild(bookKeeping, child, name) {
	  var func = bookKeeping.func,
	      context = bookKeeping.context;

	  func.call(context, child, bookKeeping.count++);
	}

	/**
	 * Iterates through children that are typically specified as `props.children`.
	 *
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.foreach
	 *
	 * The provided forEachFunc(child, index) will be called for each
	 * leaf child.
	 *
	 * @param {?*} children Children tree container.
	 * @param {function(*, int)} forEachFunc
	 * @param {*} forEachContext Context for forEachContext.
	 */
	function forEachChildren(children, forEachFunc, forEachContext) {
	  if (children == null) {
	    return children;
	  }
	  var traverseContext = ForEachBookKeeping.getPooled(forEachFunc, forEachContext);
	  traverseAllChildren(children, forEachSingleChild, traverseContext);
	  ForEachBookKeeping.release(traverseContext);
	}

	/**
	 * PooledClass representing the bookkeeping associated with performing a child
	 * mapping. Allows avoiding binding callbacks.
	 *
	 * @constructor MapBookKeeping
	 * @param {!*} mapResult Object containing the ordered map of results.
	 * @param {!function} mapFunction Function to perform mapping with.
	 * @param {?*} mapContext Context to perform mapping with.
	 */
	function MapBookKeeping(mapResult, keyPrefix, mapFunction, mapContext) {
	  this.result = mapResult;
	  this.keyPrefix = keyPrefix;
	  this.func = mapFunction;
	  this.context = mapContext;
	  this.count = 0;
	}
	MapBookKeeping.prototype.destructor = function () {
	  this.result = null;
	  this.keyPrefix = null;
	  this.func = null;
	  this.context = null;
	  this.count = 0;
	};
	PooledClass.addPoolingTo(MapBookKeeping, fourArgumentPooler);

	function mapSingleChildIntoContext(bookKeeping, child, childKey) {
	  var result = bookKeeping.result,
	      keyPrefix = bookKeeping.keyPrefix,
	      func = bookKeeping.func,
	      context = bookKeeping.context;


	  var mappedChild = func.call(context, child, bookKeeping.count++);
	  if (Array.isArray(mappedChild)) {
	    mapIntoWithKeyPrefixInternal(mappedChild, result, childKey, emptyFunction.thatReturnsArgument);
	  } else if (mappedChild != null) {
	    if (ReactElement.isValidElement(mappedChild)) {
	      mappedChild = ReactElement.cloneAndReplaceKey(mappedChild,
	      // Keep both the (mapped) and old keys if they differ, just as
	      // traverseAllChildren used to do for objects as children
	      keyPrefix + (mappedChild.key && (!child || child.key !== mappedChild.key) ? escapeUserProvidedKey(mappedChild.key) + '/' : '') + childKey);
	    }
	    result.push(mappedChild);
	  }
	}

	function mapIntoWithKeyPrefixInternal(children, array, prefix, func, context) {
	  var escapedPrefix = '';
	  if (prefix != null) {
	    escapedPrefix = escapeUserProvidedKey(prefix) + '/';
	  }
	  var traverseContext = MapBookKeeping.getPooled(array, escapedPrefix, func, context);
	  traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);
	  MapBookKeeping.release(traverseContext);
	}

	/**
	 * Maps children that are typically specified as `props.children`.
	 *
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.map
	 *
	 * The provided mapFunction(child, key, index) will be called for each
	 * leaf child.
	 *
	 * @param {?*} children Children tree container.
	 * @param {function(*, int)} func The map function.
	 * @param {*} context Context for mapFunction.
	 * @return {object} Object containing the ordered map of results.
	 */
	function mapChildren(children, func, context) {
	  if (children == null) {
	    return children;
	  }
	  var result = [];
	  mapIntoWithKeyPrefixInternal(children, result, null, func, context);
	  return result;
	}

	function forEachSingleChildDummy(traverseContext, child, name) {
	  return null;
	}

	/**
	 * Count the number of children that are typically specified as
	 * `props.children`.
	 *
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.count
	 *
	 * @param {?*} children Children tree container.
	 * @return {number} The number of children.
	 */
	function countChildren(children, context) {
	  return traverseAllChildren(children, forEachSingleChildDummy, null);
	}

	/**
	 * Flatten a children object (typically specified as `props.children`) and
	 * return an array with appropriately re-keyed children.
	 *
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.toarray
	 */
	function toArray(children) {
	  var result = [];
	  mapIntoWithKeyPrefixInternal(children, result, null, emptyFunction.thatReturnsArgument);
	  return result;
	}

	var ReactChildren = {
	  forEach: forEachChildren,
	  map: mapChildren,
	  mapIntoWithKeyPrefixInternal: mapIntoWithKeyPrefixInternal,
	  count: countChildren,
	  toArray: toArray
	};

	module.exports = ReactChildren;

/***/ },
/* 417 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(41),
	    _assign = __webpack_require__(7);

	var ReactComponent = __webpack_require__(108);
	var ReactElement = __webpack_require__(40);
	var ReactPropTypeLocationNames = __webpack_require__(419);
	var ReactNoopUpdateQueue = __webpack_require__(109);

	var emptyObject = __webpack_require__(46);
	var invariant = __webpack_require__(3);
	var warning = __webpack_require__(4);

	var MIXINS_KEY = 'mixins';

	// Helper function to allow the creation of anonymous functions which do not
	// have .name set to the name of the variable being assigned to.
	function identity(fn) {
	  return fn;
	}

	/**
	 * Policies that describe methods in `ReactClassInterface`.
	 */


	var injectedMixins = [];

	/**
	 * Composite components are higher-level components that compose other composite
	 * or host components.
	 *
	 * To create a new type of `ReactClass`, pass a specification of
	 * your new class to `React.createClass`. The only requirement of your class
	 * specification is that you implement a `render` method.
	 *
	 *   var MyComponent = React.createClass({
	 *     render: function() {
	 *       return <div>Hello World</div>;
	 *     }
	 *   });
	 *
	 * The class specification supports a specific protocol of methods that have
	 * special meaning (e.g. `render`). See `ReactClassInterface` for
	 * more the comprehensive protocol. Any other properties and methods in the
	 * class specification will be available on the prototype.
	 *
	 * @interface ReactClassInterface
	 * @internal
	 */
	var ReactClassInterface = {

	  /**
	   * An array of Mixin objects to include when defining your component.
	   *
	   * @type {array}
	   * @optional
	   */
	  mixins: 'DEFINE_MANY',

	  /**
	   * An object containing properties and methods that should be defined on
	   * the component's constructor instead of its prototype (static methods).
	   *
	   * @type {object}
	   * @optional
	   */
	  statics: 'DEFINE_MANY',

	  /**
	   * Definition of prop types for this component.
	   *
	   * @type {object}
	   * @optional
	   */
	  propTypes: 'DEFINE_MANY',

	  /**
	   * Definition of context types for this component.
	   *
	   * @type {object}
	   * @optional
	   */
	  contextTypes: 'DEFINE_MANY',

	  /**
	   * Definition of context types this component sets for its children.
	   *
	   * @type {object}
	   * @optional
	   */
	  childContextTypes: 'DEFINE_MANY',

	  // ==== Definition methods ====

	  /**
	   * Invoked when the component is mounted. Values in the mapping will be set on
	   * `this.props` if that prop is not specified (i.e. using an `in` check).
	   *
	   * This method is invoked before `getInitialState` and therefore cannot rely
	   * on `this.state` or use `this.setState`.
	   *
	   * @return {object}
	   * @optional
	   */
	  getDefaultProps: 'DEFINE_MANY_MERGED',

	  /**
	   * Invoked once before the component is mounted. The return value will be used
	   * as the initial value of `this.state`.
	   *
	   *   getInitialState: function() {
	   *     return {
	   *       isOn: false,
	   *       fooBaz: new BazFoo()
	   *     }
	   *   }
	   *
	   * @return {object}
	   * @optional
	   */
	  getInitialState: 'DEFINE_MANY_MERGED',

	  /**
	   * @return {object}
	   * @optional
	   */
	  getChildContext: 'DEFINE_MANY_MERGED',

	  /**
	   * Uses props from `this.props` and state from `this.state` to render the
	   * structure of the component.
	   *
	   * No guarantees are made about when or how often this method is invoked, so
	   * it must not have side effects.
	   *
	   *   render: function() {
	   *     var name = this.props.name;
	   *     return <div>Hello, {name}!</div>;
	   *   }
	   *
	   * @return {ReactComponent}
	   * @required
	   */
	  render: 'DEFINE_ONCE',

	  // ==== Delegate methods ====

	  /**
	   * Invoked when the component is initially created and about to be mounted.
	   * This may have side effects, but any external subscriptions or data created
	   * by this method must be cleaned up in `componentWillUnmount`.
	   *
	   * @optional
	   */
	  componentWillMount: 'DEFINE_MANY',

	  /**
	   * Invoked when the component has been mounted and has a DOM representation.
	   * However, there is no guarantee that the DOM node is in the document.
	   *
	   * Use this as an opportunity to operate on the DOM when the component has
	   * been mounted (initialized and rendered) for the first time.
	   *
	   * @param {DOMElement} rootNode DOM element representing the component.
	   * @optional
	   */
	  componentDidMount: 'DEFINE_MANY',

	  /**
	   * Invoked before the component receives new props.
	   *
	   * Use this as an opportunity to react to a prop transition by updating the
	   * state using `this.setState`. Current props are accessed via `this.props`.
	   *
	   *   componentWillReceiveProps: function(nextProps, nextContext) {
	   *     this.setState({
	   *       likesIncreasing: nextProps.likeCount > this.props.likeCount
	   *     });
	   *   }
	   *
	   * NOTE: There is no equivalent `componentWillReceiveState`. An incoming prop
	   * transition may cause a state change, but the opposite is not true. If you
	   * need it, you are probably looking for `componentWillUpdate`.
	   *
	   * @param {object} nextProps
	   * @optional
	   */
	  componentWillReceiveProps: 'DEFINE_MANY',

	  /**
	   * Invoked while deciding if the component should be updated as a result of
	   * receiving new props, state and/or context.
	   *
	   * Use this as an opportunity to `return false` when you're certain that the
	   * transition to the new props/state/context will not require a component
	   * update.
	   *
	   *   shouldComponentUpdate: function(nextProps, nextState, nextContext) {
	   *     return !equal(nextProps, this.props) ||
	   *       !equal(nextState, this.state) ||
	   *       !equal(nextContext, this.context);
	   *   }
	   *
	   * @param {object} nextProps
	   * @param {?object} nextState
	   * @param {?object} nextContext
	   * @return {boolean} True if the component should update.
	   * @optional
	   */
	  shouldComponentUpdate: 'DEFINE_ONCE',

	  /**
	   * Invoked when the component is about to update due to a transition from
	   * `this.props`, `this.state` and `this.context` to `nextProps`, `nextState`
	   * and `nextContext`.
	   *
	   * Use this as an opportunity to perform preparation before an update occurs.
	   *
	   * NOTE: You **cannot** use `this.setState()` in this method.
	   *
	   * @param {object} nextProps
	   * @param {?object} nextState
	   * @param {?object} nextContext
	   * @param {ReactReconcileTransaction} transaction
	   * @optional
	   */
	  componentWillUpdate: 'DEFINE_MANY',

	  /**
	   * Invoked when the component's DOM representation has been updated.
	   *
	   * Use this as an opportunity to operate on the DOM when the component has
	   * been updated.
	   *
	   * @param {object} prevProps
	   * @param {?object} prevState
	   * @param {?object} prevContext
	   * @param {DOMElement} rootNode DOM element representing the component.
	   * @optional
	   */
	  componentDidUpdate: 'DEFINE_MANY',

	  /**
	   * Invoked when the component is about to be removed from its parent and have
	   * its DOM representation destroyed.
	   *
	   * Use this as an opportunity to deallocate any external resources.
	   *
	   * NOTE: There is no `componentDidUnmount` since your component will have been
	   * destroyed by that point.
	   *
	   * @optional
	   */
	  componentWillUnmount: 'DEFINE_MANY',

	  // ==== Advanced methods ====

	  /**
	   * Updates the component's currently mounted DOM representation.
	   *
	   * By default, this implements React's rendering and reconciliation algorithm.
	   * Sophisticated clients may wish to override this.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   * @overridable
	   */
	  updateComponent: 'OVERRIDE_BASE'

	};

	/**
	 * Mapping from class specification keys to special processing functions.
	 *
	 * Although these are declared like instance properties in the specification
	 * when defining classes using `React.createClass`, they are actually static
	 * and are accessible on the constructor instead of the prototype. Despite
	 * being static, they must be defined outside of the "statics" key under
	 * which all other static methods are defined.
	 */
	var RESERVED_SPEC_KEYS = {
	  displayName: function (Constructor, displayName) {
	    Constructor.displayName = displayName;
	  },
	  mixins: function (Constructor, mixins) {
	    if (mixins) {
	      for (var i = 0; i < mixins.length; i++) {
	        mixSpecIntoComponent(Constructor, mixins[i]);
	      }
	    }
	  },
	  childContextTypes: function (Constructor, childContextTypes) {
	    if (false) {
	      validateTypeDef(Constructor, childContextTypes, 'childContext');
	    }
	    Constructor.childContextTypes = _assign({}, Constructor.childContextTypes, childContextTypes);
	  },
	  contextTypes: function (Constructor, contextTypes) {
	    if (false) {
	      validateTypeDef(Constructor, contextTypes, 'context');
	    }
	    Constructor.contextTypes = _assign({}, Constructor.contextTypes, contextTypes);
	  },
	  /**
	   * Special case getDefaultProps which should move into statics but requires
	   * automatic merging.
	   */
	  getDefaultProps: function (Constructor, getDefaultProps) {
	    if (Constructor.getDefaultProps) {
	      Constructor.getDefaultProps = createMergedResultFunction(Constructor.getDefaultProps, getDefaultProps);
	    } else {
	      Constructor.getDefaultProps = getDefaultProps;
	    }
	  },
	  propTypes: function (Constructor, propTypes) {
	    if (false) {
	      validateTypeDef(Constructor, propTypes, 'prop');
	    }
	    Constructor.propTypes = _assign({}, Constructor.propTypes, propTypes);
	  },
	  statics: function (Constructor, statics) {
	    mixStaticSpecIntoComponent(Constructor, statics);
	  },
	  autobind: function () {} };

	function validateTypeDef(Constructor, typeDef, location) {
	  for (var propName in typeDef) {
	    if (typeDef.hasOwnProperty(propName)) {
	      // use a warning instead of an invariant so components
	      // don't show up in prod but only in __DEV__
	       false ? warning(typeof typeDef[propName] === 'function', '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'React.PropTypes.', Constructor.displayName || 'ReactClass', ReactPropTypeLocationNames[location], propName) : void 0;
	    }
	  }
	}

	function validateMethodOverride(isAlreadyDefined, name) {
	  var specPolicy = ReactClassInterface.hasOwnProperty(name) ? ReactClassInterface[name] : null;

	  // Disallow overriding of base class methods unless explicitly allowed.
	  if (ReactClassMixin.hasOwnProperty(name)) {
	    !(specPolicy === 'OVERRIDE_BASE') ?  false ? invariant(false, 'ReactClassInterface: You are attempting to override `%s` from your class specification. Ensure that your method names do not overlap with React methods.', name) : _prodInvariant('73', name) : void 0;
	  }

	  // Disallow defining methods more than once unless explicitly allowed.
	  if (isAlreadyDefined) {
	    !(specPolicy === 'DEFINE_MANY' || specPolicy === 'DEFINE_MANY_MERGED') ?  false ? invariant(false, 'ReactClassInterface: You are attempting to define `%s` on your component more than once. This conflict may be due to a mixin.', name) : _prodInvariant('74', name) : void 0;
	  }
	}

	/**
	 * Mixin helper which handles policy validation and reserved
	 * specification keys when building React classes.
	 */
	function mixSpecIntoComponent(Constructor, spec) {
	  if (!spec) {
	    if (false) {
	      var typeofSpec = typeof spec;
	      var isMixinValid = typeofSpec === 'object' && spec !== null;

	      process.env.NODE_ENV !== 'production' ? warning(isMixinValid, '%s: You\'re attempting to include a mixin that is either null ' + 'or not an object. Check the mixins included by the component, ' + 'as well as any mixins they include themselves. ' + 'Expected object but got %s.', Constructor.displayName || 'ReactClass', spec === null ? null : typeofSpec) : void 0;
	    }

	    return;
	  }

	  !(typeof spec !== 'function') ?  false ? invariant(false, 'ReactClass: You\'re attempting to use a component class or function as a mixin. Instead, just use a regular object.') : _prodInvariant('75') : void 0;
	  !!ReactElement.isValidElement(spec) ?  false ? invariant(false, 'ReactClass: You\'re attempting to use a component as a mixin. Instead, just use a regular object.') : _prodInvariant('76') : void 0;

	  var proto = Constructor.prototype;
	  var autoBindPairs = proto.__reactAutoBindPairs;

	  // By handling mixins before any other properties, we ensure the same
	  // chaining order is applied to methods with DEFINE_MANY policy, whether
	  // mixins are listed before or after these methods in the spec.
	  if (spec.hasOwnProperty(MIXINS_KEY)) {
	    RESERVED_SPEC_KEYS.mixins(Constructor, spec.mixins);
	  }

	  for (var name in spec) {
	    if (!spec.hasOwnProperty(name)) {
	      continue;
	    }

	    if (name === MIXINS_KEY) {
	      // We have already handled mixins in a special case above.
	      continue;
	    }

	    var property = spec[name];
	    var isAlreadyDefined = proto.hasOwnProperty(name);
	    validateMethodOverride(isAlreadyDefined, name);

	    if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {
	      RESERVED_SPEC_KEYS[name](Constructor, property);
	    } else {
	      // Setup methods on prototype:
	      // The following member methods should not be automatically bound:
	      // 1. Expected ReactClass methods (in the "interface").
	      // 2. Overridden methods (that were mixed in).
	      var isReactClassMethod = ReactClassInterface.hasOwnProperty(name);
	      var isFunction = typeof property === 'function';
	      var shouldAutoBind = isFunction && !isReactClassMethod && !isAlreadyDefined && spec.autobind !== false;

	      if (shouldAutoBind) {
	        autoBindPairs.push(name, property);
	        proto[name] = property;
	      } else {
	        if (isAlreadyDefined) {
	          var specPolicy = ReactClassInterface[name];

	          // These cases should already be caught by validateMethodOverride.
	          !(isReactClassMethod && (specPolicy === 'DEFINE_MANY_MERGED' || specPolicy === 'DEFINE_MANY')) ?  false ? invariant(false, 'ReactClass: Unexpected spec policy %s for key %s when mixing in component specs.', specPolicy, name) : _prodInvariant('77', specPolicy, name) : void 0;

	          // For methods which are defined more than once, call the existing
	          // methods before calling the new property, merging if appropriate.
	          if (specPolicy === 'DEFINE_MANY_MERGED') {
	            proto[name] = createMergedResultFunction(proto[name], property);
	          } else if (specPolicy === 'DEFINE_MANY') {
	            proto[name] = createChainedFunction(proto[name], property);
	          }
	        } else {
	          proto[name] = property;
	          if (false) {
	            // Add verbose displayName to the function, which helps when looking
	            // at profiling tools.
	            if (typeof property === 'function' && spec.displayName) {
	              proto[name].displayName = spec.displayName + '_' + name;
	            }
	          }
	        }
	      }
	    }
	  }
	}

	function mixStaticSpecIntoComponent(Constructor, statics) {
	  if (!statics) {
	    return;
	  }
	  for (var name in statics) {
	    var property = statics[name];
	    if (!statics.hasOwnProperty(name)) {
	      continue;
	    }

	    var isReserved = name in RESERVED_SPEC_KEYS;
	    !!isReserved ?  false ? invariant(false, 'ReactClass: You are attempting to define a reserved property, `%s`, that shouldn\'t be on the "statics" key. Define it as an instance property instead; it will still be accessible on the constructor.', name) : _prodInvariant('78', name) : void 0;

	    var isInherited = name in Constructor;
	    !!isInherited ?  false ? invariant(false, 'ReactClass: You are attempting to define `%s` on your component more than once. This conflict may be due to a mixin.', name) : _prodInvariant('79', name) : void 0;
	    Constructor[name] = property;
	  }
	}

	/**
	 * Merge two objects, but throw if both contain the same key.
	 *
	 * @param {object} one The first object, which is mutated.
	 * @param {object} two The second object
	 * @return {object} one after it has been mutated to contain everything in two.
	 */
	function mergeIntoWithNoDuplicateKeys(one, two) {
	  !(one && two && typeof one === 'object' && typeof two === 'object') ?  false ? invariant(false, 'mergeIntoWithNoDuplicateKeys(): Cannot merge non-objects.') : _prodInvariant('80') : void 0;

	  for (var key in two) {
	    if (two.hasOwnProperty(key)) {
	      !(one[key] === undefined) ?  false ? invariant(false, 'mergeIntoWithNoDuplicateKeys(): Tried to merge two objects with the same key: `%s`. This conflict may be due to a mixin; in particular, this may be caused by two getInitialState() or getDefaultProps() methods returning objects with clashing keys.', key) : _prodInvariant('81', key) : void 0;
	      one[key] = two[key];
	    }
	  }
	  return one;
	}

	/**
	 * Creates a function that invokes two functions and merges their return values.
	 *
	 * @param {function} one Function to invoke first.
	 * @param {function} two Function to invoke second.
	 * @return {function} Function that invokes the two argument functions.
	 * @private
	 */
	function createMergedResultFunction(one, two) {
	  return function mergedResult() {
	    var a = one.apply(this, arguments);
	    var b = two.apply(this, arguments);
	    if (a == null) {
	      return b;
	    } else if (b == null) {
	      return a;
	    }
	    var c = {};
	    mergeIntoWithNoDuplicateKeys(c, a);
	    mergeIntoWithNoDuplicateKeys(c, b);
	    return c;
	  };
	}

	/**
	 * Creates a function that invokes two functions and ignores their return vales.
	 *
	 * @param {function} one Function to invoke first.
	 * @param {function} two Function to invoke second.
	 * @return {function} Function that invokes the two argument functions.
	 * @private
	 */
	function createChainedFunction(one, two) {
	  return function chainedFunction() {
	    one.apply(this, arguments);
	    two.apply(this, arguments);
	  };
	}

	/**
	 * Binds a method to the component.
	 *
	 * @param {object} component Component whose method is going to be bound.
	 * @param {function} method Method to be bound.
	 * @return {function} The bound method.
	 */
	function bindAutoBindMethod(component, method) {
	  var boundMethod = method.bind(component);
	  if (false) {
	    boundMethod.__reactBoundContext = component;
	    boundMethod.__reactBoundMethod = method;
	    boundMethod.__reactBoundArguments = null;
	    var componentName = component.constructor.displayName;
	    var _bind = boundMethod.bind;
	    boundMethod.bind = function (newThis) {
	      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	        args[_key - 1] = arguments[_key];
	      }

	      // User is trying to bind() an autobound method; we effectively will
	      // ignore the value of "this" that the user is trying to use, so
	      // let's warn.
	      if (newThis !== component && newThis !== null) {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'bind(): React component methods may only be bound to the ' + 'component instance. See %s', componentName) : void 0;
	      } else if (!args.length) {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'bind(): You are binding a component method to the component. ' + 'React does this for you automatically in a high-performance ' + 'way, so you can safely remove this call. See %s', componentName) : void 0;
	        return boundMethod;
	      }
	      var reboundMethod = _bind.apply(boundMethod, arguments);
	      reboundMethod.__reactBoundContext = component;
	      reboundMethod.__reactBoundMethod = method;
	      reboundMethod.__reactBoundArguments = args;
	      return reboundMethod;
	    };
	  }
	  return boundMethod;
	}

	/**
	 * Binds all auto-bound methods in a component.
	 *
	 * @param {object} component Component whose method is going to be bound.
	 */
	function bindAutoBindMethods(component) {
	  var pairs = component.__reactAutoBindPairs;
	  for (var i = 0; i < pairs.length; i += 2) {
	    var autoBindKey = pairs[i];
	    var method = pairs[i + 1];
	    component[autoBindKey] = bindAutoBindMethod(component, method);
	  }
	}

	/**
	 * Add more to the ReactClass base class. These are all legacy features and
	 * therefore not already part of the modern ReactComponent.
	 */
	var ReactClassMixin = {

	  /**
	   * TODO: This will be deprecated because state should always keep a consistent
	   * type signature and the only use case for this, is to avoid that.
	   */
	  replaceState: function (newState, callback) {
	    this.updater.enqueueReplaceState(this, newState);
	    if (callback) {
	      this.updater.enqueueCallback(this, callback, 'replaceState');
	    }
	  },

	  /**
	   * Checks whether or not this composite component is mounted.
	   * @return {boolean} True if mounted, false otherwise.
	   * @protected
	   * @final
	   */
	  isMounted: function () {
	    return this.updater.isMounted(this);
	  }
	};

	var ReactClassComponent = function () {};
	_assign(ReactClassComponent.prototype, ReactComponent.prototype, ReactClassMixin);

	var didWarnDeprecated = false;

	/**
	 * Module for creating composite components.
	 *
	 * @class ReactClass
	 */
	var ReactClass = {

	  /**
	   * Creates a composite component class given a class specification.
	   * See https://facebook.github.io/react/docs/top-level-api.html#react.createclass
	   *
	   * @param {object} spec Class specification (which must define `render`).
	   * @return {function} Component constructor function.
	   * @public
	   */
	  createClass: function (spec) {
	    if (false) {
	      process.env.NODE_ENV !== 'production' ? warning(didWarnDeprecated, '%s: React.createClass is deprecated and will be removed in version 16. ' + 'Use plain JavaScript classes instead. If you\'re not yet ready to ' + 'migrate, create-react-class is available on npm as a ' + 'drop-in replacement.', spec && spec.displayName || 'A Component') : void 0;
	      didWarnDeprecated = true;
	    }

	    // To keep our warnings more understandable, we'll use a little hack here to
	    // ensure that Constructor.name !== 'Constructor'. This makes sure we don't
	    // unnecessarily identify a class without displayName as 'Constructor'.
	    var Constructor = identity(function (props, context, updater) {
	      // This constructor gets overridden by mocks. The argument is used
	      // by mocks to assert on what gets mounted.

	      if (false) {
	        process.env.NODE_ENV !== 'production' ? warning(this instanceof Constructor, 'Something is calling a React component directly. Use a factory or ' + 'JSX instead. See: https://fb.me/react-legacyfactory') : void 0;
	      }

	      // Wire up auto-binding
	      if (this.__reactAutoBindPairs.length) {
	        bindAutoBindMethods(this);
	      }

	      this.props = props;
	      this.context = context;
	      this.refs = emptyObject;
	      this.updater = updater || ReactNoopUpdateQueue;

	      this.state = null;

	      // ReactClasses doesn't have constructors. Instead, they use the
	      // getInitialState and componentWillMount methods for initialization.

	      var initialState = this.getInitialState ? this.getInitialState() : null;
	      if (false) {
	        // We allow auto-mocks to proceed as if they're returning null.
	        if (initialState === undefined && this.getInitialState._isMockFunction) {
	          // This is probably bad practice. Consider warning here and
	          // deprecating this convenience.
	          initialState = null;
	        }
	      }
	      !(typeof initialState === 'object' && !Array.isArray(initialState)) ?  false ? invariant(false, '%s.getInitialState(): must return an object or null', Constructor.displayName || 'ReactCompositeComponent') : _prodInvariant('82', Constructor.displayName || 'ReactCompositeComponent') : void 0;

	      this.state = initialState;
	    });
	    Constructor.prototype = new ReactClassComponent();
	    Constructor.prototype.constructor = Constructor;
	    Constructor.prototype.__reactAutoBindPairs = [];

	    injectedMixins.forEach(mixSpecIntoComponent.bind(null, Constructor));

	    mixSpecIntoComponent(Constructor, spec);

	    // Initialize the defaultProps property after all mixins have been merged.
	    if (Constructor.getDefaultProps) {
	      Constructor.defaultProps = Constructor.getDefaultProps();
	    }

	    if (false) {
	      // This is a tag to indicate that the use of these method names is ok,
	      // since it's used with createClass. If it's not, then it's likely a
	      // mistake so we'll warn you to use the static property, property
	      // initializer or constructor respectively.
	      if (Constructor.getDefaultProps) {
	        Constructor.getDefaultProps.isReactClassApproved = {};
	      }
	      if (Constructor.prototype.getInitialState) {
	        Constructor.prototype.getInitialState.isReactClassApproved = {};
	      }
	    }

	    !Constructor.prototype.render ?  false ? invariant(false, 'createClass(...): Class specification must implement a `render` method.') : _prodInvariant('83') : void 0;

	    if (false) {
	      process.env.NODE_ENV !== 'production' ? warning(!Constructor.prototype.componentShouldUpdate, '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', spec.displayName || 'A component') : void 0;
	      process.env.NODE_ENV !== 'production' ? warning(!Constructor.prototype.componentWillRecieveProps, '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', spec.displayName || 'A component') : void 0;
	    }

	    // Reduce time spent doing lookups by setting these on the prototype.
	    for (var methodName in ReactClassInterface) {
	      if (!Constructor.prototype[methodName]) {
	        Constructor.prototype[methodName] = null;
	      }
	    }

	    return Constructor;
	  },

	  injection: {
	    injectMixin: function (mixin) {
	      injectedMixins.push(mixin);
	    }
	  }

	};

	module.exports = ReactClass;

/***/ },
/* 418 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var ReactElement = __webpack_require__(40);

	/**
	 * Create a factory that creates HTML tag elements.
	 *
	 * @private
	 */
	var createDOMFactory = ReactElement.createFactory;
	if (false) {
	  var ReactElementValidator = require('./ReactElementValidator');
	  createDOMFactory = ReactElementValidator.createFactory;
	}

	/**
	 * Creates a mapping from supported HTML tags to `ReactDOMComponent` classes.
	 * This is also accessible via `React.DOM`.
	 *
	 * @public
	 */
	var ReactDOMFactories = {
	  a: createDOMFactory('a'),
	  abbr: createDOMFactory('abbr'),
	  address: createDOMFactory('address'),
	  area: createDOMFactory('area'),
	  article: createDOMFactory('article'),
	  aside: createDOMFactory('aside'),
	  audio: createDOMFactory('audio'),
	  b: createDOMFactory('b'),
	  base: createDOMFactory('base'),
	  bdi: createDOMFactory('bdi'),
	  bdo: createDOMFactory('bdo'),
	  big: createDOMFactory('big'),
	  blockquote: createDOMFactory('blockquote'),
	  body: createDOMFactory('body'),
	  br: createDOMFactory('br'),
	  button: createDOMFactory('button'),
	  canvas: createDOMFactory('canvas'),
	  caption: createDOMFactory('caption'),
	  cite: createDOMFactory('cite'),
	  code: createDOMFactory('code'),
	  col: createDOMFactory('col'),
	  colgroup: createDOMFactory('colgroup'),
	  data: createDOMFactory('data'),
	  datalist: createDOMFactory('datalist'),
	  dd: createDOMFactory('dd'),
	  del: createDOMFactory('del'),
	  details: createDOMFactory('details'),
	  dfn: createDOMFactory('dfn'),
	  dialog: createDOMFactory('dialog'),
	  div: createDOMFactory('div'),
	  dl: createDOMFactory('dl'),
	  dt: createDOMFactory('dt'),
	  em: createDOMFactory('em'),
	  embed: createDOMFactory('embed'),
	  fieldset: createDOMFactory('fieldset'),
	  figcaption: createDOMFactory('figcaption'),
	  figure: createDOMFactory('figure'),
	  footer: createDOMFactory('footer'),
	  form: createDOMFactory('form'),
	  h1: createDOMFactory('h1'),
	  h2: createDOMFactory('h2'),
	  h3: createDOMFactory('h3'),
	  h4: createDOMFactory('h4'),
	  h5: createDOMFactory('h5'),
	  h6: createDOMFactory('h6'),
	  head: createDOMFactory('head'),
	  header: createDOMFactory('header'),
	  hgroup: createDOMFactory('hgroup'),
	  hr: createDOMFactory('hr'),
	  html: createDOMFactory('html'),
	  i: createDOMFactory('i'),
	  iframe: createDOMFactory('iframe'),
	  img: createDOMFactory('img'),
	  input: createDOMFactory('input'),
	  ins: createDOMFactory('ins'),
	  kbd: createDOMFactory('kbd'),
	  keygen: createDOMFactory('keygen'),
	  label: createDOMFactory('label'),
	  legend: createDOMFactory('legend'),
	  li: createDOMFactory('li'),
	  link: createDOMFactory('link'),
	  main: createDOMFactory('main'),
	  map: createDOMFactory('map'),
	  mark: createDOMFactory('mark'),
	  menu: createDOMFactory('menu'),
	  menuitem: createDOMFactory('menuitem'),
	  meta: createDOMFactory('meta'),
	  meter: createDOMFactory('meter'),
	  nav: createDOMFactory('nav'),
	  noscript: createDOMFactory('noscript'),
	  object: createDOMFactory('object'),
	  ol: createDOMFactory('ol'),
	  optgroup: createDOMFactory('optgroup'),
	  option: createDOMFactory('option'),
	  output: createDOMFactory('output'),
	  p: createDOMFactory('p'),
	  param: createDOMFactory('param'),
	  picture: createDOMFactory('picture'),
	  pre: createDOMFactory('pre'),
	  progress: createDOMFactory('progress'),
	  q: createDOMFactory('q'),
	  rp: createDOMFactory('rp'),
	  rt: createDOMFactory('rt'),
	  ruby: createDOMFactory('ruby'),
	  s: createDOMFactory('s'),
	  samp: createDOMFactory('samp'),
	  script: createDOMFactory('script'),
	  section: createDOMFactory('section'),
	  select: createDOMFactory('select'),
	  small: createDOMFactory('small'),
	  source: createDOMFactory('source'),
	  span: createDOMFactory('span'),
	  strong: createDOMFactory('strong'),
	  style: createDOMFactory('style'),
	  sub: createDOMFactory('sub'),
	  summary: createDOMFactory('summary'),
	  sup: createDOMFactory('sup'),
	  table: createDOMFactory('table'),
	  tbody: createDOMFactory('tbody'),
	  td: createDOMFactory('td'),
	  textarea: createDOMFactory('textarea'),
	  tfoot: createDOMFactory('tfoot'),
	  th: createDOMFactory('th'),
	  thead: createDOMFactory('thead'),
	  time: createDOMFactory('time'),
	  title: createDOMFactory('title'),
	  tr: createDOMFactory('tr'),
	  track: createDOMFactory('track'),
	  u: createDOMFactory('u'),
	  ul: createDOMFactory('ul'),
	  'var': createDOMFactory('var'),
	  video: createDOMFactory('video'),
	  wbr: createDOMFactory('wbr'),

	  // SVG
	  circle: createDOMFactory('circle'),
	  clipPath: createDOMFactory('clipPath'),
	  defs: createDOMFactory('defs'),
	  ellipse: createDOMFactory('ellipse'),
	  g: createDOMFactory('g'),
	  image: createDOMFactory('image'),
	  line: createDOMFactory('line'),
	  linearGradient: createDOMFactory('linearGradient'),
	  mask: createDOMFactory('mask'),
	  path: createDOMFactory('path'),
	  pattern: createDOMFactory('pattern'),
	  polygon: createDOMFactory('polygon'),
	  polyline: createDOMFactory('polyline'),
	  radialGradient: createDOMFactory('radialGradient'),
	  rect: createDOMFactory('rect'),
	  stop: createDOMFactory('stop'),
	  svg: createDOMFactory('svg'),
	  text: createDOMFactory('text'),
	  tspan: createDOMFactory('tspan')
	};

	module.exports = ReactDOMFactories;

/***/ },
/* 419 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var ReactPropTypeLocationNames = {};

	if (false) {
	  ReactPropTypeLocationNames = {
	    prop: 'prop',
	    context: 'context',
	    childContext: 'child context'
	  };
	}

	module.exports = ReactPropTypeLocationNames;

/***/ },
/* 420 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _require = __webpack_require__(40),
	    isValidElement = _require.isValidElement;

	var factory = __webpack_require__(150);

	module.exports = factory(isValidElement);

/***/ },
/* 421 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _assign = __webpack_require__(7);

	var ReactComponent = __webpack_require__(108);
	var ReactNoopUpdateQueue = __webpack_require__(109);

	var emptyObject = __webpack_require__(46);

	/**
	 * Base class helpers for the updating state of a component.
	 */
	function ReactPureComponent(props, context, updater) {
	  // Duplicated from ReactComponent.
	  this.props = props;
	  this.context = context;
	  this.refs = emptyObject;
	  // We initialize the default updater but the real one gets injected by the
	  // renderer.
	  this.updater = updater || ReactNoopUpdateQueue;
	}

	function ComponentDummy() {}
	ComponentDummy.prototype = ReactComponent.prototype;
	ReactPureComponent.prototype = new ComponentDummy();
	ReactPureComponent.prototype.constructor = ReactPureComponent;
	// Avoid an extra prototype jump for these methods.
	_assign(ReactPureComponent.prototype, ReactComponent.prototype);
	ReactPureComponent.prototype.isPureReactComponent = true;

	module.exports = ReactPureComponent;

/***/ },
/* 422 */
390,
/* 423 */
409,
/* 424 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var nextDebugID = 1;

	function getNextDebugID() {
	  return nextDebugID++;
	}

	module.exports = getNextDebugID;

/***/ },
/* 425 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	'use strict';

	var _prodInvariant = __webpack_require__(41);

	var ReactElement = __webpack_require__(40);

	var invariant = __webpack_require__(3);

	/**
	 * Returns the first child in a collection of children and verifies that there
	 * is only one child in the collection.
	 *
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.only
	 *
	 * The current implementation of this function assumes that a single child gets
	 * passed without a wrapper, but the purpose of this helper function is to
	 * abstract away the particular structure of children.
	 *
	 * @param {?object} children Child collection structure.
	 * @return {ReactElement} The first and only `ReactElement` contained in the
	 * structure.
	 */
	function onlyChild(children) {
	  !ReactElement.isValidElement(children) ?  false ? invariant(false, 'React.Children.only expected to receive a single React element child.') : _prodInvariant('143') : void 0;
	  return children;
	}

	module.exports = onlyChild;

/***/ },
/* 426 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(41);

	var ReactCurrentOwner = __webpack_require__(27);
	var REACT_ELEMENT_TYPE = __webpack_require__(183);

	var getIteratorFn = __webpack_require__(423);
	var invariant = __webpack_require__(3);
	var KeyEscapeUtils = __webpack_require__(414);
	var warning = __webpack_require__(4);

	var SEPARATOR = '.';
	var SUBSEPARATOR = ':';

	/**
	 * This is inlined from ReactElement since this file is shared between
	 * isomorphic and renderers. We could extract this to a
	 *
	 */

	/**
	 * TODO: Test that a single child and an array with one item have the same key
	 * pattern.
	 */

	var didWarnAboutMaps = false;

	/**
	 * Generate a key string that identifies a component within a set.
	 *
	 * @param {*} component A component that could contain a manual key.
	 * @param {number} index Index that is used if a manual key is not provided.
	 * @return {string}
	 */
	function getComponentKey(component, index) {
	  // Do some typechecking here since we call this blindly. We want to ensure
	  // that we don't block potential future ES APIs.
	  if (component && typeof component === 'object' && component.key != null) {
	    // Explicit key
	    return KeyEscapeUtils.escape(component.key);
	  }
	  // Implicit key determined by the index in the set
	  return index.toString(36);
	}

	/**
	 * @param {?*} children Children tree container.
	 * @param {!string} nameSoFar Name of the key path so far.
	 * @param {!function} callback Callback to invoke with each child found.
	 * @param {?*} traverseContext Used to pass information throughout the traversal
	 * process.
	 * @return {!number} The number of children in this subtree.
	 */
	function traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {
	  var type = typeof children;

	  if (type === 'undefined' || type === 'boolean') {
	    // All of the above are perceived as null.
	    children = null;
	  }

	  if (children === null || type === 'string' || type === 'number' ||
	  // The following is inlined from ReactElement. This means we can optimize
	  // some checks. React Fiber also inlines this logic for similar purposes.
	  type === 'object' && children.$$typeof === REACT_ELEMENT_TYPE) {
	    callback(traverseContext, children,
	    // If it's the only child, treat the name as if it was wrapped in an array
	    // so that it's consistent if the number of children grows.
	    nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);
	    return 1;
	  }

	  var child;
	  var nextName;
	  var subtreeCount = 0; // Count of children found in the current subtree.
	  var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;

	  if (Array.isArray(children)) {
	    for (var i = 0; i < children.length; i++) {
	      child = children[i];
	      nextName = nextNamePrefix + getComponentKey(child, i);
	      subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	    }
	  } else {
	    var iteratorFn = getIteratorFn(children);
	    if (iteratorFn) {
	      var iterator = iteratorFn.call(children);
	      var step;
	      if (iteratorFn !== children.entries) {
	        var ii = 0;
	        while (!(step = iterator.next()).done) {
	          child = step.value;
	          nextName = nextNamePrefix + getComponentKey(child, ii++);
	          subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	        }
	      } else {
	        if (false) {
	          var mapsAsChildrenAddendum = '';
	          if (ReactCurrentOwner.current) {
	            var mapsAsChildrenOwnerName = ReactCurrentOwner.current.getName();
	            if (mapsAsChildrenOwnerName) {
	              mapsAsChildrenAddendum = ' Check the render method of `' + mapsAsChildrenOwnerName + '`.';
	            }
	          }
	          process.env.NODE_ENV !== 'production' ? warning(didWarnAboutMaps, 'Using Maps as children is not yet fully supported. It is an ' + 'experimental feature that might be removed. Convert it to a ' + 'sequence / iterable of keyed ReactElements instead.%s', mapsAsChildrenAddendum) : void 0;
	          didWarnAboutMaps = true;
	        }
	        // Iterator will provide entry [k,v] tuples rather than values.
	        while (!(step = iterator.next()).done) {
	          var entry = step.value;
	          if (entry) {
	            child = entry[1];
	            nextName = nextNamePrefix + KeyEscapeUtils.escape(entry[0]) + SUBSEPARATOR + getComponentKey(child, 0);
	            subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	          }
	        }
	      }
	    } else if (type === 'object') {
	      var addendum = '';
	      if (false) {
	        addendum = ' If you meant to render a collection of children, use an array ' + 'instead or wrap the object using createFragment(object) from the ' + 'React add-ons.';
	        if (children._isReactElement) {
	          addendum = ' It looks like you\'re using an element created by a different ' + 'version of React. Make sure to use only one copy of React.';
	        }
	        if (ReactCurrentOwner.current) {
	          var name = ReactCurrentOwner.current.getName();
	          if (name) {
	            addendum += ' Check the render method of `' + name + '`.';
	          }
	        }
	      }
	      var childrenString = String(children);
	       true ?  false ? invariant(false, 'Objects are not valid as a React child (found: %s).%s', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : _prodInvariant('31', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : void 0;
	    }
	  }

	  return subtreeCount;
	}

	/**
	 * Traverses children that are typically specified as `props.children`, but
	 * might also be specified through attributes:
	 *
	 * - `traverseAllChildren(this.props.children, ...)`
	 * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
	 *
	 * The `traverseContext` is an optional argument that is passed through the
	 * entire traversal. It can be used to store accumulations or anything else that
	 * the callback might find relevant.
	 *
	 * @param {?*} children Children tree object.
	 * @param {!function} callback To invoke upon traversing each child.
	 * @param {?*} traverseContext Context for traversal.
	 * @return {!number} The number of children in this subtree.
	 */
	function traverseAllChildren(children, callback, traverseContext) {
	  if (children == null) {
	    return 0;
	  }

	  return traverseAllChildrenImpl(children, '', callback, traverseContext);
	}

	module.exports = traverseAllChildren;

/***/ },
/* 427 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _createEagerElementUtil = __webpack_require__(433);

	var _createEagerElementUtil2 = _interopRequireDefault(_createEagerElementUtil);

	var _isReferentiallyTransparentFunctionComponent = __webpack_require__(429);

	var _isReferentiallyTransparentFunctionComponent2 = _interopRequireDefault(_isReferentiallyTransparentFunctionComponent);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var createFactory = function createFactory(type) {
	  var isReferentiallyTransparent = (0, _isReferentiallyTransparentFunctionComponent2.default)(type);
	  return function (p, c) {
	    return (0, _createEagerElementUtil2.default)(false, isReferentiallyTransparent, type, p, c);
	  };
	};

	exports.default = createFactory;

/***/ },
/* 428 */
/***/ function(module, exports) {

	'use strict';

	exports.__esModule = true;
	var isClassComponent = function isClassComponent(Component) {
	  return Boolean(Component && Component.prototype && typeof Component.prototype.isReactComponent === 'object');
	};

	exports.default = isClassComponent;

/***/ },
/* 429 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _isClassComponent = __webpack_require__(428);

	var _isClassComponent2 = _interopRequireDefault(_isClassComponent);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var isReferentiallyTransparentFunctionComponent = function isReferentiallyTransparentFunctionComponent(Component) {
	  return Boolean(typeof Component === 'function' && !(0, _isClassComponent2.default)(Component) && !Component.defaultProps && !Component.contextTypes && !Component.propTypes);
	};

	exports.default = isReferentiallyTransparentFunctionComponent;

/***/ },
/* 430 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _shouldUpdate = __webpack_require__(432);

	var _shouldUpdate2 = _interopRequireDefault(_shouldUpdate);

	var _shallowEqual = __webpack_require__(431);

	var _shallowEqual2 = _interopRequireDefault(_shallowEqual);

	var _createHelper = __webpack_require__(185);

	var _createHelper2 = _interopRequireDefault(_createHelper);

	var _pick = __webpack_require__(434);

	var _pick2 = _interopRequireDefault(_pick);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var onlyUpdateForKeys = function onlyUpdateForKeys(propKeys) {
	  return (0, _shouldUpdate2.default)(function (props, nextProps) {
	    return !(0, _shallowEqual2.default)((0, _pick2.default)(nextProps, propKeys), (0, _pick2.default)(props, propKeys));
	  });
	};

	exports.default = (0, _createHelper2.default)(onlyUpdateForKeys, 'onlyUpdateForKeys');

/***/ },
/* 431 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _shallowEqual = __webpack_require__(60);

	var _shallowEqual2 = _interopRequireDefault(_shallowEqual);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = _shallowEqual2.default;

/***/ },
/* 432 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _react = __webpack_require__(1);

	var _createHelper = __webpack_require__(185);

	var _createHelper2 = _interopRequireDefault(_createHelper);

	var _createEagerFactory = __webpack_require__(427);

	var _createEagerFactory2 = _interopRequireDefault(_createEagerFactory);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var shouldUpdate = function shouldUpdate(test) {
	  return function (BaseComponent) {
	    var factory = (0, _createEagerFactory2.default)(BaseComponent);
	    return function (_Component) {
	      _inherits(_class, _Component);

	      function _class() {
	        _classCallCheck(this, _class);

	        return _possibleConstructorReturn(this, _Component.apply(this, arguments));
	      }

	      _class.prototype.shouldComponentUpdate = function shouldComponentUpdate(nextProps) {
	        return test(this.props, nextProps);
	      };

	      _class.prototype.render = function render() {
	        return factory(this.props);
	      };

	      return _class;
	    }(_react.Component);
	  };
	};

	exports.default = (0, _createHelper2.default)(shouldUpdate, 'shouldUpdate');

/***/ },
/* 433 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var createEagerElementUtil = function createEagerElementUtil(hasKey, isReferentiallyTransparent, type, props, children) {
	  if (!hasKey && isReferentiallyTransparent) {
	    if (children) {
	      return type(_extends({}, props, { children: children }));
	    }
	    return type(props);
	  }

	  var Component = type;

	  if (children) {
	    return _react2.default.createElement(
	      Component,
	      props,
	      children
	    );
	  }

	  return _react2.default.createElement(Component, props);
	};

	exports.default = createEagerElementUtil;

/***/ },
/* 434 */
/***/ function(module, exports) {

	"use strict";

	exports.__esModule = true;
	var pick = function pick(obj, keys) {
	  var result = {};
	  for (var i = 0; i < keys.length; i++) {
	    var key = keys[i];
	    if (obj.hasOwnProperty(key)) {
	      result[key] = obj[key];
	    }
	  }
	  return result;
	};

	exports.default = pick;

/***/ },
/* 435 */
/***/ function(module, exports) {

	
	exports = module.exports = trim;

	function trim(str){
	  return str.replace(/^\s*|\s*$/g, '');
	}

	exports.left = function(str){
	  return str.replace(/^\s*/, '');
	};

	exports.right = function(str){
	  return str.replace(/\s*$/, '');
	};


/***/ },
/* 436 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var window = __webpack_require__(305)
	var isFunction = __webpack_require__(149)
	var parseHeaders = __webpack_require__(306)
	var xtend = __webpack_require__(437)

	module.exports = createXHR
	createXHR.XMLHttpRequest = window.XMLHttpRequest || noop
	createXHR.XDomainRequest = "withCredentials" in (new createXHR.XMLHttpRequest()) ? createXHR.XMLHttpRequest : window.XDomainRequest

	forEachArray(["get", "put", "post", "patch", "head", "delete"], function(method) {
	    createXHR[method === "delete" ? "del" : method] = function(uri, options, callback) {
	        options = initParams(uri, options, callback)
	        options.method = method.toUpperCase()
	        return _createXHR(options)
	    }
	})

	function forEachArray(array, iterator) {
	    for (var i = 0; i < array.length; i++) {
	        iterator(array[i])
	    }
	}

	function isEmpty(obj){
	    for(var i in obj){
	        if(obj.hasOwnProperty(i)) return false
	    }
	    return true
	}

	function initParams(uri, options, callback) {
	    var params = uri

	    if (isFunction(options)) {
	        callback = options
	        if (typeof uri === "string") {
	            params = {uri:uri}
	        }
	    } else {
	        params = xtend(options, {uri: uri})
	    }

	    params.callback = callback
	    return params
	}

	function createXHR(uri, options, callback) {
	    options = initParams(uri, options, callback)
	    return _createXHR(options)
	}

	function _createXHR(options) {
	    if(typeof options.callback === "undefined"){
	        throw new Error("callback argument missing")
	    }

	    var called = false
	    var callback = function cbOnce(err, response, body){
	        if(!called){
	            called = true
	            options.callback(err, response, body)
	        }
	    }

	    function readystatechange() {
	        if (xhr.readyState === 4) {
	            loadFunc()
	        }
	    }

	    function getBody() {
	        // Chrome with requestType=blob throws errors arround when even testing access to responseText
	        var body = undefined

	        if (xhr.response) {
	            body = xhr.response
	        } else {
	            body = xhr.responseText || getXml(xhr)
	        }

	        if (isJson) {
	            try {
	                body = JSON.parse(body)
	            } catch (e) {}
	        }

	        return body
	    }

	    var failureResponse = {
	                body: undefined,
	                headers: {},
	                statusCode: 0,
	                method: method,
	                url: uri,
	                rawRequest: xhr
	            }

	    function errorFunc(evt) {
	        clearTimeout(timeoutTimer)
	        if(!(evt instanceof Error)){
	            evt = new Error("" + (evt || "Unknown XMLHttpRequest Error") )
	        }
	        evt.statusCode = 0
	        return callback(evt, failureResponse)
	    }

	    // will load the data & process the response in a special response object
	    function loadFunc() {
	        if (aborted) return
	        var status
	        clearTimeout(timeoutTimer)
	        if(options.useXDR && xhr.status===undefined) {
	            //IE8 CORS GET successful response doesn't have a status field, but body is fine
	            status = 200
	        } else {
	            status = (xhr.status === 1223 ? 204 : xhr.status)
	        }
	        var response = failureResponse
	        var err = null

	        if (status !== 0){
	            response = {
	                body: getBody(),
	                statusCode: status,
	                method: method,
	                headers: {},
	                url: uri,
	                rawRequest: xhr
	            }
	            if(xhr.getAllResponseHeaders){ //remember xhr can in fact be XDR for CORS in IE
	                response.headers = parseHeaders(xhr.getAllResponseHeaders())
	            }
	        } else {
	            err = new Error("Internal XMLHttpRequest Error")
	        }
	        return callback(err, response, response.body)
	    }

	    var xhr = options.xhr || null

	    if (!xhr) {
	        if (options.cors || options.useXDR) {
	            xhr = new createXHR.XDomainRequest()
	        }else{
	            xhr = new createXHR.XMLHttpRequest()
	        }
	    }

	    var key
	    var aborted
	    var uri = xhr.url = options.uri || options.url
	    var method = xhr.method = options.method || "GET"
	    var body = options.body || options.data || null
	    var headers = xhr.headers = options.headers || {}
	    var sync = !!options.sync
	    var isJson = false
	    var timeoutTimer

	    if ("json" in options) {
	        isJson = true
	        headers["accept"] || headers["Accept"] || (headers["Accept"] = "application/json") //Don't override existing accept header declared by user
	        if (method !== "GET" && method !== "HEAD") {
	            headers["content-type"] || headers["Content-Type"] || (headers["Content-Type"] = "application/json") //Don't override existing accept header declared by user
	            body = JSON.stringify(options.json)
	        }
	    }

	    xhr.onreadystatechange = readystatechange
	    xhr.onload = loadFunc
	    xhr.onerror = errorFunc
	    // IE9 must have onprogress be set to a unique function.
	    xhr.onprogress = function () {
	        // IE must die
	    }
	    xhr.ontimeout = errorFunc
	    xhr.open(method, uri, !sync, options.username, options.password)
	    //has to be after open
	    if(!sync) {
	        xhr.withCredentials = !!options.withCredentials
	    }
	    // Cannot set timeout with sync request
	    // not setting timeout on the xhr object, because of old webkits etc. not handling that correctly
	    // both npm's request and jquery 1.x use this kind of timeout, so this is being consistent
	    if (!sync && options.timeout > 0 ) {
	        timeoutTimer = setTimeout(function(){
	            aborted=true//IE9 may still call readystatechange
	            xhr.abort("timeout")
	            var e = new Error("XMLHttpRequest timeout")
	            e.code = "ETIMEDOUT"
	            errorFunc(e)
	        }, options.timeout )
	    }

	    if (xhr.setRequestHeader) {
	        for(key in headers){
	            if(headers.hasOwnProperty(key)){
	                xhr.setRequestHeader(key, headers[key])
	            }
	        }
	    } else if (options.headers && !isEmpty(options.headers)) {
	        throw new Error("Headers cannot be set on an XDomainRequest object")
	    }

	    if ("responseType" in options) {
	        xhr.responseType = options.responseType
	    }

	    if ("beforeSend" in options &&
	        typeof options.beforeSend === "function"
	    ) {
	        options.beforeSend(xhr)
	    }

	    xhr.send(body)

	    return xhr


	}

	function getXml(xhr) {
	    if (xhr.responseType === "document") {
	        return xhr.responseXML
	    }
	    var firefoxBugTakenEffect = xhr.status === 204 && xhr.responseXML && xhr.responseXML.documentElement.nodeName === "parsererror"
	    if (xhr.responseType === "" && !firefoxBugTakenEffect) {
	        return xhr.responseXML
	    }

	    return null
	}

	function noop() {}


/***/ },
/* 437 */
/***/ function(module, exports) {

	module.exports = extend

	var hasOwnProperty = Object.prototype.hasOwnProperty;

	function extend() {
	    var target = {}

	    for (var i = 0; i < arguments.length; i++) {
	        var source = arguments[i]

	        for (var key in source) {
	            if (hasOwnProperty.call(source, key)) {
	                target[key] = source[key]
	            }
	        }
	    }

	    return target
	}


/***/ },
/* 438 */,
/* 439 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(__webpack_module_template_argument_0__);

	var invariant = __webpack_require__(3);

	/**
	 * Static poolers. Several custom versions for each potential number of
	 * arguments. A completely generic pooler is easy to implement, but would
	 * require accessing the `arguments` object. In each of these, `this` refers to
	 * the Class itself, not an instance. If any others are needed, simply add them
	 * here, or in their own files.
	 */
	var oneArgumentPooler = function (copyFieldsFrom) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, copyFieldsFrom);
	    return instance;
	  } else {
	    return new Klass(copyFieldsFrom);
	  }
	};

	var twoArgumentPooler = function (a1, a2) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2);
	    return instance;
	  } else {
	    return new Klass(a1, a2);
	  }
	};

	var threeArgumentPooler = function (a1, a2, a3) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2, a3);
	    return instance;
	  } else {
	    return new Klass(a1, a2, a3);
	  }
	};

	var fourArgumentPooler = function (a1, a2, a3, a4) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2, a3, a4);
	    return instance;
	  } else {
	    return new Klass(a1, a2, a3, a4);
	  }
	};

	var standardReleaser = function (instance) {
	  var Klass = this;
	  !(instance instanceof Klass) ?  false ? invariant(false, 'Trying to release an instance into a pool of a different type.') : _prodInvariant('25') : void 0;
	  instance.destructor();
	  if (Klass.instancePool.length < Klass.poolSize) {
	    Klass.instancePool.push(instance);
	  }
	};

	var DEFAULT_POOL_SIZE = 10;
	var DEFAULT_POOLER = oneArgumentPooler;

	/**
	 * Augments `CopyConstructor` to be a poolable class, augmenting only the class
	 * itself (statically) not adding any prototypical fields. Any CopyConstructor
	 * you give this may have a `poolSize` property, and will look for a
	 * prototypical `destructor` on instances.
	 *
	 * @param {Function} CopyConstructor Constructor that can be used to reset.
	 * @param {Function} pooler Customizable pooler.
	 */
	var addPoolingTo = function (CopyConstructor, pooler) {
	  // Casting as any so that flow ignores the actual implementation and trusts
	  // it to match the type we declared
	  var NewKlass = CopyConstructor;
	  NewKlass.instancePool = [];
	  NewKlass.getPooled = pooler || DEFAULT_POOLER;
	  if (!NewKlass.poolSize) {
	    NewKlass.poolSize = DEFAULT_POOL_SIZE;
	  }
	  NewKlass.release = standardReleaser;
	  return NewKlass;
	};

	var PooledClass = {
	  addPoolingTo: addPoolingTo,
	  oneArgumentPooler: oneArgumentPooler,
	  twoArgumentPooler: twoArgumentPooler,
	  threeArgumentPooler: threeArgumentPooler,
	  fourArgumentPooler: fourArgumentPooler
	};

	module.exports = PooledClass;

/***/ }
/******/ ])))
});
;